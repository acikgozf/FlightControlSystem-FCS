
FCS_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036c8  0801f118  0801f118  0002f118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080227e0  080227e0  0004036c  2**0
                  CONTENTS
  4 .ARM          00000008  080227e0  080227e0  000327e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080227e8  080227e8  0004036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080227e8  080227e8  000327e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080227ec  080227ec  000327ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  080227f0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004036c  2**0
                  CONTENTS
 10 .bss          000086ac  20000370  20000370  00040370  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20008a1c  20008a1c  00040370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004ad6d  00000000  00000000  0004039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008a5c  00000000  00000000  0008b109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002540  00000000  00000000  00093b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023b8  00000000  00000000  000960a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034dc8  00000000  00000000  00098460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c3fd  00000000  00000000  000cd228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc83c  00000000  00000000  00109625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00205e61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b704  00000000  00000000  00205eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000370 	.word	0x20000370
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f0fc 	.word	0x0801f0fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000374 	.word	0x20000374
 80001ec:	0801f0fc 	.word	0x0801f0fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f001 f830 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f8c8 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f000 fbc4 	bl	80017a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800101c:	f000 f92e 	bl	800127c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001020:	f015 facc 	bl	80165bc <MX_USB_DEVICE_Init>
  MX_LWIP_Init();
 8001024:	f009 fe30 	bl	800ac88 <MX_LWIP_Init>
  MX_TIM1_Init();
 8001028:	f000 f99e 	bl	8001368 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800102c:	f000 fb66 	bl	80016fc <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8001030:	f000 f964 	bl	80012fc <MX_SPI3_Init>
  MX_USART6_UART_Init();
 8001034:	f000 fb8c 	bl	8001750 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8001038:	f000 fa5c 	bl	80014f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800103c:	f000 fae8 	bl	8001610 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4849      	ldr	r0, [pc, #292]	; (8001168 <main+0x15c>)
 8001044:	f005 fca2 	bl	800698c <HAL_TIM_PWM_Start>


  /*---SENSOR INITIALIZATION---*/
  mpu6050_init();
 8001048:	f008 fc9e 	bl	8009988 <mpu6050_init>
	//udpClient_send();

	//SEt control loop frequency


	Now  = HAL_GetTick(); // Milisaniye cinsinden zamanı verir. 1 saniye = 1000ms.
 800104c:	f001 f878 	bl	8002140 <HAL_GetTick>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b45      	ldr	r3, [pc, #276]	; (800116c <main+0x160>)
 8001056:	601a      	str	r2, [r3, #0]
	deltat = (float)(Now-lastUpdate)/1000;
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <main+0x160>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b44      	ldr	r3, [pc, #272]	; (8001170 <main+0x164>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001174 <main+0x168>
 800106e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <main+0x16c>)
 8001074:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8001078:	4b3c      	ldr	r3, [pc, #240]	; (800116c <main+0x160>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <main+0x164>)
 800107e:	6013      	str	r3, [r2, #0]

    sum += deltat;
 8001080:	4b3e      	ldr	r3, [pc, #248]	; (800117c <main+0x170>)
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <main+0x16c>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001090:	4b3a      	ldr	r3, [pc, #232]	; (800117c <main+0x170>)
 8001092:	edc3 7a00 	vstr	s15, [r3]
    sumCount++;
 8001096:	4b3a      	ldr	r3, [pc, #232]	; (8001180 <main+0x174>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	3301      	adds	r3, #1
 800109c:	4a38      	ldr	r2, [pc, #224]	; (8001180 <main+0x174>)
 800109e:	6013      	str	r3, [r2, #0]

    if(lastUpdate - firstUpdate > 10000000.0f) {
 80010a0:	4b33      	ldr	r3, [pc, #204]	; (8001170 <main+0x164>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b37      	ldr	r3, [pc, #220]	; (8001184 <main+0x178>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001188 <main+0x17c>
 80010b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	dd05      	ble.n	80010cc <main+0xc0>
     beta = 0.04;  // decrease filter gain after stabilized
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <main+0x180>)
 80010c2:	4a33      	ldr	r2, [pc, #204]	; (8001190 <main+0x184>)
 80010c4:	601a      	str	r2, [r3, #0]
     zeta = 0.015; // increasey bias drift gain after stabilized
 80010c6:	4b33      	ldr	r3, [pc, #204]	; (8001194 <main+0x188>)
 80010c8:	4a33      	ldr	r2, [pc, #204]	; (8001198 <main+0x18c>)
 80010ca:	601a      	str	r2, [r3, #0]
	//ring_buzzer();
	//Log data onto SD card
	//log_data();
	//runRadio();

    get_Imu(&imu);
 80010cc:	4833      	ldr	r0, [pc, #204]	; (800119c <main+0x190>)
 80010ce:	f008 fe17 	bl	8009d00 <get_Imu>
    MadgwickQuaternionUpdate(imu.ax, imu.ay,imu.az, imu.gx*PI/180.0f, imu.gy*PI/180.0f, imu.gz*PI/180.0f, deltat,zeta,beta);
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <main+0x190>)
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	4b30      	ldr	r3, [pc, #192]	; (800119c <main+0x190>)
 80010da:	edd3 6a01 	vldr	s13, [r3, #4]
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <main+0x190>)
 80010e0:	ed93 6a02 	vldr	s12, [r3, #8]
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <main+0x190>)
 80010e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ea:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80011a0 <main+0x194>
 80010ee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80010f2:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 80011a4 <main+0x198>
 80010f6:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <main+0x190>)
 80010fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001100:	ed9f 5a27 	vldr	s10, [pc, #156]	; 80011a0 <main+0x194>
 8001104:	ee67 7a85 	vmul.f32	s15, s15, s10
 8001108:	eddf 4a26 	vldr	s9, [pc, #152]	; 80011a4 <main+0x198>
 800110c:	ee87 5aa4 	vdiv.f32	s10, s15, s9
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <main+0x190>)
 8001112:	edd3 7a05 	vldr	s15, [r3, #20]
 8001116:	eddf 4a22 	vldr	s9, [pc, #136]	; 80011a0 <main+0x194>
 800111a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800111e:	ed9f 4a21 	vldr	s8, [pc, #132]	; 80011a4 <main+0x198>
 8001122:	eec7 4a84 	vdiv.f32	s9, s15, s8
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <main+0x16c>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <main+0x188>)
 800112e:	edd3 3a00 	vldr	s7, [r3]
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <main+0x180>)
 8001134:	ed93 4a00 	vldr	s8, [r3]
 8001138:	eeb0 3a67 	vmov.f32	s6, s15
 800113c:	eef0 2a64 	vmov.f32	s5, s9
 8001140:	eeb0 2a45 	vmov.f32	s4, s10
 8001144:	eef0 1a65 	vmov.f32	s3, s11
 8001148:	eeb0 1a46 	vmov.f32	s2, s12
 800114c:	eef0 0a66 	vmov.f32	s1, s13
 8001150:	eeb0 0a47 	vmov.f32	s0, s14
 8001154:	f009 f8d6 	bl	800a304 <MadgwickQuaternionUpdate>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    sum = 0;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <main+0x170>)
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
    sumCount = 0;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <main+0x174>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
	Now  = HAL_GetTick(); // Milisaniye cinsinden zamanı verir. 1 saniye = 1000ms.
 8001166:	e771      	b.n	800104c <main+0x40>
 8001168:	2000092c 	.word	0x2000092c
 800116c:	200003c0 	.word	0x200003c0
 8001170:	200003b8 	.word	0x200003b8
 8001174:	447a0000 	.word	0x447a0000
 8001178:	200003b4 	.word	0x200003b4
 800117c:	2000038c 	.word	0x2000038c
 8001180:	20000390 	.word	0x20000390
 8001184:	200003bc 	.word	0x200003bc
 8001188:	4b189680 	.word	0x4b189680
 800118c:	20000000 	.word	0x20000000
 8001190:	3d23d70a 	.word	0x3d23d70a
 8001194:	20000004 	.word	0x20000004
 8001198:	3c75c28f 	.word	0x3c75c28f
 800119c:	20000394 	.word	0x20000394
 80011a0:	40490fdb 	.word	0x40490fdb
 80011a4:	43340000 	.word	0x43340000

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	; 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 0320 	add.w	r3, r7, #32
 80011b2:	2230      	movs	r2, #48	; 0x30
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f015 ff74 	bl	80170a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <SystemClock_Config+0xcc>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	4a27      	ldr	r2, [pc, #156]	; (8001274 <SystemClock_Config+0xcc>)
 80011d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011da:	6413      	str	r3, [r2, #64]	; 0x40
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <SystemClock_Config+0xcc>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <SystemClock_Config+0xd0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a21      	ldr	r2, [pc, #132]	; (8001278 <SystemClock_Config+0xd0>)
 80011f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <SystemClock_Config+0xd0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001212:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001218:	2304      	movs	r3, #4
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800121c:	23a8      	movs	r3, #168	; 0xa8
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001224:	2307      	movs	r3, #7
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	4618      	mov	r0, r3
 800122e:	f004 fe07 	bl	8005e40 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001238:	f000 fb6a 	bl	8001910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001248:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2105      	movs	r1, #5
 800125a:	4618      	mov	r0, r3
 800125c:	f005 f868 	bl	8006330 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001266:	f000 fb53 	bl	8001910 <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3750      	adds	r7, #80	; 0x50
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	; (80012f4 <MX_I2C2_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <MX_I2C2_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_I2C2_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_I2C2_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_I2C2_Init+0x74>)
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012ba:	f002 fc03 	bl	8003ac4 <HAL_I2C_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012c4:	f000 fb24 	bl	8001910 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4809      	ldr	r0, [pc, #36]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012cc:	f003 fbb9 	bl	8004a42 <HAL_I2CEx_ConfigAnalogFilter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80012d6:	f000 fb1b 	bl	8001910 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012da:	2100      	movs	r1, #0
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_I2C2_Init+0x74>)
 80012de:	f003 fbec 	bl	8004aba <HAL_I2CEx_ConfigDigitalFilter>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80012e8:	f000 fb12 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000800 	.word	0x20000800
 80012f4:	40005800 	.word	0x40005800
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_SPI3_Init+0x64>)
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <MX_SPI3_Init+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_SPI3_Init+0x64>)
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_SPI3_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_SPI3_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_SPI3_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_SPI3_Init+0x64>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_SPI3_Init+0x64>)
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_SPI3_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_SPI3_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_SPI3_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_SPI3_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_SPI3_Init+0x64>)
 8001348:	220a      	movs	r2, #10
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_SPI3_Init+0x64>)
 800134e:	f005 f9eb 	bl	8006728 <HAL_SPI_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001358:	f000 fada 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200008d4 	.word	0x200008d4
 8001364:	40003c00 	.word	0x40003c00

08001368 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f015 fe7f 	bl	80170a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a6:	4b51      	ldr	r3, [pc, #324]	; (80014ec <MX_TIM1_Init+0x184>)
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <MX_TIM1_Init+0x188>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1439;
 80013ac:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <MX_TIM1_Init+0x184>)
 80013ae:	f240 529f 	movw	r2, #1439	; 0x59f
 80013b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <MX_TIM1_Init+0x184>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <MX_TIM1_Init+0x184>)
 80013bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <MX_TIM1_Init+0x184>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c8:	4b48      	ldr	r3, [pc, #288]	; (80014ec <MX_TIM1_Init+0x184>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <MX_TIM1_Init+0x184>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d4:	4845      	ldr	r0, [pc, #276]	; (80014ec <MX_TIM1_Init+0x184>)
 80013d6:	f005 fa30 	bl	800683a <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 fa96 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ee:	4619      	mov	r1, r3
 80013f0:	483e      	ldr	r0, [pc, #248]	; (80014ec <MX_TIM1_Init+0x184>)
 80013f2:	f005 fc55 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013fc:	f000 fa88 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001400:	483a      	ldr	r0, [pc, #232]	; (80014ec <MX_TIM1_Init+0x184>)
 8001402:	f005 fa69 	bl	80068d8 <HAL_TIM_PWM_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800140c:	f000 fa80 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001418:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800141c:	4619      	mov	r1, r3
 800141e:	4833      	ldr	r0, [pc, #204]	; (80014ec <MX_TIM1_Init+0x184>)
 8001420:	f006 f816 	bl	8007450 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800142a:	f000 fa71 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	; 0x60
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	4826      	ldr	r0, [pc, #152]	; (80014ec <MX_TIM1_Init+0x184>)
 8001454:	f005 fb62 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800145e:	f000 fa57 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	2204      	movs	r2, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <MX_TIM1_Init+0x184>)
 800146c:	f005 fb56 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8001476:	f000 fa4b 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	2208      	movs	r2, #8
 8001480:	4619      	mov	r1, r3
 8001482:	481a      	ldr	r0, [pc, #104]	; (80014ec <MX_TIM1_Init+0x184>)
 8001484:	f005 fb4a 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800148e:	f000 fa3f 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	220c      	movs	r2, #12
 8001498:	4619      	mov	r1, r3
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <MX_TIM1_Init+0x184>)
 800149c:	f005 fb3e 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014a6:	f000 fa33 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM1_Init+0x184>)
 80014ce:	f006 f83b 	bl	8007548 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80014d8:	f000 fa1a 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM1_Init+0x184>)
 80014de:	f000 fb21 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 80014e2:	bf00      	nop
 80014e4:	3758      	adds	r7, #88	; 0x58
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000092c 	.word	0x2000092c
 80014f0:	40010000 	.word	0x40010000

080014f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08e      	sub	sp, #56	; 0x38
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001524:	4b39      	ldr	r3, [pc, #228]	; (800160c <MX_TIM2_Init+0x118>)
 8001526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800152c:	4b37      	ldr	r3, [pc, #220]	; (800160c <MX_TIM2_Init+0x118>)
 800152e:	2201      	movs	r2, #1
 8001530:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <MX_TIM2_Init+0x118>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42000-1;
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <MX_TIM2_Init+0x118>)
 800153a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800153e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <MX_TIM2_Init+0x118>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <MX_TIM2_Init+0x118>)
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154c:	482f      	ldr	r0, [pc, #188]	; (800160c <MX_TIM2_Init+0x118>)
 800154e:	f005 f974 	bl	800683a <HAL_TIM_Base_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001558:	f000 f9da 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001566:	4619      	mov	r1, r3
 8001568:	4828      	ldr	r0, [pc, #160]	; (800160c <MX_TIM2_Init+0x118>)
 800156a:	f005 fb99 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001574:	f000 f9cc 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001578:	4824      	ldr	r0, [pc, #144]	; (800160c <MX_TIM2_Init+0x118>)
 800157a:	f005 f9ad 	bl	80068d8 <HAL_TIM_PWM_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001584:	f000 f9c4 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001590:	f107 0320 	add.w	r3, r7, #32
 8001594:	4619      	mov	r1, r3
 8001596:	481d      	ldr	r0, [pc, #116]	; (800160c <MX_TIM2_Init+0x118>)
 8001598:	f005 ff5a 	bl	8007450 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80015a2:	f000 f9b5 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015b2:	2304      	movs	r3, #4
 80015b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <MX_TIM2_Init+0x118>)
 80015be:	f005 faad 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015c8:	f000 f9a2 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2204      	movs	r2, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	480e      	ldr	r0, [pc, #56]	; (800160c <MX_TIM2_Init+0x118>)
 80015d4:	f005 faa2 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80015de:	f000 f997 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2208      	movs	r2, #8
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM2_Init+0x118>)
 80015ee:	f005 fa95 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80015f8:	f000 f98a 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM2_Init+0x118>)
 80015fe:	f000 fa91 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 8001602:	bf00      	nop
 8001604:	3738      	adds	r7, #56	; 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200009b8 	.word	0x200009b8

08001610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001642:	4a2d      	ldr	r2, [pc, #180]	; (80016f8 <MX_TIM3_Init+0xe8>)
 8001644:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800164c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 21;
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001656:	2215      	movs	r2, #21
 8001658:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <MX_TIM3_Init+0xe4>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001666:	4823      	ldr	r0, [pc, #140]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001668:	f005 f8e7 	bl	800683a <HAL_TIM_Base_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001672:	f000 f94d 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800167c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001680:	4619      	mov	r1, r3
 8001682:	481c      	ldr	r0, [pc, #112]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001684:	f005 fb0c 	bl	8006ca0 <HAL_TIM_ConfigClockSource>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800168e:	f000 f93f 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001692:	4818      	ldr	r0, [pc, #96]	; (80016f4 <MX_TIM3_Init+0xe4>)
 8001694:	f005 f920 	bl	80068d8 <HAL_TIM_PWM_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800169e:	f000 f937 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016aa:	f107 0320 	add.w	r3, r7, #32
 80016ae:	4619      	mov	r1, r3
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <MX_TIM3_Init+0xe4>)
 80016b2:	f005 fecd 	bl	8007450 <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80016bc:	f000 f928 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c0:	2360      	movs	r3, #96	; 0x60
 80016c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80016c4:	230a      	movs	r3, #10
 80016c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM3_Init+0xe4>)
 80016d8:	f005 fa20 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016e2:	f000 f915 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM3_Init+0xe4>)
 80016e8:	f000 fa1c 	bl	8001b24 <HAL_TIM_MspPostInit>

}
 80016ec:	bf00      	nop
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000088c 	.word	0x2000088c
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_USART3_UART_Init+0x50>)
 8001704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART3_UART_Init+0x4c>)
 8001734:	f005 ff5a 	bl	80075ec <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800173e:	f000 f8e7 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200007bc 	.word	0x200007bc
 800174c:	40004800 	.word	0x40004800

08001750 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART6_UART_Init+0x4c>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_USART6_UART_Init+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_USART6_UART_Init+0x4c>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART6_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART6_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART6_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART6_UART_Init+0x4c>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART6_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART6_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART6_UART_Init+0x4c>)
 8001788:	f005 ff30 	bl	80075ec <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001792:	f000 f8bd 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000974 	.word	0x20000974
 80017a0:	40011400 	.word	0x40011400

080017a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
 80017be:	4b51      	ldr	r3, [pc, #324]	; (8001904 <MX_GPIO_Init+0x160>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a50      	ldr	r2, [pc, #320]	; (8001904 <MX_GPIO_Init+0x160>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b4e      	ldr	r3, [pc, #312]	; (8001904 <MX_GPIO_Init+0x160>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	623b      	str	r3, [r7, #32]
 80017d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <MX_GPIO_Init+0x160>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a49      	ldr	r2, [pc, #292]	; (8001904 <MX_GPIO_Init+0x160>)
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <MX_GPIO_Init+0x160>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <MX_GPIO_Init+0x160>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a42      	ldr	r2, [pc, #264]	; (8001904 <MX_GPIO_Init+0x160>)
 80017fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <MX_GPIO_Init+0x160>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <MX_GPIO_Init+0x160>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a3b      	ldr	r2, [pc, #236]	; (8001904 <MX_GPIO_Init+0x160>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b39      	ldr	r3, [pc, #228]	; (8001904 <MX_GPIO_Init+0x160>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <MX_GPIO_Init+0x160>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <MX_GPIO_Init+0x160>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <MX_GPIO_Init+0x160>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b2e      	ldr	r3, [pc, #184]	; (8001904 <MX_GPIO_Init+0x160>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a2d      	ldr	r2, [pc, #180]	; (8001904 <MX_GPIO_Init+0x160>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <MX_GPIO_Init+0x160>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <MX_GPIO_Init+0x160>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a26      	ldr	r2, [pc, #152]	; (8001904 <MX_GPIO_Init+0x160>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <MX_GPIO_Init+0x160>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MX_GPIO_Init+0x160>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a1f      	ldr	r2, [pc, #124]	; (8001904 <MX_GPIO_Init+0x160>)
 8001888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_GPIO_Init+0x160>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80018a0:	4819      	ldr	r0, [pc, #100]	; (8001908 <MX_GPIO_Init+0x164>)
 80018a2:	f002 f8f5 	bl	8003a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF7 PF8 PF9
                           PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80018a6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	4813      	ldr	r0, [pc, #76]	; (800190c <MX_GPIO_Init+0x168>)
 80018be:	f001 ff3b 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF_CE_Pin NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80018c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <MX_GPIO_Init+0x164>)
 80018dc:	f001 ff2c 	bl	8003738 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 80018e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <MX_GPIO_Init+0x164>)
 80018f8:	f001 ff1e 	bl	8003738 <HAL_GPIO_Init>

}
 80018fc:	bf00      	nop
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40021400 	.word	0x40021400

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	e7fe      	b.n	8001918 <Error_Handler+0x8>
	...

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_MspInit+0x4c>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_MspInit+0x4c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_I2C_MspInit+0x84>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12b      	bne.n	80019e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <HAL_I2C_MspInit+0x88>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_I2C_MspInit+0x88>)
 8001998:	f043 0320 	orr.w	r3, r3, #32
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_I2C_MspInit+0x88>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019aa:	2303      	movs	r3, #3
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ae:	2312      	movs	r3, #18
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019ba:	2304      	movs	r3, #4
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <HAL_I2C_MspInit+0x8c>)
 80019c6:	f001 feb7 	bl	8003738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_I2C_MspInit+0x88>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a08      	ldr	r2, [pc, #32]	; (80019f4 <HAL_I2C_MspInit+0x88>)
 80019d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_I2C_MspInit+0x88>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40005800 	.word	0x40005800
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40021400 	.word	0x40021400

080019fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	; 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a19      	ldr	r2, [pc, #100]	; (8001a80 <HAL_SPI_MspInit+0x84>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d12c      	bne.n	8001a78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_SPI_MspInit+0x88>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <HAL_SPI_MspInit+0x88>)
 8001a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_SPI_MspInit+0x88>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_SPI_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_SPI_MspInit+0x88>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_SPI_MspInit+0x88>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a68:	2306      	movs	r3, #6
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <HAL_SPI_MspInit+0x8c>)
 8001a74:	f001 fe60 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40003c00 	.word	0x40003c00
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020800 	.word	0x40020800

08001a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_TIM_Base_MspInit+0x8c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d10e      	bne.n	8001abc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aba:	e026      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]
}
 8001ae2:	e012      	b.n	8001b0a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_TIM_Base_MspInit+0x94>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10d      	bne.n	8001b0a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_TIM_Base_MspInit+0x90>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40000400 	.word	0x40000400

08001b24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	; 0x30
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_TIM_MspPostInit+0x138>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11f      	bne.n	8001b86 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	4b45      	ldr	r3, [pc, #276]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a44      	ldr	r2, [pc, #272]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001b62:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4839      	ldr	r0, [pc, #228]	; (8001c64 <HAL_TIM_MspPostInit+0x140>)
 8001b80:	f001 fdda 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b84:	e065      	b.n	8001c52 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8e:	d13d      	bne.n	8001c0c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a2a      	ldr	r2, [pc, #168]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESC_MOTOR1_Pin;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_MOTOR1_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4821      	ldr	r0, [pc, #132]	; (8001c68 <HAL_TIM_MspPostInit+0x144>)
 8001be4:	f001 fda8 	bl	8003738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|ESC_MOTOR2_Pin;
 8001be8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	4819      	ldr	r0, [pc, #100]	; (8001c6c <HAL_TIM_MspPostInit+0x148>)
 8001c06:	f001 fd97 	bl	8003738 <HAL_GPIO_Init>
}
 8001c0a:	e022      	b.n	8001c52 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <HAL_TIM_MspPostInit+0x14c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d11d      	bne.n	8001c52 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_TIM_MspPostInit+0x13c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_T3CH1_Pin;
 8001c32:	2340      	movs	r3, #64	; 0x40
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c42:	2302      	movs	r3, #2
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZER_T3CH1_GPIO_Port, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_TIM_MspPostInit+0x144>)
 8001c4e:	f001 fd73 	bl	8003738 <HAL_GPIO_Init>
}
 8001c52:	bf00      	nop
 8001c54:	3730      	adds	r7, #48	; 0x30
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40020400 	.word	0x40020400
 8001c70:	40000400 	.word	0x40000400

08001c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a46      	ldr	r2, [pc, #280]	; (8001dac <HAL_UART_MspInit+0x138>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d14c      	bne.n	8001d30 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	4b45      	ldr	r3, [pc, #276]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a44      	ldr	r2, [pc, #272]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b42      	ldr	r3, [pc, #264]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a3d      	ldr	r2, [pc, #244]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b3b      	ldr	r3, [pc, #236]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a36      	ldr	r2, [pc, #216]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	482b      	ldr	r0, [pc, #172]	; (8001db4 <HAL_UART_MspInit+0x140>)
 8001d08:	f001 fd16 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d1e:	2307      	movs	r3, #7
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4823      	ldr	r0, [pc, #140]	; (8001db8 <HAL_UART_MspInit+0x144>)
 8001d2a:	f001 fd05 	bl	8003738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d2e:	e038      	b.n	8001da2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART6)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <HAL_UART_MspInit+0x148>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d133      	bne.n	8001da2 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a14      	ldr	r2, [pc, #80]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_UART_MspInit+0x13c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M8N_TX6_Pin|M8N_RX6_Pin;
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d82:	2308      	movs	r3, #8
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <HAL_UART_MspInit+0x14c>)
 8001d8e:	f001 fcd3 	bl	8003738 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	2047      	movs	r0, #71	; 0x47
 8001d98:	f000 fadd 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d9c:	2047      	movs	r0, #71	; 0x47
 8001d9e:	f000 faf6 	bl	800238e <HAL_NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3730      	adds	r7, #48	; 0x30
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004800 	.word	0x40004800
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40011400 	.word	0x40011400
 8001dc0:	40020800 	.word	0x40020800

08001dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <NMI_Handler+0x4>

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e10:	f000 f982 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <ETH_IRQHandler+0x10>)
 8001e1e:	f000 febf 	bl	8002ba0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200023bc 	.word	0x200023bc

08001e2c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <ETH_WKUP_IRQHandler+0x10>)
 8001e32:	f000 feb5 	bl	8002ba0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200023bc 	.word	0x200023bc

08001e40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <OTG_FS_IRQHandler+0x10>)
 8001e46:	f002 ffc7 	bl	8004dd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20008604 	.word	0x20008604

08001e54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <USART6_IRQHandler+0x10>)
 8001e5a:	f005 fc15 	bl	8007688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000974 	.word	0x20000974

08001e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
	return 1;
 8001e6c:	2301      	movs	r3, #1
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_kill>:

int _kill(int pid, int sig)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <_kill+0x20>)
 8001e84:	2216      	movs	r2, #22
 8001e86:	601a      	str	r2, [r3, #0]
	return -1;
 8001e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20008a0c 	.word	0x20008a0c

08001e9c <_exit>:

void _exit (int status)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ffe5 	bl	8001e78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eae:	e7fe      	b.n	8001eae <_exit+0x12>

08001eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	e00a      	b.n	8001ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ec2:	f3af 8000 	nop.w
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60ba      	str	r2, [r7, #8]
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbf0      	blt.n	8001ec2 <_read+0x12>
	}

return len;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	e009      	b.n	8001f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	60ba      	str	r2, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dbf1      	blt.n	8001efc <_write+0x12>
	}
	return len;
 8001f18:	687b      	ldr	r3, [r7, #4]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_close>:

int _close(int file)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
	return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_isatty>:

int _isatty(int file)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	return 1;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d205      	bcs.n	8001fc8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <_sbrk+0x6c>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	e009      	b.n	8001fdc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <_sbrk+0x64>)
 8001fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	20030000 	.word	0x20030000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	200003c4 	.word	0x200003c4
 8001ff4:	20008a20 	.word	0x20008a20
 8001ff8:	20008a0c 	.word	0x20008a0c

08001ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <SystemInit+0x20>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <SystemInit+0x20>)
 8002008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800200c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002058 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002026:	490e      	ldr	r1, [pc, #56]	; (8002060 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002028:	4a0e      	ldr	r2, [pc, #56]	; (8002064 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800202c:	e002      	b.n	8002034 <LoopCopyDataInit>

0800202e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002032:	3304      	adds	r3, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002038:	d3f9      	bcc.n	800202e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800203a:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800203c:	4c0b      	ldr	r4, [pc, #44]	; (800206c <LoopFillZerobss+0x26>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002040:	e001      	b.n	8002046 <LoopFillZerobss>

08002042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002044:	3204      	adds	r2, #4

08002046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002048:	d3fb      	bcc.n	8002042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800204a:	f7ff ffd7 	bl	8001ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800204e:	f014 ffcf 	bl	8016ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002052:	f7fe ffdb 	bl	800100c <main>
  bx  lr    
 8002056:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002058:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800205c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002060:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8002064:	080227f0 	.word	0x080227f0
  ldr r2, =_sbss
 8002068:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 800206c:	20008a1c 	.word	0x20008a1c

08002070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002070:	e7fe      	b.n	8002070 <ADC_IRQHandler>
	...

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 f94f 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7ff fc38 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f967 	bl	80023aa <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f000 f92f 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000008 	.word	0x20000008
 8002110:	20000010 	.word	0x20000010
 8002114:	2000000c 	.word	0x2000000c

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000010 	.word	0x20000010
 800213c:	20000a10 	.word	0x20000a10

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000a10 	.word	0x20000a10

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000010 	.word	0x20000010

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff feb6 	bl	8002140 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d008      	beq.n	80023f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e052      	b.n	800249a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0216 	bic.w	r2, r2, #22
 8002402:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002412:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <HAL_DMA_Abort+0x62>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002444:	e013      	b.n	800246e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002446:	f7ff fe7b 	bl	8002140 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b05      	cmp	r3, #5
 8002452:	d90c      	bls.n	800246e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2203      	movs	r2, #3
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e015      	b.n	800249a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e4      	bne.n	8002446 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	223f      	movs	r2, #63	; 0x3f
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e00c      	b.n	80024da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2205      	movs	r2, #5
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80024f8:	4baa      	ldr	r3, [pc, #680]	; (80027a4 <HAL_ETH_Init+0x2bc>)
 80024fa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e183      	b.n	8002816 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f008 fce2 	bl	800aeec <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	4b9e      	ldr	r3, [pc, #632]	; (80027a8 <HAL_ETH_Init+0x2c0>)
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	4a9d      	ldr	r2, [pc, #628]	; (80027a8 <HAL_ETH_Init+0x2c0>)
 8002532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002536:	6453      	str	r3, [r2, #68]	; 0x44
 8002538:	4b9b      	ldr	r3, [pc, #620]	; (80027a8 <HAL_ETH_Init+0x2c0>)
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002544:	4b99      	ldr	r3, [pc, #612]	; (80027ac <HAL_ETH_Init+0x2c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a98      	ldr	r2, [pc, #608]	; (80027ac <HAL_ETH_Init+0x2c4>)
 800254a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800254e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002550:	4b96      	ldr	r3, [pc, #600]	; (80027ac <HAL_ETH_Init+0x2c4>)
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4994      	ldr	r1, [pc, #592]	; (80027ac <HAL_ETH_Init+0x2c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002574:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002576:	f7ff fde3 	bl	8002140 <HAL_GetTick>
 800257a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800257c:	e011      	b.n	80025a2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800257e:	f7ff fddf 	bl	8002140 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800258c:	d909      	bls.n	80025a2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e139      	b.n	8002816 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e4      	bne.n	800257e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f023 031c 	bic.w	r3, r3, #28
 80025c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025c4:	f004 f87c 	bl	80066c0 <HAL_RCC_GetHCLKFreq>
 80025c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4a78      	ldr	r2, [pc, #480]	; (80027b0 <HAL_ETH_Init+0x2c8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d908      	bls.n	80025e4 <HAL_ETH_Init+0xfc>
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4a77      	ldr	r2, [pc, #476]	; (80027b4 <HAL_ETH_Init+0x2cc>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d804      	bhi.n	80025e4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e027      	b.n	8002634 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4a73      	ldr	r2, [pc, #460]	; (80027b4 <HAL_ETH_Init+0x2cc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d908      	bls.n	80025fe <HAL_ETH_Init+0x116>
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4a6d      	ldr	r2, [pc, #436]	; (80027a4 <HAL_ETH_Init+0x2bc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d204      	bcs.n	80025fe <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f043 030c 	orr.w	r3, r3, #12
 80025fa:	61fb      	str	r3, [r7, #28]
 80025fc:	e01a      	b.n	8002634 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4a68      	ldr	r2, [pc, #416]	; (80027a4 <HAL_ETH_Init+0x2bc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d303      	bcc.n	800260e <HAL_ETH_Init+0x126>
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4a6b      	ldr	r2, [pc, #428]	; (80027b8 <HAL_ETH_Init+0x2d0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d911      	bls.n	8002632 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4a69      	ldr	r2, [pc, #420]	; (80027b8 <HAL_ETH_Init+0x2d0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d908      	bls.n	8002628 <HAL_ETH_Init+0x140>
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	4a68      	ldr	r2, [pc, #416]	; (80027bc <HAL_ETH_Init+0x2d4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d804      	bhi.n	8002628 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e005      	b.n	8002634 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	e000      	b.n	8002634 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002632:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800263c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002640:	2100      	movs	r1, #0
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fb99 	bl	8002d7a <HAL_ETH_WritePHYRegister>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002652:	6939      	ldr	r1, [r7, #16]
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fd4f 	bl	80030f8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0d7      	b.n	8002816 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002666:	20ff      	movs	r0, #255	; 0xff
 8002668:	f7ff fd76 	bl	8002158 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a5 	beq.w	80027c0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002676:	f7ff fd63 	bl	8002140 <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800267c:	f107 030c 	add.w	r3, r7, #12
 8002680:	461a      	mov	r2, r3
 8002682:	2101      	movs	r1, #1
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fb10 	bl	8002caa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800268a:	f7ff fd59 	bl	8002140 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d90f      	bls.n	80026bc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026a0:	6939      	ldr	r1, [r7, #16]
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fd28 	bl	80030f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0ac      	b.n	8002816 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0da      	beq.n	800267c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80026c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026ca:	2100      	movs	r1, #0
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fb54 	bl	8002d7a <HAL_ETH_WritePHYRegister>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80026dc:	6939      	ldr	r1, [r7, #16]
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fd0a 	bl	80030f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80026ec:	2301      	movs	r3, #1
 80026ee:	e092      	b.n	8002816 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80026f0:	f7ff fd26 	bl	8002140 <HAL_GetTick>
 80026f4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	461a      	mov	r2, r3
 80026fc:	2101      	movs	r1, #1
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fad3 	bl	8002caa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002704:	f7ff fd1c 	bl	8002140 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d90f      	bls.n	8002736 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800271a:	6939      	ldr	r1, [r7, #16]
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fceb 	bl	80030f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e06f      	b.n	8002816 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0da      	beq.n	80026f6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	461a      	mov	r2, r3
 8002746:	2110      	movs	r1, #16
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 faae 	bl	8002caa <HAL_ETH_ReadPHYRegister>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002758:	6939      	ldr	r1, [r7, #16]
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fccc 	bl	80030f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002768:	2301      	movs	r3, #1
 800276a:	e054      	b.n	8002816 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	e002      	b.n	8002786 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	e035      	b.n	8002804 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e030      	b.n	8002804 <HAL_ETH_Init+0x31c>
 80027a2:	bf00      	nop
 80027a4:	03938700 	.word	0x03938700
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	01312cff 	.word	0x01312cff
 80027b4:	02160ebf 	.word	0x02160ebf
 80027b8:	05f5e0ff 	.word	0x05f5e0ff
 80027bc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	2100      	movs	r1, #0
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 face 	bl	8002d7a <HAL_ETH_WritePHYRegister>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027e8:	6939      	ldr	r1, [r7, #16]
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fc84 	bl	80030f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e00c      	b.n	8002816 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80027fc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002800:	f7ff fcaa 	bl	8002158 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fc76 	bl	80030f8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop

08002820 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_ETH_DMATxDescListInit+0x20>
 800283c:	2302      	movs	r3, #2
 800283e:	e052      	b.n	80028e6 <HAL_ETH_DMATxDescListInit+0xc6>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e030      	b.n	80028be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015b      	lsls	r3, r3, #5
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	4413      	add	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800286c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	461a      	mov	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	3b01      	subs	r3, #1
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	d208      	bcs.n	80028b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4413      	add	r3, r2
 80028aa:	461a      	mov	r2, r3
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	e002      	b.n	80028b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3301      	adds	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d3ca      	bcc.n	800285c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	3310      	adds	r3, #16
 80028d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b087      	sub	sp, #28
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	607a      	str	r2, [r7, #4]
 80028fe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ETH_DMARxDescListInit+0x20>
 800290e:	2302      	movs	r3, #2
 8002910:	e056      	b.n	80029c0 <HAL_ETH_DMARxDescListInit+0xce>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e034      	b.n	8002998 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	015b      	lsls	r3, r3, #5
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4413      	add	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800293e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002946:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800294e:	fb02 f303 	mul.w	r3, r2, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	461a      	mov	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d105      	bne.n	8002970 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	3b01      	subs	r3, #1
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	429a      	cmp	r2, r3
 8002978:	d208      	bcs.n	800298c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	015b      	lsls	r3, r3, #5
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	4413      	add	r3, r2
 8002984:	461a      	mov	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	e002      	b.n	8002992 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d3c6      	bcc.n	800292e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029aa:	330c      	adds	r3, #12
 80029ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_ETH_TransmitFrame+0x24>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e0cd      	b.n	8002b8c <HAL_ETH_TransmitFrame+0x1c0>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0b8      	b.n	8002b8c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da09      	bge.n	8002a38 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2212      	movs	r2, #18
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0a9      	b.n	8002b8c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d915      	bls.n	8002a6e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	4a54      	ldr	r2, [pc, #336]	; (8002b98 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0a9b      	lsrs	r3, r3, #10
 8002a4c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_ETH_TransmitFrame+0x1cc>)
 8002a52:	fba3 1302 	umull	r1, r3, r3, r2
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e001      	b.n	8002a72 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d11c      	bne.n	8002ab2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002a86:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a92:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002aa2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ab0:	e04b      	b.n	8002b4a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	e044      	b.n	8002b42 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ac6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d107      	bne.n	8002ade <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002adc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002ae6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d116      	bne.n	8002b20 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b00:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <HAL_ETH_TransmitFrame+0x1d0>)
 8002b06:	fb02 f203 	mul.w	r2, r2, r3
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002b12:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002b1e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002b2e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	461a      	mov	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3b6      	bcc.n	8002ab8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b52:	3314      	adds	r3, #20
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b66:	3314      	adds	r3, #20
 8002b68:	2204      	movs	r2, #4
 8002b6a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b74:	3304      	adds	r3, #4
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	ac02b00b 	.word	0xac02b00b
 8002b9c:	fffffa0c 	.word	0xfffffa0c

08002ba0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d112      	bne.n	8002be2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f860 	bl	8002c82 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bca:	3314      	adds	r3, #20
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be0:	e01b      	b.n	8002c1a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bea:	3314      	adds	r3, #20
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d111      	bne.n	8002c1a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f839 	bl	8002c6e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c04:	3314      	adds	r3, #20
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c22:	3314      	adds	r3, #20
 8002c24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c28:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c32:	3314      	adds	r3, #20
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c3e:	d112      	bne.n	8002c66 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f828 	bl	8002c96 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4e:	3314      	adds	r3, #20
 8002c50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c54:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b82      	cmp	r3, #130	; 0x82
 8002cca:	d101      	bne.n	8002cd0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e050      	b.n	8002d72 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2282      	movs	r2, #130	; 0x82
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 031c 	and.w	r3, r3, #28
 8002ce6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8a1b      	ldrh	r3, [r3, #16]
 8002cec:	02db      	lsls	r3, r3, #11
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002cf6:	897b      	ldrh	r3, [r7, #10]
 8002cf8:	019b      	lsls	r3, r3, #6
 8002cfa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0302 	bic.w	r3, r3, #2
 8002d0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1c:	f7ff fa10 	bl	8002140 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d22:	e015      	b.n	8002d50 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002d24:	f7ff fa0c 	bl	8002140 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d309      	bcc.n	8002d48 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e014      	b.n	8002d72 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e4      	bne.n	8002d24 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	460b      	mov	r3, r1
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b42      	cmp	r3, #66	; 0x42
 8002d9a:	d101      	bne.n	8002da0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e04e      	b.n	8002e3e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2242      	movs	r2, #66	; 0x42
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 031c 	and.w	r3, r3, #28
 8002db6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8a1b      	ldrh	r3, [r3, #16]
 8002dbc:	02db      	lsls	r3, r3, #11
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	019b      	lsls	r3, r3, #6
 8002dca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002df6:	f7ff f9a3 	bl	8002140 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dfc:	e015      	b.n	8002e2a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002dfe:	f7ff f99f 	bl	8002140 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e0c:	d309      	bcc.n	8002e22 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e00d      	b.n	8002e3e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e4      	bne.n	8002dfe <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_ETH_Start+0x16>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e01f      	b.n	8002e9c <HAL_ETH_Start+0x56>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fb45 	bl	80034fc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fb7c 	bl	8003570 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fc13 	bl	80036a4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fbb0 	bl	80035e4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fbdd 	bl	8003644 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ETH_Stop+0x16>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e01f      	b.n	8002efa <HAL_ETH_Stop+0x56>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fba2 	bl	8003614 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fbcf 	bl	8003674 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fb67 	bl	80035aa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fbe1 	bl	80036a4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb27 	bl	8003536 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_ETH_ConfigMAC+0x1c>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e0e4      	b.n	80030ea <HAL_ETH_ConfigMAC+0x1e6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80b1 	beq.w	800309a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <HAL_ETH_ConfigMAC+0x1f0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f50:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002f56:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002f5c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002f62:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002f68:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002f6e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002f74:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002f7a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002f80:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002f86:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002f8c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002f92:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7ff f8d4 	bl	8002158 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fc0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002fc6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002fcc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002fd2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002fd8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002fde:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002fea:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002fec:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7ff f8ae 	bl	8002158 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800300c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003016:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003034:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800303a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003040:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003046:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800304c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003064:	2001      	movs	r0, #1
 8003066:	f7ff f877 	bl	8002158 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800308a:	2001      	movs	r0, #1
 800308c:	f7ff f864 	bl	8002158 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	61da      	str	r2, [r3, #28]
 8003098:	e01e      	b.n	80030d8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80030a8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7ff f844 	bl	8002158 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	ff20810f 	.word	0xff20810f

080030f8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b0b0      	sub	sp, #192	; 0xc0
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003114:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003122:	2300      	movs	r3, #0
 8003124:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003126:	2300      	movs	r3, #0
 8003128:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003132:	2300      	movs	r3, #0
 8003134:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800313e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003142:	663b      	str	r3, [r7, #96]	; 0x60
 8003144:	e001      	b.n	800314a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800314a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800314e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003154:	2300      	movs	r3, #0
 8003156:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003160:	2300      	movs	r3, #0
 8003162:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003164:	2340      	movs	r3, #64	; 0x40
 8003166:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003168:	2300      	movs	r3, #0
 800316a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003192:	2300      	movs	r3, #0
 8003194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031d0:	4bac      	ldr	r3, [pc, #688]	; (8003484 <ETH_MACDMAConfig+0x38c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031dc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80031de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80031e0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80031e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80031e4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80031ea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80031ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80031ee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80031f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80031f2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80031f8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80031fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80031fc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80031fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003200:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003204:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003208:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800320a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800320c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800320e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003220:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800322c:	2001      	movs	r0, #1
 800322e:	f7fe ff93 	bl	8002158 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800323a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800323c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003240:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003244:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800324a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800324c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003250:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003252:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003256:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800325c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003260:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003268:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800326a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003276:	2001      	movs	r0, #1
 8003278:	f7fe ff6e 	bl	8002158 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003284:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800328e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003298:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032a8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80032ac:	4013      	ands	r3, r2
 80032ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032b6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80032b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032bc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80032be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80032c2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80032c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80032c8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80032ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80032ce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80032d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80032d4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80032d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032e8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7fe ff2f 	bl	8002158 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003302:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003304:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003308:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800331e:	2001      	movs	r0, #1
 8003320:	f7fe ff1a 	bl	8002158 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800332c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003336:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800333c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003340:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003352:	2304      	movs	r3, #4
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800335c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003360:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003366:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003372:	2300      	movs	r3, #0
 8003374:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003376:	2300      	movs	r3, #0
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	3318      	adds	r3, #24
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800338a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800338e:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <ETH_MACDMAConfig+0x390>)
 8003390:	4013      	ands	r3, r2
 8003392:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003396:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003398:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800339a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800339c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800339e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80033a0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80033a2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80033a4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80033a6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80033a8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80033aa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80033ac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80033ae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80033b2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80033b6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80033b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ca:	3318      	adds	r3, #24
 80033cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033d0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033da:	3318      	adds	r3, #24
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f7fe feb8 	bl	8002158 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f0:	3318      	adds	r3, #24
 80033f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033f6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033fc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003400:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003404:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003408:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800340a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800340e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003412:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800341c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003420:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003430:	2001      	movs	r0, #1
 8003432:	f7fe fe91 	bl	8002158 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800343e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003442:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10f      	bne.n	800346c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003454:	331c      	adds	r3, #28
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003468:	331c      	adds	r3, #28
 800346a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	461a      	mov	r2, r3
 8003472:	2100      	movs	r1, #0
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f809 	bl	800348c <ETH_MACAddressConfig>
}
 800347a:	bf00      	nop
 800347c:	37c0      	adds	r7, #192	; 0xc0
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	ff20810f 	.word	0xff20810f
 8003488:	f8de3f23 	.word	0xf8de3f23

0800348c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3305      	adds	r3, #5
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	3204      	adds	r2, #4
 80034a4:	7812      	ldrb	r2, [r2, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <ETH_MACAddressConfig+0x68>)
 80034ae:	4413      	add	r3, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3303      	adds	r3, #3
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	061a      	lsls	r2, r3, #24
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3302      	adds	r3, #2
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3301      	adds	r3, #1
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	4313      	orrs	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <ETH_MACAddressConfig+0x6c>)
 80034de:	4413      	add	r3, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6013      	str	r3, [r2, #0]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40028040 	.word	0x40028040
 80034f8:	40028044 	.word	0x40028044

080034fc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0208 	orr.w	r2, r2, #8
 8003516:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003520:	2001      	movs	r0, #1
 8003522:	f000 f8e9 	bl	80036f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0208 	bic.w	r2, r2, #8
 8003550:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800355a:	2001      	movs	r0, #1
 800355c:	f000 f8cc 	bl	80036f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0204 	orr.w	r2, r2, #4
 800358a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003594:	2001      	movs	r0, #1
 8003596:	f000 f8af 	bl	80036f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0204 	bic.w	r2, r2, #4
 80035c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80035ce:	2001      	movs	r0, #1
 80035d0:	f000 f892 	bl	80036f8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f4:	3318      	adds	r3, #24
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003604:	3318      	adds	r3, #24
 8003606:	601a      	str	r2, [r3, #0]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003624:	3318      	adds	r3, #24
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003634:	3318      	adds	r3, #24
 8003636:	601a      	str	r2, [r3, #0]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003654:	3318      	adds	r3, #24
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0202 	orr.w	r2, r2, #2
 8003660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003664:	3318      	adds	r3, #24
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003684:	3318      	adds	r3, #24
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0202 	bic.w	r2, r2, #2
 8003690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003694:	3318      	adds	r3, #24
 8003696:	601a      	str	r2, [r3, #0]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b8:	3318      	adds	r3, #24
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	3318      	adds	r3, #24
 80036ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d4:	3318      	adds	r3, #24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80036da:	2001      	movs	r0, #1
 80036dc:	f000 f80c 	bl	80036f8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ea:	3318      	adds	r3, #24
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <ETH_Delay+0x38>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <ETH_Delay+0x3c>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0a5b      	lsrs	r3, r3, #9
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003714:	bf00      	nop
  } 
  while (Delay --);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1e5a      	subs	r2, r3, #1
 800371a:	60fa      	str	r2, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f9      	bne.n	8003714 <ETH_Delay+0x1c>
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000008 	.word	0x20000008
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	; 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e177      	b.n	8003a44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003754:	2201      	movs	r2, #1
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	429a      	cmp	r2, r3
 800376e:	f040 8166 	bne.w	8003a3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d005      	beq.n	800378a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003786:	2b02      	cmp	r3, #2
 8003788:	d130      	bne.n	80037ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2203      	movs	r2, #3
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037c0:	2201      	movs	r2, #1
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 0201 	and.w	r2, r3, #1
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d017      	beq.n	8003828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d123      	bne.n	800387c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	08da      	lsrs	r2, r3, #3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3208      	adds	r2, #8
 800383c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	220f      	movs	r2, #15
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	08da      	lsrs	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3208      	adds	r2, #8
 8003876:	69b9      	ldr	r1, [r7, #24]
 8003878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 0203 	and.w	r2, r3, #3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80c0 	beq.w	8003a3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <HAL_GPIO_Init+0x324>)
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_GPIO_Init+0x324>)
 80038c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038cc:	6453      	str	r3, [r2, #68]	; 0x44
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_GPIO_Init+0x324>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038da:	4a61      	ldr	r2, [pc, #388]	; (8003a60 <HAL_GPIO_Init+0x328>)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_GPIO_Init+0x32c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d037      	beq.n	8003976 <HAL_GPIO_Init+0x23e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a57      	ldr	r2, [pc, #348]	; (8003a68 <HAL_GPIO_Init+0x330>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d031      	beq.n	8003972 <HAL_GPIO_Init+0x23a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a56      	ldr	r2, [pc, #344]	; (8003a6c <HAL_GPIO_Init+0x334>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02b      	beq.n	800396e <HAL_GPIO_Init+0x236>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a55      	ldr	r2, [pc, #340]	; (8003a70 <HAL_GPIO_Init+0x338>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x232>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a54      	ldr	r2, [pc, #336]	; (8003a74 <HAL_GPIO_Init+0x33c>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x22e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a53      	ldr	r2, [pc, #332]	; (8003a78 <HAL_GPIO_Init+0x340>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x22a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_GPIO_Init+0x344>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x226>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a51      	ldr	r2, [pc, #324]	; (8003a80 <HAL_GPIO_Init+0x348>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x222>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a50      	ldr	r2, [pc, #320]	; (8003a84 <HAL_GPIO_Init+0x34c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x21e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4f      	ldr	r2, [pc, #316]	; (8003a88 <HAL_GPIO_Init+0x350>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x21a>
 800394e:	2309      	movs	r3, #9
 8003950:	e012      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003952:	230a      	movs	r3, #10
 8003954:	e010      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003956:	2308      	movs	r3, #8
 8003958:	e00e      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800395a:	2307      	movs	r3, #7
 800395c:	e00c      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800395e:	2306      	movs	r3, #6
 8003960:	e00a      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003962:	2305      	movs	r3, #5
 8003964:	e008      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003966:	2304      	movs	r3, #4
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800396a:	2303      	movs	r3, #3
 800396c:	e004      	b.n	8003978 <HAL_GPIO_Init+0x240>
 800396e:	2302      	movs	r3, #2
 8003970:	e002      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_GPIO_Init+0x240>
 8003976:	2300      	movs	r3, #0
 8003978:	69fa      	ldr	r2, [r7, #28]
 800397a:	f002 0203 	and.w	r2, r2, #3
 800397e:	0092      	lsls	r2, r2, #2
 8003980:	4093      	lsls	r3, r2
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003988:	4935      	ldr	r1, [pc, #212]	; (8003a60 <HAL_GPIO_Init+0x328>)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	3302      	adds	r3, #2
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003996:	4b3d      	ldr	r3, [pc, #244]	; (8003a8c <HAL_GPIO_Init+0x354>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ba:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <HAL_GPIO_Init+0x354>)
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <HAL_GPIO_Init+0x354>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <HAL_GPIO_Init+0x354>)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ea:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <HAL_GPIO_Init+0x354>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a0e:	4a1f      	ldr	r2, [pc, #124]	; (8003a8c <HAL_GPIO_Init+0x354>)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a14:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_GPIO_Init+0x354>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <HAL_GPIO_Init+0x354>)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3301      	adds	r3, #1
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	f67f ae84 	bls.w	8003754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3724      	adds	r7, #36	; 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40013800 	.word	0x40013800
 8003a64:	40020000 	.word	0x40020000
 8003a68:	40020400 	.word	0x40020400
 8003a6c:	40020800 	.word	0x40020800
 8003a70:	40020c00 	.word	0x40020c00
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40021400 	.word	0x40021400
 8003a7c:	40021800 	.word	0x40021800
 8003a80:	40021c00 	.word	0x40021c00
 8003a84:	40022000 	.word	0x40022000
 8003a88:	40022400 	.word	0x40022400
 8003a8c:	40013c00 	.word	0x40013c00

08003a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa0:	787b      	ldrb	r3, [r7, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aac:	e003      	b.n	8003ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aae:	887b      	ldrh	r3, [r7, #2]
 8003ab0:	041a      	lsls	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	619a      	str	r2, [r3, #24]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e12b      	b.n	8003d2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd ff3e 	bl	800196c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b28:	f002 fdd6 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 8003b2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	4a81      	ldr	r2, [pc, #516]	; (8003d38 <HAL_I2C_Init+0x274>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d807      	bhi.n	8003b48 <HAL_I2C_Init+0x84>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a80      	ldr	r2, [pc, #512]	; (8003d3c <HAL_I2C_Init+0x278>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	bf94      	ite	ls
 8003b40:	2301      	movls	r3, #1
 8003b42:	2300      	movhi	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e006      	b.n	8003b56 <HAL_I2C_Init+0x92>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a7d      	ldr	r2, [pc, #500]	; (8003d40 <HAL_I2C_Init+0x27c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf94      	ite	ls
 8003b50:	2301      	movls	r3, #1
 8003b52:	2300      	movhi	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0e7      	b.n	8003d2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a78      	ldr	r2, [pc, #480]	; (8003d44 <HAL_I2C_Init+0x280>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	0c9b      	lsrs	r3, r3, #18
 8003b68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a6a      	ldr	r2, [pc, #424]	; (8003d38 <HAL_I2C_Init+0x274>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d802      	bhi.n	8003b98 <HAL_I2C_Init+0xd4>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	3301      	adds	r3, #1
 8003b96:	e009      	b.n	8003bac <HAL_I2C_Init+0xe8>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	4a69      	ldr	r2, [pc, #420]	; (8003d48 <HAL_I2C_Init+0x284>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	099b      	lsrs	r3, r3, #6
 8003baa:	3301      	adds	r3, #1
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	495c      	ldr	r1, [pc, #368]	; (8003d38 <HAL_I2C_Init+0x274>)
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	d819      	bhi.n	8003c00 <HAL_I2C_Init+0x13c>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e59      	subs	r1, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bda:	1c59      	adds	r1, r3, #1
 8003bdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003be0:	400b      	ands	r3, r1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_I2C_Init+0x138>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1e59      	subs	r1, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfa:	e051      	b.n	8003ca0 <HAL_I2C_Init+0x1dc>
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	e04f      	b.n	8003ca0 <HAL_I2C_Init+0x1dc>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d111      	bne.n	8003c2c <HAL_I2C_Init+0x168>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e58      	subs	r0, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	440b      	add	r3, r1
 8003c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e012      	b.n	8003c52 <HAL_I2C_Init+0x18e>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1e58      	subs	r0, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	0099      	lsls	r1, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Init+0x196>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e022      	b.n	8003ca0 <HAL_I2C_Init+0x1dc>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <HAL_I2C_Init+0x1bc>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1e58      	subs	r0, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	440b      	add	r3, r1
 8003c70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c74:	3301      	adds	r3, #1
 8003c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c7e:	e00f      	b.n	8003ca0 <HAL_I2C_Init+0x1dc>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1e58      	subs	r0, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	0099      	lsls	r1, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	6809      	ldr	r1, [r1, #0]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69da      	ldr	r2, [r3, #28]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6911      	ldr	r1, [r2, #16]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68d2      	ldr	r2, [r2, #12]
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	000186a0 	.word	0x000186a0
 8003d3c:	001e847f 	.word	0x001e847f
 8003d40:	003d08ff 	.word	0x003d08ff
 8003d44:	431bde83 	.word	0x431bde83
 8003d48:	10624dd3 	.word	0x10624dd3

08003d4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	813b      	strh	r3, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d66:	f7fe f9eb 	bl	8002140 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	f040 80d9 	bne.w	8003f2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2319      	movs	r3, #25
 8003d80:	2201      	movs	r2, #1
 8003d82:	496d      	ldr	r1, [pc, #436]	; (8003f38 <HAL_I2C_Mem_Write+0x1ec>)
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fc7f 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
 8003d92:	e0cc      	b.n	8003f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2C_Mem_Write+0x56>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0c5      	b.n	8003f2e <HAL_I2C_Mem_Write+0x1e2>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d007      	beq.n	8003dc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2221      	movs	r2, #33	; 0x21
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2240      	movs	r2, #64	; 0x40
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a3a      	ldr	r2, [r7, #32]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a4d      	ldr	r2, [pc, #308]	; (8003f3c <HAL_I2C_Mem_Write+0x1f0>)
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e0a:	88f8      	ldrh	r0, [r7, #6]
 8003e0c:	893a      	ldrh	r2, [r7, #8]
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	4603      	mov	r3, r0
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fab6 	bl	800438c <I2C_RequestMemoryWrite>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d052      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e081      	b.n	8003f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fd00 	bl	8004834 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d107      	bne.n	8003e52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e06b      	b.n	8003f2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d11b      	bne.n	8003ecc <HAL_I2C_Mem_Write+0x180>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d017      	beq.n	8003ecc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1aa      	bne.n	8003e2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fcec 	bl	80048b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00d      	beq.n	8003f00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d107      	bne.n	8003efc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e016      	b.n	8003f2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	00100002 	.word	0x00100002
 8003f3c:	ffff0000 	.word	0xffff0000

08003f40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	817b      	strh	r3, [r7, #10]
 8003f52:	460b      	mov	r3, r1
 8003f54:	813b      	strh	r3, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f5a:	f7fe f8f1 	bl	8002140 <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	f040 8208 	bne.w	800437e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2319      	movs	r3, #25
 8003f74:	2201      	movs	r2, #1
 8003f76:	497b      	ldr	r1, [pc, #492]	; (8004164 <HAL_I2C_Mem_Read+0x224>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fb85 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
 8003f86:	e1fb      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_Mem_Read+0x56>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e1f4      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d007      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2222      	movs	r2, #34	; 0x22
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2240      	movs	r2, #64	; 0x40
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a5b      	ldr	r2, [pc, #364]	; (8004168 <HAL_I2C_Mem_Read+0x228>)
 8003ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ffe:	88f8      	ldrh	r0, [r7, #6]
 8004000:	893a      	ldrh	r2, [r7, #8]
 8004002:	8979      	ldrh	r1, [r7, #10]
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	4603      	mov	r3, r0
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fa52 	bl	80044b8 <I2C_RequestMemoryRead>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e1b0      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	2b00      	cmp	r3, #0
 8004024:	d113      	bne.n	800404e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	623b      	str	r3, [r7, #32]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	623b      	str	r3, [r7, #32]
 800403a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e184      	b.n	8004358 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	2b01      	cmp	r3, #1
 8004054:	d11b      	bne.n	800408e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e164      	b.n	8004358 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004092:	2b02      	cmp	r3, #2
 8004094:	d11b      	bne.n	80040ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	e144      	b.n	8004358 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040e4:	e138      	b.n	8004358 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	f200 80f1 	bhi.w	80042d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d123      	bne.n	8004140 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fc1b 	bl	8004938 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e139      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800413e:	e10b      	b.n	8004358 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	2b02      	cmp	r3, #2
 8004146:	d14e      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2200      	movs	r2, #0
 8004150:	4906      	ldr	r1, [pc, #24]	; (800416c <HAL_I2C_Mem_Read+0x22c>)
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 fa98 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e10e      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
 8004162:	bf00      	nop
 8004164:	00100002 	.word	0x00100002
 8004168:	ffff0000 	.word	0xffff0000
 800416c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691a      	ldr	r2, [r3, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041e4:	e0b8      	b.n	8004358 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2200      	movs	r2, #0
 80041ee:	4966      	ldr	r1, [pc, #408]	; (8004388 <HAL_I2C_Mem_Read+0x448>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fa49 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0bf      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004248:	2200      	movs	r2, #0
 800424a:	494f      	ldr	r1, [pc, #316]	; (8004388 <HAL_I2C_Mem_Read+0x448>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fa1b 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e091      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042d0:	e042      	b.n	8004358 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 fb2e 	bl	8004938 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e04c      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b04      	cmp	r3, #4
 8004324:	d118      	bne.n	8004358 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f aec2 	bne.w	80040e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3728      	adds	r7, #40	; 0x28
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	00010004 	.word	0x00010004

0800438c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	4608      	mov	r0, r1
 8004396:	4611      	mov	r1, r2
 8004398:	461a      	mov	r2, r3
 800439a:	4603      	mov	r3, r0
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	460b      	mov	r3, r1
 80043a0:	813b      	strh	r3, [r7, #8]
 80043a2:	4613      	mov	r3, r2
 80043a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	2200      	movs	r2, #0
 80043be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f960 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043dc:	d103      	bne.n	80043e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e05f      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043ea:	897b      	ldrh	r3, [r7, #10]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	6a3a      	ldr	r2, [r7, #32]
 80043fe:	492d      	ldr	r1, [pc, #180]	; (80044b4 <I2C_RequestMemoryWrite+0x128>)
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f998 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e04c      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	6a39      	ldr	r1, [r7, #32]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 fa02 	bl	8004834 <I2C_WaitOnTXEFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b04      	cmp	r3, #4
 800443c:	d107      	bne.n	800444e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e02b      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004452:	88fb      	ldrh	r3, [r7, #6]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d105      	bne.n	8004464 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	611a      	str	r2, [r3, #16]
 8004462:	e021      	b.n	80044a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	b29b      	uxth	r3, r3
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f9dc 	bl	8004834 <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e005      	b.n	80044aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800449e:	893b      	ldrh	r3, [r7, #8]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	00010002 	.word	0x00010002

080044b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	461a      	mov	r2, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	817b      	strh	r3, [r7, #10]
 80044ca:	460b      	mov	r3, r1
 80044cc:	813b      	strh	r3, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 f8c2 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004518:	d103      	bne.n	8004522 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0aa      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004526:	897b      	ldrh	r3, [r7, #10]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004534:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	4952      	ldr	r1, [pc, #328]	; (8004684 <I2C_RequestMemoryRead+0x1cc>)
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f8fa 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e097      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f964 	bl	8004834 <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e076      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d105      	bne.n	80045a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	e021      	b.n	80045e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045a0:	893b      	ldrh	r3, [r7, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b0:	6a39      	ldr	r1, [r7, #32]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f93e 	bl	8004834 <I2C_WaitOnTXEFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00d      	beq.n	80045da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d107      	bne.n	80045d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e050      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045da:	893b      	ldrh	r3, [r7, #8]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e6:	6a39      	ldr	r1, [r7, #32]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f923 	bl	8004834 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00d      	beq.n	8004610 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d107      	bne.n	800460c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e035      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800461e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2200      	movs	r2, #0
 8004628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f82b 	bl	8004688 <I2C_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004646:	d103      	bne.n	8004650 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e013      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	6a3a      	ldr	r2, [r7, #32]
 8004668:	4906      	ldr	r1, [pc, #24]	; (8004684 <I2C_RequestMemoryRead+0x1cc>)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f863 	bl	8004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	00010002 	.word	0x00010002

08004688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	4613      	mov	r3, r2
 8004696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004698:	e025      	b.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d021      	beq.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7fd fd4d 	bl	8002140 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d116      	bne.n	80046e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e023      	b.n	800472e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10d      	bne.n	800470c <I2C_WaitOnFlagUntilTimeout+0x84>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	43da      	mvns	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf0c      	ite	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	2300      	movne	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	e00c      	b.n	8004726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	43da      	mvns	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4013      	ands	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	429a      	cmp	r2, r3
 800472a:	d0b6      	beq.n	800469a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004744:	e051      	b.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d123      	bne.n	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800476e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0204 	orr.w	r2, r3, #4
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e046      	b.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d021      	beq.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fd fccb 	bl	8002140 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e020      	b.n	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10c      	bne.n	800480e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	43da      	mvns	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4013      	ands	r3, r2
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	bf14      	ite	ne
 8004806:	2301      	movne	r3, #1
 8004808:	2300      	moveq	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	e00b      	b.n	8004826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	43da      	mvns	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	4013      	ands	r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	bf14      	ite	ne
 8004820:	2301      	movne	r3, #1
 8004822:	2300      	moveq	r3, #0
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d18d      	bne.n	8004746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004840:	e02d      	b.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8ce 	bl	80049e4 <I2C_IsAcknowledgeFailed>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e02d      	b.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d021      	beq.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fd fc71 	bl	8002140 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e007      	b.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b80      	cmp	r3, #128	; 0x80
 80048aa:	d1ca      	bne.n	8004842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048c2:	e02d      	b.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f88d 	bl	80049e4 <I2C_IsAcknowledgeFailed>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e02d      	b.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048da:	d021      	beq.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048dc:	f7fd fc30 	bl	8002140 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d302      	bcc.n	80048f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d116      	bne.n	8004920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e007      	b.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d1ca      	bne.n	80048c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004944:	e042      	b.n	80049cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b10      	cmp	r3, #16
 8004952:	d119      	bne.n	8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0210 	mvn.w	r2, #16
 800495c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e029      	b.n	80049dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004988:	f7fd fbda 	bl	8002140 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d116      	bne.n	80049cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e007      	b.n	80049dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d1b5      	bne.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fa:	d11b      	bne.n	8004a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	d129      	bne.n	8004aac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0210 	bic.w	r2, r2, #16
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d12a      	bne.n	8004b2a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2224      	movs	r2, #36	; 0x24
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004af4:	89fb      	ldrh	r3, [r7, #14]
 8004af6:	f023 030f 	bic.w	r3, r3, #15
 8004afa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	89fb      	ldrh	r3, [r7, #14]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	89fa      	ldrh	r2, [r7, #14]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e000      	b.n	8004b2c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b3a:	b08f      	sub	sp, #60	; 0x3c
 8004b3c:	af0a      	add	r7, sp, #40	; 0x28
 8004b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e10f      	b.n	8004d6a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f011 ff2f 	bl	80169c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2203      	movs	r2, #3
 8004b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f003 fc98 	bl	80084be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	687e      	ldr	r6, [r7, #4]
 8004b96:	466d      	mov	r5, sp
 8004b98:	f106 0410 	add.w	r4, r6, #16
 8004b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bac:	1d33      	adds	r3, r6, #4
 8004bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb0:	6838      	ldr	r0, [r7, #0]
 8004bb2:	f003 fb6f 	bl	8008294 <USB_CoreInit>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0d0      	b.n	8004d6a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f003 fc86 	bl	80084e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	73fb      	strb	r3, [r7, #15]
 8004bd8:	e04a      	b.n	8004c70 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bda:	7bfa      	ldrb	r2, [r7, #15]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	333d      	adds	r3, #61	; 0x3d
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	333c      	adds	r3, #60	; 0x3c
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c02:	7bfa      	ldrb	r2, [r7, #15]
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	b298      	uxth	r0, r3
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3342      	adds	r3, #66	; 0x42
 8004c16:	4602      	mov	r2, r0
 8004c18:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c1a:	7bfa      	ldrb	r2, [r7, #15]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	333f      	adds	r3, #63	; 0x3f
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3344      	adds	r3, #68	; 0x44
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	3348      	adds	r3, #72	; 0x48
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	3350      	adds	r3, #80	; 0x50
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	7bfa      	ldrb	r2, [r7, #15]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d3af      	bcc.n	8004bda <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	e044      	b.n	8004d0a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cc2:	7bfa      	ldrb	r2, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	1a9b      	subs	r3, r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	3301      	adds	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d3b5      	bcc.n	8004c80 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	687e      	ldr	r6, [r7, #4]
 8004d1c:	466d      	mov	r5, sp
 8004d1e:	f106 0410 	add.w	r4, r6, #16
 8004d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d32:	1d33      	adds	r3, r6, #4
 8004d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d36:	6838      	ldr	r0, [r7, #0]
 8004d38:	f003 fc1e 	bl	8008578 <USB_DevInit>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00d      	b.n	8004d6a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f004 fc9a 	bl	800969c <USB_DevDisconnect>

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_PCD_Start+0x1c>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e020      	b.n	8004dd0 <HAL_PCD_Start+0x5e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d109      	bne.n	8004db2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d005      	beq.n	8004db2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f003 fb70 	bl	800849c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f004 fc4a 	bl	800965a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b08d      	sub	sp, #52	; 0x34
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f004 fd08 	bl	8009804 <USB_GetMode>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f040 839d 	bne.w	8005536 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fc6c 	bl	80096de <USB_ReadInterrupts>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8393 	beq.w	8005534 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f004 fc63 	bl	80096de <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d107      	bne.n	8004e32 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695a      	ldr	r2, [r3, #20]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f002 0202 	and.w	r2, r2, #2
 8004e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 fc51 	bl	80096de <USB_ReadInterrupts>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d161      	bne.n	8004f0a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0210 	bic.w	r2, r2, #16
 8004e54:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f003 020f 	and.w	r2, r3, #15
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4413      	add	r3, r2
 8004e72:	3304      	adds	r3, #4
 8004e74:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	0c5b      	lsrs	r3, r3, #17
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d124      	bne.n	8004ecc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e88:	4013      	ands	r3, r2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d035      	beq.n	8004efa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004e98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6a38      	ldr	r0, [r7, #32]
 8004ea2:	f004 fa88 	bl	80093b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb2:	441a      	add	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	091b      	lsrs	r3, r3, #4
 8004ec0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec4:	441a      	add	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	619a      	str	r2, [r3, #24]
 8004eca:	e016      	b.n	8004efa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	0c5b      	lsrs	r3, r3, #17
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	2b06      	cmp	r3, #6
 8004ed6:	d110      	bne.n	8004efa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ede:	2208      	movs	r2, #8
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6a38      	ldr	r0, [r7, #32]
 8004ee4:	f004 fa67 	bl	80093b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	091b      	lsrs	r3, r3, #4
 8004ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ef4:	441a      	add	r2, r3
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0210 	orr.w	r2, r2, #16
 8004f08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f004 fbe5 	bl	80096de <USB_ReadInterrupts>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f1e:	d16e      	bne.n	8004ffe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 fbeb 	bl	8009704 <USB_ReadDevAllOutEpInterrupt>
 8004f2e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f30:	e062      	b.n	8004ff8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d057      	beq.n	8004fec <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	4611      	mov	r1, r2
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 fc10 	bl	800976c <USB_ReadDevOutEPInterrupt>
 8004f4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00c      	beq.n	8004f72 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	461a      	mov	r2, r3
 8004f66:	2301      	movs	r3, #1
 8004f68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 fdb1 	bl	8005ad4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 feab 	bl	8005cec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fac:	461a      	mov	r2, r3
 8004fae:	2310      	movs	r3, #16
 8004fb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2320      	movs	r3, #32
 8004fcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d009      	beq.n	8004fec <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	085b      	lsrs	r3, r3, #1
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d199      	bne.n	8004f32 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f004 fb6b 	bl	80096de <USB_ReadInterrupts>
 8005008:	4603      	mov	r3, r0
 800500a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005012:	f040 80c0 	bne.w	8005196 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f004 fb8c 	bl	8009738 <USB_ReadDevAllInEpInterrupt>
 8005020:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005026:	e0b2      	b.n	800518e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 80a7 	beq.w	8005182 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f004 fbb2 	bl	80097a8 <USB_ReadDevInEPInterrupt>
 8005044:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d057      	beq.n	8005100 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	2201      	movs	r2, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	43db      	mvns	r3, r3
 800506a:	69f9      	ldr	r1, [r7, #28]
 800506c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005070:	4013      	ands	r3, r2
 8005072:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	461a      	mov	r2, r3
 8005082:	2301      	movs	r3, #1
 8005084:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d132      	bne.n	80050f4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	3348      	adds	r3, #72	; 0x48
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4403      	add	r3, r0
 80050ae:	3344      	adds	r3, #68	; 0x44
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4419      	add	r1, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4403      	add	r3, r0
 80050c2:	3348      	adds	r3, #72	; 0x48
 80050c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d113      	bne.n	80050f4 <HAL_PCD_IRQHandler+0x31c>
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3350      	adds	r3, #80	; 0x50
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d108      	bne.n	80050f4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050ec:	461a      	mov	r2, r3
 80050ee:	2101      	movs	r1, #1
 80050f0:	f004 fbba 	bl	8009868 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f011 fce5 	bl	8016aca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	461a      	mov	r2, r3
 8005118:	2308      	movs	r3, #8
 800511a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	461a      	mov	r2, r3
 8005134:	2310      	movs	r3, #16
 8005136:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514e:	461a      	mov	r2, r3
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	461a      	mov	r2, r3
 800516c:	2302      	movs	r3, #2
 800516e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800517a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fc1b 	bl	80059b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	3301      	adds	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	f47f af49 	bne.w	8005028 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f004 fa9f 	bl	80096de <USB_ReadInterrupts>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051aa:	d122      	bne.n	80051f2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d108      	bne.n	80051dc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051d2:	2100      	movs	r1, #0
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fe27 	bl	8005e28 <HAL_PCDEx_LPM_Callback>
 80051da:	e002      	b.n	80051e2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f011 fceb 	bl	8016bb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f004 fa71 	bl	80096de <USB_ReadInterrupts>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005206:	d112      	bne.n	800522e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d102      	bne.n	800521e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f011 fca7 	bl	8016b6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800522c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f004 fa53 	bl	80096de <USB_ReadInterrupts>
 8005238:	4603      	mov	r3, r0
 800523a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	f040 80c7 	bne.w	80053d4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2110      	movs	r1, #16
 8005260:	4618      	mov	r0, r3
 8005262:	f003 faed 	bl	8008840 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005266:	2300      	movs	r3, #0
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526a:	e056      	b.n	800531a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	461a      	mov	r2, r3
 800527a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800527e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800529e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	461a      	mov	r2, r3
 80052ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005312:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	3301      	adds	r3, #1
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005320:	429a      	cmp	r2, r3
 8005322:	d3a3      	bcc.n	800526c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005332:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005336:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005350:	f043 030b 	orr.w	r3, r3, #11
 8005354:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800535e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005366:	f043 030b 	orr.w	r3, r3, #11
 800536a:	6453      	str	r3, [r2, #68]	; 0x44
 800536c:	e015      	b.n	800539a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800537c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005380:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005384:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005394:	f043 030b 	orr.w	r3, r3, #11
 8005398:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053be:	461a      	mov	r2, r3
 80053c0:	f004 fa52 	bl	8009868 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 f980 	bl	80096de <USB_ReadInterrupts>
 80053de:	4603      	mov	r3, r0
 80053e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e8:	d124      	bne.n	8005434 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f004 fa16 	bl	8009820 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f003 fa7e 	bl	80088fa <USB_GetDevSpeed>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681c      	ldr	r4, [r3, #0]
 800540a:	f001 f959 	bl	80066c0 <HAL_RCC_GetHCLKFreq>
 800540e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	4620      	mov	r0, r4
 800541a:	f002 ff9d 	bl	8008358 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f011 fb7b 	bl	8016b1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005432:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f004 f950 	bl	80096de <USB_ReadInterrupts>
 800543e:	4603      	mov	r3, r0
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b08      	cmp	r3, #8
 8005446:	d10a      	bne.n	800545e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f011 fb58 	bl	8016afe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f002 0208 	and.w	r2, r2, #8
 800545c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f004 f93b 	bl	80096de <USB_ReadInterrupts>
 8005468:	4603      	mov	r3, r0
 800546a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005472:	d10f      	bne.n	8005494 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	b2db      	uxtb	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f011 fbba 	bl	8016bf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	f004 f920 	bl	80096de <USB_ReadInterrupts>
 800549e:	4603      	mov	r3, r0
 80054a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a8:	d10f      	bne.n	80054ca <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f011 fb8d 	bl	8016bd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80054c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 f905 	bl	80096de <USB_ReadInterrupts>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054de:	d10a      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f011 fb9b 	bl	8016c1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695a      	ldr	r2, [r3, #20]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f004 f8ef 	bl	80096de <USB_ReadInterrupts>
 8005500:	4603      	mov	r3, r0
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d115      	bne.n	8005536 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f011 fb8b 	bl	8016c38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6859      	ldr	r1, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	e000      	b.n	8005536 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005534:	bf00      	nop
    }
  }
}
 8005536:	3734      	adds	r7, #52	; 0x34
 8005538:	46bd      	mov	sp, r7
 800553a:	bd90      	pop	{r4, r7, pc}

0800553c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_PCD_SetAddress+0x1a>
 8005552:	2302      	movs	r3, #2
 8005554:	e013      	b.n	800557e <HAL_PCD_SetAddress+0x42>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	4611      	mov	r1, r2
 800556e:	4618      	mov	r0, r3
 8005570:	f004 f84d 	bl	800960e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	461a      	mov	r2, r3
 8005594:	4603      	mov	r3, r0
 8005596:	70fb      	strb	r3, [r7, #3]
 8005598:	460b      	mov	r3, r1
 800559a:	803b      	strh	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da0f      	bge.n	80055cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	f003 020f 	and.w	r2, r3, #15
 80055b2:	4613      	mov	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	3338      	adds	r3, #56	; 0x38
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4413      	add	r3, r2
 80055c0:	3304      	adds	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	705a      	strb	r2, [r3, #1]
 80055ca:	e00f      	b.n	80055ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 020f 	and.w	r2, r3, #15
 80055d2:	4613      	mov	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4413      	add	r3, r2
 80055e2:	3304      	adds	r3, #4
 80055e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055f8:	883a      	ldrh	r2, [r7, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	78ba      	ldrb	r2, [r7, #2]
 8005602:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d004      	beq.n	8005616 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005616:	78bb      	ldrb	r3, [r7, #2]
 8005618:	2b02      	cmp	r3, #2
 800561a:	d102      	bne.n	8005622 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_PCD_EP_Open+0xaa>
 800562c:	2302      	movs	r3, #2
 800562e:	e00e      	b.n	800564e <HAL_PCD_EP_Open+0xc8>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	4618      	mov	r0, r3
 8005640:	f003 f980 	bl	8008944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800564c:	7afb      	ldrb	r3, [r7, #11]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005666:	2b00      	cmp	r3, #0
 8005668:	da0f      	bge.n	800568a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	f003 020f 	and.w	r2, r3, #15
 8005670:	4613      	mov	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	3338      	adds	r3, #56	; 0x38
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	3304      	adds	r3, #4
 8005680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	705a      	strb	r2, [r3, #1]
 8005688:	e00f      	b.n	80056aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	f003 020f 	and.w	r2, r3, #15
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	4413      	add	r3, r2
 80056a0:	3304      	adds	r3, #4
 80056a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d101      	bne.n	80056c4 <HAL_PCD_EP_Close+0x6e>
 80056c0:	2302      	movs	r3, #2
 80056c2:	e00e      	b.n	80056e2 <HAL_PCD_EP_Close+0x8c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68f9      	ldr	r1, [r7, #12]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f003 f9be 	bl	8008a54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	460b      	mov	r3, r1
 80056f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	f003 020f 	and.w	r2, r3, #15
 8005700:	4613      	mov	r3, r2
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	3304      	adds	r3, #4
 8005712:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2200      	movs	r2, #0
 8005724:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2200      	movs	r2, #0
 800572a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800572c:	7afb      	ldrb	r3, [r7, #11]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	b2da      	uxtb	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d102      	bne.n	8005746 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	b2db      	uxtb	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	f003 fc99 	bl	8009094 <USB_EP0StartXfer>
 8005762:	e008      	b.n	8005776 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	6979      	ldr	r1, [r7, #20]
 8005772:	f003 fa4b 	bl	8008c0c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80057a2:	681b      	ldr	r3, [r3, #0]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	460b      	mov	r3, r1
 80057be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	3338      	adds	r3, #56	; 0x38
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	2201      	movs	r2, #1
 80057ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057f0:	7afb      	ldrb	r3, [r7, #11]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d102      	bne.n	800580a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	461a      	mov	r2, r3
 8005820:	6979      	ldr	r1, [r7, #20]
 8005822:	f003 fc37 	bl	8009094 <USB_EP0StartXfer>
 8005826:	e008      	b.n	800583a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	6979      	ldr	r1, [r7, #20]
 8005836:	f003 f9e9 	bl	8008c0c <USB_EPStartXfer>
  }

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 020f 	and.w	r2, r3, #15
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d901      	bls.n	8005862 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e050      	b.n	8005904 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005862:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005866:	2b00      	cmp	r3, #0
 8005868:	da0f      	bge.n	800588a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 020f 	and.w	r2, r3, #15
 8005870:	4613      	mov	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	3338      	adds	r3, #56	; 0x38
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	3304      	adds	r3, #4
 8005880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	705a      	strb	r2, [r3, #1]
 8005888:	e00d      	b.n	80058a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	4413      	add	r3, r2
 800589c:	3304      	adds	r3, #4
 800589e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_PCD_EP_SetStall+0x82>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e01e      	b.n	8005904 <HAL_PCD_EP_SetStall+0xc0>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68f9      	ldr	r1, [r7, #12]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f003 fdc6 	bl	8009466 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	f003 030f 	and.w	r3, r3, #15
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	b2d9      	uxtb	r1, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058f4:	461a      	mov	r2, r3
 80058f6:	f003 ffb7 	bl	8009868 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 020f 	and.w	r2, r3, #15
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	d901      	bls.n	800592a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e042      	b.n	80059b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800592a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800592e:	2b00      	cmp	r3, #0
 8005930:	da0f      	bge.n	8005952 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	3338      	adds	r3, #56	; 0x38
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	4413      	add	r3, r2
 8005946:	3304      	adds	r3, #4
 8005948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	705a      	strb	r2, [r3, #1]
 8005950:	e00f      	b.n	8005972 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	1a9b      	subs	r3, r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	3304      	adds	r3, #4
 800596a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	b2da      	uxtb	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_PCD_EP_ClrStall+0x86>
 800598e:	2302      	movs	r3, #2
 8005990:	e00e      	b.n	80059b0 <HAL_PCD_EP_ClrStall+0xa4>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f003 fdce 	bl	8009542 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	; 0x28
 80059bc:	af02      	add	r7, sp, #8
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	3338      	adds	r3, #56	; 0x38
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4413      	add	r3, r2
 80059dc:	3304      	adds	r3, #4
 80059de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d901      	bls.n	80059f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e06c      	b.n	8005aca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d902      	bls.n	8005a0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	3303      	adds	r3, #3
 8005a10:	089b      	lsrs	r3, r3, #2
 8005a12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a14:	e02b      	b.n	8005a6e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d902      	bls.n	8005a32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3303      	adds	r3, #3
 8005a36:	089b      	lsrs	r3, r3, #2
 8005a38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	4603      	mov	r3, r0
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f003 fc72 	bl	800933a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	441a      	add	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	441a      	add	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d809      	bhi.n	8005a98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d203      	bcs.n	8005a98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1be      	bne.n	8005a16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d811      	bhi.n	8005ac8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	2201      	movs	r2, #1
 8005aac:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	6939      	ldr	r1, [r7, #16]
 8005ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3720      	adds	r7, #32
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	333c      	adds	r3, #60	; 0x3c
 8005aec:	3304      	adds	r3, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	f040 80a0 	bne.w	8005c4c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d015      	beq.n	8005b42 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4a72      	ldr	r2, [pc, #456]	; (8005ce4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	f240 80dd 	bls.w	8005cda <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80d7 	beq.w	8005cda <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3e:	6093      	str	r3, [r2, #8]
 8005b40:	e0cb      	b.n	8005cda <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2320      	movs	r3, #32
 8005b5c:	6093      	str	r3, [r2, #8]
 8005b5e:	e0bc      	b.n	8005cda <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f040 80b7 	bne.w	8005cda <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a5d      	ldr	r2, [pc, #372]	; (8005ce4 <PCD_EP_OutXfrComplete_int+0x210>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d90f      	bls.n	8005b94 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b90:	6093      	str	r3, [r2, #8]
 8005b92:	e0a2      	b.n	8005cda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ba6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	0159      	lsls	r1, r3, #5
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005bba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4403      	add	r3, r0
 8005bca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005bce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	1a9b      	subs	r3, r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4403      	add	r3, r0
 8005bf2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4419      	add	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4403      	add	r3, r0
 8005c08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c0c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d114      	bne.n	8005c3e <PCD_EP_OutXfrComplete_int+0x16a>
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d108      	bne.n	8005c3e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c36:	461a      	mov	r2, r3
 8005c38:	2101      	movs	r1, #1
 8005c3a:	f003 fe15 	bl	8009868 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	4619      	mov	r1, r3
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f010 ff25 	bl	8016a94 <HAL_PCD_DataOutStageCallback>
 8005c4a:	e046      	b.n	8005cda <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <PCD_EP_OutXfrComplete_int+0x214>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d124      	bne.n	8005c9e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c70:	6093      	str	r3, [r2, #8]
 8005c72:	e032      	b.n	8005cda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f010 fefc 	bl	8016a94 <HAL_PCD_DataOutStageCallback>
 8005c9c:	e01d      	b.n	8005cda <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d114      	bne.n	8005cce <PCD_EP_OutXfrComplete_int+0x1fa>
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d108      	bne.n	8005cce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	2100      	movs	r1, #0
 8005cca:	f003 fdcd 	bl	8009868 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f010 fedd 	bl	8016a94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	4f54300a 	.word	0x4f54300a
 8005ce8:	4f54310a 	.word	0x4f54310a

08005cec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	333c      	adds	r3, #60	; 0x3c
 8005d04:	3304      	adds	r3, #4
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d90e      	bls.n	8005d40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f010 fe95 	bl	8016a70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d90c      	bls.n	8005d68 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d108      	bne.n	8005d68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d60:	461a      	mov	r2, r3
 8005d62:	2101      	movs	r1, #1
 8005d64:	f003 fd80 	bl	8009868 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	4f54300a 	.word	0x4f54300a

08005d78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	70fb      	strb	r3, [r7, #3]
 8005d84:	4613      	mov	r3, r2
 8005d86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d107      	bne.n	8005da6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d96:	883b      	ldrh	r3, [r7, #0]
 8005d98:	0419      	lsls	r1, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
 8005da4:	e028      	b.n	8005df8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4413      	add	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
 8005db8:	e00d      	b.n	8005dd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	3340      	adds	r3, #64	; 0x40
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
 8005dd6:	7bfa      	ldrb	r2, [r7, #15]
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d3ec      	bcc.n	8005dba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005de0:	883b      	ldrh	r3, [r7, #0]
 8005de2:	0418      	lsls	r0, r3, #16
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6819      	ldr	r1, [r3, #0]
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	4302      	orrs	r2, r0
 8005df0:	3340      	adds	r3, #64	; 0x40
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b083      	sub	sp, #12
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e264      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d075      	beq.n	8005f4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e5e:	4ba3      	ldr	r3, [pc, #652]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d00c      	beq.n	8005e84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e6a:	4ba0      	ldr	r3, [pc, #640]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d112      	bne.n	8005e9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e76:	4b9d      	ldr	r3, [pc, #628]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e82:	d10b      	bne.n	8005e9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e84:	4b99      	ldr	r3, [pc, #612]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d05b      	beq.n	8005f48 <HAL_RCC_OscConfig+0x108>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d157      	bne.n	8005f48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e23f      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea4:	d106      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x74>
 8005ea6:	4b91      	ldr	r3, [pc, #580]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a90      	ldr	r2, [pc, #576]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	e01d      	b.n	8005ef0 <HAL_RCC_OscConfig+0xb0>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ebc:	d10c      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x98>
 8005ebe:	4b8b      	ldr	r3, [pc, #556]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a8a      	ldr	r2, [pc, #552]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	4b88      	ldr	r3, [pc, #544]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a87      	ldr	r2, [pc, #540]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e00b      	b.n	8005ef0 <HAL_RCC_OscConfig+0xb0>
 8005ed8:	4b84      	ldr	r3, [pc, #528]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a83      	ldr	r2, [pc, #524]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	4b81      	ldr	r3, [pc, #516]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a80      	ldr	r2, [pc, #512]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d013      	beq.n	8005f20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef8:	f7fc f922 	bl	8002140 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f00:	f7fc f91e 	bl	8002140 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b64      	cmp	r3, #100	; 0x64
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e204      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f12:	4b76      	ldr	r3, [pc, #472]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f0      	beq.n	8005f00 <HAL_RCC_OscConfig+0xc0>
 8005f1e:	e014      	b.n	8005f4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f20:	f7fc f90e 	bl	8002140 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f28:	f7fc f90a 	bl	8002140 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b64      	cmp	r3, #100	; 0x64
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e1f0      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3a:	4b6c      	ldr	r3, [pc, #432]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0xe8>
 8005f46:	e000      	b.n	8005f4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d063      	beq.n	800601e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f56:	4b65      	ldr	r3, [pc, #404]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f62:	4b62      	ldr	r3, [pc, #392]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d11c      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f6e:	4b5f      	ldr	r3, [pc, #380]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d116      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f7a:	4b5c      	ldr	r3, [pc, #368]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <HAL_RCC_OscConfig+0x152>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d001      	beq.n	8005f92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e1c4      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f92:	4b56      	ldr	r3, [pc, #344]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4952      	ldr	r1, [pc, #328]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fa6:	e03a      	b.n	800601e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d020      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb0:	4b4f      	ldr	r3, [pc, #316]	; (80060f0 <HAL_RCC_OscConfig+0x2b0>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fc f8c3 	bl	8002140 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fbe:	f7fc f8bf 	bl	8002140 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e1a5      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd0:	4b46      	ldr	r3, [pc, #280]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fdc:	4b43      	ldr	r3, [pc, #268]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	4940      	ldr	r1, [pc, #256]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	600b      	str	r3, [r1, #0]
 8005ff0:	e015      	b.n	800601e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff2:	4b3f      	ldr	r3, [pc, #252]	; (80060f0 <HAL_RCC_OscConfig+0x2b0>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff8:	f7fc f8a2 	bl	8002140 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006000:	f7fc f89e 	bl	8002140 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e184      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006012:	4b36      	ldr	r3, [pc, #216]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d030      	beq.n	800608c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d016      	beq.n	8006060 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006032:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <HAL_RCC_OscConfig+0x2b4>)
 8006034:	2201      	movs	r2, #1
 8006036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006038:	f7fc f882 	bl	8002140 <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006040:	f7fc f87e 	bl	8002140 <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e164      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006052:	4b26      	ldr	r3, [pc, #152]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8006054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0f0      	beq.n	8006040 <HAL_RCC_OscConfig+0x200>
 800605e:	e015      	b.n	800608c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006060:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <HAL_RCC_OscConfig+0x2b4>)
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006066:	f7fc f86b 	bl	8002140 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800606e:	f7fc f867 	bl	8002140 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e14d      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006080:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 8006082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1f0      	bne.n	800606e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80a0 	beq.w	80061da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800609a:	2300      	movs	r3, #0
 800609c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	4a0e      	ldr	r2, [pc, #56]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c2:	60bb      	str	r3, [r7, #8]
 80060c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ca:	4b0b      	ldr	r3, [pc, #44]	; (80060f8 <HAL_RCC_OscConfig+0x2b8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d121      	bne.n	800611a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060d6:	4b08      	ldr	r3, [pc, #32]	; (80060f8 <HAL_RCC_OscConfig+0x2b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a07      	ldr	r2, [pc, #28]	; (80060f8 <HAL_RCC_OscConfig+0x2b8>)
 80060dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060e2:	f7fc f82d 	bl	8002140 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e8:	e011      	b.n	800610e <HAL_RCC_OscConfig+0x2ce>
 80060ea:	bf00      	nop
 80060ec:	40023800 	.word	0x40023800
 80060f0:	42470000 	.word	0x42470000
 80060f4:	42470e80 	.word	0x42470e80
 80060f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fc:	f7fc f820 	bl	8002140 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e106      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610e:	4b85      	ldr	r3, [pc, #532]	; (8006324 <HAL_RCC_OscConfig+0x4e4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d106      	bne.n	8006130 <HAL_RCC_OscConfig+0x2f0>
 8006122:	4b81      	ldr	r3, [pc, #516]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	4a80      	ldr	r2, [pc, #512]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6713      	str	r3, [r2, #112]	; 0x70
 800612e:	e01c      	b.n	800616a <HAL_RCC_OscConfig+0x32a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	2b05      	cmp	r3, #5
 8006136:	d10c      	bne.n	8006152 <HAL_RCC_OscConfig+0x312>
 8006138:	4b7b      	ldr	r3, [pc, #492]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613c:	4a7a      	ldr	r2, [pc, #488]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 800613e:	f043 0304 	orr.w	r3, r3, #4
 8006142:	6713      	str	r3, [r2, #112]	; 0x70
 8006144:	4b78      	ldr	r3, [pc, #480]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006148:	4a77      	ldr	r2, [pc, #476]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 800614a:	f043 0301 	orr.w	r3, r3, #1
 800614e:	6713      	str	r3, [r2, #112]	; 0x70
 8006150:	e00b      	b.n	800616a <HAL_RCC_OscConfig+0x32a>
 8006152:	4b75      	ldr	r3, [pc, #468]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	4a74      	ldr	r2, [pc, #464]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	6713      	str	r3, [r2, #112]	; 0x70
 800615e:	4b72      	ldr	r3, [pc, #456]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006162:	4a71      	ldr	r2, [pc, #452]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006164:	f023 0304 	bic.w	r3, r3, #4
 8006168:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d015      	beq.n	800619e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006172:	f7fb ffe5 	bl	8002140 <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006178:	e00a      	b.n	8006190 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800617a:	f7fb ffe1 	bl	8002140 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f241 3288 	movw	r2, #5000	; 0x1388
 8006188:	4293      	cmp	r3, r2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e0c5      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006190:	4b65      	ldr	r3, [pc, #404]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0ee      	beq.n	800617a <HAL_RCC_OscConfig+0x33a>
 800619c:	e014      	b.n	80061c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800619e:	f7fb ffcf 	bl	8002140 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a4:	e00a      	b.n	80061bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061a6:	f7fb ffcb 	bl	8002140 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e0af      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061bc:	4b5a      	ldr	r3, [pc, #360]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1ee      	bne.n	80061a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d105      	bne.n	80061da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ce:	4b56      	ldr	r3, [pc, #344]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	4a55      	ldr	r2, [pc, #340]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 80061d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 809b 	beq.w	800631a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061e4:	4b50      	ldr	r3, [pc, #320]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 030c 	and.w	r3, r3, #12
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d05c      	beq.n	80062aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d141      	bne.n	800627c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f8:	4b4c      	ldr	r3, [pc, #304]	; (800632c <HAL_RCC_OscConfig+0x4ec>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fe:	f7fb ff9f 	bl	8002140 <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006206:	f7fb ff9b 	bl	8002140 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e081      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006218:	4b43      	ldr	r3, [pc, #268]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f0      	bne.n	8006206 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69da      	ldr	r2, [r3, #28]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	019b      	lsls	r3, r3, #6
 8006234:	431a      	orrs	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	3b01      	subs	r3, #1
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	061b      	lsls	r3, r3, #24
 8006248:	4937      	ldr	r1, [pc, #220]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 800624a:	4313      	orrs	r3, r2
 800624c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800624e:	4b37      	ldr	r3, [pc, #220]	; (800632c <HAL_RCC_OscConfig+0x4ec>)
 8006250:	2201      	movs	r2, #1
 8006252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fb ff74 	bl	8002140 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800625c:	f7fb ff70 	bl	8002140 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e056      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626e:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d0f0      	beq.n	800625c <HAL_RCC_OscConfig+0x41c>
 800627a:	e04e      	b.n	800631a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800627c:	4b2b      	ldr	r3, [pc, #172]	; (800632c <HAL_RCC_OscConfig+0x4ec>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006282:	f7fb ff5d 	bl	8002140 <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628a:	f7fb ff59 	bl	8002140 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e03f      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629c:	4b22      	ldr	r3, [pc, #136]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f0      	bne.n	800628a <HAL_RCC_OscConfig+0x44a>
 80062a8:	e037      	b.n	800631a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e032      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062b6:	4b1c      	ldr	r3, [pc, #112]	; (8006328 <HAL_RCC_OscConfig+0x4e8>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d028      	beq.n	8006316 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d121      	bne.n	8006316 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062dc:	429a      	cmp	r2, r3
 80062de:	d11a      	bne.n	8006316 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062e6:	4013      	ands	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d111      	bne.n	8006316 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	085b      	lsrs	r3, r3, #1
 80062fe:	3b01      	subs	r3, #1
 8006300:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006302:	429a      	cmp	r2, r3
 8006304:	d107      	bne.n	8006316 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006312:	429a      	cmp	r2, r3
 8006314:	d001      	beq.n	800631a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40007000 	.word	0x40007000
 8006328:	40023800 	.word	0x40023800
 800632c:	42470060 	.word	0x42470060

08006330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e0cc      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006344:	4b68      	ldr	r3, [pc, #416]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d90c      	bls.n	800636c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b65      	ldr	r3, [pc, #404]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b63      	ldr	r3, [pc, #396]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e0b8      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0304 	and.w	r3, r3, #4
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006384:	4b59      	ldr	r3, [pc, #356]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4a58      	ldr	r2, [pc, #352]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800638e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800639c:	4b53      	ldr	r3, [pc, #332]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4a52      	ldr	r2, [pc, #328]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063a8:	4b50      	ldr	r3, [pc, #320]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	494d      	ldr	r1, [pc, #308]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d044      	beq.n	8006450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d107      	bne.n	80063de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	4b47      	ldr	r3, [pc, #284]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d119      	bne.n	800640e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e07f      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d003      	beq.n	80063ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d107      	bne.n	80063fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ee:	4b3f      	ldr	r3, [pc, #252]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e06f      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fe:	4b3b      	ldr	r3, [pc, #236]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e067      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800640e:	4b37      	ldr	r3, [pc, #220]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f023 0203 	bic.w	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	4934      	ldr	r1, [pc, #208]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	4313      	orrs	r3, r2
 800641e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006420:	f7fb fe8e 	bl	8002140 <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	e00a      	b.n	800643e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006428:	f7fb fe8a 	bl	8002140 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	; 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e04f      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 020c 	and.w	r2, r3, #12
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	429a      	cmp	r2, r3
 800644e:	d1eb      	bne.n	8006428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006450:	4b25      	ldr	r3, [pc, #148]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d20c      	bcs.n	8006478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800645e:	4b22      	ldr	r3, [pc, #136]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006466:	4b20      	ldr	r3, [pc, #128]	; (80064e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e032      	b.n	80064de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d008      	beq.n	8006496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	4916      	ldr	r1, [pc, #88]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	4313      	orrs	r3, r2
 8006494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064a2:	4b12      	ldr	r3, [pc, #72]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	490e      	ldr	r1, [pc, #56]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064b6:	f000 f821 	bl	80064fc <HAL_RCC_GetSysClockFreq>
 80064ba:	4602      	mov	r2, r0
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	490a      	ldr	r1, [pc, #40]	; (80064f0 <HAL_RCC_ClockConfig+0x1c0>)
 80064c8:	5ccb      	ldrb	r3, [r1, r3]
 80064ca:	fa22 f303 	lsr.w	r3, r2, r3
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <HAL_RCC_ClockConfig+0x1c4>)
 80064d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064d2:	4b09      	ldr	r3, [pc, #36]	; (80064f8 <HAL_RCC_ClockConfig+0x1c8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fb fdee 	bl	80020b8 <HAL_InitTick>

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40023c00 	.word	0x40023c00
 80064ec:	40023800 	.word	0x40023800
 80064f0:	08021b58 	.word	0x08021b58
 80064f4:	20000008 	.word	0x20000008
 80064f8:	2000000c 	.word	0x2000000c

080064fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	607b      	str	r3, [r7, #4]
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	2300      	movs	r3, #0
 800650e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006514:	4b67      	ldr	r3, [pc, #412]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 030c 	and.w	r3, r3, #12
 800651c:	2b08      	cmp	r3, #8
 800651e:	d00d      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0x40>
 8006520:	2b08      	cmp	r3, #8
 8006522:	f200 80bd 	bhi.w	80066a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_RCC_GetSysClockFreq+0x34>
 800652a:	2b04      	cmp	r3, #4
 800652c:	d003      	beq.n	8006536 <HAL_RCC_GetSysClockFreq+0x3a>
 800652e:	e0b7      	b.n	80066a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006530:	4b61      	ldr	r3, [pc, #388]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006532:	60bb      	str	r3, [r7, #8]
       break;
 8006534:	e0b7      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006536:	4b61      	ldr	r3, [pc, #388]	; (80066bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006538:	60bb      	str	r3, [r7, #8]
      break;
 800653a:	e0b4      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800653c:	4b5d      	ldr	r3, [pc, #372]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006544:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006546:	4b5b      	ldr	r3, [pc, #364]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d04d      	beq.n	80065ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006552:	4b58      	ldr	r3, [pc, #352]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	099b      	lsrs	r3, r3, #6
 8006558:	461a      	mov	r2, r3
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006562:	f04f 0100 	mov.w	r1, #0
 8006566:	ea02 0800 	and.w	r8, r2, r0
 800656a:	ea03 0901 	and.w	r9, r3, r1
 800656e:	4640      	mov	r0, r8
 8006570:	4649      	mov	r1, r9
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	014b      	lsls	r3, r1, #5
 800657c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006580:	0142      	lsls	r2, r0, #5
 8006582:	4610      	mov	r0, r2
 8006584:	4619      	mov	r1, r3
 8006586:	ebb0 0008 	subs.w	r0, r0, r8
 800658a:	eb61 0109 	sbc.w	r1, r1, r9
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	018b      	lsls	r3, r1, #6
 8006598:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800659c:	0182      	lsls	r2, r0, #6
 800659e:	1a12      	subs	r2, r2, r0
 80065a0:	eb63 0301 	sbc.w	r3, r3, r1
 80065a4:	f04f 0000 	mov.w	r0, #0
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	00d9      	lsls	r1, r3, #3
 80065ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065b2:	00d0      	lsls	r0, r2, #3
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	eb12 0208 	adds.w	r2, r2, r8
 80065bc:	eb43 0309 	adc.w	r3, r3, r9
 80065c0:	f04f 0000 	mov.w	r0, #0
 80065c4:	f04f 0100 	mov.w	r1, #0
 80065c8:	0259      	lsls	r1, r3, #9
 80065ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80065ce:	0250      	lsls	r0, r2, #9
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4610      	mov	r0, r2
 80065d6:	4619      	mov	r1, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	461a      	mov	r2, r3
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	f7fa fb62 	bl	8000ca8 <__aeabi_uldivmod>
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4613      	mov	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e04a      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ee:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	099b      	lsrs	r3, r3, #6
 80065f4:	461a      	mov	r2, r3
 80065f6:	f04f 0300 	mov.w	r3, #0
 80065fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065fe:	f04f 0100 	mov.w	r1, #0
 8006602:	ea02 0400 	and.w	r4, r2, r0
 8006606:	ea03 0501 	and.w	r5, r3, r1
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	014b      	lsls	r3, r1, #5
 8006618:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800661c:	0142      	lsls	r2, r0, #5
 800661e:	4610      	mov	r0, r2
 8006620:	4619      	mov	r1, r3
 8006622:	1b00      	subs	r0, r0, r4
 8006624:	eb61 0105 	sbc.w	r1, r1, r5
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	018b      	lsls	r3, r1, #6
 8006632:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006636:	0182      	lsls	r2, r0, #6
 8006638:	1a12      	subs	r2, r2, r0
 800663a:	eb63 0301 	sbc.w	r3, r3, r1
 800663e:	f04f 0000 	mov.w	r0, #0
 8006642:	f04f 0100 	mov.w	r1, #0
 8006646:	00d9      	lsls	r1, r3, #3
 8006648:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800664c:	00d0      	lsls	r0, r2, #3
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	1912      	adds	r2, r2, r4
 8006654:	eb45 0303 	adc.w	r3, r5, r3
 8006658:	f04f 0000 	mov.w	r0, #0
 800665c:	f04f 0100 	mov.w	r1, #0
 8006660:	0299      	lsls	r1, r3, #10
 8006662:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006666:	0290      	lsls	r0, r2, #10
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	461a      	mov	r2, r3
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	f7fa fb16 	bl	8000ca8 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4613      	mov	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006684:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	0c1b      	lsrs	r3, r3, #16
 800668a:	f003 0303 	and.w	r3, r3, #3
 800668e:	3301      	adds	r3, #1
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	60bb      	str	r3, [r7, #8]
      break;
 800669e:	e002      	b.n	80066a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066a2:	60bb      	str	r3, [r7, #8]
      break;
 80066a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066a6:	68bb      	ldr	r3, [r7, #8]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80066b2:	bf00      	nop
 80066b4:	40023800 	.word	0x40023800
 80066b8:	00f42400 	.word	0x00f42400
 80066bc:	007a1200 	.word	0x007a1200

080066c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066c4:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066c6:	681b      	ldr	r3, [r3, #0]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000008 	.word	0x20000008

080066d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066dc:	f7ff fff0 	bl	80066c0 <HAL_RCC_GetHCLKFreq>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	0a9b      	lsrs	r3, r3, #10
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	4903      	ldr	r1, [pc, #12]	; (80066fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ee:	5ccb      	ldrb	r3, [r1, r3]
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40023800 	.word	0x40023800
 80066fc:	08021b68 	.word	0x08021b68

08006700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006704:	f7ff ffdc 	bl	80066c0 <HAL_RCC_GetHCLKFreq>
 8006708:	4602      	mov	r2, r0
 800670a:	4b05      	ldr	r3, [pc, #20]	; (8006720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	0b5b      	lsrs	r3, r3, #13
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	4903      	ldr	r1, [pc, #12]	; (8006724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006716:	5ccb      	ldrb	r3, [r1, r3]
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40023800 	.word	0x40023800
 8006724:	08021b68 	.word	0x08021b68

08006728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e07b      	b.n	8006832 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	d108      	bne.n	8006754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800674a:	d009      	beq.n	8006760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	61da      	str	r2, [r3, #28]
 8006752:	e005      	b.n	8006760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fb f93e 	bl	80019fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d0:	431a      	orrs	r2, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e4:	ea42 0103 	orr.w	r1, r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	f003 0104 	and.w	r1, r3, #4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	f003 0210 	and.w	r2, r3, #16
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006820:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e041      	b.n	80068d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d106      	bne.n	8006866 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7fb f913 	bl	8001a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f000 fad9 	bl	8006e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e041      	b.n	800696e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d106      	bne.n	8006904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f839 	bl	8006976 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3304      	adds	r3, #4
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f000 fa8a 	bl	8006e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_TIM_PWM_Start+0x24>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	e022      	b.n	80069f6 <HAL_TIM_PWM_Start+0x6a>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d109      	bne.n	80069ca <HAL_TIM_PWM_Start+0x3e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	bf14      	ite	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	2300      	moveq	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	e015      	b.n	80069f6 <HAL_TIM_PWM_Start+0x6a>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d109      	bne.n	80069e4 <HAL_TIM_PWM_Start+0x58>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e008      	b.n	80069f6 <HAL_TIM_PWM_Start+0x6a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	bf14      	ite	ne
 80069f0:	2301      	movne	r3, #1
 80069f2:	2300      	moveq	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e07c      	b.n	8006af8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_PWM_Start+0x82>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a0c:	e013      	b.n	8006a36 <HAL_TIM_PWM_Start+0xaa>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_PWM_Start+0x92>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a1c:	e00b      	b.n	8006a36 <HAL_TIM_PWM_Start+0xaa>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0xa2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a2c:	e003      	b.n	8006a36 <HAL_TIM_PWM_Start+0xaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fce0 	bl	8007404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2d      	ldr	r2, [pc, #180]	; (8006b00 <HAL_TIM_PWM_Start+0x174>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIM_PWM_Start+0xcc>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <HAL_TIM_PWM_Start+0x178>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d101      	bne.n	8006a5c <HAL_TIM_PWM_Start+0xd0>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_PWM_Start+0xd2>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <HAL_TIM_PWM_Start+0x174>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d022      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a84:	d01d      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_TIM_PWM_Start+0x17c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d018      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <HAL_TIM_PWM_Start+0x180>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_TIM_PWM_Start+0x184>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIM_PWM_Start+0x178>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d009      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a18      	ldr	r2, [pc, #96]	; (8006b14 <HAL_TIM_PWM_Start+0x188>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <HAL_TIM_PWM_Start+0x18c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d111      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b06      	cmp	r3, #6
 8006ad2:	d010      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae4:	e007      	b.n	8006af6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40001800 	.word	0x40001800

08006b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e0ae      	b.n	8006c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b0c      	cmp	r3, #12
 8006b46:	f200 809f 	bhi.w	8006c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b85 	.word	0x08006b85
 8006b54:	08006c89 	.word	0x08006c89
 8006b58:	08006c89 	.word	0x08006c89
 8006b5c:	08006c89 	.word	0x08006c89
 8006b60:	08006bc5 	.word	0x08006bc5
 8006b64:	08006c89 	.word	0x08006c89
 8006b68:	08006c89 	.word	0x08006c89
 8006b6c:	08006c89 	.word	0x08006c89
 8006b70:	08006c07 	.word	0x08006c07
 8006b74:	08006c89 	.word	0x08006c89
 8006b78:	08006c89 	.word	0x08006c89
 8006b7c:	08006c89 	.word	0x08006c89
 8006b80:	08006c47 	.word	0x08006c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f9f0 	bl	8006f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0208 	orr.w	r2, r2, #8
 8006b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0204 	bic.w	r2, r2, #4
 8006bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6999      	ldr	r1, [r3, #24]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691a      	ldr	r2, [r3, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	619a      	str	r2, [r3, #24]
      break;
 8006bc2:	e064      	b.n	8006c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fa40 	bl	8007050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6999      	ldr	r1, [r3, #24]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	021a      	lsls	r2, r3, #8
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	619a      	str	r2, [r3, #24]
      break;
 8006c04:	e043      	b.n	8006c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fa95 	bl	800713c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0208 	orr.w	r2, r2, #8
 8006c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0204 	bic.w	r2, r2, #4
 8006c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69d9      	ldr	r1, [r3, #28]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	61da      	str	r2, [r3, #28]
      break;
 8006c44:	e023      	b.n	8006c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fae9 	bl	8007224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69d9      	ldr	r1, [r3, #28]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	021a      	lsls	r2, r3, #8
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	61da      	str	r2, [r3, #28]
      break;
 8006c86:	e002      	b.n	8006c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIM_ConfigClockSource+0x1c>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e0b4      	b.n	8006e26 <HAL_TIM_ConfigClockSource+0x186>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf4:	d03e      	beq.n	8006d74 <HAL_TIM_ConfigClockSource+0xd4>
 8006cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cfa:	f200 8087 	bhi.w	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d02:	f000 8086 	beq.w	8006e12 <HAL_TIM_ConfigClockSource+0x172>
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0a:	d87f      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006d0c:	2b70      	cmp	r3, #112	; 0x70
 8006d0e:	d01a      	beq.n	8006d46 <HAL_TIM_ConfigClockSource+0xa6>
 8006d10:	2b70      	cmp	r3, #112	; 0x70
 8006d12:	d87b      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b60      	cmp	r3, #96	; 0x60
 8006d16:	d050      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x11a>
 8006d18:	2b60      	cmp	r3, #96	; 0x60
 8006d1a:	d877      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b50      	cmp	r3, #80	; 0x50
 8006d1e:	d03c      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0xfa>
 8006d20:	2b50      	cmp	r3, #80	; 0x50
 8006d22:	d873      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d058      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x13a>
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d86f      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b30      	cmp	r3, #48	; 0x30
 8006d2e:	d064      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x15a>
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d86b      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	d060      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x15a>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d867      	bhi.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d05c      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x15a>
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d05a      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x15a>
 8006d44:	e062      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6818      	ldr	r0, [r3, #0]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	6899      	ldr	r1, [r3, #8]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f000 fb35 	bl	80073c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	609a      	str	r2, [r3, #8]
      break;
 8006d72:	e04f      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	6899      	ldr	r1, [r3, #8]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f000 fb1e 	bl	80073c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d96:	609a      	str	r2, [r3, #8]
      break;
 8006d98:	e03c      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f000 fa92 	bl	80072d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2150      	movs	r1, #80	; 0x50
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 faeb 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006db8:	e02c      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6859      	ldr	r1, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f000 fab1 	bl	800732e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2160      	movs	r1, #96	; 0x60
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fadb 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006dd8:	e01c      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6859      	ldr	r1, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f000 fa72 	bl	80072d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2140      	movs	r1, #64	; 0x40
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 facb 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006df8:	e00c      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f000 fac2 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006e0a:	e003      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e10:	e000      	b.n	8006e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a40      	ldr	r2, [pc, #256]	; (8006f44 <TIM_Base_SetConfig+0x114>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d013      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4e:	d00f      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a3d      	ldr	r2, [pc, #244]	; (8006f48 <TIM_Base_SetConfig+0x118>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00b      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a3c      	ldr	r2, [pc, #240]	; (8006f4c <TIM_Base_SetConfig+0x11c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d007      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a3b      	ldr	r2, [pc, #236]	; (8006f50 <TIM_Base_SetConfig+0x120>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a3a      	ldr	r2, [pc, #232]	; (8006f54 <TIM_Base_SetConfig+0x124>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d108      	bne.n	8006e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2f      	ldr	r2, [pc, #188]	; (8006f44 <TIM_Base_SetConfig+0x114>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d02b      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e90:	d027      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a2c      	ldr	r2, [pc, #176]	; (8006f48 <TIM_Base_SetConfig+0x118>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d023      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2b      	ldr	r2, [pc, #172]	; (8006f4c <TIM_Base_SetConfig+0x11c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01f      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2a      	ldr	r2, [pc, #168]	; (8006f50 <TIM_Base_SetConfig+0x120>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01b      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a29      	ldr	r2, [pc, #164]	; (8006f54 <TIM_Base_SetConfig+0x124>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d017      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a28      	ldr	r2, [pc, #160]	; (8006f58 <TIM_Base_SetConfig+0x128>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d013      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <TIM_Base_SetConfig+0x12c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00f      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a26      	ldr	r2, [pc, #152]	; (8006f60 <TIM_Base_SetConfig+0x130>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00b      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a25      	ldr	r2, [pc, #148]	; (8006f64 <TIM_Base_SetConfig+0x134>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d007      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a24      	ldr	r2, [pc, #144]	; (8006f68 <TIM_Base_SetConfig+0x138>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d003      	beq.n	8006ee2 <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a23      	ldr	r2, [pc, #140]	; (8006f6c <TIM_Base_SetConfig+0x13c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d108      	bne.n	8006ef4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a0a      	ldr	r2, [pc, #40]	; (8006f44 <TIM_Base_SetConfig+0x114>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_Base_SetConfig+0xf8>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a0c      	ldr	r2, [pc, #48]	; (8006f54 <TIM_Base_SetConfig+0x124>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d103      	bne.n	8006f30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	615a      	str	r2, [r3, #20]
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40010400 	.word	0x40010400
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400
 8006f60:	40014800 	.word	0x40014800
 8006f64:	40001800 	.word	0x40001800
 8006f68:	40001c00 	.word	0x40001c00
 8006f6c:	40002000 	.word	0x40002000

08006f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f023 0201 	bic.w	r2, r3, #1
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0303 	bic.w	r3, r3, #3
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 0302 	bic.w	r3, r3, #2
 8006fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a20      	ldr	r2, [pc, #128]	; (8007048 <TIM_OC1_SetConfig+0xd8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC1_SetConfig+0x64>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a1f      	ldr	r2, [pc, #124]	; (800704c <TIM_OC1_SetConfig+0xdc>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d10c      	bne.n	8006fee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0308 	bic.w	r3, r3, #8
 8006fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f023 0304 	bic.w	r3, r3, #4
 8006fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a15      	ldr	r2, [pc, #84]	; (8007048 <TIM_OC1_SetConfig+0xd8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d003      	beq.n	8006ffe <TIM_OC1_SetConfig+0x8e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a14      	ldr	r2, [pc, #80]	; (800704c <TIM_OC1_SetConfig+0xdc>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d111      	bne.n	8007022 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800700c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	4313      	orrs	r3, r2
 8007020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	621a      	str	r2, [r3, #32]
}
 800703c:	bf00      	nop
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400

08007050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f023 0210 	bic.w	r2, r3, #16
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	f023 0320 	bic.w	r3, r3, #32
 800709a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a22      	ldr	r2, [pc, #136]	; (8007134 <TIM_OC2_SetConfig+0xe4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_OC2_SetConfig+0x68>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a21      	ldr	r2, [pc, #132]	; (8007138 <TIM_OC2_SetConfig+0xe8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d10d      	bne.n	80070d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a17      	ldr	r2, [pc, #92]	; (8007134 <TIM_OC2_SetConfig+0xe4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC2_SetConfig+0x94>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a16      	ldr	r2, [pc, #88]	; (8007138 <TIM_OC2_SetConfig+0xe8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d113      	bne.n	800710c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	693a      	ldr	r2, [r7, #16]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40010000 	.word	0x40010000
 8007138:	40010400 	.word	0x40010400

0800713c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a21      	ldr	r2, [pc, #132]	; (800721c <TIM_OC3_SetConfig+0xe0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_OC3_SetConfig+0x66>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a20      	ldr	r2, [pc, #128]	; (8007220 <TIM_OC3_SetConfig+0xe4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d10d      	bne.n	80071be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <TIM_OC3_SetConfig+0xe0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d003      	beq.n	80071ce <TIM_OC3_SetConfig+0x92>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a15      	ldr	r2, [pc, #84]	; (8007220 <TIM_OC3_SetConfig+0xe4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d113      	bne.n	80071f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40010000 	.word	0x40010000
 8007220:	40010400 	.word	0x40010400

08007224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800726e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	031b      	lsls	r3, r3, #12
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a12      	ldr	r2, [pc, #72]	; (80072c8 <TIM_OC4_SetConfig+0xa4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC4_SetConfig+0x68>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a11      	ldr	r2, [pc, #68]	; (80072cc <TIM_OC4_SetConfig+0xa8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d109      	bne.n	80072a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	019b      	lsls	r3, r3, #6
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40010400 	.word	0x40010400

080072d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f023 0201 	bic.w	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f023 030a 	bic.w	r3, r3, #10
 800730c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4313      	orrs	r3, r2
 8007314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800732e:	b480      	push	{r7}
 8007330:	b087      	sub	sp, #28
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f023 0210 	bic.w	r2, r3, #16
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	031b      	lsls	r3, r3, #12
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800736a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f043 0307 	orr.w	r3, r3, #7
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	021a      	lsls	r2, r3, #8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	609a      	str	r2, [r3, #8]
}
 80073f8:	bf00      	nop
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	2201      	movs	r2, #1
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1a      	ldr	r2, [r3, #32]
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	43db      	mvns	r3, r3
 8007426:	401a      	ands	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6a1a      	ldr	r2, [r3, #32]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	fa01 f303 	lsl.w	r3, r1, r3
 800743c:	431a      	orrs	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
	...

08007450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007464:	2302      	movs	r3, #2
 8007466:	e05a      	b.n	800751e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a21      	ldr	r2, [pc, #132]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b4:	d01d      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1d      	ldr	r2, [pc, #116]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1b      	ldr	r2, [pc, #108]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a18      	ldr	r2, [pc, #96]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a17      	ldr	r2, [pc, #92]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a15      	ldr	r2, [pc, #84]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d10c      	bne.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4313      	orrs	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40010000 	.word	0x40010000
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40010400 	.word	0x40010400
 8007540:	40014000 	.word	0x40014000
 8007544:	40001800 	.word	0x40001800

08007548 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007560:	2302      	movs	r3, #2
 8007562:	e03d      	b.n	80075e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e03f      	b.n	800767e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fa fb2e 	bl	8001c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2224      	movs	r2, #36	; 0x24
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800762e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fc67 	bl	8007f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b0ba      	sub	sp, #232	; 0xe8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80076c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0320 	and.w	r3, r3, #32
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <HAL_UART_IRQHandler+0x66>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb51 	bl	8007d8e <UART_Receive_IT>
      return;
 80076ec:	e256      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80de 	beq.w	80078b4 <HAL_UART_IRQHandler+0x22c>
 80076f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007708:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80d1 	beq.w	80078b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00b      	beq.n	8007736 <HAL_UART_IRQHandler+0xae>
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00b      	beq.n	800775a <HAL_UART_IRQHandler+0xd2>
 8007742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007752:	f043 0202 	orr.w	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <HAL_UART_IRQHandler+0xf6>
 8007766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f043 0204 	orr.w	r2, r3, #4
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d011      	beq.n	80077ae <HAL_UART_IRQHandler+0x126>
 800778a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800778e:	f003 0320 	and.w	r3, r3, #32
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d005      	beq.n	80077ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	f043 0208 	orr.w	r2, r3, #8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 81ed 	beq.w	8007b92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077bc:	f003 0320 	and.w	r3, r3, #32
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <HAL_UART_IRQHandler+0x14e>
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fadc 	bl	8007d8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	bf0c      	ite	eq
 80077e4:	2301      	moveq	r3, #1
 80077e6:	2300      	movne	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <HAL_UART_IRQHandler+0x17a>
 80077fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d04f      	beq.n	80078a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f9e4 	bl	8007bd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b40      	cmp	r3, #64	; 0x40
 8007814:	d141      	bne.n	800789a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3314      	adds	r3, #20
 800781c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800782c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007842:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800784e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800785a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1d9      	bne.n	8007816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	2b00      	cmp	r3, #0
 8007868:	d013      	beq.n	8007892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786e:	4a7d      	ldr	r2, [pc, #500]	; (8007a64 <HAL_UART_IRQHandler+0x3dc>)
 8007870:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	4618      	mov	r0, r3
 8007878:	f7fa fe13 	bl	80024a2 <HAL_DMA_Abort_IT>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d016      	beq.n	80078b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	e00e      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f986 	bl	8007ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007898:	e00a      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f982 	bl	8007ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a0:	e006      	b.n	80078b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f97e 	bl	8007ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078ae:	e170      	b.n	8007b92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	bf00      	nop
    return;
 80078b2:	e16e      	b.n	8007b92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	f040 814a 	bne.w	8007b52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8143 	beq.w	8007b52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 813c 	beq.w	8007b52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60bb      	str	r3, [r7, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	f040 80b4 	bne.w	8007a68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800790c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 8140 	beq.w	8007b96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800791a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800791e:	429a      	cmp	r2, r3
 8007920:	f080 8139 	bcs.w	8007b96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800792a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007936:	f000 8088 	beq.w	8007a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	330c      	adds	r3, #12
 8007940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007958:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	330c      	adds	r3, #12
 8007962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007966:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800796a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007972:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800797e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1d9      	bne.n	800793a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3314      	adds	r3, #20
 800798c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3314      	adds	r3, #20
 80079a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e1      	bne.n	8007986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3314      	adds	r3, #20
 80079c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3314      	adds	r3, #20
 80079e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e3      	bne.n	80079c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e3      	bne.n	8007a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fa fcbc 	bl	80023c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f8ac 	bl	8007bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a60:	e099      	b.n	8007b96 <HAL_UART_IRQHandler+0x50e>
 8007a62:	bf00      	nop
 8007a64:	08007c97 	.word	0x08007c97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 808b 	beq.w	8007b9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8086 	beq.w	8007b9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ab2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aba:	e841 2300 	strex	r3, r2, [r1]
 8007abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1e3      	bne.n	8007a8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3314      	adds	r3, #20
 8007acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3314      	adds	r3, #20
 8007ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aea:	633a      	str	r2, [r7, #48]	; 0x30
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e3      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0310 	bic.w	r3, r3, #16
 8007b22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	330c      	adds	r3, #12
 8007b2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b30:	61fa      	str	r2, [r7, #28]
 8007b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	69b9      	ldr	r1, [r7, #24]
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e3      	bne.n	8007b0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f834 	bl	8007bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b50:	e023      	b.n	8007b9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <HAL_UART_IRQHandler+0x4ea>
 8007b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f8a7 	bl	8007cbe <UART_Transmit_IT>
    return;
 8007b70:	e014      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <HAL_UART_IRQHandler+0x514>
 8007b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f8e7 	bl	8007d5e <UART_EndTransmit_IT>
    return;
 8007b90:	e004      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
    return;
 8007b92:	bf00      	nop
 8007b94:	e002      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
      return;
 8007b96:	bf00      	nop
 8007b98:	e000      	b.n	8007b9c <HAL_UART_IRQHandler+0x514>
      return;
 8007b9a:	bf00      	nop
  }
}
 8007b9c:	37e8      	adds	r7, #232	; 0xe8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b095      	sub	sp, #84	; 0x54
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	330c      	adds	r3, #12
 8007bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bf8:	643a      	str	r2, [r7, #64]	; 0x40
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e5      	bne.n	8007bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3314      	adds	r3, #20
 8007c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3314      	adds	r3, #20
 8007c2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e5      	bne.n	8007c0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d119      	bne.n	8007c7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	330c      	adds	r3, #12
 8007c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f023 0310 	bic.w	r3, r3, #16
 8007c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c68:	61ba      	str	r2, [r7, #24]
 8007c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6979      	ldr	r1, [r7, #20]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	613b      	str	r3, [r7, #16]
   return(result);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e5      	bne.n	8007c48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c8a:	bf00      	nop
 8007c8c:	3754      	adds	r7, #84	; 0x54
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff ff77 	bl	8007ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cb6:	bf00      	nop
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b085      	sub	sp, #20
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b21      	cmp	r3, #33	; 0x21
 8007cd0:	d13e      	bne.n	8007d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cda:	d114      	bne.n	8007d06 <UART_Transmit_IT+0x48>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d110      	bne.n	8007d06 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	1c9a      	adds	r2, r3, #2
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	621a      	str	r2, [r3, #32]
 8007d04:	e008      	b.n	8007d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	1c59      	adds	r1, r3, #1
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6211      	str	r1, [r2, #32]
 8007d10:	781a      	ldrb	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	4619      	mov	r1, r3
 8007d26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10f      	bne.n	8007d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e000      	b.n	8007d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d50:	2302      	movs	r3, #2
  }
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f002 fab0 	bl	800a2e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b08c      	sub	sp, #48	; 0x30
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b22      	cmp	r3, #34	; 0x22
 8007da0:	f040 80ab 	bne.w	8007efa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dac:	d117      	bne.n	8007dde <UART_Receive_IT+0x50>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d113      	bne.n	8007dde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd6:	1c9a      	adds	r2, r3, #2
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	629a      	str	r2, [r3, #40]	; 0x28
 8007ddc:	e026      	b.n	8007e2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df0:	d007      	beq.n	8007e02 <UART_Receive_IT+0x74>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10a      	bne.n	8007e10 <UART_Receive_IT+0x82>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e008      	b.n	8007e22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d15a      	bne.n	8007ef6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0220 	bic.w	r2, r2, #32
 8007e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695a      	ldr	r2, [r3, #20]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d135      	bne.n	8007eec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	613b      	str	r3, [r7, #16]
   return(result);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f023 0310 	bic.w	r3, r3, #16
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea6:	623a      	str	r2, [r7, #32]
 8007ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	69f9      	ldr	r1, [r7, #28]
 8007eac:	6a3a      	ldr	r2, [r7, #32]
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e5      	bne.n	8007e86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0310 	and.w	r3, r3, #16
 8007ec4:	2b10      	cmp	r3, #16
 8007ec6:	d10a      	bne.n	8007ede <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	60fb      	str	r3, [r7, #12]
 8007edc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff fe67 	bl	8007bb8 <HAL_UARTEx_RxEventCallback>
 8007eea:	e002      	b.n	8007ef2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f002 f987 	bl	800a200 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e002      	b.n	8007efc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	e000      	b.n	8007efc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007efa:	2302      	movs	r3, #2
  }
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3730      	adds	r7, #48	; 0x30
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	b09f      	sub	sp, #124	; 0x7c
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1a:	68d9      	ldr	r1, [r3, #12]
 8007f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	ea40 0301 	orr.w	r3, r0, r1
 8007f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f28:	689a      	ldr	r2, [r3, #8]
 8007f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	431a      	orrs	r2, r3
 8007f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007f48:	f021 010c 	bic.w	r1, r1, #12
 8007f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f52:	430b      	orrs	r3, r1
 8007f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f62:	6999      	ldr	r1, [r3, #24]
 8007f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	ea40 0301 	orr.w	r3, r0, r1
 8007f6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	4bc5      	ldr	r3, [pc, #788]	; (8008288 <UART_SetConfig+0x384>)
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d004      	beq.n	8007f82 <UART_SetConfig+0x7e>
 8007f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	4bc3      	ldr	r3, [pc, #780]	; (800828c <UART_SetConfig+0x388>)
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d103      	bne.n	8007f8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f82:	f7fe fbbd 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
 8007f86:	6778      	str	r0, [r7, #116]	; 0x74
 8007f88:	e002      	b.n	8007f90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f8a:	f7fe fba5 	bl	80066d8 <HAL_RCC_GetPCLK1Freq>
 8007f8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f98:	f040 80b6 	bne.w	8008108 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f9e:	461c      	mov	r4, r3
 8007fa0:	f04f 0500 	mov.w	r5, #0
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	1891      	adds	r1, r2, r2
 8007faa:	6439      	str	r1, [r7, #64]	; 0x40
 8007fac:	415b      	adcs	r3, r3
 8007fae:	647b      	str	r3, [r7, #68]	; 0x44
 8007fb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007fb4:	1912      	adds	r2, r2, r4
 8007fb6:	eb45 0303 	adc.w	r3, r5, r3
 8007fba:	f04f 0000 	mov.w	r0, #0
 8007fbe:	f04f 0100 	mov.w	r1, #0
 8007fc2:	00d9      	lsls	r1, r3, #3
 8007fc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fc8:	00d0      	lsls	r0, r2, #3
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	1911      	adds	r1, r2, r4
 8007fd0:	6639      	str	r1, [r7, #96]	; 0x60
 8007fd2:	416b      	adcs	r3, r5
 8007fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8007fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	1891      	adds	r1, r2, r2
 8007fe2:	63b9      	str	r1, [r7, #56]	; 0x38
 8007fe4:	415b      	adcs	r3, r3
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007fec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007ff0:	f7f8 fe5a 	bl	8000ca8 <__aeabi_uldivmod>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	4ba5      	ldr	r3, [pc, #660]	; (8008290 <UART_SetConfig+0x38c>)
 8007ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8007ffe:	095b      	lsrs	r3, r3, #5
 8008000:	011e      	lsls	r6, r3, #4
 8008002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008004:	461c      	mov	r4, r3
 8008006:	f04f 0500 	mov.w	r5, #0
 800800a:	4622      	mov	r2, r4
 800800c:	462b      	mov	r3, r5
 800800e:	1891      	adds	r1, r2, r2
 8008010:	6339      	str	r1, [r7, #48]	; 0x30
 8008012:	415b      	adcs	r3, r3
 8008014:	637b      	str	r3, [r7, #52]	; 0x34
 8008016:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800801a:	1912      	adds	r2, r2, r4
 800801c:	eb45 0303 	adc.w	r3, r5, r3
 8008020:	f04f 0000 	mov.w	r0, #0
 8008024:	f04f 0100 	mov.w	r1, #0
 8008028:	00d9      	lsls	r1, r3, #3
 800802a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800802e:	00d0      	lsls	r0, r2, #3
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	1911      	adds	r1, r2, r4
 8008036:	65b9      	str	r1, [r7, #88]	; 0x58
 8008038:	416b      	adcs	r3, r5
 800803a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800803c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	461a      	mov	r2, r3
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	1891      	adds	r1, r2, r2
 8008048:	62b9      	str	r1, [r7, #40]	; 0x28
 800804a:	415b      	adcs	r3, r3
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800804e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008052:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008056:	f7f8 fe27 	bl	8000ca8 <__aeabi_uldivmod>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4b8c      	ldr	r3, [pc, #560]	; (8008290 <UART_SetConfig+0x38c>)
 8008060:	fba3 1302 	umull	r1, r3, r3, r2
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	2164      	movs	r1, #100	; 0x64
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	3332      	adds	r3, #50	; 0x32
 8008072:	4a87      	ldr	r2, [pc, #540]	; (8008290 <UART_SetConfig+0x38c>)
 8008074:	fba2 2303 	umull	r2, r3, r2, r3
 8008078:	095b      	lsrs	r3, r3, #5
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008080:	441e      	add	r6, r3
 8008082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008084:	4618      	mov	r0, r3
 8008086:	f04f 0100 	mov.w	r1, #0
 800808a:	4602      	mov	r2, r0
 800808c:	460b      	mov	r3, r1
 800808e:	1894      	adds	r4, r2, r2
 8008090:	623c      	str	r4, [r7, #32]
 8008092:	415b      	adcs	r3, r3
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
 8008096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800809a:	1812      	adds	r2, r2, r0
 800809c:	eb41 0303 	adc.w	r3, r1, r3
 80080a0:	f04f 0400 	mov.w	r4, #0
 80080a4:	f04f 0500 	mov.w	r5, #0
 80080a8:	00dd      	lsls	r5, r3, #3
 80080aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080ae:	00d4      	lsls	r4, r2, #3
 80080b0:	4622      	mov	r2, r4
 80080b2:	462b      	mov	r3, r5
 80080b4:	1814      	adds	r4, r2, r0
 80080b6:	653c      	str	r4, [r7, #80]	; 0x50
 80080b8:	414b      	adcs	r3, r1
 80080ba:	657b      	str	r3, [r7, #84]	; 0x54
 80080bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	461a      	mov	r2, r3
 80080c2:	f04f 0300 	mov.w	r3, #0
 80080c6:	1891      	adds	r1, r2, r2
 80080c8:	61b9      	str	r1, [r7, #24]
 80080ca:	415b      	adcs	r3, r3
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80080d6:	f7f8 fde7 	bl	8000ca8 <__aeabi_uldivmod>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	4b6c      	ldr	r3, [pc, #432]	; (8008290 <UART_SetConfig+0x38c>)
 80080e0:	fba3 1302 	umull	r1, r3, r3, r2
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	2164      	movs	r1, #100	; 0x64
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	3332      	adds	r3, #50	; 0x32
 80080f2:	4a67      	ldr	r2, [pc, #412]	; (8008290 <UART_SetConfig+0x38c>)
 80080f4:	fba2 2303 	umull	r2, r3, r2, r3
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	f003 0207 	and.w	r2, r3, #7
 80080fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4432      	add	r2, r6
 8008104:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008106:	e0b9      	b.n	800827c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800810a:	461c      	mov	r4, r3
 800810c:	f04f 0500 	mov.w	r5, #0
 8008110:	4622      	mov	r2, r4
 8008112:	462b      	mov	r3, r5
 8008114:	1891      	adds	r1, r2, r2
 8008116:	6139      	str	r1, [r7, #16]
 8008118:	415b      	adcs	r3, r3
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008120:	1912      	adds	r2, r2, r4
 8008122:	eb45 0303 	adc.w	r3, r5, r3
 8008126:	f04f 0000 	mov.w	r0, #0
 800812a:	f04f 0100 	mov.w	r1, #0
 800812e:	00d9      	lsls	r1, r3, #3
 8008130:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008134:	00d0      	lsls	r0, r2, #3
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	eb12 0804 	adds.w	r8, r2, r4
 800813e:	eb43 0905 	adc.w	r9, r3, r5
 8008142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	4618      	mov	r0, r3
 8008148:	f04f 0100 	mov.w	r1, #0
 800814c:	f04f 0200 	mov.w	r2, #0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	008b      	lsls	r3, r1, #2
 8008156:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800815a:	0082      	lsls	r2, r0, #2
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fda2 	bl	8000ca8 <__aeabi_uldivmod>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4b49      	ldr	r3, [pc, #292]	; (8008290 <UART_SetConfig+0x38c>)
 800816a:	fba3 2302 	umull	r2, r3, r3, r2
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	011e      	lsls	r6, r3, #4
 8008172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008174:	4618      	mov	r0, r3
 8008176:	f04f 0100 	mov.w	r1, #0
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	1894      	adds	r4, r2, r2
 8008180:	60bc      	str	r4, [r7, #8]
 8008182:	415b      	adcs	r3, r3
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800818a:	1812      	adds	r2, r2, r0
 800818c:	eb41 0303 	adc.w	r3, r1, r3
 8008190:	f04f 0400 	mov.w	r4, #0
 8008194:	f04f 0500 	mov.w	r5, #0
 8008198:	00dd      	lsls	r5, r3, #3
 800819a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800819e:	00d4      	lsls	r4, r2, #3
 80081a0:	4622      	mov	r2, r4
 80081a2:	462b      	mov	r3, r5
 80081a4:	1814      	adds	r4, r2, r0
 80081a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80081a8:	414b      	adcs	r3, r1
 80081aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f04f 0100 	mov.w	r1, #0
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	008b      	lsls	r3, r1, #2
 80081c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081c4:	0082      	lsls	r2, r0, #2
 80081c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80081ca:	f7f8 fd6d 	bl	8000ca8 <__aeabi_uldivmod>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4b2f      	ldr	r3, [pc, #188]	; (8008290 <UART_SetConfig+0x38c>)
 80081d4:	fba3 1302 	umull	r1, r3, r3, r2
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	2164      	movs	r1, #100	; 0x64
 80081dc:	fb01 f303 	mul.w	r3, r1, r3
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	3332      	adds	r3, #50	; 0x32
 80081e6:	4a2a      	ldr	r2, [pc, #168]	; (8008290 <UART_SetConfig+0x38c>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081f2:	441e      	add	r6, r3
 80081f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f6:	4618      	mov	r0, r3
 80081f8:	f04f 0100 	mov.w	r1, #0
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	1894      	adds	r4, r2, r2
 8008202:	603c      	str	r4, [r7, #0]
 8008204:	415b      	adcs	r3, r3
 8008206:	607b      	str	r3, [r7, #4]
 8008208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800820c:	1812      	adds	r2, r2, r0
 800820e:	eb41 0303 	adc.w	r3, r1, r3
 8008212:	f04f 0400 	mov.w	r4, #0
 8008216:	f04f 0500 	mov.w	r5, #0
 800821a:	00dd      	lsls	r5, r3, #3
 800821c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008220:	00d4      	lsls	r4, r2, #3
 8008222:	4622      	mov	r2, r4
 8008224:	462b      	mov	r3, r5
 8008226:	eb12 0a00 	adds.w	sl, r2, r0
 800822a:	eb43 0b01 	adc.w	fp, r3, r1
 800822e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	4618      	mov	r0, r3
 8008234:	f04f 0100 	mov.w	r1, #0
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	008b      	lsls	r3, r1, #2
 8008242:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008246:	0082      	lsls	r2, r0, #2
 8008248:	4650      	mov	r0, sl
 800824a:	4659      	mov	r1, fp
 800824c:	f7f8 fd2c 	bl	8000ca8 <__aeabi_uldivmod>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <UART_SetConfig+0x38c>)
 8008256:	fba3 1302 	umull	r1, r3, r3, r2
 800825a:	095b      	lsrs	r3, r3, #5
 800825c:	2164      	movs	r1, #100	; 0x64
 800825e:	fb01 f303 	mul.w	r3, r1, r3
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	011b      	lsls	r3, r3, #4
 8008266:	3332      	adds	r3, #50	; 0x32
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <UART_SetConfig+0x38c>)
 800826a:	fba2 2303 	umull	r2, r3, r2, r3
 800826e:	095b      	lsrs	r3, r3, #5
 8008270:	f003 020f 	and.w	r2, r3, #15
 8008274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4432      	add	r2, r6
 800827a:	609a      	str	r2, [r3, #8]
}
 800827c:	bf00      	nop
 800827e:	377c      	adds	r7, #124	; 0x7c
 8008280:	46bd      	mov	sp, r7
 8008282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008286:	bf00      	nop
 8008288:	40011000 	.word	0x40011000
 800828c:	40011400 	.word	0x40011400
 8008290:	51eb851f 	.word	0x51eb851f

08008294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008294:	b084      	sub	sp, #16
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	f107 001c 	add.w	r0, r7, #28
 80082a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d122      	bne.n	80082f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80082c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d105      	bne.n	80082e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 fb1c 	bl	8009924 <USB_CoreReset>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
 80082f0:	e01a      	b.n	8008328 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fb10 	bl	8009924 <USB_CoreReset>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	639a      	str	r2, [r3, #56]	; 0x38
 800831a:	e005      	b.n	8008328 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10b      	bne.n	8008346 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f043 0206 	orr.w	r2, r3, #6
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f043 0220 	orr.w	r2, r3, #32
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008346:	7bfb      	ldrb	r3, [r7, #15]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008352:	b004      	add	sp, #16
 8008354:	4770      	bx	lr
	...

08008358 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d165      	bne.n	8008438 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4a41      	ldr	r2, [pc, #260]	; (8008474 <USB_SetTurnaroundTime+0x11c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d906      	bls.n	8008382 <USB_SetTurnaroundTime+0x2a>
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a40      	ldr	r2, [pc, #256]	; (8008478 <USB_SetTurnaroundTime+0x120>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d202      	bcs.n	8008382 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800837c:	230f      	movs	r3, #15
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e062      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	4a3c      	ldr	r2, [pc, #240]	; (8008478 <USB_SetTurnaroundTime+0x120>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d306      	bcc.n	8008398 <USB_SetTurnaroundTime+0x40>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4a3b      	ldr	r2, [pc, #236]	; (800847c <USB_SetTurnaroundTime+0x124>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d202      	bcs.n	8008398 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008392:	230e      	movs	r3, #14
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	e057      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4a38      	ldr	r2, [pc, #224]	; (800847c <USB_SetTurnaroundTime+0x124>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d306      	bcc.n	80083ae <USB_SetTurnaroundTime+0x56>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4a37      	ldr	r2, [pc, #220]	; (8008480 <USB_SetTurnaroundTime+0x128>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d202      	bcs.n	80083ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083a8:	230d      	movs	r3, #13
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	e04c      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4a33      	ldr	r2, [pc, #204]	; (8008480 <USB_SetTurnaroundTime+0x128>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d306      	bcc.n	80083c4 <USB_SetTurnaroundTime+0x6c>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4a32      	ldr	r2, [pc, #200]	; (8008484 <USB_SetTurnaroundTime+0x12c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d802      	bhi.n	80083c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083be:	230c      	movs	r3, #12
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e041      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4a2f      	ldr	r2, [pc, #188]	; (8008484 <USB_SetTurnaroundTime+0x12c>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d906      	bls.n	80083da <USB_SetTurnaroundTime+0x82>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4a2e      	ldr	r2, [pc, #184]	; (8008488 <USB_SetTurnaroundTime+0x130>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d802      	bhi.n	80083da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083d4:	230b      	movs	r3, #11
 80083d6:	617b      	str	r3, [r7, #20]
 80083d8:	e036      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	4a2a      	ldr	r2, [pc, #168]	; (8008488 <USB_SetTurnaroundTime+0x130>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d906      	bls.n	80083f0 <USB_SetTurnaroundTime+0x98>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4a29      	ldr	r2, [pc, #164]	; (800848c <USB_SetTurnaroundTime+0x134>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d802      	bhi.n	80083f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083ea:	230a      	movs	r3, #10
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e02b      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4a26      	ldr	r2, [pc, #152]	; (800848c <USB_SetTurnaroundTime+0x134>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d906      	bls.n	8008406 <USB_SetTurnaroundTime+0xae>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4a25      	ldr	r2, [pc, #148]	; (8008490 <USB_SetTurnaroundTime+0x138>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d202      	bcs.n	8008406 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008400:	2309      	movs	r3, #9
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e020      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4a21      	ldr	r2, [pc, #132]	; (8008490 <USB_SetTurnaroundTime+0x138>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d306      	bcc.n	800841c <USB_SetTurnaroundTime+0xc4>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4a20      	ldr	r2, [pc, #128]	; (8008494 <USB_SetTurnaroundTime+0x13c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d802      	bhi.n	800841c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008416:	2308      	movs	r3, #8
 8008418:	617b      	str	r3, [r7, #20]
 800841a:	e015      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4a1d      	ldr	r2, [pc, #116]	; (8008494 <USB_SetTurnaroundTime+0x13c>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d906      	bls.n	8008432 <USB_SetTurnaroundTime+0xda>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4a1c      	ldr	r2, [pc, #112]	; (8008498 <USB_SetTurnaroundTime+0x140>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d202      	bcs.n	8008432 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800842c:	2307      	movs	r3, #7
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e00a      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008432:	2306      	movs	r3, #6
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	e007      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d102      	bne.n	8008444 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800843e:	2309      	movs	r3, #9
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	e001      	b.n	8008448 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008444:	2309      	movs	r3, #9
 8008446:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	029b      	lsls	r3, r3, #10
 800845c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008460:	431a      	orrs	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	00d8acbf 	.word	0x00d8acbf
 8008478:	00e4e1c0 	.word	0x00e4e1c0
 800847c:	00f42400 	.word	0x00f42400
 8008480:	01067380 	.word	0x01067380
 8008484:	011a499f 	.word	0x011a499f
 8008488:	01312cff 	.word	0x01312cff
 800848c:	014ca43f 	.word	0x014ca43f
 8008490:	016e3600 	.word	0x016e3600
 8008494:	01a6ab1f 	.word	0x01a6ab1f
 8008498:	01e84800 	.word	0x01e84800

0800849c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f043 0201 	orr.w	r2, r3, #1
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d115      	bne.n	800852e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800850e:	2001      	movs	r0, #1
 8008510:	f7f9 fe22 	bl	8002158 <HAL_Delay>
      ms++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 f972 	bl	8009804 <USB_GetMode>
 8008520:	4603      	mov	r3, r0
 8008522:	2b01      	cmp	r3, #1
 8008524:	d01e      	beq.n	8008564 <USB_SetCurrentMode+0x84>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b31      	cmp	r3, #49	; 0x31
 800852a:	d9f0      	bls.n	800850e <USB_SetCurrentMode+0x2e>
 800852c:	e01a      	b.n	8008564 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d115      	bne.n	8008560 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008540:	2001      	movs	r0, #1
 8008542:	f7f9 fe09 	bl	8002158 <HAL_Delay>
      ms++;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3301      	adds	r3, #1
 800854a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 f959 	bl	8009804 <USB_GetMode>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d005      	beq.n	8008564 <USB_SetCurrentMode+0x84>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b31      	cmp	r3, #49	; 0x31
 800855c:	d9f0      	bls.n	8008540 <USB_SetCurrentMode+0x60>
 800855e:	e001      	b.n	8008564 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e005      	b.n	8008570 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b32      	cmp	r3, #50	; 0x32
 8008568:	d101      	bne.n	800856e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008578:	b084      	sub	sp, #16
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008592:	2300      	movs	r3, #0
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	e009      	b.n	80085ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3340      	adds	r3, #64	; 0x40
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	2200      	movs	r2, #0
 80085a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b0e      	cmp	r3, #14
 80085b0:	d9f2      	bls.n	8008598 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d11c      	bne.n	80085f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c6:	f043 0302 	orr.w	r3, r3, #2
 80085ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
 80085f0:	e00b      	b.n	800860a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008610:	461a      	mov	r2, r3
 8008612:	2300      	movs	r3, #0
 8008614:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861c:	4619      	mov	r1, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008624:	461a      	mov	r2, r3
 8008626:	680b      	ldr	r3, [r1, #0]
 8008628:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	2b01      	cmp	r3, #1
 800862e:	d10c      	bne.n	800864a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d104      	bne.n	8008640 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008636:	2100      	movs	r1, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f945 	bl	80088c8 <USB_SetDevSpeed>
 800863e:	e008      	b.n	8008652 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008640:	2101      	movs	r1, #1
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f940 	bl	80088c8 <USB_SetDevSpeed>
 8008648:	e003      	b.n	8008652 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800864a:	2103      	movs	r1, #3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f93b 	bl	80088c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008652:	2110      	movs	r1, #16
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8f3 	bl	8008840 <USB_FlushTxFifo>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f90f 	bl	8008888 <USB_FlushRxFifo>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867a:	461a      	mov	r2, r3
 800867c:	2300      	movs	r3, #0
 800867e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008686:	461a      	mov	r2, r3
 8008688:	2300      	movs	r3, #0
 800868a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008692:	461a      	mov	r2, r3
 8008694:	2300      	movs	r3, #0
 8008696:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008698:	2300      	movs	r3, #0
 800869a:	613b      	str	r3, [r7, #16]
 800869c:	e043      	b.n	8008726 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b4:	d118      	bne.n	80086e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c8:	461a      	mov	r2, r3
 80086ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	e013      	b.n	80086fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	015a      	lsls	r2, r3, #5
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086de:	461a      	mov	r2, r3
 80086e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	e008      	b.n	80086fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f4:	461a      	mov	r2, r3
 80086f6:	2300      	movs	r3, #0
 80086f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008706:	461a      	mov	r2, r3
 8008708:	2300      	movs	r3, #0
 800870a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008718:	461a      	mov	r2, r3
 800871a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800871e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	3301      	adds	r3, #1
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	429a      	cmp	r2, r3
 800872c:	d3b7      	bcc.n	800869e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800872e:	2300      	movs	r3, #0
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	e043      	b.n	80087bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800874a:	d118      	bne.n	800877e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	4413      	add	r3, r2
 800875a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875e:	461a      	mov	r2, r3
 8008760:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	e013      	b.n	8008790 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008774:	461a      	mov	r2, r3
 8008776:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	e008      	b.n	8008790 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4413      	add	r3, r2
 8008786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878a:	461a      	mov	r2, r3
 800878c:	2300      	movs	r3, #0
 800878e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879c:	461a      	mov	r2, r3
 800879e:	2300      	movs	r3, #0
 80087a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ae:	461a      	mov	r2, r3
 80087b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80087b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	3301      	adds	r3, #1
 80087ba:	613b      	str	r3, [r7, #16]
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d3b7      	bcc.n	8008734 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d105      	bne.n	80087f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f043 0210 	orr.w	r2, r3, #16
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	4b0f      	ldr	r3, [pc, #60]	; (800883c <USB_DevInit+0x2c4>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008806:	2b00      	cmp	r3, #0
 8008808:	d005      	beq.n	8008816 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f043 0208 	orr.w	r2, r3, #8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008818:	2b01      	cmp	r3, #1
 800881a:	d107      	bne.n	800882c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008824:	f043 0304 	orr.w	r3, r3, #4
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800882c:	7dfb      	ldrb	r3, [r7, #23]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3718      	adds	r7, #24
 8008832:	46bd      	mov	sp, r7
 8008834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008838:	b004      	add	sp, #16
 800883a:	4770      	bx	lr
 800883c:	803c3800 	.word	0x803c3800

08008840 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	019b      	lsls	r3, r3, #6
 8008852:	f043 0220 	orr.w	r2, r3, #32
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	4a08      	ldr	r2, [pc, #32]	; (8008884 <USB_FlushTxFifo+0x44>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d901      	bls.n	800886a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e006      	b.n	8008878 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b20      	cmp	r3, #32
 8008874:	d0f1      	beq.n	800885a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	00030d40 	.word	0x00030d40

08008888 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2210      	movs	r2, #16
 8008898:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3301      	adds	r3, #1
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	4a08      	ldr	r2, [pc, #32]	; (80088c4 <USB_FlushRxFifo+0x3c>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d901      	bls.n	80088aa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e006      	b.n	80088b8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b10      	cmp	r3, #16
 80088b4:	d0f1      	beq.n	800889a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	00030d40 	.word	0x00030d40

080088c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	68f9      	ldr	r1, [r7, #12]
 80088e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e8:	4313      	orrs	r3, r2
 80088ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b087      	sub	sp, #28
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0306 	and.w	r3, r3, #6
 8008912:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d102      	bne.n	8008920 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]
 800891e:	e00a      	b.n	8008936 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d002      	beq.n	800892c <USB_GetDevSpeed+0x32>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b06      	cmp	r3, #6
 800892a:	d102      	bne.n	8008932 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800892c:	2302      	movs	r3, #2
 800892e:	75fb      	strb	r3, [r7, #23]
 8008930:	e001      	b.n	8008936 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008932:	230f      	movs	r3, #15
 8008934:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
}
 8008938:	4618      	mov	r0, r3
 800893a:	371c      	adds	r7, #28
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	785b      	ldrb	r3, [r3, #1]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d13a      	bne.n	80089d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008966:	69da      	ldr	r2, [r3, #28]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f303 	lsl.w	r3, r1, r3
 8008976:	b29b      	uxth	r3, r3
 8008978:	68f9      	ldr	r1, [r7, #12]
 800897a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800897e:	4313      	orrs	r3, r2
 8008980:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d155      	bne.n	8008a44 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	78db      	ldrb	r3, [r3, #3]
 80089b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	059b      	lsls	r3, r3, #22
 80089ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089bc:	4313      	orrs	r3, r2
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	e036      	b.n	8008a44 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089dc:	69da      	ldr	r2, [r3, #28]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	2101      	movs	r1, #1
 80089e8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ec:	041b      	lsls	r3, r3, #16
 80089ee:	68f9      	ldr	r1, [r7, #12]
 80089f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089f4:	4313      	orrs	r3, r2
 80089f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d11a      	bne.n	8008a44 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	78db      	ldrb	r3, [r3, #3]
 8008a28:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a2a:	430b      	orrs	r3, r1
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	0151      	lsls	r1, r2, #5
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	440a      	add	r2, r1
 8008a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a42:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
	...

08008a54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d161      	bne.n	8008b34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	015a      	lsls	r2, r3, #5
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4413      	add	r3, r2
 8008a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a86:	d11f      	bne.n	8008ac8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	0151      	lsls	r1, r2, #5
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	440a      	add	r2, r1
 8008a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	0151      	lsls	r1, r2, #5
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	440a      	add	r2, r1
 8008abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 030f 	and.w	r3, r3, #15
 8008ad8:	2101      	movs	r1, #1
 8008ada:	fa01 f303 	lsl.w	r3, r1, r3
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ae8:	4013      	ands	r3, r2
 8008aea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008af2:	69da      	ldr	r2, [r3, #28]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	2101      	movs	r1, #1
 8008afe:	fa01 f303 	lsl.w	r3, r1, r3
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	43db      	mvns	r3, r3
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	0159      	lsls	r1, r3, #5
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	440b      	add	r3, r1
 8008b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4b35      	ldr	r3, [pc, #212]	; (8008c04 <USB_DeactivateEndpoint+0x1b0>)
 8008b2e:	4013      	ands	r3, r2
 8008b30:	600b      	str	r3, [r1, #0]
 8008b32:	e060      	b.n	8008bf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b4a:	d11f      	bne.n	8008b8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba2:	041b      	lsls	r3, r3, #16
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bac:	4013      	ands	r3, r2
 8008bae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	f003 030f 	and.w	r3, r3, #15
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc6:	041b      	lsls	r3, r3, #16
 8008bc8:	43db      	mvns	r3, r3
 8008bca:	68f9      	ldr	r1, [r7, #12]
 8008bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	0159      	lsls	r1, r3, #5
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	440b      	add	r3, r1
 8008bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <USB_DeactivateEndpoint+0x1b4>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	ec337800 	.word	0xec337800
 8008c08:	eff37800 	.word	0xeff37800

08008c0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08a      	sub	sp, #40	; 0x28
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	4613      	mov	r3, r2
 8008c18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	f040 815c 	bne.w	8008ee6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d132      	bne.n	8008c9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	0151      	lsls	r1, r2, #5
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	440a      	add	r2, r1
 8008c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c94:	0cdb      	lsrs	r3, r3, #19
 8008c96:	04db      	lsls	r3, r3, #19
 8008c98:	6113      	str	r3, [r2, #16]
 8008c9a:	e074      	b.n	8008d86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	0151      	lsls	r1, r2, #5
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	440a      	add	r2, r1
 8008cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb6:	0cdb      	lsrs	r3, r3, #19
 8008cb8:	04db      	lsls	r3, r3, #19
 8008cba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6959      	ldr	r1, [r3, #20]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	440b      	add	r3, r1
 8008cf8:	1e59      	subs	r1, r3, #1
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d02:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d04:	4b9d      	ldr	r3, [pc, #628]	; (8008f7c <USB_EPStartXfer+0x370>)
 8008d06:	400b      	ands	r3, r1
 8008d08:	69b9      	ldr	r1, [r7, #24]
 8008d0a:	0148      	lsls	r0, r1, #5
 8008d0c:	69f9      	ldr	r1, [r7, #28]
 8008d0e:	4401      	add	r1, r0
 8008d10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d14:	4313      	orrs	r3, r2
 8008d16:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	691a      	ldr	r2, [r3, #16]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d2e:	69b9      	ldr	r1, [r7, #24]
 8008d30:	0148      	lsls	r0, r1, #5
 8008d32:	69f9      	ldr	r1, [r7, #28]
 8008d34:	4401      	add	r1, r0
 8008d36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	78db      	ldrb	r3, [r3, #3]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d11f      	bne.n	8008d86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008d64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d14b      	bne.n	8008e24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da0:	461a      	mov	r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	78db      	ldrb	r3, [r3, #3]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d128      	bne.n	8008e02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d110      	bne.n	8008de2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	015a      	lsls	r2, r3, #5
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69ba      	ldr	r2, [r7, #24]
 8008dd0:	0151      	lsls	r1, r2, #5
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	440a      	add	r2, r1
 8008dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	e00f      	b.n	8008e02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	e12f      	b.n	8009084 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	78db      	ldrb	r3, [r3, #3]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d015      	beq.n	8008e78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8117 	beq.w	8009084 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 030f 	and.w	r3, r3, #15
 8008e66:	2101      	movs	r1, #1
 8008e68:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6c:	69f9      	ldr	r1, [r7, #28]
 8008e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e72:	4313      	orrs	r3, r2
 8008e74:	634b      	str	r3, [r1, #52]	; 0x34
 8008e76:	e105      	b.n	8009084 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d110      	bne.n	8008eaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	0151      	lsls	r1, r2, #5
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	e00f      	b.n	8008eca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	0151      	lsls	r1, r2, #5
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	440a      	add	r2, r1
 8008ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ec8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	68d9      	ldr	r1, [r3, #12]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	b298      	uxth	r0, r3
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	4603      	mov	r3, r0
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fa2b 	bl	800933a <USB_WritePacket>
 8008ee4:	e0ce      	b.n	8009084 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	0151      	lsls	r1, r2, #5
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	440a      	add	r2, r1
 8008efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f00:	0cdb      	lsrs	r3, r3, #19
 8008f02:	04db      	lsls	r3, r3, #19
 8008f04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	0151      	lsls	r1, r2, #5
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d126      	bne.n	8008f80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3e:	691a      	ldr	r2, [r3, #16]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f48:	69b9      	ldr	r1, [r7, #24]
 8008f4a:	0148      	lsls	r0, r1, #5
 8008f4c:	69f9      	ldr	r1, [r7, #28]
 8008f4e:	4401      	add	r1, r0
 8008f50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f54:	4313      	orrs	r3, r2
 8008f56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	015a      	lsls	r2, r3, #5
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	4413      	add	r3, r2
 8008f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	0151      	lsls	r1, r2, #5
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	440a      	add	r2, r1
 8008f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f76:	6113      	str	r3, [r2, #16]
 8008f78:	e036      	b.n	8008fe8 <USB_EPStartXfer+0x3dc>
 8008f7a:	bf00      	nop
 8008f7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	695a      	ldr	r2, [r3, #20]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	4413      	add	r3, r2
 8008f8a:	1e5a      	subs	r2, r3, #1
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	8afb      	ldrh	r3, [r7, #22]
 8008fa6:	04d9      	lsls	r1, r3, #19
 8008fa8:	4b39      	ldr	r3, [pc, #228]	; (8009090 <USB_EPStartXfer+0x484>)
 8008faa:	400b      	ands	r3, r1
 8008fac:	69b9      	ldr	r1, [r7, #24]
 8008fae:	0148      	lsls	r0, r1, #5
 8008fb0:	69f9      	ldr	r1, [r7, #28]
 8008fb2:	4401      	add	r1, r0
 8008fb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	8af9      	ldrh	r1, [r7, #22]
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fd8:	69b9      	ldr	r1, [r7, #24]
 8008fda:	0148      	lsls	r0, r1, #5
 8008fdc:	69f9      	ldr	r1, [r7, #28]
 8008fde:	4401      	add	r1, r0
 8008fe0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d10d      	bne.n	800900a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	68d9      	ldr	r1, [r3, #12]
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009006:	460a      	mov	r2, r1
 8009008:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	78db      	ldrb	r3, [r3, #3]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d128      	bne.n	8009064 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901e:	2b00      	cmp	r3, #0
 8009020:	d110      	bne.n	8009044 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	69fa      	ldr	r2, [r7, #28]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800903c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009040:	6013      	str	r3, [r2, #0]
 8009042:	e00f      	b.n	8009064 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	0151      	lsls	r1, r2, #5
 8009056:	69fa      	ldr	r2, [r7, #28]
 8009058:	440a      	add	r2, r1
 800905a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800905e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009062:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	015a      	lsls	r2, r3, #5
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	4413      	add	r3, r2
 800906c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69ba      	ldr	r2, [r7, #24]
 8009074:	0151      	lsls	r1, r2, #5
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	440a      	add	r2, r1
 800907a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800907e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3720      	adds	r7, #32
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	1ff80000 	.word	0x1ff80000

08009094 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009094:	b480      	push	{r7}
 8009096:	b087      	sub	sp, #28
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	785b      	ldrb	r3, [r3, #1]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	f040 80cd 	bne.w	8009250 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d132      	bne.n	8009124 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ca:	691b      	ldr	r3, [r3, #16]
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	0151      	lsls	r1, r2, #5
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	440a      	add	r2, r1
 80090d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	015a      	lsls	r2, r3, #5
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	0151      	lsls	r1, r2, #5
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	440a      	add	r2, r1
 80090f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009100:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911c:	0cdb      	lsrs	r3, r3, #19
 800911e:	04db      	lsls	r3, r3, #19
 8009120:	6113      	str	r3, [r2, #16]
 8009122:	e04e      	b.n	80091c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	0151      	lsls	r1, r2, #5
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	440a      	add	r2, r1
 800913a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800913e:	0cdb      	lsrs	r3, r3, #19
 8009140:	04db      	lsls	r3, r3, #19
 8009142:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	0151      	lsls	r1, r2, #5
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	440a      	add	r2, r1
 800915a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009162:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009166:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	695a      	ldr	r2, [r3, #20]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	429a      	cmp	r2, r3
 8009172:	d903      	bls.n	800917c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800919a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	691a      	ldr	r2, [r3, #16]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091b2:	6939      	ldr	r1, [r7, #16]
 80091b4:	0148      	lsls	r0, r1, #5
 80091b6:	6979      	ldr	r1, [r7, #20]
 80091b8:	4401      	add	r1, r0
 80091ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80091be:	4313      	orrs	r3, r2
 80091c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091c2:	79fb      	ldrb	r3, [r7, #7]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d11e      	bne.n	8009206 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d009      	beq.n	80091e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091dc:	461a      	mov	r2, r3
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	015a      	lsls	r2, r3, #5
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	4413      	add	r3, r2
 80091ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	0151      	lsls	r1, r2, #5
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	440a      	add	r2, r1
 80091fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	e092      	b.n	800932c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	0151      	lsls	r1, r2, #5
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	440a      	add	r2, r1
 800921c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009220:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009224:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d07e      	beq.n	800932c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	2101      	movs	r1, #1
 8009240:	fa01 f303 	lsl.w	r3, r1, r3
 8009244:	6979      	ldr	r1, [r7, #20]
 8009246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800924a:	4313      	orrs	r3, r2
 800924c:	634b      	str	r3, [r1, #52]	; 0x34
 800924e:	e06d      	b.n	800932c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	0151      	lsls	r1, r2, #5
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	440a      	add	r2, r1
 8009266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800926a:	0cdb      	lsrs	r3, r3, #19
 800926c:	04db      	lsls	r3, r3, #19
 800926e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800928a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800928e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009292:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d003      	beq.n	80092a4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	0151      	lsls	r1, r2, #5
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	440a      	add	r2, r1
 80092ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092da:	6939      	ldr	r1, [r7, #16]
 80092dc:	0148      	lsls	r0, r1, #5
 80092de:	6979      	ldr	r1, [r7, #20]
 80092e0:	4401      	add	r1, r0
 80092e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092e6:	4313      	orrs	r3, r2
 80092e8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d10d      	bne.n	800930c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d009      	beq.n	800930c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	68d9      	ldr	r1, [r3, #12]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	015a      	lsls	r2, r3, #5
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	4413      	add	r3, r2
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	460a      	mov	r2, r1
 800930a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009326:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800932a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800933a:	b480      	push	{r7}
 800933c:	b089      	sub	sp, #36	; 0x24
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	4611      	mov	r1, r2
 8009346:	461a      	mov	r2, r3
 8009348:	460b      	mov	r3, r1
 800934a:	71fb      	strb	r3, [r7, #7]
 800934c:	4613      	mov	r3, r2
 800934e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009358:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800935c:	2b00      	cmp	r3, #0
 800935e:	d123      	bne.n	80093a8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009360:	88bb      	ldrh	r3, [r7, #4]
 8009362:	3303      	adds	r3, #3
 8009364:	089b      	lsrs	r3, r3, #2
 8009366:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009368:	2300      	movs	r3, #0
 800936a:	61bb      	str	r3, [r7, #24]
 800936c:	e018      	b.n	80093a0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	031a      	lsls	r2, r3, #12
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	4413      	add	r3, r2
 8009376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800937a:	461a      	mov	r2, r3
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	3301      	adds	r3, #1
 8009386:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	3301      	adds	r3, #1
 800938c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	3301      	adds	r3, #1
 8009392:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	3301      	adds	r3, #1
 8009398:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	3301      	adds	r3, #1
 800939e:	61bb      	str	r3, [r7, #24]
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d3e2      	bcc.n	800936e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3724      	adds	r7, #36	; 0x24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr

080093b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b08b      	sub	sp, #44	; 0x2c
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	60b9      	str	r1, [r7, #8]
 80093c0:	4613      	mov	r3, r2
 80093c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	089b      	lsrs	r3, r3, #2
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80093d4:	88fb      	ldrh	r3, [r7, #6]
 80093d6:	f003 0303 	and.w	r3, r3, #3
 80093da:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80093dc:	2300      	movs	r3, #0
 80093de:	623b      	str	r3, [r7, #32]
 80093e0:	e014      	b.n	800940c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	601a      	str	r2, [r3, #0]
    pDest++;
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	3301      	adds	r3, #1
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	3301      	adds	r3, #1
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	3301      	adds	r3, #1
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	3301      	adds	r3, #1
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	3301      	adds	r3, #1
 800940a:	623b      	str	r3, [r7, #32]
 800940c:	6a3a      	ldr	r2, [r7, #32]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	429a      	cmp	r2, r3
 8009412:	d3e6      	bcc.n	80093e2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009414:	8bfb      	ldrh	r3, [r7, #30]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01e      	beq.n	8009458 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800941a:	2300      	movs	r3, #0
 800941c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009424:	461a      	mov	r2, r3
 8009426:	f107 0310 	add.w	r3, r7, #16
 800942a:	6812      	ldr	r2, [r2, #0]
 800942c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	fa22 f303 	lsr.w	r3, r2, r3
 800943a:	b2da      	uxtb	r2, r3
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	701a      	strb	r2, [r3, #0]
      i++;
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	3301      	adds	r3, #1
 8009444:	623b      	str	r3, [r7, #32]
      pDest++;
 8009446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009448:	3301      	adds	r3, #1
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800944c:	8bfb      	ldrh	r3, [r7, #30]
 800944e:	3b01      	subs	r3, #1
 8009450:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009452:	8bfb      	ldrh	r3, [r7, #30]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1ea      	bne.n	800942e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800945a:	4618      	mov	r0, r3
 800945c:	372c      	adds	r7, #44	; 0x2c
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009466:	b480      	push	{r7}
 8009468:	b085      	sub	sp, #20
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d12c      	bne.n	80094dc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2b00      	cmp	r3, #0
 8009492:	db12      	blt.n	80094ba <USB_EPSetStall+0x54>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00f      	beq.n	80094ba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	0151      	lsls	r1, r2, #5
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	440a      	add	r2, r1
 80094b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094b8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	e02b      	b.n	8009534 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	db12      	blt.n	8009514 <USB_EPSetStall+0xae>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00f      	beq.n	8009514 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68ba      	ldr	r2, [r7, #8]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	440a      	add	r2, r1
 800950a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800950e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009512:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800952e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d128      	bne.n	80095b0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	0151      	lsls	r1, r2, #5
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	440a      	add	r2, r1
 8009574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009578:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800957c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	78db      	ldrb	r3, [r3, #3]
 8009582:	2b03      	cmp	r3, #3
 8009584:	d003      	beq.n	800958e <USB_EPClearStall+0x4c>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	78db      	ldrb	r3, [r3, #3]
 800958a:	2b02      	cmp	r3, #2
 800958c:	d138      	bne.n	8009600 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	e027      	b.n	8009600 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	78db      	ldrb	r3, [r3, #3]
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d003      	beq.n	80095e0 <USB_EPClearStall+0x9e>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	78db      	ldrb	r3, [r3, #3]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d10f      	bne.n	8009600 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095fe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800960e:	b480      	push	{r7}
 8009610:	b085      	sub	sp, #20
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	460b      	mov	r3, r1
 8009618:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800962c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009630:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	011b      	lsls	r3, r3, #4
 800963e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009642:	68f9      	ldr	r1, [r7, #12]
 8009644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009648:	4313      	orrs	r3, r2
 800964a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800965a:	b480      	push	{r7}
 800965c:	b085      	sub	sp, #20
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009688:	f023 0302 	bic.w	r3, r3, #2
 800968c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096b6:	f023 0303 	bic.w	r3, r3, #3
 80096ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096ca:	f043 0302 	orr.w	r3, r3, #2
 80096ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3714      	adds	r7, #20
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4013      	ands	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096f6:	68fb      	ldr	r3, [r7, #12]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	4013      	ands	r3, r2
 8009726:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	0c1b      	lsrs	r3, r3, #16
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	4013      	ands	r3, r2
 800975a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	b29b      	uxth	r3, r3
}
 8009760:	4618      	mov	r0, r3
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	460b      	mov	r3, r1
 8009776:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	4013      	ands	r3, r2
 8009798:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800979a:	68bb      	ldr	r3, [r7, #8]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	460b      	mov	r3, r1
 80097b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	f003 030f 	and.w	r3, r3, #15
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	fa22 f303 	lsr.w	r3, r2, r3
 80097d8:	01db      	lsls	r3, r3, #7
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	4313      	orrs	r3, r2
 80097e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4013      	ands	r3, r2
 80097f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097f6:	68bb      	ldr	r3, [r7, #8]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	f003 0301 	and.w	r3, r3, #1
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800983a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800983e:	f023 0307 	bic.w	r3, r3, #7
 8009842:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009856:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
	...

08009868 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	460b      	mov	r3, r1
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	333c      	adds	r3, #60	; 0x3c
 800987e:	3304      	adds	r3, #4
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	4a26      	ldr	r2, [pc, #152]	; (8009920 <USB_EP0_OutStart+0xb8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d90a      	bls.n	80098a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800989c:	d101      	bne.n	80098a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	e037      	b.n	8009912 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a8:	461a      	mov	r2, r3
 80098aa:	2300      	movs	r3, #0
 80098ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098d0:	f043 0318 	orr.w	r3, r3, #24
 80098d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80098e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80098ea:	7afb      	ldrb	r3, [r7, #11]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d10f      	bne.n	8009910 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f6:	461a      	mov	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800990a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800990e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr
 800991e:	bf00      	nop
 8009920:	4f54300a 	.word	0x4f54300a

08009924 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3301      	adds	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	4a13      	ldr	r2, [pc, #76]	; (8009984 <USB_CoreReset+0x60>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d901      	bls.n	8009940 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e01a      	b.n	8009976 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	daf3      	bge.n	8009930 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f043 0201 	orr.w	r2, r3, #1
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	4a09      	ldr	r2, [pc, #36]	; (8009984 <USB_CoreReset+0x60>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d901      	bls.n	8009968 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e006      	b.n	8009976 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b01      	cmp	r3, #1
 8009972:	d0f1      	beq.n	8009958 <USB_CoreReset+0x34>

  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	00030d40 	.word	0x00030d40

08009988 <mpu6050_init>:
static sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange);
static sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange);



void mpu6050_init(void){
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0

	MPU6050_initialize(&sensorData, FS_1000, AFS_4G);
 800998c:	2201      	movs	r2, #1
 800998e:	2102      	movs	r1, #2
 8009990:	4802      	ldr	r0, [pc, #8]	; (800999c <mpu6050_init+0x14>)
 8009992:	f000 f805 	bl	80099a0 <MPU6050_initialize>


}
 8009996:	bf00      	nop
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	200003c8 	.word	0x200003c8

080099a0 <MPU6050_initialize>:

sensor_status_e MPU6050_initialize( SensorData_t *pSensor, fs_sel_e gyroConfig, afs_sel_e acc_config )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
 80099ac:	4613      	mov	r3, r2
 80099ae:	70bb      	strb	r3, [r7, #2]
    sensor_status_e retVal;

    retVal = MPU6050_set_gyro_range( pSensor, gyroConfig );
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f81b 	bl	80099f0 <MPU6050_set_gyro_range>
 80099ba:	4603      	mov	r3, r0
 80099bc:	73fb      	strb	r3, [r7, #15]

    if (retVal == SENSOR_OK) {
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10e      	bne.n	80099e2 <MPU6050_initialize+0x42>
        retVal = MPU6050_set_acc_range( pSensor, acc_config );
 80099c4:	78bb      	ldrb	r3, [r7, #2]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f86d 	bl	8009aa8 <MPU6050_set_acc_range>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]

        if (retVal == SENSOR_OK) {
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d104      	bne.n	80099e2 <MPU6050_initialize+0x42>
            retVal = MPU6050_set_sleep_mode( SLEEPMODE_OFF );
 80099d8:	2000      	movs	r0, #0
 80099da:	f000 f8b9 	bl	8009b50 <MPU6050_set_sleep_mode>
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]
        }
    }


    return retVal;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}
 80099ec:	0000      	movs	r0, r0
	...

080099f0 <MPU6050_set_gyro_range>:

sensor_status_e MPU6050_set_gyro_range(SensorData_t *pSensor, fs_sel_e gyroRange)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_GYRO_CONFIG );
 80099fc:	211b      	movs	r1, #27
 80099fe:	20d0      	movs	r0, #208	; 0xd0
 8009a00:	f001 f8ce 	bl	800aba0 <sensor_read_register8>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73bb      	strb	r3, [r7, #14]

	configReg |= ((uint32_t)gyroRange << MPU_REG_GYRO_CONFIG_GYRO_RANGE_BITS_POSITION );
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	7bbb      	ldrb	r3, [r7, #14]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_GYRO_CONFIG, configReg);
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	461a      	mov	r2, r3
 8009a18:	211b      	movs	r1, #27
 8009a1a:	20d0      	movs	r0, #208	; 0xd0
 8009a1c:	f001 f8e6 	bl	800abec <sensor_write_register8>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]

	switch (gyroRange)
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d826      	bhi.n	8009a78 <MPU6050_set_gyro_range+0x88>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <MPU6050_set_gyro_range+0x40>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a41 	.word	0x08009a41
 8009a34:	08009a4f 	.word	0x08009a4f
 8009a38:	08009a5d 	.word	0x08009a5d
 8009a3c:	08009a6b 	.word	0x08009a6b
	{
	 case FS_250:  pSensor->gyro_co = 131.0; break;
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	a311      	add	r3, pc, #68	; (adr r3, 8009a88 <MPU6050_set_gyro_range+0x98>)
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8009a4c:	e017      	b.n	8009a7e <MPU6050_set_gyro_range+0x8e>
	 case FS_500:  pSensor->gyro_co = 65.5; break;
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	a30f      	add	r3, pc, #60	; (adr r3, 8009a90 <MPU6050_set_gyro_range+0xa0>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8009a5a:	e010      	b.n	8009a7e <MPU6050_set_gyro_range+0x8e>
	 case FS_1000: pSensor->gyro_co = 32.8; break;
 8009a5c:	6879      	ldr	r1, [r7, #4]
 8009a5e:	a30e      	add	r3, pc, #56	; (adr r3, 8009a98 <MPU6050_set_gyro_range+0xa8>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8009a68:	e009      	b.n	8009a7e <MPU6050_set_gyro_range+0x8e>
	 case FS_2000: pSensor->gyro_co = 16.4; break;
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	a30c      	add	r3, pc, #48	; (adr r3, 8009aa0 <MPU6050_set_gyro_range+0xb0>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8009a76:	e002      	b.n	8009a7e <MPU6050_set_gyro_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	73fb      	strb	r3, [r7, #15]
 8009a7c:	bf00      	nop
	}

	return retVal;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3710      	adds	r7, #16
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	00000000 	.word	0x00000000
 8009a8c:	40606000 	.word	0x40606000
 8009a90:	00000000 	.word	0x00000000
 8009a94:	40506000 	.word	0x40506000
 8009a98:	66666666 	.word	0x66666666
 8009a9c:	40406666 	.word	0x40406666
 8009aa0:	66666666 	.word	0x66666666
 8009aa4:	40306666 	.word	0x40306666

08009aa8 <MPU6050_set_acc_range>:

sensor_status_e MPU6050_set_acc_range(SensorData_t *pSensor, afs_sel_e accRange)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
	sensor_status_e retVal;
	uint8_t configReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_ACCEL_CONFIG );
 8009ab4:	211c      	movs	r1, #28
 8009ab6:	20d0      	movs	r0, #208	; 0xd0
 8009ab8:	f001 f872 	bl	800aba0 <sensor_read_register8>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]

	configReg |= ( (uint32_t) accRange << MPU_REG_ACC_CONFIG_ACC_RANGE_BITS_POSITION );
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	00db      	lsls	r3, r3, #3
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	73bb      	strb	r3, [r7, #14]

	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_ACCEL_CONFIG, configReg);
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	211c      	movs	r1, #28
 8009ad2:	20d0      	movs	r0, #208	; 0xd0
 8009ad4:	f001 f88a 	bl	800abec <sensor_write_register8>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	73fb      	strb	r3, [r7, #15]

	switch (accRange)
 8009adc:	78fb      	ldrb	r3, [r7, #3]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d826      	bhi.n	8009b30 <MPU6050_set_acc_range+0x88>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <MPU6050_set_acc_range+0x40>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009b07 	.word	0x08009b07
 8009af0:	08009b15 	.word	0x08009b15
 8009af4:	08009b23 	.word	0x08009b23
	{
	 case AFS_2G:  pSensor->acc_co = 16384; break;
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	f04f 0200 	mov.w	r2, #0
 8009afe:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <MPU6050_set_acc_range+0x98>)
 8009b00:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8009b04:	e017      	b.n	8009b36 <MPU6050_set_acc_range+0x8e>
	 case AFS_4G:  pSensor->acc_co = 8192; break;
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	4b0d      	ldr	r3, [pc, #52]	; (8009b44 <MPU6050_set_acc_range+0x9c>)
 8009b0e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8009b12:	e010      	b.n	8009b36 <MPU6050_set_acc_range+0x8e>
	 case AFS_8G:  pSensor->acc_co = 4096; break;
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <MPU6050_set_acc_range+0xa0>)
 8009b1c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8009b20:	e009      	b.n	8009b36 <MPU6050_set_acc_range+0x8e>
	 case AFS_16G: pSensor->acc_co = 2048; break;
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	f04f 0200 	mov.w	r2, #0
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <MPU6050_set_acc_range+0xa4>)
 8009b2a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8009b2e:	e002      	b.n	8009b36 <MPU6050_set_acc_range+0x8e>
	 default: retVal = SENSOR_ERROR; break;
 8009b30:	2301      	movs	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
 8009b34:	bf00      	nop
	}

	return retVal;
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	40d00000 	.word	0x40d00000
 8009b44:	40c00000 	.word	0x40c00000
 8009b48:	40b00000 	.word	0x40b00000
 8009b4c:	40a00000 	.word	0x40a00000

08009b50 <MPU6050_set_sleep_mode>:
	id = sensor_read_register8(MPU6050_I2C_ADRESS_AD0,MPU_REG_WHO_AM_I );
	return id;
}

sensor_status_e MPU6050_set_sleep_mode(sleepmode_e sleepmode)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
	sensor_status_e retVal;
	uint8_t powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_PWR_MGMT_1 );
 8009b5a:	216b      	movs	r1, #107	; 0x6b
 8009b5c:	20d0      	movs	r0, #208	; 0xd0
 8009b5e:	f001 f81f 	bl	800aba0 <sensor_read_register8>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73fb      	strb	r3, [r7, #15]

	if(SLEEPMODE_ON == sleepmode) {
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d104      	bne.n	8009b76 <MPU6050_set_sleep_mode+0x26>
		SET_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b72:	73fb      	strb	r3, [r7, #15]
 8009b74:	e003      	b.n	8009b7e <MPU6050_set_sleep_mode+0x2e>
	}
	else {
		CLEAR_BIT(powerReg,1<<MPU_BIT_PWR_MGMT_1_SLEEP_MODE);
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b7c:	73fb      	strb	r3, [r7, #15]
	}
	retVal = sensor_write_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_PWR_MGMT_1, powerReg);
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	461a      	mov	r2, r3
 8009b82:	216b      	movs	r1, #107	; 0x6b
 8009b84:	20d0      	movs	r0, #208	; 0xd0
 8009b86:	f001 f831 	bl	800abec <sensor_write_register8>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73bb      	strb	r3, [r7, #14]

	powerReg = sensor_read_register8(MPU6050_I2C_ADRESS_AD0, MPU_REG_PWR_MGMT_1 );
 8009b8e:	216b      	movs	r1, #107	; 0x6b
 8009b90:	20d0      	movs	r0, #208	; 0xd0
 8009b92:	f001 f805 	bl	800aba0 <sensor_read_register8>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73fb      	strb	r3, [r7, #15]

	return retVal;
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <MPU6050_read_data>:


sensor_status_e MPU6050_read_data(SensorData_t *pSensorData)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	sensor_status_e retVal;
	uint8_t buffer[14];
	retVal =  sensor_read_bytes(MPU6050_I2C_ADRESS_AD0, MPU_REG_ACCEL_XOUT_H, buffer, 14);
 8009bac:	f107 0208 	add.w	r2, r7, #8
 8009bb0:	230e      	movs	r3, #14
 8009bb2:	213b      	movs	r1, #59	; 0x3b
 8009bb4:	20d0      	movs	r0, #208	; 0xd0
 8009bb6:	f001 f83f 	bl	800ac38 <sensor_read_bytes>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	75fb      	strb	r3, [r7, #23]

    if (retVal == SENSOR_OK) {
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 8098 	bne.w	8009cf6 <MPU6050_read_data+0x152>
        pSensorData->accRaw.X = (int16_t) ((buffer[0] << 8) | buffer[1]);
 8009bc6:	7a3b      	ldrb	r3, [r7, #8]
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	b21a      	sxth	r2, r3
 8009bcc:	7a7b      	ldrb	r3, [r7, #9]
 8009bce:	b21b      	sxth	r3, r3
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b21a      	sxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	801a      	strh	r2, [r3, #0]
        pSensorData->accRaw.Y = (int16_t) ((buffer[2] << 8) | buffer[3]);
 8009bd8:	7abb      	ldrb	r3, [r7, #10]
 8009bda:	021b      	lsls	r3, r3, #8
 8009bdc:	b21a      	sxth	r2, r3
 8009bde:	7afb      	ldrb	r3, [r7, #11]
 8009be0:	b21b      	sxth	r3, r3
 8009be2:	4313      	orrs	r3, r2
 8009be4:	b21a      	sxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	805a      	strh	r2, [r3, #2]
        pSensorData->accRaw.Z = (int16_t) ((buffer[4] << 8) | buffer[5]);
 8009bea:	7b3b      	ldrb	r3, [r7, #12]
 8009bec:	021b      	lsls	r3, r3, #8
 8009bee:	b21a      	sxth	r2, r3
 8009bf0:	7b7b      	ldrb	r3, [r7, #13]
 8009bf2:	b21b      	sxth	r3, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b21a      	sxth	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	809a      	strh	r2, [r3, #4]

        pSensorData->gyroRaw.X = (int16_t) ((buffer[8] << 8) | buffer[9]);
 8009bfc:	7c3b      	ldrb	r3, [r7, #16]
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	b21a      	sxth	r2, r3
 8009c02:	7c7b      	ldrb	r3, [r7, #17]
 8009c04:	b21b      	sxth	r3, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	b21a      	sxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	80da      	strh	r2, [r3, #6]
        pSensorData->gyroRaw.Y = (int16_t) ((buffer[10] << 8) | buffer[11]);
 8009c0e:	7cbb      	ldrb	r3, [r7, #18]
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	b21a      	sxth	r2, r3
 8009c14:	7cfb      	ldrb	r3, [r7, #19]
 8009c16:	b21b      	sxth	r3, r3
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	b21a      	sxth	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	811a      	strh	r2, [r3, #8]
        pSensorData->gyroRaw.Z = (int16_t) ((buffer[12] << 8) | buffer[13]);
 8009c20:	7d3b      	ldrb	r3, [r7, #20]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	b21a      	sxth	r2, r3
 8009c26:	7d7b      	ldrb	r3, [r7, #21]
 8009c28:	b21b      	sxth	r3, r3
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	b21a      	sxth	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	815a      	strh	r2, [r3, #10]

        pSensorData->acc.X = pSensorData->accRaw.X / pSensorData->acc_co;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f6 fc83 	bl	8000544 <__aeabi_i2d>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009c44:	f7f6 fe12 	bl	800086c <__aeabi_ddiv>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        pSensorData->acc.Y = pSensorData->accRaw.Y / pSensorData->acc_co;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f6 fc73 	bl	8000544 <__aeabi_i2d>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009c64:	f7f6 fe02 	bl	800086c <__aeabi_ddiv>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	6879      	ldr	r1, [r7, #4]
 8009c6e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        pSensorData->acc.Z = pSensorData->accRaw.Z / pSensorData->acc_co;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f6 fc63 	bl	8000544 <__aeabi_i2d>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8009c84:	f7f6 fdf2 	bl	800086c <__aeabi_ddiv>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	e9c1 2308 	strd	r2, r3, [r1, #32]

        pSensorData->gyro.X = pSensorData->gyroRaw.X / pSensorData->gyro_co;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7f6 fc53 	bl	8000544 <__aeabi_i2d>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009ca4:	f7f6 fde2 	bl	800086c <__aeabi_ddiv>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        pSensorData->gyro.Y = pSensorData->gyroRaw.Y / pSensorData->gyro_co;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7f6 fc43 	bl	8000544 <__aeabi_i2d>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009cc4:	f7f6 fdd2 	bl	800086c <__aeabi_ddiv>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        pSensorData->gyro.Z = pSensorData->gyroRaw.Z / pSensorData->gyro_co;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7f6 fc33 	bl	8000544 <__aeabi_i2d>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8009ce4:	f7f6 fdc2 	bl	800086c <__aeabi_ddiv>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

        return retVal;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	e000      	b.n	8009cf8 <MPU6050_read_data+0x154>
    } else {
        return SENSOR_ERROR;
 8009cf6:	2301      	movs	r3, #1
    }
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <get_Imu>:




void get_Imu(imu_datalar *data)
{
 8009d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d04:	ed2d 8b02 	vpush	{d8}
 8009d08:	b08e      	sub	sp, #56	; 0x38
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
	float Roll = 0.0f;  // phi
 8009d0e:	f04f 0300 	mov.w	r3, #0
 8009d12:	637b      	str	r3, [r7, #52]	; 0x34
	float Pitch = 0.0f; //theta
 8009d14:	f04f 0300 	mov.w	r3, #0
 8009d18:	633b      	str	r3, [r7, #48]	; 0x30
	float Yaw = 0.0f;
 8009d1a:	f04f 0300 	mov.w	r3, #0
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

	float theta = 0.0f;
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	62bb      	str	r3, [r7, #40]	; 0x28
	float phi = 0.0f;
 8009d26:	f04f 0300 	mov.w	r3, #0
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24




    MPU6050_read_data(&sensorData);
 8009d2c:	48dc      	ldr	r0, [pc, #880]	; (800a0a0 <get_Imu+0x3a0>)
 8009d2e:	f7ff ff39 	bl	8009ba4 <MPU6050_read_data>

    //float Roll_Acc = atanf(sensorData.acc.Y / sensorData.acc.Z) *Rad_to_deg;
    //float Pitch_Acc = asinf(sensorData.acc.X / gravity_constant_value) *Rad_to_deg;

    /* 0-90 arası roll ve pitch verir.*/
    float Roll_Acc 	= 	atanf(sensorData.acc.Y / sqrt(pow(sensorData.acc.X,2)+pow(sensorData.acc.Z,2))) *Rad_to_deg;
 8009d32:	4bdb      	ldr	r3, [pc, #876]	; (800a0a0 <get_Imu+0x3a0>)
 8009d34:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8009d38:	4bd9      	ldr	r3, [pc, #868]	; (800a0a0 <get_Imu+0x3a0>)
 8009d3a:	ed93 7b04 	vldr	d7, [r3, #16]
 8009d3e:	ed9f 1bd4 	vldr	d1, [pc, #848]	; 800a090 <get_Imu+0x390>
 8009d42:	eeb0 0a47 	vmov.f32	s0, s14
 8009d46:	eef0 0a67 	vmov.f32	s1, s15
 8009d4a:	f012 f81f 	bl	801bd8c <pow>
 8009d4e:	ec59 8b10 	vmov	r8, r9, d0
 8009d52:	4bd3      	ldr	r3, [pc, #844]	; (800a0a0 <get_Imu+0x3a0>)
 8009d54:	ed93 7b08 	vldr	d7, [r3, #32]
 8009d58:	ed9f 1bcd 	vldr	d1, [pc, #820]	; 800a090 <get_Imu+0x390>
 8009d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8009d60:	eef0 0a67 	vmov.f32	s1, s15
 8009d64:	f012 f812 	bl	801bd8c <pow>
 8009d68:	ec53 2b10 	vmov	r2, r3, d0
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	4649      	mov	r1, r9
 8009d70:	f7f6 fa9c 	bl	80002ac <__adddf3>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	ec43 2b17 	vmov	d7, r2, r3
 8009d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8009d80:	eef0 0a67 	vmov.f32	s1, s15
 8009d84:	f012 f8b0 	bl	801bee8 <sqrt>
 8009d88:	ec53 2b10 	vmov	r2, r3, d0
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fd6c 	bl	800086c <__aeabi_ddiv>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	f7f6 ff34 	bl	8000c08 <__aeabi_d2f>
 8009da0:	4603      	mov	r3, r0
 8009da2:	ee00 3a10 	vmov	s0, r3
 8009da6:	f011 fe2f 	bl	801ba08 <atanf>
 8009daa:	ee10 3a10 	vmov	r3, s0
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7f6 fbda 	bl	8000568 <__aeabi_f2d>
 8009db4:	a3b8      	add	r3, pc, #736	; (adr r3, 800a098 <get_Imu+0x398>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f7f6 fc2d 	bl	8000618 <__aeabi_dmul>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f7f6 ff1f 	bl	8000c08 <__aeabi_d2f>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	623b      	str	r3, [r7, #32]
    float Pitch_Acc = 	atanf(sensorData.acc.X /sqrt(pow(sensorData.acc.Y,2)+pow(sensorData.acc.Z,2))) *Rad_to_deg;
 8009dce:	4bb4      	ldr	r3, [pc, #720]	; (800a0a0 <get_Imu+0x3a0>)
 8009dd0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8009dd4:	4bb2      	ldr	r3, [pc, #712]	; (800a0a0 <get_Imu+0x3a0>)
 8009dd6:	ed93 7b06 	vldr	d7, [r3, #24]
 8009dda:	ed9f 1bad 	vldr	d1, [pc, #692]	; 800a090 <get_Imu+0x390>
 8009dde:	eeb0 0a47 	vmov.f32	s0, s14
 8009de2:	eef0 0a67 	vmov.f32	s1, s15
 8009de6:	f011 ffd1 	bl	801bd8c <pow>
 8009dea:	ec59 8b10 	vmov	r8, r9, d0
 8009dee:	4bac      	ldr	r3, [pc, #688]	; (800a0a0 <get_Imu+0x3a0>)
 8009df0:	ed93 7b08 	vldr	d7, [r3, #32]
 8009df4:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 800a090 <get_Imu+0x390>
 8009df8:	eeb0 0a47 	vmov.f32	s0, s14
 8009dfc:	eef0 0a67 	vmov.f32	s1, s15
 8009e00:	f011 ffc4 	bl	801bd8c <pow>
 8009e04:	ec53 2b10 	vmov	r2, r3, d0
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	f7f6 fa4e 	bl	80002ac <__adddf3>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	ec43 2b17 	vmov	d7, r2, r3
 8009e18:	eeb0 0a47 	vmov.f32	s0, s14
 8009e1c:	eef0 0a67 	vmov.f32	s1, s15
 8009e20:	f012 f862 	bl	801bee8 <sqrt>
 8009e24:	ec53 2b10 	vmov	r2, r3, d0
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 fd1e 	bl	800086c <__aeabi_ddiv>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4610      	mov	r0, r2
 8009e36:	4619      	mov	r1, r3
 8009e38:	f7f6 fee6 	bl	8000c08 <__aeabi_d2f>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	ee00 3a10 	vmov	s0, r3
 8009e42:	f011 fde1 	bl	801ba08 <atanf>
 8009e46:	ee10 3a10 	vmov	r3, s0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7f6 fb8c 	bl	8000568 <__aeabi_f2d>
 8009e50:	a391      	add	r3, pc, #580	; (adr r3, 800a098 <get_Imu+0x398>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f7f6 fbdf 	bl	8000618 <__aeabi_dmul>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	f7f6 fed1 	bl	8000c08 <__aeabi_d2f>
 8009e66:	4603      	mov	r3, r0
 8009e68:	61fb      	str	r3, [r7, #28]
    float Yaw_Acc 	=  	atanf(sensorData.acc.Z/sqrt(pow(sensorData.acc.X,2) + pow(sensorData.acc.Z,2)))*Rad_to_deg;
 8009e6a:	4b8d      	ldr	r3, [pc, #564]	; (800a0a0 <get_Imu+0x3a0>)
 8009e6c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8009e70:	4b8b      	ldr	r3, [pc, #556]	; (800a0a0 <get_Imu+0x3a0>)
 8009e72:	ed93 7b04 	vldr	d7, [r3, #16]
 8009e76:	ed9f 1b86 	vldr	d1, [pc, #536]	; 800a090 <get_Imu+0x390>
 8009e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8009e7e:	eef0 0a67 	vmov.f32	s1, s15
 8009e82:	f011 ff83 	bl	801bd8c <pow>
 8009e86:	ec59 8b10 	vmov	r8, r9, d0
 8009e8a:	4b85      	ldr	r3, [pc, #532]	; (800a0a0 <get_Imu+0x3a0>)
 8009e8c:	ed93 7b08 	vldr	d7, [r3, #32]
 8009e90:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 800a090 <get_Imu+0x390>
 8009e94:	eeb0 0a47 	vmov.f32	s0, s14
 8009e98:	eef0 0a67 	vmov.f32	s1, s15
 8009e9c:	f011 ff76 	bl	801bd8c <pow>
 8009ea0:	ec53 2b10 	vmov	r2, r3, d0
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 fa00 	bl	80002ac <__adddf3>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	ec43 2b17 	vmov	d7, r2, r3
 8009eb4:	eeb0 0a47 	vmov.f32	s0, s14
 8009eb8:	eef0 0a67 	vmov.f32	s1, s15
 8009ebc:	f012 f814 	bl	801bee8 <sqrt>
 8009ec0:	ec53 2b10 	vmov	r2, r3, d0
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	f7f6 fcd0 	bl	800086c <__aeabi_ddiv>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	460b      	mov	r3, r1
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	f7f6 fe98 	bl	8000c08 <__aeabi_d2f>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	ee00 3a10 	vmov	s0, r3
 8009ede:	f011 fd93 	bl	801ba08 <atanf>
 8009ee2:	ee10 3a10 	vmov	r3, s0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7f6 fb3e 	bl	8000568 <__aeabi_f2d>
 8009eec:	a36a      	add	r3, pc, #424	; (adr r3, 800a098 <get_Imu+0x398>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f7f6 fb91 	bl	8000618 <__aeabi_dmul>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4610      	mov	r0, r2
 8009efc:	4619      	mov	r1, r3
 8009efe:	f7f6 fe83 	bl	8000c08 <__aeabi_d2f>
 8009f02:	4603      	mov	r3, r0
 8009f04:	61bb      	str	r3, [r7, #24]
   // sprintf(print_data,"Gyro Value Roll %.3f degree , Pitch %.3f degree, Yaw %.3f degree\r\n",Roll_Acc,Pitch_Acc,Yaw_Acc);
    //CDC_Transmit_FS(print_data, strlen(print_data));


	/* Transform body rates to Euler rate*/
    float Roll_Gyro 	= sensorData.gyro.X + tanf(theta) * (sinf(phi) + sensorData.gyro.Y + cosf(phi) * sensorData.gyro.Z);
 8009f06:	4b66      	ldr	r3, [pc, #408]	; (800a0a0 <get_Imu+0x3a0>)
 8009f08:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8009f0c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8009f10:	f011 fed8 	bl	801bcc4 <tanf>
 8009f14:	ee10 3a10 	vmov	r3, s0
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7f6 fb25 	bl	8000568 <__aeabi_f2d>
 8009f1e:	4680      	mov	r8, r0
 8009f20:	4689      	mov	r9, r1
 8009f22:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8009f26:	f011 fe8b 	bl	801bc40 <sinf>
 8009f2a:	ee10 3a10 	vmov	r3, s0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7f6 fb1a 	bl	8000568 <__aeabi_f2d>
 8009f34:	4b5a      	ldr	r3, [pc, #360]	; (800a0a0 <get_Imu+0x3a0>)
 8009f36:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009f3a:	f7f6 f9b7 	bl	80002ac <__adddf3>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4692      	mov	sl, r2
 8009f44:	469b      	mov	fp, r3
 8009f46:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8009f4a:	f011 fe31 	bl	801bbb0 <cosf>
 8009f4e:	ee10 3a10 	vmov	r3, s0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f6 fb08 	bl	8000568 <__aeabi_f2d>
 8009f58:	4b51      	ldr	r3, [pc, #324]	; (800a0a0 <get_Imu+0x3a0>)
 8009f5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8009f5e:	f7f6 fb5b 	bl	8000618 <__aeabi_dmul>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4650      	mov	r0, sl
 8009f68:	4659      	mov	r1, fp
 8009f6a:	f7f6 f99f 	bl	80002ac <__adddf3>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 fb4f 	bl	8000618 <__aeabi_dmul>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4620      	mov	r0, r4
 8009f80:	4629      	mov	r1, r5
 8009f82:	f7f6 f993 	bl	80002ac <__adddf3>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	f7f6 fe3b 	bl	8000c08 <__aeabi_d2f>
 8009f92:	4603      	mov	r3, r0
 8009f94:	617b      	str	r3, [r7, #20]
    float Pitch_Gyro 	= 									cosf(phi) + sensorData.gyro.Y - sinf(phi) + sensorData.gyro.Z;
 8009f96:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8009f9a:	f011 fe09 	bl	801bbb0 <cosf>
 8009f9e:	ee10 3a10 	vmov	r3, s0
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7f6 fae0 	bl	8000568 <__aeabi_f2d>
 8009fa8:	4b3d      	ldr	r3, [pc, #244]	; (800a0a0 <get_Imu+0x3a0>)
 8009faa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8009fae:	f7f6 f97d 	bl	80002ac <__adddf3>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	461d      	mov	r5, r3
 8009fba:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8009fbe:	f011 fe3f 	bl	801bc40 <sinf>
 8009fc2:	ee10 3a10 	vmov	r3, s0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7f6 face 	bl	8000568 <__aeabi_f2d>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	f7f6 f968 	bl	80002a8 <__aeabi_dsub>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4b2f      	ldr	r3, [pc, #188]	; (800a0a0 <get_Imu+0x3a0>)
 8009fe2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8009fe6:	f7f6 f961 	bl	80002ac <__adddf3>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4610      	mov	r0, r2
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	f7f6 fe09 	bl	8000c08 <__aeabi_d2f>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	613b      	str	r3, [r7, #16]
	double Yaw_Gyro 	= sensorData.gyro.Y * (sinf(phi) / cosf(theta)) + sensorData.gyro.Z * (cos(phi) / cos(theta));
 8009ffa:	4b29      	ldr	r3, [pc, #164]	; (800a0a0 <get_Imu+0x3a0>)
 8009ffc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800a000:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800a004:	f011 fe1c 	bl	801bc40 <sinf>
 800a008:	eeb0 8a40 	vmov.f32	s16, s0
 800a00c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800a010:	f011 fdce 	bl	801bbb0 <cosf>
 800a014:	eef0 7a40 	vmov.f32	s15, s0
 800a018:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800a01c:	ee17 0a10 	vmov	r0, s14
 800a020:	f7f6 faa2 	bl	8000568 <__aeabi_f2d>
 800a024:	4602      	mov	r2, r0
 800a026:	460b      	mov	r3, r1
 800a028:	4620      	mov	r0, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	f7f6 faf4 	bl	8000618 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4690      	mov	r8, r2
 800a036:	4699      	mov	r9, r3
 800a038:	4b19      	ldr	r3, [pc, #100]	; (800a0a0 <get_Imu+0x3a0>)
 800a03a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800a03e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a040:	f7f6 fa92 	bl	8000568 <__aeabi_f2d>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	ec43 2b10 	vmov	d0, r2, r3
 800a04c:	f011 fc8c 	bl	801b968 <cos>
 800a050:	ec5b ab10 	vmov	sl, fp, d0
 800a054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a056:	f7f6 fa87 	bl	8000568 <__aeabi_f2d>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	ec43 2b10 	vmov	d0, r2, r3
 800a062:	f011 fc81 	bl	801b968 <cos>
 800a066:	ec53 2b10 	vmov	r2, r3, d0
 800a06a:	4650      	mov	r0, sl
 800a06c:	4659      	mov	r1, fp
 800a06e:	f7f6 fbfd 	bl	800086c <__aeabi_ddiv>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	4620      	mov	r0, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	f7f6 facd 	bl	8000618 <__aeabi_dmul>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4640      	mov	r0, r8
 800a084:	4649      	mov	r1, r9
 800a086:	f7f6 f911 	bl	80002ac <__adddf3>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	e00f      	b.n	800a0b0 <get_Imu+0x3b0>
 800a090:	00000000 	.word	0x00000000
 800a094:	40000000 	.word	0x40000000
 800a098:	62223407 	.word	0x62223407
 800a09c:	404ca994 	.word	0x404ca994
 800a0a0:	200003c8 	.word	0x200003c8
 800a0a4:	3d4ccccd 	.word	0x3d4ccccd
 800a0a8:	3ca3d70a 	.word	0x3ca3d70a
 800a0ac:	3f733333 	.word	0x3f733333
 800a0b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//printf(print_data,"Gyro Value Roll %.3f degree , Pitch %.3f degree, Yaw %.3f degree\r\n",Roll_Gyro,Pitch_Gyro,Yaw_Gyro);
	//CDC_Transmit_FS(print_data, strlen(print_data));
	/*
	 * Complementary filter
	 */
	 phi 	= (ALPHA * Roll_Acc + (1.0f - ALPHA) * (phi + SAMPLE_TIME_USB / 1000.0f) * Roll_Gyro) * Rad_to_deg;
 800a0b4:	edd7 7a08 	vldr	s15, [r7, #32]
 800a0b8:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800a0a4 <get_Imu+0x3a4>
 800a0bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a0c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0c4:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 800a0a8 <get_Imu+0x3a8>
 800a0c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0cc:	ed5f 6a09 	vldr	s13, [pc, #-36]	; 800a0ac <get_Imu+0x3ac>
 800a0d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a0d4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a0d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0e0:	ee17 0a90 	vmov	r0, s15
 800a0e4:	f7f6 fa40 	bl	8000568 <__aeabi_f2d>
 800a0e8:	a33f      	add	r3, pc, #252	; (adr r3, 800a1e8 <get_Imu+0x4e8>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 fa93 	bl	8000618 <__aeabi_dmul>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f7f6 fd85 	bl	8000c08 <__aeabi_d2f>
 800a0fe:	4603      	mov	r3, r0
 800a100:	627b      	str	r3, [r7, #36]	; 0x24
	 theta 	= (ALPHA * Pitch_Acc + (1.0f - ALPHA) * (theta + SAMPLE_TIME_USB / 1000.0f) * Pitch_Gyro) * Rad_to_deg;
 800a102:	edd7 7a07 	vldr	s15, [r7, #28]
 800a106:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a1f0 <get_Imu+0x4f0>
 800a10a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a10e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a112:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a1f4 <get_Imu+0x4f4>
 800a116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a11a:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a1f8 <get_Imu+0x4f8>
 800a11e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a122:	edd7 7a04 	vldr	s15, [r7, #16]
 800a126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a12a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a12e:	ee17 0a90 	vmov	r0, s15
 800a132:	f7f6 fa19 	bl	8000568 <__aeabi_f2d>
 800a136:	a32c      	add	r3, pc, #176	; (adr r3, 800a1e8 <get_Imu+0x4e8>)
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	f7f6 fa6c 	bl	8000618 <__aeabi_dmul>
 800a140:	4602      	mov	r2, r0
 800a142:	460b      	mov	r3, r1
 800a144:	4610      	mov	r0, r2
 800a146:	4619      	mov	r1, r3
 800a148:	f7f6 fd5e 	bl	8000c08 <__aeabi_d2f>
 800a14c:	4603      	mov	r3, r0
 800a14e:	62bb      	str	r3, [r7, #40]	; 0x28
	 //sprintf(print_data,"Roll %.3f degree , Pitch %.3f degree, Yaw %.3f \r\n",phi,theta,Yaw_Acc);
	 //CDC_Transmit_FS(print_data, strlen(print_data));

	 data->pitch = Pitch_Acc;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	69fa      	ldr	r2, [r7, #28]
 800a154:	619a      	str	r2, [r3, #24]
	 data->roll = Roll_Acc;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a3a      	ldr	r2, [r7, #32]
 800a15a:	61da      	str	r2, [r3, #28]
	 //CDC_Transmit_FS(print_data, strlen(print_data));

	 data->ax = sensorData.acc.X;
 800a15c:	4b27      	ldr	r3, [pc, #156]	; (800a1fc <get_Imu+0x4fc>)
 800a15e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a162:	4610      	mov	r0, r2
 800a164:	4619      	mov	r1, r3
 800a166:	f7f6 fd4f 	bl	8000c08 <__aeabi_d2f>
 800a16a:	4602      	mov	r2, r0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	601a      	str	r2, [r3, #0]
	 data->ay = sensorData.acc.Y;
 800a170:	4b22      	ldr	r3, [pc, #136]	; (800a1fc <get_Imu+0x4fc>)
 800a172:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a176:	4610      	mov	r0, r2
 800a178:	4619      	mov	r1, r3
 800a17a:	f7f6 fd45 	bl	8000c08 <__aeabi_d2f>
 800a17e:	4602      	mov	r2, r0
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	605a      	str	r2, [r3, #4]
	 data->az = sensorData.acc.Z;
 800a184:	4b1d      	ldr	r3, [pc, #116]	; (800a1fc <get_Imu+0x4fc>)
 800a186:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a18a:	4610      	mov	r0, r2
 800a18c:	4619      	mov	r1, r3
 800a18e:	f7f6 fd3b 	bl	8000c08 <__aeabi_d2f>
 800a192:	4602      	mov	r2, r0
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	609a      	str	r2, [r3, #8]
	 data->gx = sensorData.gyro.X;
 800a198:	4b18      	ldr	r3, [pc, #96]	; (800a1fc <get_Imu+0x4fc>)
 800a19a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800a19e:	4610      	mov	r0, r2
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f7f6 fd31 	bl	8000c08 <__aeabi_d2f>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60da      	str	r2, [r3, #12]
	 data->gy = sensorData.gyro.Y;
 800a1ac:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <get_Imu+0x4fc>)
 800a1ae:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	f7f6 fd27 	bl	8000c08 <__aeabi_d2f>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	611a      	str	r2, [r3, #16]
	 data->gz = sensorData.gyro.Z;
 800a1c0:	4b0e      	ldr	r3, [pc, #56]	; (800a1fc <get_Imu+0x4fc>)
 800a1c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	f7f6 fd1d 	bl	8000c08 <__aeabi_d2f>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	615a      	str	r2, [r3, #20]
	  *
	  *
	  *
	  */

}
 800a1d4:	bf00      	nop
 800a1d6:	3738      	adds	r7, #56	; 0x38
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	ecbd 8b02 	vpop	{d8}
 800a1de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1e2:	bf00      	nop
 800a1e4:	f3af 8000 	nop.w
 800a1e8:	62223407 	.word	0x62223407
 800a1ec:	404ca994 	.word	0x404ca994
 800a1f0:	3d4ccccd 	.word	0x3d4ccccd
 800a1f4:	3ca3d70a 	.word	0x3ca3d70a
 800a1f8:	3f733333 	.word	0x3f733333
 800a1fc:	200003c8 	.word	0x200003c8

0800a200 <HAL_UART_RxCpltCallback>:
	   }


}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]

	static unsigned char cnt = 0;
	uart6_rx_flag = 1;
 800a208:	4b31      	ldr	r3, [pc, #196]	; (800a2d0 <HAL_UART_RxCpltCallback+0xd0>)
 800a20a:	2201      	movs	r2, #1
 800a20c:	701a      	strb	r2, [r3, #0]
	m8n_rx_cplt_flag = 1;
 800a20e:	4b31      	ldr	r3, [pc, #196]	; (800a2d4 <HAL_UART_RxCpltCallback+0xd4>)
 800a210:	2201      	movs	r2, #1
 800a212:	701a      	strb	r2, [r3, #0]
  //HAL_UART_Transmit(huart5, gelen_gps_data, strlen(gelen_gps_data), HAL_MAX_DELAY);


  switch(cnt){
 800a214:	4b30      	ldr	r3, [pc, #192]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b23      	cmp	r3, #35	; 0x23
 800a21a:	d02e      	beq.n	800a27a <HAL_UART_RxCpltCallback+0x7a>
 800a21c:	2b23      	cmp	r3, #35	; 0x23
 800a21e:	dc3a      	bgt.n	800a296 <HAL_UART_RxCpltCallback+0x96>
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <HAL_UART_RxCpltCallback+0x2a>
 800a224:	2b01      	cmp	r3, #1
 800a226:	d012      	beq.n	800a24e <HAL_UART_RxCpltCallback+0x4e>
 800a228:	e035      	b.n	800a296 <HAL_UART_RxCpltCallback+0x96>

	  case 0:
		  if(uart6_rx_data == 0xb5)
 800a22a:	4b2c      	ldr	r3, [pc, #176]	; (800a2dc <HAL_UART_RxCpltCallback+0xdc>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2bb5      	cmp	r3, #181	; 0xb5
 800a230:	d13f      	bne.n	800a2b2 <HAL_UART_RxCpltCallback+0xb2>
		  {
			  m8n_rx_buf[cnt] = uart6_rx_data;
 800a232:	4b29      	ldr	r3, [pc, #164]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	4b28      	ldr	r3, [pc, #160]	; (800a2dc <HAL_UART_RxCpltCallback+0xdc>)
 800a23a:	7819      	ldrb	r1, [r3, #0]
 800a23c:	4b28      	ldr	r3, [pc, #160]	; (800a2e0 <HAL_UART_RxCpltCallback+0xe0>)
 800a23e:	5499      	strb	r1, [r3, r2]
			  cnt++;
 800a240:	4b25      	ldr	r3, [pc, #148]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	b2da      	uxtb	r2, r3
 800a248:	4b23      	ldr	r3, [pc, #140]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a24a:	701a      	strb	r2, [r3, #0]

		  }
		  break;
 800a24c:	e031      	b.n	800a2b2 <HAL_UART_RxCpltCallback+0xb2>
	  case 1:
		  if(uart6_rx_data == 0x62){
 800a24e:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <HAL_UART_RxCpltCallback+0xdc>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b62      	cmp	r3, #98	; 0x62
 800a254:	d10d      	bne.n	800a272 <HAL_UART_RxCpltCallback+0x72>

			  m8n_rx_buf[cnt] = uart6_rx_data;
 800a256:	4b20      	ldr	r3, [pc, #128]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	461a      	mov	r2, r3
 800a25c:	4b1f      	ldr	r3, [pc, #124]	; (800a2dc <HAL_UART_RxCpltCallback+0xdc>)
 800a25e:	7819      	ldrb	r1, [r3, #0]
 800a260:	4b1f      	ldr	r3, [pc, #124]	; (800a2e0 <HAL_UART_RxCpltCallback+0xe0>)
 800a262:	5499      	strb	r1, [r3, r2]
			  cnt++;
 800a264:	4b1c      	ldr	r3, [pc, #112]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	3301      	adds	r3, #1
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	4b1a      	ldr	r3, [pc, #104]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a26e:	701a      	strb	r2, [r3, #0]
		  }
		  else
			  cnt = 0;
		  break;
 800a270:	e020      	b.n	800a2b4 <HAL_UART_RxCpltCallback+0xb4>
			  cnt = 0;
 800a272:	4b19      	ldr	r3, [pc, #100]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a274:	2200      	movs	r2, #0
 800a276:	701a      	strb	r2, [r3, #0]
		  break;
 800a278:	e01c      	b.n	800a2b4 <HAL_UART_RxCpltCallback+0xb4>

	  case 35:
		  m8n_rx_buf[cnt] = uart6_rx_data;
 800a27a:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	4b16      	ldr	r3, [pc, #88]	; (800a2dc <HAL_UART_RxCpltCallback+0xdc>)
 800a282:	7819      	ldrb	r1, [r3, #0]
 800a284:	4b16      	ldr	r3, [pc, #88]	; (800a2e0 <HAL_UART_RxCpltCallback+0xe0>)
 800a286:	5499      	strb	r1, [r3, r2]
		  cnt = 0;
 800a288:	4b13      	ldr	r3, [pc, #76]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	701a      	strb	r2, [r3, #0]
		  m8n_rx_cplt_flag = 1;
 800a28e:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <HAL_UART_RxCpltCallback+0xd4>)
 800a290:	2201      	movs	r2, #1
 800a292:	701a      	strb	r2, [r3, #0]
		  break;
 800a294:	e00e      	b.n	800a2b4 <HAL_UART_RxCpltCallback+0xb4>
	  default:
		  	m8n_rx_buf[cnt] = uart6_rx_data;
 800a296:	4b10      	ldr	r3, [pc, #64]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	4b0f      	ldr	r3, [pc, #60]	; (800a2dc <HAL_UART_RxCpltCallback+0xdc>)
 800a29e:	7819      	ldrb	r1, [r3, #0]
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <HAL_UART_RxCpltCallback+0xe0>)
 800a2a2:	5499      	strb	r1, [r3, r2]
		  	cnt++;
 800a2a4:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	; (800a2d8 <HAL_UART_RxCpltCallback+0xd8>)
 800a2ae:	701a      	strb	r2, [r3, #0]
		  	break;
 800a2b0:	e000      	b.n	800a2b4 <HAL_UART_RxCpltCallback+0xb4>
		  break;
 800a2b2:	bf00      	nop
  }

  CDC_Transmit_FS(m8n_rx_buf, strlen(m8n_rx_buf));
 800a2b4:	480a      	ldr	r0, [pc, #40]	; (800a2e0 <HAL_UART_RxCpltCallback+0xe0>)
 800a2b6:	f7f5 ff9b 	bl	80001f0 <strlen>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	4619      	mov	r1, r3
 800a2c0:	4807      	ldr	r0, [pc, #28]	; (800a2e0 <HAL_UART_RxCpltCallback+0xe0>)
 800a2c2:	f00c fa39 	bl	8016738 <CDC_Transmit_FS>

 }
 800a2c6:	bf00      	nop
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000418 	.word	0x20000418
 800a2d4:	2000041b 	.word	0x2000041b
 800a2d8:	2000041c 	.word	0x2000041c
 800a2dc:	20000419 	.word	0x20000419
 800a2e0:	20000ab0 	.word	0x20000ab0

0800a2e4 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	uart6_tx_flag = 1;
 800a2ec:	4b04      	ldr	r3, [pc, #16]	; (800a300 <HAL_UART_TxCpltCallback+0x1c>)
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	701a      	strb	r2, [r3, #0]




}
 800a2f2:	bf00      	nop
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	2000041a 	.word	0x2000041a

0800a304 <MadgwickQuaternionUpdate>:




void MadgwickQuaternionUpdate(float ax, float ay, float az, float gyrox, float gyroy, float gyroz,float deltat,float zeta,float beta )
{
 800a304:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a308:	b0c0      	sub	sp, #256	; 0x100
 800a30a:	af04      	add	r7, sp, #16
 800a30c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800a310:	edc7 0a08 	vstr	s1, [r7, #32]
 800a314:	ed87 1a07 	vstr	s2, [r7, #28]
 800a318:	edc7 1a06 	vstr	s3, [r7, #24]
 800a31c:	ed87 2a05 	vstr	s4, [r7, #20]
 800a320:	edc7 2a04 	vstr	s5, [r7, #16]
 800a324:	ed87 3a03 	vstr	s6, [r7, #12]
 800a328:	edc7 3a02 	vstr	s7, [r7, #8]
 800a32c:	ed87 4a01 	vstr	s8, [r7, #4]


	float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 800a330:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800a334:	653b      	str	r3, [r7, #80]	; 0x50
 800a336:	f04f 0300 	mov.w	r3, #0
 800a33a:	657b      	str	r3, [r7, #84]	; 0x54
 800a33c:	f04f 0300 	mov.w	r3, #0
 800a340:	65bb      	str	r3, [r7, #88]	; 0x58
 800a342:	f04f 0300 	mov.w	r3, #0
 800a346:	65fb      	str	r3, [r7, #92]	; 0x5c
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];         // short name local variable for readability
 800a348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a34a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a350:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a35a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a35c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float qDot1, qDot2, qDot3, qDot4;
	float hatDot1, hatDot2, hatDot3, hatDot4;
	float gerrx, gerry, gerrz, gbiasx, gbiasy, gbiasz;        // gyro bias error

	// Auxiliary variables to avoid repeated arithmetic
	float _halfq1 = 0.5f * q1;
 800a360:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800a364:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a36c:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
	float _halfq2 = 0.5f * q2;
 800a370:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800a374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a37c:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	float _halfq3 = 0.5f * q3;
 800a380:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800a384:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a38c:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	float _halfq4 = 0.5f * q4;
 800a390:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800a394:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a39c:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
	float _2q1 = 2.0f * q1;
 800a3a0:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800a3a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3a8:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	float _2q2 = 2.0f * q2;
 800a3ac:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800a3b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3b4:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	float _2q3 = 2.0f * q3;
 800a3b8:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800a3bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3c0:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	float _2q4 = 2.0f * q4;
 800a3c4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800a3c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a3cc:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
//	float _2q1q3 = 2.0f * q1 * q3;
//	float _2q3q4 = 2.0f * q3 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 800a3d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a3d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a3d8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a3dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3e4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a3e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a3ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3f0:	ee17 0a90 	vmov	r0, s15
 800a3f4:	f7f6 f8b8 	bl	8000568 <__aeabi_f2d>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	ec43 2b10 	vmov	d0, r2, r3
 800a400:	f011 fd72 	bl	801bee8 <sqrt>
 800a404:	ec53 2b10 	vmov	r2, r3, d0
 800a408:	4610      	mov	r0, r2
 800a40a:	4619      	mov	r1, r3
 800a40c:	f7f6 fbfc 	bl	8000c08 <__aeabi_d2f>
 800a410:	4603      	mov	r3, r0
 800a412:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	if (norm == 0.0f) return; // handle NaN
 800a416:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a41a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a422:	f000 83ae 	beq.w	800ab82 <MadgwickQuaternionUpdate+0x87e>
	norm = 1.0f/norm;
 800a426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a42a:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800a42e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a432:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	ax *= norm;
 800a436:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a43a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a442:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	ay *= norm;
 800a446:	ed97 7a08 	vldr	s14, [r7, #32]
 800a44a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a452:	edc7 7a08 	vstr	s15, [r7, #32]
	az *= norm;
 800a456:	ed97 7a07 	vldr	s14, [r7, #28]
 800a45a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a462:	edc7 7a07 	vstr	s15, [r7, #28]

	// Compute the objective function and Jacobian
	f1 = _2q2 * q4 - _2q1 * q3 - ax;
 800a466:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800a46a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800a46e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a472:	edd7 6a33 	vldr	s13, [r7, #204]	; 0xcc
 800a476:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800a47a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a47e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a482:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a48a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	f2 = _2q1 * q2 + _2q3 * q4 - ay;
 800a48e:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800a492:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800a496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a49a:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800a49e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800a4a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4aa:	edd7 7a08 	vldr	s15, [r7, #32]
 800a4ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4b2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	f3 = 1.0f - _2q2 * q2 - _2q3 * q3 - az;
 800a4b6:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 800a4ba:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800a4be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4ca:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800a4ce:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800a4d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a4da:	edd7 7a07 	vldr	s15, [r7, #28]
 800a4de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	J_11or24 = _2q3;
 800a4e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	J_12or23 = _2q4;
 800a4ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	J_13or22 = _2q1;
 800a4f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	J_14or21 = _2q2;
 800a4fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	J_32 = 2.0f * J_14or21;
 800a506:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a50a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a50e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	J_33 = 2.0f * J_11or24;
 800a512:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a516:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a51a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98

	// Compute the gradient (matrix multiplication)
	hatDot1 = J_14or21 * f2 - J_11or24 * f1;
 800a51e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800a522:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a52a:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800a52e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a53a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	hatDot2 = J_12or23 * f1 + J_13or22 * f2 - J_32 * f3;
 800a53e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800a542:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a54a:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800a54e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a55a:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 800a55e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a566:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a56a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	hatDot3 = J_12or23 * f2 - J_33 *f3 - J_13or22 * f1;
 800a56e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800a572:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a57a:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800a57e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a582:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a586:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a58a:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800a58e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a59a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	hatDot4 = J_14or21 * f1 + J_11or24 * f2;
 800a59e:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800a5a2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a5a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5aa:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800a5ae:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a5b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5ba:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

	// Normalize the gradient
	norm = sqrt(hatDot1 * hatDot1 + hatDot2 * hatDot2 + hatDot3 * hatDot3 + hatDot4 * hatDot4);
 800a5be:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a5c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a5c6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a5ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5d2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5de:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a5e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5ea:	ee17 0a90 	vmov	r0, s15
 800a5ee:	f7f5 ffbb 	bl	8000568 <__aeabi_f2d>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	ec43 2b10 	vmov	d0, r2, r3
 800a5fa:	f011 fc75 	bl	801bee8 <sqrt>
 800a5fe:	ec53 2b10 	vmov	r2, r3, d0
 800a602:	4610      	mov	r0, r2
 800a604:	4619      	mov	r1, r3
 800a606:	f7f6 faff 	bl	8000c08 <__aeabi_d2f>
 800a60a:	4603      	mov	r3, r0
 800a60c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	hatDot1 /= norm;
 800a610:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800a614:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800a618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a61c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	hatDot2 /= norm;
 800a620:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 800a624:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800a628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a62c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
	hatDot3 /= norm;
 800a630:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800a634:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800a638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	hatDot4 /= norm;
 800a640:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800a644:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800a648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a64c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

	// Compute estimated gyroscope biases
	gerrx = _2q1 * hatDot2 - _2q2 * hatDot1 - _2q3 * hatDot4 + _2q4 * hatDot3;
 800a650:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800a654:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a65c:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 800a660:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a668:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a66c:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800a670:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a67c:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800a680:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a68c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	gerry = _2q1 * hatDot3 + _2q2 * hatDot4 - _2q3 * hatDot1 - _2q4 * hatDot2;
 800a690:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800a694:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a69c:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 800a6a0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a6a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6ac:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800a6b0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a6b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6bc:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800a6c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6cc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	gerrz = _2q1 * hatDot4 - _2q2 * hatDot3 + _2q3 * hatDot2 - _2q4 * hatDot1;
 800a6d0:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800a6d4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a6d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6dc:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 800a6e0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a6e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6ec:	edd7 6a31 	vldr	s13, [r7, #196]	; 0xc4
 800a6f0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a6f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a6f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6fc:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800a700:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a70c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

	// Compute and remove gyroscope biases
	gbiasx += gerrx * deltat * zeta;
 800a710:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800a714:	edd7 7a03 	vldr	s15, [r7, #12]
 800a718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a71c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a724:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800a728:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a72c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	gbiasy += gerry * deltat * zeta;
 800a730:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a734:	edd7 7a03 	vldr	s15, [r7, #12]
 800a738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a73c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a744:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800a748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a74c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	gbiasz += gerrz * deltat * zeta;
 800a750:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800a754:	edd7 7a03 	vldr	s15, [r7, #12]
 800a758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a75c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a760:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a764:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800a768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a76c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
//	gyrox -= gbiasx;
//	gyroy -= gbiasy;
//	gyroz -= gbiasz;

	// Compute the quaternion derivative
	qDot1 = -_halfq2 * gyrox - _halfq3 * gyroy - _halfq4 * gyroz;
 800a770:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 800a774:	eeb1 7a67 	vneg.f32	s14, s15
 800a778:	edd7 7a06 	vldr	s15, [r7, #24]
 800a77c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a780:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 800a784:	edd7 7a05 	vldr	s15, [r7, #20]
 800a788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a78c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a790:	edd7 6a34 	vldr	s13, [r7, #208]	; 0xd0
 800a794:	edd7 7a04 	vldr	s15, [r7, #16]
 800a798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a79c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7a0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 =  _halfq1 * gyrox + _halfq3 * gyroz - _halfq4 * gyroy;
 800a7a4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a7a8:	edd7 7a06 	vldr	s15, [r7, #24]
 800a7ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7b0:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 800a7b4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a7b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a7c0:	edd7 6a34 	vldr	s13, [r7, #208]	; 0xd0
 800a7c4:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7d0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 =  _halfq1 * gyroy - _halfq2 * gyroz + _halfq4 * gyrox;
 800a7d4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a7d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7e0:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 800a7e4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a7e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a7f0:	edd7 6a34 	vldr	s13, [r7, #208]	; 0xd0
 800a7f4:	edd7 7a06 	vldr	s15, [r7, #24]
 800a7f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a800:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 =  _halfq1 * gyroz + _halfq2 * gyroy - _halfq3 * gyrox;
 800a804:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a808:	edd7 7a04 	vldr	s15, [r7, #16]
 800a80c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a810:	edd7 6a36 	vldr	s13, [r7, #216]	; 0xd8
 800a814:	edd7 7a05 	vldr	s15, [r7, #20]
 800a818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a81c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a820:	edd7 6a35 	vldr	s13, [r7, #212]	; 0xd4
 800a824:	edd7 7a06 	vldr	s15, [r7, #24]
 800a828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a82c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a830:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute then integrate estimated quaternion derivative
	q1 += (qDot1 -(beta * hatDot1)) * deltat;
 800a834:	ed97 7a01 	vldr	s14, [r7, #4]
 800a838:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a83c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a840:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800a844:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a848:	edd7 7a03 	vldr	s15, [r7, #12]
 800a84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a850:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800a854:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a858:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
	q2 += (qDot2 -(beta * hatDot2)) * deltat;
 800a85c:	ed97 7a01 	vldr	s14, [r7, #4]
 800a860:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a864:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a868:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800a86c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a870:	edd7 7a03 	vldr	s15, [r7, #12]
 800a874:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a878:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 800a87c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a880:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
	q3 += (qDot3 -(beta * hatDot3)) * deltat;
 800a884:	ed97 7a01 	vldr	s14, [r7, #4]
 800a888:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a890:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800a894:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a898:	edd7 7a03 	vldr	s15, [r7, #12]
 800a89c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a0:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 800a8a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8a8:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
	q4 += (qDot4 -(beta * hatDot4)) * deltat;
 800a8ac:	ed97 7a01 	vldr	s14, [r7, #4]
 800a8b0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a8bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a8c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800a8c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c8:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800a8cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8d0:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

	// Normalize the quaternion
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 800a8d4:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 800a8d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a8dc:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 800a8e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a8e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8e8:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800a8ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a8f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8f4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800a8f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a8fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a900:	ee17 0a90 	vmov	r0, s15
 800a904:	f7f5 fe30 	bl	8000568 <__aeabi_f2d>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	ec43 2b10 	vmov	d0, r2, r3
 800a910:	f011 faea 	bl	801bee8 <sqrt>
 800a914:	ec53 2b10 	vmov	r2, r3, d0
 800a918:	4610      	mov	r0, r2
 800a91a:	4619      	mov	r1, r3
 800a91c:	f7f6 f974 	bl	8000c08 <__aeabi_d2f>
 800a920:	4603      	mov	r3, r0
 800a922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	norm = 1.0f/norm;
 800a926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a92a:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800a92e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a932:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	q[0] = q1 * norm;
 800a936:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 800a93a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a942:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	q[1] = q2 * norm;
 800a946:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 800a94a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a952:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	q[2] = q3 * norm;
 800a956:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 800a95a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a962:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q[3] = q4 * norm;
 800a966:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 800a96a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800a96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a972:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		Pitch = 180.f - Pitch;
	else
		Pitch = -(Pitch + 180.f);

*/
	Yaw   = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 800a976:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a97a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a97e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a982:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800a986:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a98a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a98e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a992:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a996:	ee17 0a90 	vmov	r0, s15
 800a99a:	f7f5 fde5 	bl	8000568 <__aeabi_f2d>
 800a99e:	4604      	mov	r4, r0
 800a9a0:	460d      	mov	r5, r1
 800a9a2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a9a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a9aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9ae:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800a9b2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a9b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a9be:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800a9c2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a9c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9ce:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800a9d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a9d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a9da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9de:	ee17 0a90 	vmov	r0, s15
 800a9e2:	f7f5 fdc1 	bl	8000568 <__aeabi_f2d>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	ec43 2b11 	vmov	d1, r2, r3
 800a9ee:	ec45 4b10 	vmov	d0, r4, r5
 800a9f2:	f011 f9c9 	bl	801bd88 <atan2>
 800a9f6:	ec53 2b10 	vmov	r2, r3, d0
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f7f6 f903 	bl	8000c08 <__aeabi_d2f>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4a61      	ldr	r2, [pc, #388]	; (800ab8c <MadgwickQuaternionUpdate+0x888>)
 800aa06:	6013      	str	r3, [r2, #0]
	Pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
 800aa08:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800aa0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800aa10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa14:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800aa18:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800aa1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa28:	ee17 0a90 	vmov	r0, s15
 800aa2c:	f7f5 fd9c 	bl	8000568 <__aeabi_f2d>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	ec43 2b10 	vmov	d0, r2, r3
 800aa38:	f011 f96c 	bl	801bd14 <asin>
 800aa3c:	ec53 2b10 	vmov	r2, r3, d0
 800aa40:	4610      	mov	r0, r2
 800aa42:	4619      	mov	r1, r3
 800aa44:	f7f6 f8e0 	bl	8000c08 <__aeabi_d2f>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef1 7a67 	vneg.f32	s15, s15
 800aa52:	4b4f      	ldr	r3, [pc, #316]	; (800ab90 <MadgwickQuaternionUpdate+0x88c>)
 800aa54:	edc3 7a00 	vstr	s15, [r3]
	Roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 800aa58:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aa5c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800aa60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa64:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800aa68:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800aa6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800aa78:	ee17 0a90 	vmov	r0, s15
 800aa7c:	f7f5 fd74 	bl	8000568 <__aeabi_f2d>
 800aa80:	4604      	mov	r4, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aa88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800aa8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa90:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800aa94:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800aa98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aaa0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800aaa4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800aaa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aaac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aab0:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800aab4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800aab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aabc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac0:	ee17 0a90 	vmov	r0, s15
 800aac4:	f7f5 fd50 	bl	8000568 <__aeabi_f2d>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	ec43 2b11 	vmov	d1, r2, r3
 800aad0:	ec45 4b10 	vmov	d0, r4, r5
 800aad4:	f011 f958 	bl	801bd88 <atan2>
 800aad8:	ec53 2b10 	vmov	r2, r3, d0
 800aadc:	4610      	mov	r0, r2
 800aade:	4619      	mov	r1, r3
 800aae0:	f7f6 f892 	bl	8000c08 <__aeabi_d2f>
 800aae4:	4603      	mov	r3, r0
 800aae6:	4a2b      	ldr	r2, [pc, #172]	; (800ab94 <MadgwickQuaternionUpdate+0x890>)
 800aae8:	6013      	str	r3, [r2, #0]


	Pitch *= 180.0f / PI;
 800aaea:	4b29      	ldr	r3, [pc, #164]	; (800ab90 <MadgwickQuaternionUpdate+0x88c>)
 800aaec:	edd3 7a00 	vldr	s15, [r3]
 800aaf0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ab98 <MadgwickQuaternionUpdate+0x894>
 800aaf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aaf8:	4b25      	ldr	r3, [pc, #148]	; (800ab90 <MadgwickQuaternionUpdate+0x88c>)
 800aafa:	edc3 7a00 	vstr	s15, [r3]
	Yaw   *= 180.0f / PI;
 800aafe:	4b23      	ldr	r3, [pc, #140]	; (800ab8c <MadgwickQuaternionUpdate+0x888>)
 800ab00:	edd3 7a00 	vldr	s15, [r3]
 800ab04:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ab98 <MadgwickQuaternionUpdate+0x894>
 800ab08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab0c:	4b1f      	ldr	r3, [pc, #124]	; (800ab8c <MadgwickQuaternionUpdate+0x888>)
 800ab0e:	edc3 7a00 	vstr	s15, [r3]
    Roll  *= 180.0f / PI;
 800ab12:	4b20      	ldr	r3, [pc, #128]	; (800ab94 <MadgwickQuaternionUpdate+0x890>)
 800ab14:	edd3 7a00 	vldr	s15, [r3]
 800ab18:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ab98 <MadgwickQuaternionUpdate+0x894>
 800ab1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab20:	4b1c      	ldr	r3, [pc, #112]	; (800ab94 <MadgwickQuaternionUpdate+0x890>)
 800ab22:	edc3 7a00 	vstr	s15, [r3]
    uint8_t quaternion_buf[36];

    sprintf(quaternion_buf,"Roll %.3f degree , Pitch %.3f degree, Yaw %.3f degree\r\n",Roll,Pitch,Yaw);
 800ab26:	4b1b      	ldr	r3, [pc, #108]	; (800ab94 <MadgwickQuaternionUpdate+0x890>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7f5 fd1c 	bl	8000568 <__aeabi_f2d>
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	4b16      	ldr	r3, [pc, #88]	; (800ab90 <MadgwickQuaternionUpdate+0x88c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f5 fd15 	bl	8000568 <__aeabi_f2d>
 800ab3e:	4604      	mov	r4, r0
 800ab40:	460d      	mov	r5, r1
 800ab42:	4b12      	ldr	r3, [pc, #72]	; (800ab8c <MadgwickQuaternionUpdate+0x888>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7f5 fd0e 	bl	8000568 <__aeabi_f2d>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800ab54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab58:	e9cd 4500 	strd	r4, r5, [sp]
 800ab5c:	4642      	mov	r2, r8
 800ab5e:	464b      	mov	r3, r9
 800ab60:	490e      	ldr	r1, [pc, #56]	; (800ab9c <MadgwickQuaternionUpdate+0x898>)
 800ab62:	f00d f97f 	bl	8017e64 <siprintf>
    CDC_Transmit_FS(quaternion_buf, strlen(quaternion_buf));
 800ab66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f5 fb40 	bl	80001f0 <strlen>
 800ab70:	4603      	mov	r3, r0
 800ab72:	b29a      	uxth	r2, r3
 800ab74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f00b fddc 	bl	8016738 <CDC_Transmit_FS>
 800ab80:	e000      	b.n	800ab84 <MadgwickQuaternionUpdate+0x880>
	if (norm == 0.0f) return; // handle NaN
 800ab82:	bf00      	nop



}
 800ab84:	37f0      	adds	r7, #240	; 0xf0
 800ab86:	46bd      	mov	sp, r7
 800ab88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ab8c:	200007b8 	.word	0x200007b8
 800ab90:	20000a0c 	.word	0x20000a0c
 800ab94:	20000888 	.word	0x20000888
 800ab98:	42652ee0 	.word	0x42652ee0
 800ab9c:	0801f118 	.word	0x0801f118

0800aba0 <sensor_read_register8>:
		return SENSOR_ERROR;
	}
}

uint8_t sensor_read_register8(uint8_t chipAdd, uint8_t regAdd)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af04      	add	r7, sp, #16
 800aba6:	4603      	mov	r3, r0
 800aba8:	460a      	mov	r2, r1
 800abaa:	71fb      	strb	r3, [r7, #7]
 800abac:	4613      	mov	r3, r2
 800abae:	71bb      	strb	r3, [r7, #6]
	uint8_t data;
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read( &hi2c2, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, &data, I2C_DATA_SIZE_1_BYTE, I2C_TIMEOUT );
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	b299      	uxth	r1, r3
 800abb4:	79bb      	ldrb	r3, [r7, #6]
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	2364      	movs	r3, #100	; 0x64
 800abba:	9302      	str	r3, [sp, #8]
 800abbc:	2301      	movs	r3, #1
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	f107 030e 	add.w	r3, r7, #14
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	2301      	movs	r3, #1
 800abc8:	4807      	ldr	r0, [pc, #28]	; (800abe8 <sensor_read_register8+0x48>)
 800abca:	f7f9 f9b9 	bl	8003f40 <HAL_I2C_Mem_Read>
 800abce:	4603      	mov	r3, r0
 800abd0:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != status) {
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <sensor_read_register8+0x3c>
		return 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	e000      	b.n	800abde <sensor_read_register8+0x3e>
	} else {
		return data;
 800abdc:	7bbb      	ldrb	r3, [r7, #14]
	}
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000800 	.word	0x20000800

0800abec <sensor_write_register8>:
		return retVal;
	}
}

sensor_status_e sensor_write_register8(uint8_t chipAdd, uint8_t regAdd, uint8_t value)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b088      	sub	sp, #32
 800abf0:	af04      	add	r7, sp, #16
 800abf2:	4603      	mov	r3, r0
 800abf4:	71fb      	strb	r3, [r7, #7]
 800abf6:	460b      	mov	r3, r1
 800abf8:	71bb      	strb	r3, [r7, #6]
 800abfa:	4613      	mov	r3, r2
 800abfc:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Write( &hi2c2, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, &value, I2C_DATA_SIZE_1_BYTE, I2C_TIMEOUT );
 800abfe:	79fb      	ldrb	r3, [r7, #7]
 800ac00:	b299      	uxth	r1, r3
 800ac02:	79bb      	ldrb	r3, [r7, #6]
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	2364      	movs	r3, #100	; 0x64
 800ac08:	9302      	str	r3, [sp, #8]
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	1d7b      	adds	r3, r7, #5
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	2301      	movs	r3, #1
 800ac14:	4807      	ldr	r0, [pc, #28]	; (800ac34 <sensor_write_register8+0x48>)
 800ac16:	f7f9 f899 	bl	8003d4c <HAL_I2C_Mem_Write>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	73fb      	strb	r3, [r7, #15]

    if (HAL_OK != status) {
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <sensor_write_register8+0x3c>
        return SENSOR_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <sensor_write_register8+0x3e>
    } else {
        return SENSOR_OK;
 800ac28:	2300      	movs	r3, #0
    }
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000800 	.word	0x20000800

0800ac38 <sensor_read_bytes>:
	}
}


sensor_status_e sensor_read_bytes(uint8_t chipAdd, uint8_t regAdd, uint8_t *pBuffer, uint8_t size)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af04      	add	r7, sp, #16
 800ac3e:	603a      	str	r2, [r7, #0]
 800ac40:	461a      	mov	r2, r3
 800ac42:	4603      	mov	r3, r0
 800ac44:	71fb      	strb	r3, [r7, #7]
 800ac46:	460b      	mov	r3, r1
 800ac48:	71bb      	strb	r3, [r7, #6]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Mem_Read(&hi2c2, chipAdd, regAdd, I2C_REG_ADD_SIZE_1_BYTE, pBuffer, size, I2C_TIMEOUT);
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	b299      	uxth	r1, r3
 800ac52:	79bb      	ldrb	r3, [r7, #6]
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	797b      	ldrb	r3, [r7, #5]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	2064      	movs	r0, #100	; 0x64
 800ac5c:	9002      	str	r0, [sp, #8]
 800ac5e:	9301      	str	r3, [sp, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2301      	movs	r3, #1
 800ac66:	4807      	ldr	r0, [pc, #28]	; (800ac84 <sensor_read_bytes+0x4c>)
 800ac68:	f7f9 f96a 	bl	8003f40 <HAL_I2C_Mem_Read>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]

	if (HAL_OK != status) {
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <sensor_read_bytes+0x42>
		return SENSOR_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e000      	b.n	800ac7c <sensor_read_bytes+0x44>
	} else {
		return SENSOR_OK;
 800ac7a:	2300      	movs	r3, #0
	}
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	20000800 	.word	0x20000800

0800ac88 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ac8e:	4b8d      	ldr	r3, [pc, #564]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ac90:	22c0      	movs	r2, #192	; 0xc0
 800ac92:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ac94:	4b8b      	ldr	r3, [pc, #556]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ac96:	22a8      	movs	r2, #168	; 0xa8
 800ac98:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800ac9a:	4b8a      	ldr	r3, [pc, #552]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 800aca0:	4b88      	ldr	r3, [pc, #544]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800aca2:	226f      	movs	r2, #111	; 0x6f
 800aca4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800aca6:	4b88      	ldr	r3, [pc, #544]	; (800aec8 <MX_LWIP_Init+0x240>)
 800aca8:	22ff      	movs	r2, #255	; 0xff
 800acaa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800acac:	4b86      	ldr	r3, [pc, #536]	; (800aec8 <MX_LWIP_Init+0x240>)
 800acae:	22ff      	movs	r2, #255	; 0xff
 800acb0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800acb2:	4b85      	ldr	r3, [pc, #532]	; (800aec8 <MX_LWIP_Init+0x240>)
 800acb4:	22ff      	movs	r2, #255	; 0xff
 800acb6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800acb8:	4b83      	ldr	r3, [pc, #524]	; (800aec8 <MX_LWIP_Init+0x240>)
 800acba:	2200      	movs	r2, #0
 800acbc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800acbe:	4b83      	ldr	r3, [pc, #524]	; (800aecc <MX_LWIP_Init+0x244>)
 800acc0:	22c0      	movs	r2, #192	; 0xc0
 800acc2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800acc4:	4b81      	ldr	r3, [pc, #516]	; (800aecc <MX_LWIP_Init+0x244>)
 800acc6:	22a8      	movs	r2, #168	; 0xa8
 800acc8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800acca:	4b80      	ldr	r3, [pc, #512]	; (800aecc <MX_LWIP_Init+0x244>)
 800accc:	2200      	movs	r2, #0
 800acce:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800acd0:	4b7e      	ldr	r3, [pc, #504]	; (800aecc <MX_LWIP_Init+0x244>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800acd6:	f002 f8a4 	bl	800ce22 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800acda:	4b7a      	ldr	r3, [pc, #488]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	061a      	lsls	r2, r3, #24
 800ace0:	4b78      	ldr	r3, [pc, #480]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	041b      	lsls	r3, r3, #16
 800ace6:	431a      	orrs	r2, r3
 800ace8:	4b76      	ldr	r3, [pc, #472]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800acea:	789b      	ldrb	r3, [r3, #2]
 800acec:	021b      	lsls	r3, r3, #8
 800acee:	4313      	orrs	r3, r2
 800acf0:	4a74      	ldr	r2, [pc, #464]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800acf2:	78d2      	ldrb	r2, [r2, #3]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	061a      	lsls	r2, r3, #24
 800acf8:	4b72      	ldr	r3, [pc, #456]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	0619      	lsls	r1, r3, #24
 800acfe:	4b71      	ldr	r3, [pc, #452]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad00:	785b      	ldrb	r3, [r3, #1]
 800ad02:	041b      	lsls	r3, r3, #16
 800ad04:	4319      	orrs	r1, r3
 800ad06:	4b6f      	ldr	r3, [pc, #444]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad08:	789b      	ldrb	r3, [r3, #2]
 800ad0a:	021b      	lsls	r3, r3, #8
 800ad0c:	430b      	orrs	r3, r1
 800ad0e:	496d      	ldr	r1, [pc, #436]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad10:	78c9      	ldrb	r1, [r1, #3]
 800ad12:	430b      	orrs	r3, r1
 800ad14:	021b      	lsls	r3, r3, #8
 800ad16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	4b69      	ldr	r3, [pc, #420]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	0619      	lsls	r1, r3, #24
 800ad22:	4b68      	ldr	r3, [pc, #416]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad24:	785b      	ldrb	r3, [r3, #1]
 800ad26:	041b      	lsls	r3, r3, #16
 800ad28:	4319      	orrs	r1, r3
 800ad2a:	4b66      	ldr	r3, [pc, #408]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad2c:	789b      	ldrb	r3, [r3, #2]
 800ad2e:	021b      	lsls	r3, r3, #8
 800ad30:	430b      	orrs	r3, r1
 800ad32:	4964      	ldr	r1, [pc, #400]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad34:	78c9      	ldrb	r1, [r1, #3]
 800ad36:	430b      	orrs	r3, r1
 800ad38:	0a1b      	lsrs	r3, r3, #8
 800ad3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ad3e:	431a      	orrs	r2, r3
 800ad40:	4b60      	ldr	r3, [pc, #384]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	0619      	lsls	r1, r3, #24
 800ad46:	4b5f      	ldr	r3, [pc, #380]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad48:	785b      	ldrb	r3, [r3, #1]
 800ad4a:	041b      	lsls	r3, r3, #16
 800ad4c:	4319      	orrs	r1, r3
 800ad4e:	4b5d      	ldr	r3, [pc, #372]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad50:	789b      	ldrb	r3, [r3, #2]
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	430b      	orrs	r3, r1
 800ad56:	495b      	ldr	r1, [pc, #364]	; (800aec4 <MX_LWIP_Init+0x23c>)
 800ad58:	78c9      	ldrb	r1, [r1, #3]
 800ad5a:	430b      	orrs	r3, r1
 800ad5c:	0e1b      	lsrs	r3, r3, #24
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	4a5b      	ldr	r2, [pc, #364]	; (800aed0 <MX_LWIP_Init+0x248>)
 800ad62:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ad64:	4b58      	ldr	r3, [pc, #352]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	061a      	lsls	r2, r3, #24
 800ad6a:	4b57      	ldr	r3, [pc, #348]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad6c:	785b      	ldrb	r3, [r3, #1]
 800ad6e:	041b      	lsls	r3, r3, #16
 800ad70:	431a      	orrs	r2, r3
 800ad72:	4b55      	ldr	r3, [pc, #340]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad74:	789b      	ldrb	r3, [r3, #2]
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	4a53      	ldr	r2, [pc, #332]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad7c:	78d2      	ldrb	r2, [r2, #3]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	061a      	lsls	r2, r3, #24
 800ad82:	4b51      	ldr	r3, [pc, #324]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	0619      	lsls	r1, r3, #24
 800ad88:	4b4f      	ldr	r3, [pc, #316]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad8a:	785b      	ldrb	r3, [r3, #1]
 800ad8c:	041b      	lsls	r3, r3, #16
 800ad8e:	4319      	orrs	r1, r3
 800ad90:	4b4d      	ldr	r3, [pc, #308]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad92:	789b      	ldrb	r3, [r3, #2]
 800ad94:	021b      	lsls	r3, r3, #8
 800ad96:	430b      	orrs	r3, r1
 800ad98:	494b      	ldr	r1, [pc, #300]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ad9a:	78c9      	ldrb	r1, [r1, #3]
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	021b      	lsls	r3, r3, #8
 800ada0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ada4:	431a      	orrs	r2, r3
 800ada6:	4b48      	ldr	r3, [pc, #288]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	0619      	lsls	r1, r3, #24
 800adac:	4b46      	ldr	r3, [pc, #280]	; (800aec8 <MX_LWIP_Init+0x240>)
 800adae:	785b      	ldrb	r3, [r3, #1]
 800adb0:	041b      	lsls	r3, r3, #16
 800adb2:	4319      	orrs	r1, r3
 800adb4:	4b44      	ldr	r3, [pc, #272]	; (800aec8 <MX_LWIP_Init+0x240>)
 800adb6:	789b      	ldrb	r3, [r3, #2]
 800adb8:	021b      	lsls	r3, r3, #8
 800adba:	430b      	orrs	r3, r1
 800adbc:	4942      	ldr	r1, [pc, #264]	; (800aec8 <MX_LWIP_Init+0x240>)
 800adbe:	78c9      	ldrb	r1, [r1, #3]
 800adc0:	430b      	orrs	r3, r1
 800adc2:	0a1b      	lsrs	r3, r3, #8
 800adc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800adc8:	431a      	orrs	r2, r3
 800adca:	4b3f      	ldr	r3, [pc, #252]	; (800aec8 <MX_LWIP_Init+0x240>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	0619      	lsls	r1, r3, #24
 800add0:	4b3d      	ldr	r3, [pc, #244]	; (800aec8 <MX_LWIP_Init+0x240>)
 800add2:	785b      	ldrb	r3, [r3, #1]
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	4319      	orrs	r1, r3
 800add8:	4b3b      	ldr	r3, [pc, #236]	; (800aec8 <MX_LWIP_Init+0x240>)
 800adda:	789b      	ldrb	r3, [r3, #2]
 800addc:	021b      	lsls	r3, r3, #8
 800adde:	430b      	orrs	r3, r1
 800ade0:	4939      	ldr	r1, [pc, #228]	; (800aec8 <MX_LWIP_Init+0x240>)
 800ade2:	78c9      	ldrb	r1, [r1, #3]
 800ade4:	430b      	orrs	r3, r1
 800ade6:	0e1b      	lsrs	r3, r3, #24
 800ade8:	4313      	orrs	r3, r2
 800adea:	4a3a      	ldr	r2, [pc, #232]	; (800aed4 <MX_LWIP_Init+0x24c>)
 800adec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800adee:	4b37      	ldr	r3, [pc, #220]	; (800aecc <MX_LWIP_Init+0x244>)
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	061a      	lsls	r2, r3, #24
 800adf4:	4b35      	ldr	r3, [pc, #212]	; (800aecc <MX_LWIP_Init+0x244>)
 800adf6:	785b      	ldrb	r3, [r3, #1]
 800adf8:	041b      	lsls	r3, r3, #16
 800adfa:	431a      	orrs	r2, r3
 800adfc:	4b33      	ldr	r3, [pc, #204]	; (800aecc <MX_LWIP_Init+0x244>)
 800adfe:	789b      	ldrb	r3, [r3, #2]
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	4313      	orrs	r3, r2
 800ae04:	4a31      	ldr	r2, [pc, #196]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae06:	78d2      	ldrb	r2, [r2, #3]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	061a      	lsls	r2, r3, #24
 800ae0c:	4b2f      	ldr	r3, [pc, #188]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	0619      	lsls	r1, r3, #24
 800ae12:	4b2e      	ldr	r3, [pc, #184]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	4319      	orrs	r1, r3
 800ae1a:	4b2c      	ldr	r3, [pc, #176]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae1c:	789b      	ldrb	r3, [r3, #2]
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	430b      	orrs	r3, r1
 800ae22:	492a      	ldr	r1, [pc, #168]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae24:	78c9      	ldrb	r1, [r1, #3]
 800ae26:	430b      	orrs	r3, r1
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	4b26      	ldr	r3, [pc, #152]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	0619      	lsls	r1, r3, #24
 800ae36:	4b25      	ldr	r3, [pc, #148]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	041b      	lsls	r3, r3, #16
 800ae3c:	4319      	orrs	r1, r3
 800ae3e:	4b23      	ldr	r3, [pc, #140]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae40:	789b      	ldrb	r3, [r3, #2]
 800ae42:	021b      	lsls	r3, r3, #8
 800ae44:	430b      	orrs	r3, r1
 800ae46:	4921      	ldr	r1, [pc, #132]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae48:	78c9      	ldrb	r1, [r1, #3]
 800ae4a:	430b      	orrs	r3, r1
 800ae4c:	0a1b      	lsrs	r3, r3, #8
 800ae4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae52:	431a      	orrs	r2, r3
 800ae54:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	0619      	lsls	r1, r3, #24
 800ae5a:	4b1c      	ldr	r3, [pc, #112]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae5c:	785b      	ldrb	r3, [r3, #1]
 800ae5e:	041b      	lsls	r3, r3, #16
 800ae60:	4319      	orrs	r1, r3
 800ae62:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae64:	789b      	ldrb	r3, [r3, #2]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	430b      	orrs	r3, r1
 800ae6a:	4918      	ldr	r1, [pc, #96]	; (800aecc <MX_LWIP_Init+0x244>)
 800ae6c:	78c9      	ldrb	r1, [r1, #3]
 800ae6e:	430b      	orrs	r3, r1
 800ae70:	0e1b      	lsrs	r3, r3, #24
 800ae72:	4313      	orrs	r3, r2
 800ae74:	4a18      	ldr	r2, [pc, #96]	; (800aed8 <MX_LWIP_Init+0x250>)
 800ae76:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ae78:	4b18      	ldr	r3, [pc, #96]	; (800aedc <MX_LWIP_Init+0x254>)
 800ae7a:	9302      	str	r3, [sp, #8]
 800ae7c:	4b18      	ldr	r3, [pc, #96]	; (800aee0 <MX_LWIP_Init+0x258>)
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	2300      	movs	r3, #0
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	4b14      	ldr	r3, [pc, #80]	; (800aed8 <MX_LWIP_Init+0x250>)
 800ae86:	4a13      	ldr	r2, [pc, #76]	; (800aed4 <MX_LWIP_Init+0x24c>)
 800ae88:	4911      	ldr	r1, [pc, #68]	; (800aed0 <MX_LWIP_Init+0x248>)
 800ae8a:	4816      	ldr	r0, [pc, #88]	; (800aee4 <MX_LWIP_Init+0x25c>)
 800ae8c:	f002 fc6e 	bl	800d76c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ae90:	4814      	ldr	r0, [pc, #80]	; (800aee4 <MX_LWIP_Init+0x25c>)
 800ae92:	f002 fe1d 	bl	800dad0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ae96:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <MX_LWIP_Init+0x25c>)
 800ae98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae9c:	089b      	lsrs	r3, r3, #2
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800aea8:	480e      	ldr	r0, [pc, #56]	; (800aee4 <MX_LWIP_Init+0x25c>)
 800aeaa:	f002 fe21 	bl	800daf0 <netif_set_up>
 800aeae:	e002      	b.n	800aeb6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800aeb0:	480c      	ldr	r0, [pc, #48]	; (800aee4 <MX_LWIP_Init+0x25c>)
 800aeb2:	f002 fe89 	bl	800dbc8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800aeb6:	490c      	ldr	r1, [pc, #48]	; (800aee8 <MX_LWIP_Init+0x260>)
 800aeb8:	480a      	ldr	r0, [pc, #40]	; (800aee4 <MX_LWIP_Init+0x25c>)
 800aeba:	f002 feb7 	bl	800dc2c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800aebe:	bf00      	nop
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	20000ae0 	.word	0x20000ae0
 800aec8:	20000adc 	.word	0x20000adc
 800aecc:	20000ad4 	.word	0x20000ad4
 800aed0:	20000ad8 	.word	0x20000ad8
 800aed4:	20000ae4 	.word	0x20000ae4
 800aed8:	20000ae8 	.word	0x20000ae8
 800aedc:	08016411 	.word	0x08016411
 800aee0:	0800b331 	.word	0x0800b331
 800aee4:	20000854 	.word	0x20000854
 800aee8:	0800b39d 	.word	0x0800b39d

0800aeec <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08e      	sub	sp, #56	; 0x38
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	605a      	str	r2, [r3, #4]
 800aefe:	609a      	str	r2, [r3, #8]
 800af00:	60da      	str	r2, [r3, #12]
 800af02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a5d      	ldr	r2, [pc, #372]	; (800b080 <HAL_ETH_MspInit+0x194>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	f040 80b4 	bne.w	800b078 <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800af10:	2300      	movs	r3, #0
 800af12:	623b      	str	r3, [r7, #32]
 800af14:	4b5b      	ldr	r3, [pc, #364]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af18:	4a5a      	ldr	r2, [pc, #360]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800af1e:	6313      	str	r3, [r2, #48]	; 0x30
 800af20:	4b58      	ldr	r3, [pc, #352]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af28:	623b      	str	r3, [r7, #32]
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	2300      	movs	r3, #0
 800af2e:	61fb      	str	r3, [r7, #28]
 800af30:	4b54      	ldr	r3, [pc, #336]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af34:	4a53      	ldr	r2, [pc, #332]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af3a:	6313      	str	r3, [r2, #48]	; 0x30
 800af3c:	4b51      	ldr	r3, [pc, #324]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af44:	61fb      	str	r3, [r7, #28]
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	2300      	movs	r3, #0
 800af4a:	61bb      	str	r3, [r7, #24]
 800af4c:	4b4d      	ldr	r3, [pc, #308]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af50:	4a4c      	ldr	r2, [pc, #304]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af56:	6313      	str	r3, [r2, #48]	; 0x30
 800af58:	4b4a      	ldr	r3, [pc, #296]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af60:	61bb      	str	r3, [r7, #24]
 800af62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800af64:	2300      	movs	r3, #0
 800af66:	617b      	str	r3, [r7, #20]
 800af68:	4b46      	ldr	r3, [pc, #280]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	4a45      	ldr	r2, [pc, #276]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af6e:	f043 0304 	orr.w	r3, r3, #4
 800af72:	6313      	str	r3, [r2, #48]	; 0x30
 800af74:	4b43      	ldr	r3, [pc, #268]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af78:	f003 0304 	and.w	r3, r3, #4
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af80:	2300      	movs	r3, #0
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	4b3f      	ldr	r3, [pc, #252]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af88:	4a3e      	ldr	r2, [pc, #248]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af8a:	f043 0301 	orr.w	r3, r3, #1
 800af8e:	6313      	str	r3, [r2, #48]	; 0x30
 800af90:	4b3c      	ldr	r3, [pc, #240]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	613b      	str	r3, [r7, #16]
 800af9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af9c:	2300      	movs	r3, #0
 800af9e:	60fb      	str	r3, [r7, #12]
 800afa0:	4b38      	ldr	r3, [pc, #224]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800afa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa4:	4a37      	ldr	r2, [pc, #220]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800afa6:	f043 0302 	orr.w	r3, r3, #2
 800afaa:	6313      	str	r3, [r2, #48]	; 0x30
 800afac:	4b35      	ldr	r3, [pc, #212]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800afae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800afb8:	2300      	movs	r3, #0
 800afba:	60bb      	str	r3, [r7, #8]
 800afbc:	4b31      	ldr	r3, [pc, #196]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800afbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc0:	4a30      	ldr	r2, [pc, #192]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800afc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afc6:	6313      	str	r3, [r2, #48]	; 0x30
 800afc8:	4b2e      	ldr	r3, [pc, #184]	; (800b084 <HAL_ETH_MspInit+0x198>)
 800afca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd0:	60bb      	str	r3, [r7, #8]
 800afd2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800afd4:	2332      	movs	r3, #50	; 0x32
 800afd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afd8:	2302      	movs	r3, #2
 800afda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afdc:	2300      	movs	r3, #0
 800afde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800afe0:	2303      	movs	r3, #3
 800afe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800afe4:	230b      	movs	r3, #11
 800afe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800afe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afec:	4619      	mov	r1, r3
 800afee:	4826      	ldr	r0, [pc, #152]	; (800b088 <HAL_ETH_MspInit+0x19c>)
 800aff0:	f7f8 fba2 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800aff4:	2386      	movs	r3, #134	; 0x86
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aff8:	2302      	movs	r3, #2
 800affa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800affc:	2300      	movs	r3, #0
 800affe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b000:	2303      	movs	r3, #3
 800b002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b004:	230b      	movs	r3, #11
 800b006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b00c:	4619      	mov	r1, r3
 800b00e:	481f      	ldr	r0, [pc, #124]	; (800b08c <HAL_ETH_MspInit+0x1a0>)
 800b010:	f7f8 fb92 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b014:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b01a:	2302      	movs	r3, #2
 800b01c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b01e:	2300      	movs	r3, #0
 800b020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b022:	2303      	movs	r3, #3
 800b024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b026:	230b      	movs	r3, #11
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b02a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b02e:	4619      	mov	r1, r3
 800b030:	4817      	ldr	r0, [pc, #92]	; (800b090 <HAL_ETH_MspInit+0x1a4>)
 800b032:	f7f8 fb81 	bl	8003738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800b036:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b03a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b03c:	2302      	movs	r3, #2
 800b03e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b040:	2300      	movs	r3, #0
 800b042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b044:	2303      	movs	r3, #3
 800b046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b048:	230b      	movs	r3, #11
 800b04a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b04c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b050:	4619      	mov	r1, r3
 800b052:	4810      	ldr	r0, [pc, #64]	; (800b094 <HAL_ETH_MspInit+0x1a8>)
 800b054:	f7f8 fb70 	bl	8003738 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800b058:	2200      	movs	r2, #0
 800b05a:	2100      	movs	r1, #0
 800b05c:	203d      	movs	r0, #61	; 0x3d
 800b05e:	f7f7 f97a 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b062:	203d      	movs	r0, #61	; 0x3d
 800b064:	f7f7 f993 	bl	800238e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 800b068:	2200      	movs	r2, #0
 800b06a:	2100      	movs	r1, #0
 800b06c:	203e      	movs	r0, #62	; 0x3e
 800b06e:	f7f7 f972 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800b072:	203e      	movs	r0, #62	; 0x3e
 800b074:	f7f7 f98b 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b078:	bf00      	nop
 800b07a:	3738      	adds	r7, #56	; 0x38
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	40028000 	.word	0x40028000
 800b084:	40023800 	.word	0x40023800
 800b088:	40020800 	.word	0x40020800
 800b08c:	40020000 	.word	0x40020000
 800b090:	40020400 	.word	0x40020400
 800b094:	40021800 	.word	0x40021800

0800b098 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b0a4:	4b4d      	ldr	r3, [pc, #308]	; (800b1dc <low_level_init+0x144>)
 800b0a6:	4a4e      	ldr	r2, [pc, #312]	; (800b1e0 <low_level_init+0x148>)
 800b0a8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800b0aa:	4b4c      	ldr	r3, [pc, #304]	; (800b1dc <low_level_init+0x144>)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800b0b0:	4b4a      	ldr	r3, [pc, #296]	; (800b1dc <low_level_init+0x144>)
 800b0b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b0b6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b0b8:	4b48      	ldr	r3, [pc, #288]	; (800b1dc <low_level_init+0x144>)
 800b0ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0be:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800b0c0:	4b46      	ldr	r3, [pc, #280]	; (800b1dc <low_level_init+0x144>)
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b0ca:	2380      	movs	r3, #128	; 0x80
 800b0cc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b0ce:	23e1      	movs	r3, #225	; 0xe1
 800b0d0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b0de:	4a3f      	ldr	r2, [pc, #252]	; (800b1dc <low_level_init+0x144>)
 800b0e0:	f107 0308 	add.w	r3, r7, #8
 800b0e4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800b0e6:	4b3d      	ldr	r3, [pc, #244]	; (800b1dc <low_level_init+0x144>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800b0ec:	4b3b      	ldr	r3, [pc, #236]	; (800b1dc <low_level_init+0x144>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800b0f2:	4b3a      	ldr	r3, [pc, #232]	; (800b1dc <low_level_init+0x144>)
 800b0f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b0f8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b0fa:	4838      	ldr	r0, [pc, #224]	; (800b1dc <low_level_init+0x144>)
 800b0fc:	f7f7 f9f4 	bl	80024e8 <HAL_ETH_Init>
 800b100:	4603      	mov	r3, r0
 800b102:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d108      	bne.n	800b11c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b110:	f043 0304 	orr.w	r3, r3, #4
 800b114:	b2da      	uxtb	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800b11c:	2304      	movs	r3, #4
 800b11e:	4a31      	ldr	r2, [pc, #196]	; (800b1e4 <low_level_init+0x14c>)
 800b120:	4931      	ldr	r1, [pc, #196]	; (800b1e8 <low_level_init+0x150>)
 800b122:	482e      	ldr	r0, [pc, #184]	; (800b1dc <low_level_init+0x144>)
 800b124:	f7f7 fb7c 	bl	8002820 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800b128:	2304      	movs	r3, #4
 800b12a:	4a30      	ldr	r2, [pc, #192]	; (800b1ec <low_level_init+0x154>)
 800b12c:	4930      	ldr	r1, [pc, #192]	; (800b1f0 <low_level_init+0x158>)
 800b12e:	482b      	ldr	r0, [pc, #172]	; (800b1dc <low_level_init+0x144>)
 800b130:	f7f7 fbdf 	bl	80028f2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2206      	movs	r2, #6
 800b138:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b13c:	4b27      	ldr	r3, [pc, #156]	; (800b1dc <low_level_init+0x144>)
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	781a      	ldrb	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b148:	4b24      	ldr	r3, [pc, #144]	; (800b1dc <low_level_init+0x144>)
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	785a      	ldrb	r2, [r3, #1]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b154:	4b21      	ldr	r3, [pc, #132]	; (800b1dc <low_level_init+0x144>)
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	789a      	ldrb	r2, [r3, #2]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b160:	4b1e      	ldr	r3, [pc, #120]	; (800b1dc <low_level_init+0x144>)
 800b162:	695b      	ldr	r3, [r3, #20]
 800b164:	78da      	ldrb	r2, [r3, #3]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b16c:	4b1b      	ldr	r3, [pc, #108]	; (800b1dc <low_level_init+0x144>)
 800b16e:	695b      	ldr	r3, [r3, #20]
 800b170:	791a      	ldrb	r2, [r3, #4]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b178:	4b18      	ldr	r3, [pc, #96]	; (800b1dc <low_level_init+0x144>)
 800b17a:	695b      	ldr	r3, [r3, #20]
 800b17c:	795a      	ldrb	r2, [r3, #5]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b18a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b192:	f043 030a 	orr.w	r3, r3, #10
 800b196:	b2da      	uxtb	r2, r3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800b19e:	480f      	ldr	r0, [pc, #60]	; (800b1dc <low_level_init+0x144>)
 800b1a0:	f7f7 fe51 	bl	8002e46 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800b1a4:	f107 0310 	add.w	r3, r7, #16
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	211d      	movs	r1, #29
 800b1ac:	480b      	ldr	r0, [pc, #44]	; (800b1dc <low_level_init+0x144>)
 800b1ae:	f7f7 fd7c 	bl	8002caa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	f043 030b 	orr.w	r3, r3, #11
 800b1b8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	211d      	movs	r1, #29
 800b1c0:	4806      	ldr	r0, [pc, #24]	; (800b1dc <low_level_init+0x144>)
 800b1c2:	f7f7 fdda 	bl	8002d7a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800b1c6:	f107 0310 	add.w	r3, r7, #16
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	211d      	movs	r1, #29
 800b1ce:	4803      	ldr	r0, [pc, #12]	; (800b1dc <low_level_init+0x144>)
 800b1d0:	f7f7 fd6b 	bl	8002caa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b1d4:	bf00      	nop
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	200023bc 	.word	0x200023bc
 800b1e0:	40028000 	.word	0x40028000
 800b1e4:	20002404 	.word	0x20002404
 800b1e8:	20000aec 	.word	0x20000aec
 800b1ec:	20000b6c 	.word	0x20000b6c
 800b1f0:	2000233c 	.word	0x2000233c

0800b1f4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08a      	sub	sp, #40	; 0x28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800b1fe:	4b4b      	ldr	r3, [pc, #300]	; (800b32c <low_level_output+0x138>)
 800b200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800b216:	4b45      	ldr	r3, [pc, #276]	; (800b32c <low_level_output+0x138>)
 800b218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	623b      	str	r3, [r7, #32]
 800b224:	e05a      	b.n	800b2dc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	da03      	bge.n	800b236 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800b22e:	23f8      	movs	r3, #248	; 0xf8
 800b230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800b234:	e05c      	b.n	800b2f0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	895b      	ldrh	r3, [r3, #10]
 800b23a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b240:	e02f      	b.n	800b2a2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800b242:	69fa      	ldr	r2, [r7, #28]
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	18d0      	adds	r0, r2, r3
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	18d1      	adds	r1, r2, r3
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800b256:	3304      	adds	r3, #4
 800b258:	461a      	mov	r2, r3
 800b25a:	f00b fefb 	bl	8017054 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800b25e:	69bb      	ldr	r3, [r7, #24]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	da03      	bge.n	800b274 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800b26c:	23f8      	movs	r3, #248	; 0xf8
 800b26e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800b272:	e03d      	b.n	800b2f0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800b284:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b290:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800b29c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d8c8      	bhi.n	800b242 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800b2b0:	69fa      	ldr	r2, [r7, #28]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	18d0      	adds	r0, r2, r3
 800b2b6:	6a3b      	ldr	r3, [r7, #32]
 800b2b8:	685a      	ldr	r2, [r3, #4]
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	4413      	add	r3, r2
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	f00b fec7 	bl	8017054 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	623b      	str	r3, [r7, #32]
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1a1      	bne.n	800b226 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800b2e2:	6979      	ldr	r1, [r7, #20]
 800b2e4:	4811      	ldr	r0, [pc, #68]	; (800b32c <low_level_output+0x138>)
 800b2e6:	f7f7 fb71 	bl	80029cc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800b2f0:	4b0e      	ldr	r3, [pc, #56]	; (800b32c <low_level_output+0x138>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2f8:	3314      	adds	r3, #20
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00d      	beq.n	800b320 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800b304:	4b09      	ldr	r3, [pc, #36]	; (800b32c <low_level_output+0x138>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b30c:	3314      	adds	r3, #20
 800b30e:	2220      	movs	r2, #32
 800b310:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800b312:	4b06      	ldr	r3, [pc, #24]	; (800b32c <low_level_output+0x138>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b31a:	3304      	adds	r3, #4
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800b320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b324:	4618      	mov	r0, r3
 800b326:	3728      	adds	r7, #40	; 0x28
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	200023bc 	.word	0x200023bc

0800b330 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d106      	bne.n	800b34c <ethernetif_init+0x1c>
 800b33e:	4b0e      	ldr	r3, [pc, #56]	; (800b378 <ethernetif_init+0x48>)
 800b340:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b344:	490d      	ldr	r1, [pc, #52]	; (800b37c <ethernetif_init+0x4c>)
 800b346:	480e      	ldr	r0, [pc, #56]	; (800b380 <ethernetif_init+0x50>)
 800b348:	f00c fd2e 	bl	8017da8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2273      	movs	r2, #115	; 0x73
 800b350:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2274      	movs	r2, #116	; 0x74
 800b358:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a09      	ldr	r2, [pc, #36]	; (800b384 <ethernetif_init+0x54>)
 800b360:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a08      	ldr	r2, [pc, #32]	; (800b388 <ethernetif_init+0x58>)
 800b366:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff fe95 	bl	800b098 <low_level_init>

  return ERR_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	0801f150 	.word	0x0801f150
 800b37c:	0801f16c 	.word	0x0801f16c
 800b380:	0801f17c 	.word	0x0801f17c
 800b384:	080148d5 	.word	0x080148d5
 800b388:	0800b1f5 	.word	0x0800b1f5

0800b38c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b390:	f7f6 fed6 	bl	8002140 <HAL_GetTick>
 800b394:	4603      	mov	r3, r0
}
 800b396:	4618      	mov	r0, r3
 800b398:	bd80      	pop	{r7, pc}
	...

0800b39c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3b2:	089b      	lsrs	r3, r3, #2
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d05d      	beq.n	800b47a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800b3be:	4b34      	ldr	r3, [pc, #208]	; (800b490 <ethernetif_update_config+0xf4>)
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d03f      	beq.n	800b446 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800b3c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	4830      	ldr	r0, [pc, #192]	; (800b490 <ethernetif_update_config+0xf4>)
 800b3ce:	f7f7 fcd4 	bl	8002d7a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800b3d2:	f7f6 feb5 	bl	8002140 <HAL_GetTick>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800b3da:	f107 0308 	add.w	r3, r7, #8
 800b3de:	461a      	mov	r2, r3
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	482b      	ldr	r0, [pc, #172]	; (800b490 <ethernetif_update_config+0xf4>)
 800b3e4:	f7f7 fc61 	bl	8002caa <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800b3e8:	f7f6 feaa 	bl	8002140 <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3f6:	d828      	bhi.n	800b44a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f003 0320 	and.w	r3, r3, #32
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0eb      	beq.n	800b3da <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800b402:	f107 0308 	add.w	r3, r7, #8
 800b406:	461a      	mov	r2, r3
 800b408:	2110      	movs	r1, #16
 800b40a:	4821      	ldr	r0, [pc, #132]	; (800b490 <ethernetif_update_config+0xf4>)
 800b40c:	f7f7 fc4d 	bl	8002caa <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	f003 0304 	and.w	r3, r3, #4
 800b416:	2b00      	cmp	r3, #0
 800b418:	d004      	beq.n	800b424 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800b41a:	4b1d      	ldr	r3, [pc, #116]	; (800b490 <ethernetif_update_config+0xf4>)
 800b41c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b420:	60da      	str	r2, [r3, #12]
 800b422:	e002      	b.n	800b42a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800b424:	4b1a      	ldr	r3, [pc, #104]	; (800b490 <ethernetif_update_config+0xf4>)
 800b426:	2200      	movs	r2, #0
 800b428:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f003 0302 	and.w	r3, r3, #2
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800b434:	4b16      	ldr	r3, [pc, #88]	; (800b490 <ethernetif_update_config+0xf4>)
 800b436:	2200      	movs	r2, #0
 800b438:	609a      	str	r2, [r3, #8]
 800b43a:	e016      	b.n	800b46a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800b43c:	4b14      	ldr	r3, [pc, #80]	; (800b490 <ethernetif_update_config+0xf4>)
 800b43e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b442:	609a      	str	r2, [r3, #8]
 800b444:	e011      	b.n	800b46a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800b446:	bf00      	nop
 800b448:	e000      	b.n	800b44c <ethernetif_update_config+0xb0>
          goto error;
 800b44a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b44c:	4b10      	ldr	r3, [pc, #64]	; (800b490 <ethernetif_update_config+0xf4>)
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	08db      	lsrs	r3, r3, #3
 800b452:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800b454:	4b0e      	ldr	r3, [pc, #56]	; (800b490 <ethernetif_update_config+0xf4>)
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	085b      	lsrs	r3, r3, #1
 800b45a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800b45c:	4313      	orrs	r3, r2
 800b45e:	b29b      	uxth	r3, r3
 800b460:	461a      	mov	r2, r3
 800b462:	2100      	movs	r1, #0
 800b464:	480a      	ldr	r0, [pc, #40]	; (800b490 <ethernetif_update_config+0xf4>)
 800b466:	f7f7 fc88 	bl	8002d7a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800b46a:	2100      	movs	r1, #0
 800b46c:	4808      	ldr	r0, [pc, #32]	; (800b490 <ethernetif_update_config+0xf4>)
 800b46e:	f7f7 fd49 	bl	8002f04 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800b472:	4807      	ldr	r0, [pc, #28]	; (800b490 <ethernetif_update_config+0xf4>)
 800b474:	f7f7 fce7 	bl	8002e46 <HAL_ETH_Start>
 800b478:	e002      	b.n	800b480 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800b47a:	4805      	ldr	r0, [pc, #20]	; (800b490 <ethernetif_update_config+0xf4>)
 800b47c:	f7f7 fd12 	bl	8002ea4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f807 	bl	800b494 <ethernetif_notify_conn_changed>
}
 800b486:	bf00      	nop
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	200023bc 	.word	0x200023bc

0800b494 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b4b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b4b8:	f00b fd56 	bl	8016f68 <USBD_static_malloc>
 800b4bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d105      	bne.n	800b4d0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b4cc:	2302      	movs	r3, #2
 800b4ce:	e066      	b.n	800b59e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	7c1b      	ldrb	r3, [r3, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d119      	bne.n	800b514 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4e4:	2202      	movs	r2, #2
 800b4e6:	2181      	movs	r1, #129	; 0x81
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f00b fc1a 	bl	8016d22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b4f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f00b fc10 	bl	8016d22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2210      	movs	r2, #16
 800b50e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b512:	e016      	b.n	800b542 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b514:	2340      	movs	r3, #64	; 0x40
 800b516:	2202      	movs	r2, #2
 800b518:	2181      	movs	r1, #129	; 0x81
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f00b fc01 	bl	8016d22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b526:	2340      	movs	r3, #64	; 0x40
 800b528:	2202      	movs	r2, #2
 800b52a:	2101      	movs	r1, #1
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f00b fbf8 	bl	8016d22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2210      	movs	r2, #16
 800b53e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b542:	2308      	movs	r3, #8
 800b544:	2203      	movs	r2, #3
 800b546:	2182      	movs	r1, #130	; 0x82
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f00b fbea 	bl	8016d22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	7c1b      	ldrb	r3, [r3, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b57e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b582:	2101      	movs	r1, #1
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f00b fcbb 	bl	8016f00 <USBD_LL_PrepareReceive>
 800b58a:	e007      	b.n	800b59c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b592:	2340      	movs	r3, #64	; 0x40
 800b594:	2101      	movs	r1, #1
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f00b fcb2 	bl	8016f00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b5b2:	2181      	movs	r1, #129	; 0x81
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f00b fbda 	bl	8016d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f00b fbd3 	bl	8016d6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b5d0:	2182      	movs	r1, #130	; 0x82
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f00b fbcb 	bl	8016d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00e      	beq.n	800b610 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b602:	4618      	mov	r0, r3
 800b604:	f00b fcbe 	bl	8016f84 <USBD_static_free>
    pdev->pClassData = NULL;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
	...

0800b61c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b62c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b632:	2300      	movs	r3, #0
 800b634:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d101      	bne.n	800b644 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	e0af      	b.n	800b7a4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d03f      	beq.n	800b6d0 <USBD_CDC_Setup+0xb4>
 800b650:	2b20      	cmp	r3, #32
 800b652:	f040 809f 	bne.w	800b794 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	88db      	ldrh	r3, [r3, #6]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d02e      	beq.n	800b6bc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	b25b      	sxtb	r3, r3
 800b664:	2b00      	cmp	r3, #0
 800b666:	da16      	bge.n	800b696 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b674:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	88d2      	ldrh	r2, [r2, #6]
 800b67a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	88db      	ldrh	r3, [r3, #6]
 800b680:	2b07      	cmp	r3, #7
 800b682:	bf28      	it	cs
 800b684:	2307      	movcs	r3, #7
 800b686:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	89fa      	ldrh	r2, [r7, #14]
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f001 fb19 	bl	800ccc6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b694:	e085      	b.n	800b7a2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	785a      	ldrb	r2, [r3, #1]
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	88db      	ldrh	r3, [r3, #6]
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b6ac:	6939      	ldr	r1, [r7, #16]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	88db      	ldrh	r3, [r3, #6]
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 fb32 	bl	800cd1e <USBD_CtlPrepareRx>
      break;
 800b6ba:	e072      	b.n	800b7a2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	7850      	ldrb	r0, [r2, #1]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	4798      	blx	r3
      break;
 800b6ce:	e068      	b.n	800b7a2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	785b      	ldrb	r3, [r3, #1]
 800b6d4:	2b0b      	cmp	r3, #11
 800b6d6:	d852      	bhi.n	800b77e <USBD_CDC_Setup+0x162>
 800b6d8:	a201      	add	r2, pc, #4	; (adr r2, 800b6e0 <USBD_CDC_Setup+0xc4>)
 800b6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6de:	bf00      	nop
 800b6e0:	0800b711 	.word	0x0800b711
 800b6e4:	0800b78d 	.word	0x0800b78d
 800b6e8:	0800b77f 	.word	0x0800b77f
 800b6ec:	0800b77f 	.word	0x0800b77f
 800b6f0:	0800b77f 	.word	0x0800b77f
 800b6f4:	0800b77f 	.word	0x0800b77f
 800b6f8:	0800b77f 	.word	0x0800b77f
 800b6fc:	0800b77f 	.word	0x0800b77f
 800b700:	0800b77f 	.word	0x0800b77f
 800b704:	0800b77f 	.word	0x0800b77f
 800b708:	0800b73b 	.word	0x0800b73b
 800b70c:	0800b765 	.word	0x0800b765
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b716:	b2db      	uxtb	r3, r3
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d107      	bne.n	800b72c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b71c:	f107 030a 	add.w	r3, r7, #10
 800b720:	2202      	movs	r2, #2
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f001 face 	bl	800ccc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b72a:	e032      	b.n	800b792 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f001 fa58 	bl	800cbe4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	75fb      	strb	r3, [r7, #23]
          break;
 800b738:	e02b      	b.n	800b792 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b740:	b2db      	uxtb	r3, r3
 800b742:	2b03      	cmp	r3, #3
 800b744:	d107      	bne.n	800b756 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b746:	f107 030d 	add.w	r3, r7, #13
 800b74a:	2201      	movs	r2, #1
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 fab9 	bl	800ccc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b754:	e01d      	b.n	800b792 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 fa43 	bl	800cbe4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b75e:	2303      	movs	r3, #3
 800b760:	75fb      	strb	r3, [r7, #23]
          break;
 800b762:	e016      	b.n	800b792 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b03      	cmp	r3, #3
 800b76e:	d00f      	beq.n	800b790 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b770:	6839      	ldr	r1, [r7, #0]
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 fa36 	bl	800cbe4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b778:	2303      	movs	r3, #3
 800b77a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b77c:	e008      	b.n	800b790 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b77e:	6839      	ldr	r1, [r7, #0]
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f001 fa2f 	bl	800cbe4 <USBD_CtlError>
          ret = USBD_FAIL;
 800b786:	2303      	movs	r3, #3
 800b788:	75fb      	strb	r3, [r7, #23]
          break;
 800b78a:	e002      	b.n	800b792 <USBD_CDC_Setup+0x176>
          break;
 800b78c:	bf00      	nop
 800b78e:	e008      	b.n	800b7a2 <USBD_CDC_Setup+0x186>
          break;
 800b790:	bf00      	nop
      }
      break;
 800b792:	e006      	b.n	800b7a2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f001 fa24 	bl	800cbe4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	75fb      	strb	r3, [r7, #23]
      break;
 800b7a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d101      	bne.n	800b7ce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	e04f      	b.n	800b86e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	6879      	ldr	r1, [r7, #4]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	440b      	add	r3, r1
 800b7e4:	3318      	adds	r3, #24
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d029      	beq.n	800b840 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b7ec:	78fa      	ldrb	r2, [r7, #3]
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	4413      	add	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	440b      	add	r3, r1
 800b7fa:	3318      	adds	r3, #24
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	78f9      	ldrb	r1, [r7, #3]
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	460b      	mov	r3, r1
 800b804:	00db      	lsls	r3, r3, #3
 800b806:	1a5b      	subs	r3, r3, r1
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4403      	add	r3, r0
 800b80c:	3344      	adds	r3, #68	; 0x44
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	fbb2 f1f3 	udiv	r1, r2, r3
 800b814:	fb03 f301 	mul.w	r3, r3, r1
 800b818:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d110      	bne.n	800b840 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b81e:	78fa      	ldrb	r2, [r7, #3]
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	440b      	add	r3, r1
 800b82c:	3318      	adds	r3, #24
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b832:	78f9      	ldrb	r1, [r7, #3]
 800b834:	2300      	movs	r3, #0
 800b836:	2200      	movs	r2, #0
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f00b fb40 	bl	8016ebe <USBD_LL_Transmit>
 800b83e:	e015      	b.n	800b86c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2200      	movs	r2, #0
 800b844:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00b      	beq.n	800b86c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b868:	78fa      	ldrb	r2, [r7, #3]
 800b86a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b888:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	e015      	b.n	800b8c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	4619      	mov	r1, r3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f00b fb50 	bl	8016f42 <USBD_LL_GetRxDataSize>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b8be:	4611      	mov	r1, r2
 800b8c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	e01b      	b.n	800b91e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d015      	beq.n	800b91c <USBD_CDC_EP0_RxReady+0x50>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b8f6:	2bff      	cmp	r3, #255	; 0xff
 800b8f8:	d010      	beq.n	800b91c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b908:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b910:	b292      	uxth	r2, r2
 800b912:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	22ff      	movs	r2, #255	; 0xff
 800b918:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2243      	movs	r2, #67	; 0x43
 800b934:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b936:	4b03      	ldr	r3, [pc, #12]	; (800b944 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b938:	4618      	mov	r0, r3
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	2000009c 	.word	0x2000009c

0800b948 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2243      	movs	r2, #67	; 0x43
 800b954:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b956:	4b03      	ldr	r3, [pc, #12]	; (800b964 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b958:	4618      	mov	r0, r3
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	20000058 	.word	0x20000058

0800b968 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2243      	movs	r2, #67	; 0x43
 800b974:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b976:	4b03      	ldr	r3, [pc, #12]	; (800b984 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	200000e0 	.word	0x200000e0

0800b988 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	220a      	movs	r2, #10
 800b994:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b996:	4b03      	ldr	r3, [pc, #12]	; (800b9a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b998:	4618      	mov	r0, r3
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	20000014 	.word	0x20000014

0800b9a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e004      	b.n	800b9c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	370c      	adds	r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b087      	sub	sp, #28
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	e008      	b.n	800ba02 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	371c      	adds	r7, #28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b085      	sub	sp, #20
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba1e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e004      	b.n	800ba34 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba4e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ba50:	2301      	movs	r3, #1
 800ba52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e01a      	b.n	800ba98 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d114      	bne.n	800ba96 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ba8a:	2181      	movs	r1, #129	; 0x81
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f00b fa16 	bl	8016ebe <USBD_LL_Transmit>

    ret = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800baba:	2303      	movs	r3, #3
 800babc:	e016      	b.n	800baec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	7c1b      	ldrb	r3, [r3, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d109      	bne.n	800bada <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bacc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bad0:	2101      	movs	r1, #1
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f00b fa14 	bl	8016f00 <USBD_LL_PrepareReceive>
 800bad8:	e007      	b.n	800baea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bae0:	2340      	movs	r3, #64	; 0x40
 800bae2:	2101      	movs	r1, #1
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f00b fa0b 	bl	8016f00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	4613      	mov	r3, r2
 800bb00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e01f      	b.n	800bb4c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	79fa      	ldrb	r2, [r7, #7]
 800bb3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f00b f887 	bl	8016c54 <USBD_LL_Init>
 800bb46:	4603      	mov	r3, r0
 800bb48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	e016      	b.n	800bb9a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	683a      	ldr	r2, [r7, #0]
 800bb70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00b      	beq.n	800bb98 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	f107 020e 	add.w	r2, r7, #14
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	4798      	blx	r3
 800bb90:	4602      	mov	r2, r0
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f00b f89e 	bl	8016cec <USBD_LL_Start>
 800bbb0:	4603      	mov	r3, r0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bbdc:	2303      	movs	r3, #3
 800bbde:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d009      	beq.n	800bbfe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	78fa      	ldrb	r2, [r7, #3]
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	4798      	blx	r3
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	460b      	mov	r3, r1
 800bc12:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d007      	beq.n	800bc2e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	78fa      	ldrb	r2, [r7, #3]
 800bc28:	4611      	mov	r1, r2
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	4798      	blx	r3
  }

  return USBD_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 ff90 	bl	800cb70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc6c:	f003 031f 	and.w	r3, r3, #31
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d01a      	beq.n	800bcaa <USBD_LL_SetupStage+0x72>
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d822      	bhi.n	800bcbe <USBD_LL_SetupStage+0x86>
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <USBD_LL_SetupStage+0x4a>
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d00a      	beq.n	800bc96 <USBD_LL_SetupStage+0x5e>
 800bc80:	e01d      	b.n	800bcbe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fa62 	bl	800c154 <USBD_StdDevReq>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]
      break;
 800bc94:	e020      	b.n	800bcd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fac6 	bl	800c230 <USBD_StdItfReq>
 800bca4:	4603      	mov	r3, r0
 800bca6:	73fb      	strb	r3, [r7, #15]
      break;
 800bca8:	e016      	b.n	800bcd8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fb05 	bl	800c2c2 <USBD_StdEPReq>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbc:	e00c      	b.n	800bcd8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bcc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f00b f86d 	bl	8016dac <USBD_LL_StallEP>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd6:	bf00      	nop
  }

  return ret;
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b086      	sub	sp, #24
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	60f8      	str	r0, [r7, #12]
 800bcea:	460b      	mov	r3, r1
 800bcec:	607a      	str	r2, [r7, #4]
 800bcee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcf0:	7afb      	ldrb	r3, [r7, #11]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d138      	bne.n	800bd68 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bcfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd04:	2b03      	cmp	r3, #3
 800bd06:	d14a      	bne.n	800bd9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	689a      	ldr	r2, [r3, #8]
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d913      	bls.n	800bd3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	689a      	ldr	r2, [r3, #8]
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	1ad2      	subs	r2, r2, r3
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	68da      	ldr	r2, [r3, #12]
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	bf28      	it	cs
 800bd2e:	4613      	movcs	r3, r2
 800bd30:	461a      	mov	r2, r3
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f001 f80f 	bl	800cd58 <USBD_CtlContinueRx>
 800bd3a:	e030      	b.n	800bd9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d10b      	bne.n	800bd60 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d005      	beq.n	800bd60 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f001 f80a 	bl	800cd7a <USBD_CtlSendStatus>
 800bd66:	e01a      	b.n	800bd9e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d114      	bne.n	800bd9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00e      	beq.n	800bd9e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	7afa      	ldrb	r2, [r7, #11]
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	4798      	blx	r3
 800bd90:	4603      	mov	r3, r0
 800bd92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bd9a:	7dfb      	ldrb	r3, [r7, #23]
 800bd9c:	e000      	b.n	800bda0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bdb6:	7afb      	ldrb	r3, [r7, #11]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d16b      	bne.n	800be94 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3314      	adds	r3, #20
 800bdc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d156      	bne.n	800be7a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	689a      	ldr	r2, [r3, #8]
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d914      	bls.n	800be02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	689a      	ldr	r2, [r3, #8]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	1ad2      	subs	r2, r2, r3
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	461a      	mov	r2, r3
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f000 ff84 	bl	800ccfc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f00b f880 	bl	8016f00 <USBD_LL_PrepareReceive>
 800be00:	e03b      	b.n	800be7a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	68da      	ldr	r2, [r3, #12]
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d11c      	bne.n	800be48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800be16:	429a      	cmp	r2, r3
 800be18:	d316      	bcc.n	800be48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be24:	429a      	cmp	r2, r3
 800be26:	d20f      	bcs.n	800be48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be28:	2200      	movs	r2, #0
 800be2a:	2100      	movs	r1, #0
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	f000 ff65 	bl	800ccfc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2200      	movs	r2, #0
 800be36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be3a:	2300      	movs	r3, #0
 800be3c:	2200      	movs	r2, #0
 800be3e:	2100      	movs	r1, #0
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f00b f85d 	bl	8016f00 <USBD_LL_PrepareReceive>
 800be46:	e018      	b.n	800be7a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b03      	cmp	r3, #3
 800be52:	d10b      	bne.n	800be6c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be6c:	2180      	movs	r1, #128	; 0x80
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f00a ff9c 	bl	8016dac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be74:	68f8      	ldr	r0, [r7, #12]
 800be76:	f000 ff93 	bl	800cda0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be80:	2b01      	cmp	r3, #1
 800be82:	d122      	bne.n	800beca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f7ff fe98 	bl	800bbba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800be92:	e01a      	b.n	800beca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d114      	bne.n	800beca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00e      	beq.n	800beca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	7afa      	ldrb	r2, [r7, #11]
 800beb6:	4611      	mov	r1, r2
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	4798      	blx	r3
 800bebc:	4603      	mov	r3, r0
 800bebe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	e000      	b.n	800becc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b082      	sub	sp, #8
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d101      	bne.n	800bf08 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e02f      	b.n	800bf68 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00f      	beq.n	800bf32 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d009      	beq.n	800bf32 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	6852      	ldr	r2, [r2, #4]
 800bf2a:	b2d2      	uxtb	r2, r2
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf32:	2340      	movs	r3, #64	; 0x40
 800bf34:	2200      	movs	r2, #0
 800bf36:	2100      	movs	r1, #0
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f00a fef2 	bl	8016d22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2240      	movs	r2, #64	; 0x40
 800bf4a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf4e:	2340      	movs	r3, #64	; 0x40
 800bf50:	2200      	movs	r2, #0
 800bf52:	2180      	movs	r1, #128	; 0x80
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f00a fee4 	bl	8016d22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2240      	movs	r2, #64	; 0x40
 800bf64:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	78fa      	ldrb	r2, [r7, #3]
 800bf80:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2204      	movs	r2, #4
 800bfaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	2b04      	cmp	r3, #4
 800bfce:	d106      	bne.n	800bfde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bffe:	2303      	movs	r3, #3
 800c000:	e012      	b.n	800c028 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b03      	cmp	r3, #3
 800c00c:	d10b      	bne.n	800c026 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c014:	69db      	ldr	r3, [r3, #28]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d005      	beq.n	800c026 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c046:	2303      	movs	r3, #3
 800c048:	e014      	b.n	800c074 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b03      	cmp	r3, #3
 800c054:	d10d      	bne.n	800c072 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d007      	beq.n	800c072 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	78fa      	ldrb	r2, [r7, #3]
 800c06c:	4611      	mov	r1, r2
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d101      	bne.n	800c096 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c092:	2303      	movs	r3, #3
 800c094:	e014      	b.n	800c0c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d10d      	bne.n	800c0be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d007      	beq.n	800c0be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d009      	beq.n	800c10c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	6852      	ldr	r2, [r2, #4]
 800c104:	b2d2      	uxtb	r2, r2
 800c106:	4611      	mov	r1, r2
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	4798      	blx	r3
  }

  return USBD_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c116:	b480      	push	{r7}
 800c118:	b087      	sub	sp, #28
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	3301      	adds	r3, #1
 800c12c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c134:	8a3b      	ldrh	r3, [r7, #16]
 800c136:	021b      	lsls	r3, r3, #8
 800c138:	b21a      	sxth	r2, r3
 800c13a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c13e:	4313      	orrs	r3, r2
 800c140:	b21b      	sxth	r3, r3
 800c142:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c144:	89fb      	ldrh	r3, [r7, #14]
}
 800c146:	4618      	mov	r0, r3
 800c148:	371c      	adds	r7, #28
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
	...

0800c154 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c16a:	2b40      	cmp	r3, #64	; 0x40
 800c16c:	d005      	beq.n	800c17a <USBD_StdDevReq+0x26>
 800c16e:	2b40      	cmp	r3, #64	; 0x40
 800c170:	d853      	bhi.n	800c21a <USBD_StdDevReq+0xc6>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00b      	beq.n	800c18e <USBD_StdDevReq+0x3a>
 800c176:	2b20      	cmp	r3, #32
 800c178:	d14f      	bne.n	800c21a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	4798      	blx	r3
 800c188:	4603      	mov	r3, r0
 800c18a:	73fb      	strb	r3, [r7, #15]
      break;
 800c18c:	e04a      	b.n	800c224 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	785b      	ldrb	r3, [r3, #1]
 800c192:	2b09      	cmp	r3, #9
 800c194:	d83b      	bhi.n	800c20e <USBD_StdDevReq+0xba>
 800c196:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <USBD_StdDevReq+0x48>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c1f1 	.word	0x0800c1f1
 800c1a0:	0800c205 	.word	0x0800c205
 800c1a4:	0800c20f 	.word	0x0800c20f
 800c1a8:	0800c1fb 	.word	0x0800c1fb
 800c1ac:	0800c20f 	.word	0x0800c20f
 800c1b0:	0800c1cf 	.word	0x0800c1cf
 800c1b4:	0800c1c5 	.word	0x0800c1c5
 800c1b8:	0800c20f 	.word	0x0800c20f
 800c1bc:	0800c1e7 	.word	0x0800c1e7
 800c1c0:	0800c1d9 	.word	0x0800c1d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f9de 	bl	800c588 <USBD_GetDescriptor>
          break;
 800c1cc:	e024      	b.n	800c218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 fb43 	bl	800c85c <USBD_SetAddress>
          break;
 800c1d6:	e01f      	b.n	800c218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fb82 	bl	800c8e4 <USBD_SetConfig>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73fb      	strb	r3, [r7, #15]
          break;
 800c1e4:	e018      	b.n	800c218 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fc21 	bl	800ca30 <USBD_GetConfig>
          break;
 800c1ee:	e013      	b.n	800c218 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fc52 	bl	800ca9c <USBD_GetStatus>
          break;
 800c1f8:	e00e      	b.n	800c218 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fc81 	bl	800cb04 <USBD_SetFeature>
          break;
 800c202:	e009      	b.n	800c218 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fc90 	bl	800cb2c <USBD_ClrFeature>
          break;
 800c20c:	e004      	b.n	800c218 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fce7 	bl	800cbe4 <USBD_CtlError>
          break;
 800c216:	bf00      	nop
      }
      break;
 800c218:	e004      	b.n	800c224 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fce1 	bl	800cbe4 <USBD_CtlError>
      break;
 800c222:	bf00      	nop
  }

  return ret;
 800c224:	7bfb      	ldrb	r3, [r7, #15]
}
 800c226:	4618      	mov	r0, r3
 800c228:	3710      	adds	r7, #16
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop

0800c230 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c246:	2b40      	cmp	r3, #64	; 0x40
 800c248:	d005      	beq.n	800c256 <USBD_StdItfReq+0x26>
 800c24a:	2b40      	cmp	r3, #64	; 0x40
 800c24c:	d82f      	bhi.n	800c2ae <USBD_StdItfReq+0x7e>
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <USBD_StdItfReq+0x26>
 800c252:	2b20      	cmp	r3, #32
 800c254:	d12b      	bne.n	800c2ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	3b01      	subs	r3, #1
 800c260:	2b02      	cmp	r3, #2
 800c262:	d81d      	bhi.n	800c2a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	889b      	ldrh	r3, [r3, #4]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d813      	bhi.n	800c296 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	4798      	blx	r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	88db      	ldrh	r3, [r3, #6]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d110      	bne.n	800c2aa <USBD_StdItfReq+0x7a>
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10d      	bne.n	800c2aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fd73 	bl	800cd7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c294:	e009      	b.n	800c2aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 fca3 	bl	800cbe4 <USBD_CtlError>
          break;
 800c29e:	e004      	b.n	800c2aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fc9e 	bl	800cbe4 <USBD_CtlError>
          break;
 800c2a8:	e000      	b.n	800c2ac <USBD_StdItfReq+0x7c>
          break;
 800c2aa:	bf00      	nop
      }
      break;
 800c2ac:	e004      	b.n	800c2b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c2ae:	6839      	ldr	r1, [r7, #0]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fc97 	bl	800cbe4 <USBD_CtlError>
      break;
 800c2b6:	bf00      	nop
  }

  return ret;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	889b      	ldrh	r3, [r3, #4]
 800c2d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2de:	2b40      	cmp	r3, #64	; 0x40
 800c2e0:	d007      	beq.n	800c2f2 <USBD_StdEPReq+0x30>
 800c2e2:	2b40      	cmp	r3, #64	; 0x40
 800c2e4:	f200 8145 	bhi.w	800c572 <USBD_StdEPReq+0x2b0>
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00c      	beq.n	800c306 <USBD_StdEPReq+0x44>
 800c2ec:	2b20      	cmp	r3, #32
 800c2ee:	f040 8140 	bne.w	800c572 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	4798      	blx	r3
 800c300:	4603      	mov	r3, r0
 800c302:	73fb      	strb	r3, [r7, #15]
      break;
 800c304:	e13a      	b.n	800c57c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	785b      	ldrb	r3, [r3, #1]
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d007      	beq.n	800c31e <USBD_StdEPReq+0x5c>
 800c30e:	2b03      	cmp	r3, #3
 800c310:	f300 8129 	bgt.w	800c566 <USBD_StdEPReq+0x2a4>
 800c314:	2b00      	cmp	r3, #0
 800c316:	d07f      	beq.n	800c418 <USBD_StdEPReq+0x156>
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d03c      	beq.n	800c396 <USBD_StdEPReq+0xd4>
 800c31c:	e123      	b.n	800c566 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b02      	cmp	r3, #2
 800c328:	d002      	beq.n	800c330 <USBD_StdEPReq+0x6e>
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d016      	beq.n	800c35c <USBD_StdEPReq+0x9a>
 800c32e:	e02c      	b.n	800c38a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00d      	beq.n	800c352 <USBD_StdEPReq+0x90>
 800c336:	7bbb      	ldrb	r3, [r7, #14]
 800c338:	2b80      	cmp	r3, #128	; 0x80
 800c33a:	d00a      	beq.n	800c352 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c33c:	7bbb      	ldrb	r3, [r7, #14]
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f00a fd33 	bl	8016dac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c346:	2180      	movs	r1, #128	; 0x80
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f00a fd2f 	bl	8016dac <USBD_LL_StallEP>
 800c34e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c350:	e020      	b.n	800c394 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fc45 	bl	800cbe4 <USBD_CtlError>
              break;
 800c35a:	e01b      	b.n	800c394 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	885b      	ldrh	r3, [r3, #2]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d10e      	bne.n	800c382 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00b      	beq.n	800c382 <USBD_StdEPReq+0xc0>
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	2b80      	cmp	r3, #128	; 0x80
 800c36e:	d008      	beq.n	800c382 <USBD_StdEPReq+0xc0>
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	88db      	ldrh	r3, [r3, #6]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d104      	bne.n	800c382 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f00a fd15 	bl	8016dac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fcf9 	bl	800cd7a <USBD_CtlSendStatus>

              break;
 800c388:	e004      	b.n	800c394 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fc29 	bl	800cbe4 <USBD_CtlError>
              break;
 800c392:	bf00      	nop
          }
          break;
 800c394:	e0ec      	b.n	800c570 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d002      	beq.n	800c3a8 <USBD_StdEPReq+0xe6>
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d016      	beq.n	800c3d4 <USBD_StdEPReq+0x112>
 800c3a6:	e030      	b.n	800c40a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00d      	beq.n	800c3ca <USBD_StdEPReq+0x108>
 800c3ae:	7bbb      	ldrb	r3, [r7, #14]
 800c3b0:	2b80      	cmp	r3, #128	; 0x80
 800c3b2:	d00a      	beq.n	800c3ca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f00a fcf7 	bl	8016dac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3be:	2180      	movs	r1, #128	; 0x80
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f00a fcf3 	bl	8016dac <USBD_LL_StallEP>
 800c3c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3c8:	e025      	b.n	800c416 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fc09 	bl	800cbe4 <USBD_CtlError>
              break;
 800c3d2:	e020      	b.n	800c416 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	885b      	ldrh	r3, [r3, #2]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d11b      	bne.n	800c414 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
 800c3de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d004      	beq.n	800c3f0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3e6:	7bbb      	ldrb	r3, [r7, #14]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f00a fcfd 	bl	8016dea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fcc2 	bl	800cd7a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	4798      	blx	r3
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c408:	e004      	b.n	800c414 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c40a:	6839      	ldr	r1, [r7, #0]
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fbe9 	bl	800cbe4 <USBD_CtlError>
              break;
 800c412:	e000      	b.n	800c416 <USBD_StdEPReq+0x154>
              break;
 800c414:	bf00      	nop
          }
          break;
 800c416:	e0ab      	b.n	800c570 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	2b02      	cmp	r3, #2
 800c422:	d002      	beq.n	800c42a <USBD_StdEPReq+0x168>
 800c424:	2b03      	cmp	r3, #3
 800c426:	d032      	beq.n	800c48e <USBD_StdEPReq+0x1cc>
 800c428:	e097      	b.n	800c55a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d007      	beq.n	800c440 <USBD_StdEPReq+0x17e>
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	2b80      	cmp	r3, #128	; 0x80
 800c434:	d004      	beq.n	800c440 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fbd3 	bl	800cbe4 <USBD_CtlError>
                break;
 800c43e:	e091      	b.n	800c564 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c440:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c444:	2b00      	cmp	r3, #0
 800c446:	da0b      	bge.n	800c460 <USBD_StdEPReq+0x19e>
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c44e:	4613      	mov	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	3310      	adds	r3, #16
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	4413      	add	r3, r2
 800c45c:	3304      	adds	r3, #4
 800c45e:	e00b      	b.n	800c478 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c460:	7bbb      	ldrb	r3, [r7, #14]
 800c462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c466:	4613      	mov	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	4413      	add	r3, r2
 800c476:	3304      	adds	r3, #4
 800c478:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	2200      	movs	r2, #0
 800c47e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	2202      	movs	r2, #2
 800c484:	4619      	mov	r1, r3
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fc1d 	bl	800ccc6 <USBD_CtlSendData>
              break;
 800c48c:	e06a      	b.n	800c564 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c48e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c492:	2b00      	cmp	r3, #0
 800c494:	da11      	bge.n	800c4ba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c496:	7bbb      	ldrb	r3, [r7, #14]
 800c498:	f003 020f 	and.w	r2, r3, #15
 800c49c:	6879      	ldr	r1, [r7, #4]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3324      	adds	r3, #36	; 0x24
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d117      	bne.n	800c4e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 fb96 	bl	800cbe4 <USBD_CtlError>
                  break;
 800c4b8:	e054      	b.n	800c564 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
 800c4bc:	f003 020f 	and.w	r2, r3, #15
 800c4c0:	6879      	ldr	r1, [r7, #4]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	009b      	lsls	r3, r3, #2
 800c4c6:	4413      	add	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	440b      	add	r3, r1
 800c4cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d104      	bne.n	800c4e0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fb83 	bl	800cbe4 <USBD_CtlError>
                  break;
 800c4de:	e041      	b.n	800c564 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	da0b      	bge.n	800c500 <USBD_StdEPReq+0x23e>
 800c4e8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	3310      	adds	r3, #16
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	e00b      	b.n	800c518 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c500:	7bbb      	ldrb	r3, [r7, #14]
 800c502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c506:	4613      	mov	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	4413      	add	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	4413      	add	r3, r2
 800c516:	3304      	adds	r3, #4
 800c518:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c51a:	7bbb      	ldrb	r3, [r7, #14]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d002      	beq.n	800c526 <USBD_StdEPReq+0x264>
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	2b80      	cmp	r3, #128	; 0x80
 800c524:	d103      	bne.n	800c52e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	2200      	movs	r2, #0
 800c52a:	601a      	str	r2, [r3, #0]
 800c52c:	e00e      	b.n	800c54c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f00a fc78 	bl	8016e28 <USBD_LL_IsStallEP>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d003      	beq.n	800c546 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	2201      	movs	r2, #1
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	e002      	b.n	800c54c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2200      	movs	r2, #0
 800c54a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2202      	movs	r2, #2
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fbb7 	bl	800ccc6 <USBD_CtlSendData>
              break;
 800c558:	e004      	b.n	800c564 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fb41 	bl	800cbe4 <USBD_CtlError>
              break;
 800c562:	bf00      	nop
          }
          break;
 800c564:	e004      	b.n	800c570 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fb3b 	bl	800cbe4 <USBD_CtlError>
          break;
 800c56e:	bf00      	nop
      }
      break;
 800c570:	e004      	b.n	800c57c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fb35 	bl	800cbe4 <USBD_CtlError>
      break;
 800c57a:	bf00      	nop
  }

  return ret;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c592:	2300      	movs	r3, #0
 800c594:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c596:	2300      	movs	r3, #0
 800c598:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c59a:	2300      	movs	r3, #0
 800c59c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	885b      	ldrh	r3, [r3, #2]
 800c5a2:	0a1b      	lsrs	r3, r3, #8
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	2b06      	cmp	r3, #6
 800c5aa:	f200 8128 	bhi.w	800c7fe <USBD_GetDescriptor+0x276>
 800c5ae:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <USBD_GetDescriptor+0x2c>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5d1 	.word	0x0800c5d1
 800c5b8:	0800c5e9 	.word	0x0800c5e9
 800c5bc:	0800c629 	.word	0x0800c629
 800c5c0:	0800c7ff 	.word	0x0800c7ff
 800c5c4:	0800c7ff 	.word	0x0800c7ff
 800c5c8:	0800c79f 	.word	0x0800c79f
 800c5cc:	0800c7cb 	.word	0x0800c7cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	7c12      	ldrb	r2, [r2, #16]
 800c5dc:	f107 0108 	add.w	r1, r7, #8
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4798      	blx	r3
 800c5e4:	60f8      	str	r0, [r7, #12]
      break;
 800c5e6:	e112      	b.n	800c80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	7c1b      	ldrb	r3, [r3, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10d      	bne.n	800c60c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f8:	f107 0208 	add.w	r2, r7, #8
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	4798      	blx	r3
 800c600:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3301      	adds	r3, #1
 800c606:	2202      	movs	r2, #2
 800c608:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c60a:	e100      	b.n	800c80e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c614:	f107 0208 	add.w	r2, r7, #8
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	3301      	adds	r3, #1
 800c622:	2202      	movs	r2, #2
 800c624:	701a      	strb	r2, [r3, #0]
      break;
 800c626:	e0f2      	b.n	800c80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	885b      	ldrh	r3, [r3, #2]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b05      	cmp	r3, #5
 800c630:	f200 80ac 	bhi.w	800c78c <USBD_GetDescriptor+0x204>
 800c634:	a201      	add	r2, pc, #4	; (adr r2, 800c63c <USBD_GetDescriptor+0xb4>)
 800c636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c63a:	bf00      	nop
 800c63c:	0800c655 	.word	0x0800c655
 800c640:	0800c689 	.word	0x0800c689
 800c644:	0800c6bd 	.word	0x0800c6bd
 800c648:	0800c6f1 	.word	0x0800c6f1
 800c64c:	0800c725 	.word	0x0800c725
 800c650:	0800c759 	.word	0x0800c759
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00b      	beq.n	800c678 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	7c12      	ldrb	r2, [r2, #16]
 800c66c:	f107 0108 	add.w	r1, r7, #8
 800c670:	4610      	mov	r0, r2
 800c672:	4798      	blx	r3
 800c674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c676:	e091      	b.n	800c79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c678:	6839      	ldr	r1, [r7, #0]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fab2 	bl	800cbe4 <USBD_CtlError>
            err++;
 800c680:	7afb      	ldrb	r3, [r7, #11]
 800c682:	3301      	adds	r3, #1
 800c684:	72fb      	strb	r3, [r7, #11]
          break;
 800c686:	e089      	b.n	800c79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00b      	beq.n	800c6ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	7c12      	ldrb	r2, [r2, #16]
 800c6a0:	f107 0108 	add.w	r1, r7, #8
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	4798      	blx	r3
 800c6a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6aa:	e077      	b.n	800c79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6ac:	6839      	ldr	r1, [r7, #0]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 fa98 	bl	800cbe4 <USBD_CtlError>
            err++;
 800c6b4:	7afb      	ldrb	r3, [r7, #11]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ba:	e06f      	b.n	800c79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00b      	beq.n	800c6e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	7c12      	ldrb	r2, [r2, #16]
 800c6d4:	f107 0108 	add.w	r1, r7, #8
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4798      	blx	r3
 800c6dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6de:	e05d      	b.n	800c79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fa7e 	bl	800cbe4 <USBD_CtlError>
            err++;
 800c6e8:	7afb      	ldrb	r3, [r7, #11]
 800c6ea:	3301      	adds	r3, #1
 800c6ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c6ee:	e055      	b.n	800c79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00b      	beq.n	800c714 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	7c12      	ldrb	r2, [r2, #16]
 800c708:	f107 0108 	add.w	r1, r7, #8
 800c70c:	4610      	mov	r0, r2
 800c70e:	4798      	blx	r3
 800c710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c712:	e043      	b.n	800c79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fa64 	bl	800cbe4 <USBD_CtlError>
            err++;
 800c71c:	7afb      	ldrb	r3, [r7, #11]
 800c71e:	3301      	adds	r3, #1
 800c720:	72fb      	strb	r3, [r7, #11]
          break;
 800c722:	e03b      	b.n	800c79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00b      	beq.n	800c748 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	7c12      	ldrb	r2, [r2, #16]
 800c73c:	f107 0108 	add.w	r1, r7, #8
 800c740:	4610      	mov	r0, r2
 800c742:	4798      	blx	r3
 800c744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c746:	e029      	b.n	800c79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fa4a 	bl	800cbe4 <USBD_CtlError>
            err++;
 800c750:	7afb      	ldrb	r3, [r7, #11]
 800c752:	3301      	adds	r3, #1
 800c754:	72fb      	strb	r3, [r7, #11]
          break;
 800c756:	e021      	b.n	800c79c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c75e:	699b      	ldr	r3, [r3, #24]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00b      	beq.n	800c77c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	7c12      	ldrb	r2, [r2, #16]
 800c770:	f107 0108 	add.w	r1, r7, #8
 800c774:	4610      	mov	r0, r2
 800c776:	4798      	blx	r3
 800c778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c77a:	e00f      	b.n	800c79c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c77c:	6839      	ldr	r1, [r7, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fa30 	bl	800cbe4 <USBD_CtlError>
            err++;
 800c784:	7afb      	ldrb	r3, [r7, #11]
 800c786:	3301      	adds	r3, #1
 800c788:	72fb      	strb	r3, [r7, #11]
          break;
 800c78a:	e007      	b.n	800c79c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fa28 	bl	800cbe4 <USBD_CtlError>
          err++;
 800c794:	7afb      	ldrb	r3, [r7, #11]
 800c796:	3301      	adds	r3, #1
 800c798:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c79a:	bf00      	nop
      }
      break;
 800c79c:	e037      	b.n	800c80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	7c1b      	ldrb	r3, [r3, #16]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d109      	bne.n	800c7ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ae:	f107 0208 	add.w	r2, r7, #8
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	4798      	blx	r3
 800c7b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7b8:	e029      	b.n	800c80e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fa11 	bl	800cbe4 <USBD_CtlError>
        err++;
 800c7c2:	7afb      	ldrb	r3, [r7, #11]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7c8:	e021      	b.n	800c80e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	7c1b      	ldrb	r3, [r3, #16]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10d      	bne.n	800c7ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7da:	f107 0208 	add.w	r2, r7, #8
 800c7de:	4610      	mov	r0, r2
 800c7e0:	4798      	blx	r3
 800c7e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	2207      	movs	r2, #7
 800c7ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7ec:	e00f      	b.n	800c80e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f9f7 	bl	800cbe4 <USBD_CtlError>
        err++;
 800c7f6:	7afb      	ldrb	r3, [r7, #11]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	72fb      	strb	r3, [r7, #11]
      break;
 800c7fc:	e007      	b.n	800c80e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f9ef 	bl	800cbe4 <USBD_CtlError>
      err++;
 800c806:	7afb      	ldrb	r3, [r7, #11]
 800c808:	3301      	adds	r3, #1
 800c80a:	72fb      	strb	r3, [r7, #11]
      break;
 800c80c:	bf00      	nop
  }

  if (err != 0U)
 800c80e:	7afb      	ldrb	r3, [r7, #11]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d11e      	bne.n	800c852 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	88db      	ldrh	r3, [r3, #6]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d016      	beq.n	800c84a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c81c:	893b      	ldrh	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00e      	beq.n	800c840 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	88da      	ldrh	r2, [r3, #6]
 800c826:	893b      	ldrh	r3, [r7, #8]
 800c828:	4293      	cmp	r3, r2
 800c82a:	bf28      	it	cs
 800c82c:	4613      	movcs	r3, r2
 800c82e:	b29b      	uxth	r3, r3
 800c830:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c832:	893b      	ldrh	r3, [r7, #8]
 800c834:	461a      	mov	r2, r3
 800c836:	68f9      	ldr	r1, [r7, #12]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fa44 	bl	800ccc6 <USBD_CtlSendData>
 800c83e:	e009      	b.n	800c854 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f9ce 	bl	800cbe4 <USBD_CtlError>
 800c848:	e004      	b.n	800c854 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 fa95 	bl	800cd7a <USBD_CtlSendStatus>
 800c850:	e000      	b.n	800c854 <USBD_GetDescriptor+0x2cc>
    return;
 800c852:	bf00      	nop
  }
}
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop

0800c85c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	889b      	ldrh	r3, [r3, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d131      	bne.n	800c8d2 <USBD_SetAddress+0x76>
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	88db      	ldrh	r3, [r3, #6]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d12d      	bne.n	800c8d2 <USBD_SetAddress+0x76>
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	885b      	ldrh	r3, [r3, #2]
 800c87a:	2b7f      	cmp	r3, #127	; 0x7f
 800c87c:	d829      	bhi.n	800c8d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	885b      	ldrh	r3, [r3, #2]
 800c882:	b2db      	uxtb	r3, r3
 800c884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c888:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c890:	b2db      	uxtb	r3, r3
 800c892:	2b03      	cmp	r3, #3
 800c894:	d104      	bne.n	800c8a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c896:	6839      	ldr	r1, [r7, #0]
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 f9a3 	bl	800cbe4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c89e:	e01d      	b.n	800c8dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	7bfa      	ldrb	r2, [r7, #15]
 800c8a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f00a fae7 	bl	8016e80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fa61 	bl	800cd7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d004      	beq.n	800c8c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c6:	e009      	b.n	800c8dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8d0:	e004      	b.n	800c8dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8d2:	6839      	ldr	r1, [r7, #0]
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 f985 	bl	800cbe4 <USBD_CtlError>
  }
}
 800c8da:	bf00      	nop
 800c8dc:	bf00      	nop
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	885b      	ldrh	r3, [r3, #2]
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	4b4c      	ldr	r3, [pc, #304]	; (800ca2c <USBD_SetConfig+0x148>)
 800c8fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8fc:	4b4b      	ldr	r3, [pc, #300]	; (800ca2c <USBD_SetConfig+0x148>)
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d905      	bls.n	800c910 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f96c 	bl	800cbe4 <USBD_CtlError>
    return USBD_FAIL;
 800c90c:	2303      	movs	r3, #3
 800c90e:	e088      	b.n	800ca22 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c916:	b2db      	uxtb	r3, r3
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d002      	beq.n	800c922 <USBD_SetConfig+0x3e>
 800c91c:	2b03      	cmp	r3, #3
 800c91e:	d025      	beq.n	800c96c <USBD_SetConfig+0x88>
 800c920:	e071      	b.n	800ca06 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c922:	4b42      	ldr	r3, [pc, #264]	; (800ca2c <USBD_SetConfig+0x148>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d01c      	beq.n	800c964 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c92a:	4b40      	ldr	r3, [pc, #256]	; (800ca2c <USBD_SetConfig+0x148>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c934:	4b3d      	ldr	r3, [pc, #244]	; (800ca2c <USBD_SetConfig+0x148>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	4619      	mov	r1, r3
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff f948 	bl	800bbd0 <USBD_SetClassConfig>
 800c940:	4603      	mov	r3, r0
 800c942:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c944:	7bfb      	ldrb	r3, [r7, #15]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d004      	beq.n	800c954 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 f949 	bl	800cbe4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c952:	e065      	b.n	800ca20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 fa10 	bl	800cd7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2203      	movs	r2, #3
 800c95e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c962:	e05d      	b.n	800ca20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fa08 	bl	800cd7a <USBD_CtlSendStatus>
      break;
 800c96a:	e059      	b.n	800ca20 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c96c:	4b2f      	ldr	r3, [pc, #188]	; (800ca2c <USBD_SetConfig+0x148>)
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d112      	bne.n	800c99a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2202      	movs	r2, #2
 800c978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c97c:	4b2b      	ldr	r3, [pc, #172]	; (800ca2c <USBD_SetConfig+0x148>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	461a      	mov	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c986:	4b29      	ldr	r3, [pc, #164]	; (800ca2c <USBD_SetConfig+0x148>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	4619      	mov	r1, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff f93b 	bl	800bc08 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f9f1 	bl	800cd7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c998:	e042      	b.n	800ca20 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c99a:	4b24      	ldr	r3, [pc, #144]	; (800ca2c <USBD_SetConfig+0x148>)
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d02a      	beq.n	800c9fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff f929 	bl	800bc08 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ca2c <USBD_SetConfig+0x148>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	; (800ca2c <USBD_SetConfig+0x148>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff f902 	bl	800bbd0 <USBD_SetClassConfig>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00f      	beq.n	800c9f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f903 	bl	800cbe4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7ff f90e 	bl	800bc08 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c9f4:	e014      	b.n	800ca20 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 f9bf 	bl	800cd7a <USBD_CtlSendStatus>
      break;
 800c9fc:	e010      	b.n	800ca20 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f9bb 	bl	800cd7a <USBD_CtlSendStatus>
      break;
 800ca04:	e00c      	b.n	800ca20 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 f8eb 	bl	800cbe4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca0e:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <USBD_SetConfig+0x148>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7ff f8f7 	bl	800bc08 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca1e:	bf00      	nop
  }

  return ret;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	2000041d 	.word	0x2000041d

0800ca30 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	88db      	ldrh	r3, [r3, #6]
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d004      	beq.n	800ca4c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 f8cd 	bl	800cbe4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca4a:	e023      	b.n	800ca94 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	dc02      	bgt.n	800ca5e <USBD_GetConfig+0x2e>
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	dc03      	bgt.n	800ca64 <USBD_GetConfig+0x34>
 800ca5c:	e015      	b.n	800ca8a <USBD_GetConfig+0x5a>
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d00b      	beq.n	800ca7a <USBD_GetConfig+0x4a>
 800ca62:	e012      	b.n	800ca8a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	3308      	adds	r3, #8
 800ca6e:	2201      	movs	r2, #1
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f927 	bl	800ccc6 <USBD_CtlSendData>
        break;
 800ca78:	e00c      	b.n	800ca94 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	2201      	movs	r2, #1
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f91f 	bl	800ccc6 <USBD_CtlSendData>
        break;
 800ca88:	e004      	b.n	800ca94 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 f8a9 	bl	800cbe4 <USBD_CtlError>
        break;
 800ca92:	bf00      	nop
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caac:	b2db      	uxtb	r3, r3
 800caae:	3b01      	subs	r3, #1
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	d81e      	bhi.n	800caf2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	88db      	ldrh	r3, [r3, #6]
 800cab8:	2b02      	cmp	r3, #2
 800caba:	d004      	beq.n	800cac6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f890 	bl	800cbe4 <USBD_CtlError>
        break;
 800cac4:	e01a      	b.n	800cafc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d005      	beq.n	800cae2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	f043 0202 	orr.w	r2, r3, #2
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	330c      	adds	r3, #12
 800cae6:	2202      	movs	r2, #2
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f8eb 	bl	800ccc6 <USBD_CtlSendData>
      break;
 800caf0:	e004      	b.n	800cafc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 f875 	bl	800cbe4 <USBD_CtlError>
      break;
 800cafa:	bf00      	nop
  }
}
 800cafc:	bf00      	nop
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	885b      	ldrh	r3, [r3, #2]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d106      	bne.n	800cb24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f92b 	bl	800cd7a <USBD_CtlSendStatus>
  }
}
 800cb24:	bf00      	nop
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d80b      	bhi.n	800cb5c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	885b      	ldrh	r3, [r3, #2]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d10c      	bne.n	800cb66 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f000 f910 	bl	800cd7a <USBD_CtlSendStatus>
      }
      break;
 800cb5a:	e004      	b.n	800cb66 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f840 	bl	800cbe4 <USBD_CtlError>
      break;
 800cb64:	e000      	b.n	800cb68 <USBD_ClrFeature+0x3c>
      break;
 800cb66:	bf00      	nop
  }
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	781a      	ldrb	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	781a      	ldrb	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3301      	adds	r3, #1
 800cb98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7ff fabb 	bl	800c116 <SWAPBYTE>
 800cba0:	4603      	mov	r3, r0
 800cba2:	461a      	mov	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f7ff faae 	bl	800c116 <SWAPBYTE>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	f7ff faa1 	bl	800c116 <SWAPBYTE>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	80da      	strh	r2, [r3, #6]
}
 800cbdc:	bf00      	nop
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b082      	sub	sp, #8
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbee:	2180      	movs	r1, #128	; 0x80
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f00a f8db 	bl	8016dac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f00a f8d7 	bl	8016dac <USBD_LL_StallEP>
}
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b086      	sub	sp, #24
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	60f8      	str	r0, [r7, #12]
 800cc0e:	60b9      	str	r1, [r7, #8]
 800cc10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc12:	2300      	movs	r3, #0
 800cc14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d036      	beq.n	800cc8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc20:	6938      	ldr	r0, [r7, #16]
 800cc22:	f000 f836 	bl	800cc92 <USBD_GetLen>
 800cc26:	4603      	mov	r3, r0
 800cc28:	3301      	adds	r3, #1
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc34:	7dfb      	ldrb	r3, [r7, #23]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	4413      	add	r3, r2
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	7812      	ldrb	r2, [r2, #0]
 800cc3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc40:	7dfb      	ldrb	r3, [r7, #23]
 800cc42:	3301      	adds	r3, #1
 800cc44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cc46:	7dfb      	ldrb	r3, [r7, #23]
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	2203      	movs	r2, #3
 800cc4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc50:	7dfb      	ldrb	r3, [r7, #23]
 800cc52:	3301      	adds	r3, #1
 800cc54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cc56:	e013      	b.n	800cc80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	68ba      	ldr	r2, [r7, #8]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	693a      	ldr	r2, [r7, #16]
 800cc60:	7812      	ldrb	r2, [r2, #0]
 800cc62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	3301      	adds	r3, #1
 800cc68:	613b      	str	r3, [r7, #16]
    idx++;
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc70:	7dfb      	ldrb	r3, [r7, #23]
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	4413      	add	r3, r2
 800cc76:	2200      	movs	r2, #0
 800cc78:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc7a:	7dfb      	ldrb	r3, [r7, #23]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d1e7      	bne.n	800cc58 <USBD_GetString+0x52>
 800cc88:	e000      	b.n	800cc8c <USBD_GetString+0x86>
    return;
 800cc8a:	bf00      	nop
  }
}
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b085      	sub	sp, #20
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cca2:	e005      	b.n	800ccb0 <USBD_GetLen+0x1e>
  {
    len++;
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
 800cca6:	3301      	adds	r3, #1
 800cca8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	3301      	adds	r3, #1
 800ccae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f5      	bne.n	800cca4 <USBD_GetLen+0x12>
  }

  return len;
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3714      	adds	r7, #20
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	60b9      	str	r1, [r7, #8]
 800ccd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	68ba      	ldr	r2, [r7, #8]
 800ccea:	2100      	movs	r1, #0
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	f00a f8e6 	bl	8016ebe <USBD_LL_Transmit>

  return USBD_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}

0800ccfc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68ba      	ldr	r2, [r7, #8]
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f00a f8d5 	bl	8016ebe <USBD_LL_Transmit>

  return USBD_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b084      	sub	sp, #16
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60f8      	str	r0, [r7, #12]
 800cd26:	60b9      	str	r1, [r7, #8]
 800cd28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2203      	movs	r2, #3
 800cd2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	687a      	ldr	r2, [r7, #4]
 800cd3e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	68ba      	ldr	r2, [r7, #8]
 800cd46:	2100      	movs	r1, #0
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f00a f8d9 	bl	8016f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd4e:	2300      	movs	r3, #0
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	60f8      	str	r0, [r7, #12]
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	2100      	movs	r1, #0
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f00a f8c8 	bl	8016f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b082      	sub	sp, #8
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2204      	movs	r2, #4
 800cd86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2100      	movs	r1, #0
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f00a f894 	bl	8016ebe <USBD_LL_Transmit>

  return USBD_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2205      	movs	r2, #5
 800cdac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f00a f8a2 	bl	8016f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b083      	sub	sp, #12
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	4603      	mov	r3, r0
 800cdce:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cdd0:	88fb      	ldrh	r3, [r7, #6]
 800cdd2:	021b      	lsls	r3, r3, #8
 800cdd4:	b21a      	sxth	r2, r3
 800cdd6:	88fb      	ldrh	r3, [r7, #6]
 800cdd8:	0a1b      	lsrs	r3, r3, #8
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	b21b      	sxth	r3, r3
 800cdde:	4313      	orrs	r3, r2
 800cde0:	b21b      	sxth	r3, r3
 800cde2:	b29b      	uxth	r3, r3
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	061a      	lsls	r2, r3, #24
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	021b      	lsls	r3, r3, #8
 800ce00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ce04:	431a      	orrs	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	0a1b      	lsrs	r3, r3, #8
 800ce0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	0e1b      	lsrs	r3, r3, #24
 800ce14:	4313      	orrs	r3, r2
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ce2c:	f000 f8d4 	bl	800cfd8 <mem_init>
  memp_init();
 800ce30:	f000 fbda 	bl	800d5e8 <memp_init>
  pbuf_init();
  netif_init();
 800ce34:	f000 fc92 	bl	800d75c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ce38:	f006 ff46 	bl	8013cc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ce3c:	f001 fce4 	bl	800e808 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ce40:	f006 fefa 	bl	8013c38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ce56:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <ptr_to_mem+0x20>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	88fb      	ldrh	r3, [r7, #6]
 800ce5c:	4413      	add	r3, r2
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	20000420 	.word	0x20000420

0800ce70 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ce78:	4b05      	ldr	r3, [pc, #20]	; (800ce90 <mem_to_ptr+0x20>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	b29b      	uxth	r3, r3
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	20000420 	.word	0x20000420

0800ce94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ce94:	b590      	push	{r4, r7, lr}
 800ce96:	b085      	sub	sp, #20
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ce9c:	4b45      	ldr	r3, [pc, #276]	; (800cfb4 <plug_holes+0x120>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d206      	bcs.n	800ceb4 <plug_holes+0x20>
 800cea6:	4b44      	ldr	r3, [pc, #272]	; (800cfb8 <plug_holes+0x124>)
 800cea8:	f240 12df 	movw	r2, #479	; 0x1df
 800ceac:	4943      	ldr	r1, [pc, #268]	; (800cfbc <plug_holes+0x128>)
 800ceae:	4844      	ldr	r0, [pc, #272]	; (800cfc0 <plug_holes+0x12c>)
 800ceb0:	f00a ff7a 	bl	8017da8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ceb4:	4b43      	ldr	r3, [pc, #268]	; (800cfc4 <plug_holes+0x130>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d306      	bcc.n	800cecc <plug_holes+0x38>
 800cebe:	4b3e      	ldr	r3, [pc, #248]	; (800cfb8 <plug_holes+0x124>)
 800cec0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cec4:	4940      	ldr	r1, [pc, #256]	; (800cfc8 <plug_holes+0x134>)
 800cec6:	483e      	ldr	r0, [pc, #248]	; (800cfc0 <plug_holes+0x12c>)
 800cec8:	f00a ff6e 	bl	8017da8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	791b      	ldrb	r3, [r3, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d006      	beq.n	800cee2 <plug_holes+0x4e>
 800ced4:	4b38      	ldr	r3, [pc, #224]	; (800cfb8 <plug_holes+0x124>)
 800ced6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ceda:	493c      	ldr	r1, [pc, #240]	; (800cfcc <plug_holes+0x138>)
 800cedc:	4838      	ldr	r0, [pc, #224]	; (800cfc0 <plug_holes+0x12c>)
 800cede:	f00a ff63 	bl	8017da8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ceea:	d906      	bls.n	800cefa <plug_holes+0x66>
 800ceec:	4b32      	ldr	r3, [pc, #200]	; (800cfb8 <plug_holes+0x124>)
 800ceee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cef2:	4937      	ldr	r1, [pc, #220]	; (800cfd0 <plug_holes+0x13c>)
 800cef4:	4832      	ldr	r0, [pc, #200]	; (800cfc0 <plug_holes+0x12c>)
 800cef6:	f00a ff57 	bl	8017da8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff ffa4 	bl	800ce4c <ptr_to_mem>
 800cf04:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d024      	beq.n	800cf58 <plug_holes+0xc4>
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	791b      	ldrb	r3, [r3, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d120      	bne.n	800cf58 <plug_holes+0xc4>
 800cf16:	4b2b      	ldr	r3, [pc, #172]	; (800cfc4 <plug_holes+0x130>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d01b      	beq.n	800cf58 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cf20:	4b2c      	ldr	r3, [pc, #176]	; (800cfd4 <plug_holes+0x140>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d102      	bne.n	800cf30 <plug_holes+0x9c>
      lfree = mem;
 800cf2a:	4a2a      	ldr	r2, [pc, #168]	; (800cfd4 <plug_holes+0x140>)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	881a      	ldrh	r2, [r3, #0]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf40:	d00a      	beq.n	800cf58 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7ff ff80 	bl	800ce4c <ptr_to_mem>
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7ff ff8e 	bl	800ce70 <mem_to_ptr>
 800cf54:	4603      	mov	r3, r0
 800cf56:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	885b      	ldrh	r3, [r3, #2]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff ff75 	bl	800ce4c <ptr_to_mem>
 800cf62:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d01f      	beq.n	800cfac <plug_holes+0x118>
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	791b      	ldrb	r3, [r3, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d11b      	bne.n	800cfac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cf74:	4b17      	ldr	r3, [pc, #92]	; (800cfd4 <plug_holes+0x140>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d102      	bne.n	800cf84 <plug_holes+0xf0>
      lfree = pmem;
 800cf7e:	4a15      	ldr	r2, [pc, #84]	; (800cfd4 <plug_holes+0x140>)
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	881a      	ldrh	r2, [r3, #0]
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf94:	d00a      	beq.n	800cfac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff ff56 	bl	800ce4c <ptr_to_mem>
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	68b8      	ldr	r0, [r7, #8]
 800cfa4:	f7ff ff64 	bl	800ce70 <mem_to_ptr>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cfac:	bf00      	nop
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd90      	pop	{r4, r7, pc}
 800cfb4:	20000420 	.word	0x20000420
 800cfb8:	0801f1a4 	.word	0x0801f1a4
 800cfbc:	0801f1d4 	.word	0x0801f1d4
 800cfc0:	0801f1ec 	.word	0x0801f1ec
 800cfc4:	20000424 	.word	0x20000424
 800cfc8:	0801f214 	.word	0x0801f214
 800cfcc:	0801f230 	.word	0x0801f230
 800cfd0:	0801f24c 	.word	0x0801f24c
 800cfd4:	20000428 	.word	0x20000428

0800cfd8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cfde:	4b18      	ldr	r3, [pc, #96]	; (800d040 <mem_init+0x68>)
 800cfe0:	3303      	adds	r3, #3
 800cfe2:	f023 0303 	bic.w	r3, r3, #3
 800cfe6:	461a      	mov	r2, r3
 800cfe8:	4b16      	ldr	r3, [pc, #88]	; (800d044 <mem_init+0x6c>)
 800cfea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cfec:	4b15      	ldr	r3, [pc, #84]	; (800d044 <mem_init+0x6c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cff8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d006:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d00a:	f7ff ff1f 	bl	800ce4c <ptr_to_mem>
 800d00e:	4603      	mov	r3, r0
 800d010:	4a0d      	ldr	r2, [pc, #52]	; (800d048 <mem_init+0x70>)
 800d012:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d014:	4b0c      	ldr	r3, [pc, #48]	; (800d048 <mem_init+0x70>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2201      	movs	r2, #1
 800d01a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d01c:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <mem_init+0x70>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d024:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d026:	4b08      	ldr	r3, [pc, #32]	; (800d048 <mem_init+0x70>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d02e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d030:	4b04      	ldr	r3, [pc, #16]	; (800d044 <mem_init+0x6c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a05      	ldr	r2, [pc, #20]	; (800d04c <mem_init+0x74>)
 800d036:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	20003bec 	.word	0x20003bec
 800d044:	20000420 	.word	0x20000420
 800d048:	20000424 	.word	0x20000424
 800d04c:	20000428 	.word	0x20000428

0800d050 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7ff ff09 	bl	800ce70 <mem_to_ptr>
 800d05e:	4603      	mov	r3, r0
 800d060:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	4618      	mov	r0, r3
 800d068:	f7ff fef0 	bl	800ce4c <ptr_to_mem>
 800d06c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	885b      	ldrh	r3, [r3, #2]
 800d072:	4618      	mov	r0, r3
 800d074:	f7ff feea 	bl	800ce4c <ptr_to_mem>
 800d078:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d082:	d818      	bhi.n	800d0b6 <mem_link_valid+0x66>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	885b      	ldrh	r3, [r3, #2]
 800d088:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d08c:	d813      	bhi.n	800d0b6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d092:	8afa      	ldrh	r2, [r7, #22]
 800d094:	429a      	cmp	r2, r3
 800d096:	d004      	beq.n	800d0a2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	881b      	ldrh	r3, [r3, #0]
 800d09c:	8afa      	ldrh	r2, [r7, #22]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d109      	bne.n	800d0b6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d0a2:	4b08      	ldr	r3, [pc, #32]	; (800d0c4 <mem_link_valid+0x74>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d006      	beq.n	800d0ba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	885b      	ldrh	r3, [r3, #2]
 800d0b0:	8afa      	ldrh	r2, [r7, #22]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d001      	beq.n	800d0ba <mem_link_valid+0x6a>
    return 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e000      	b.n	800d0bc <mem_link_valid+0x6c>
  }
  return 1;
 800d0ba:	2301      	movs	r3, #1
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	20000424 	.word	0x20000424

0800d0c8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d04c      	beq.n	800d170 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f003 0303 	and.w	r3, r3, #3
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d007      	beq.n	800d0f0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d0e0:	4b25      	ldr	r3, [pc, #148]	; (800d178 <mem_free+0xb0>)
 800d0e2:	f240 2273 	movw	r2, #627	; 0x273
 800d0e6:	4925      	ldr	r1, [pc, #148]	; (800d17c <mem_free+0xb4>)
 800d0e8:	4825      	ldr	r0, [pc, #148]	; (800d180 <mem_free+0xb8>)
 800d0ea:	f00a fe5d 	bl	8017da8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d0ee:	e040      	b.n	800d172 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3b08      	subs	r3, #8
 800d0f4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d0f6:	4b23      	ldr	r3, [pc, #140]	; (800d184 <mem_free+0xbc>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d306      	bcc.n	800d10e <mem_free+0x46>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f103 020c 	add.w	r2, r3, #12
 800d106:	4b20      	ldr	r3, [pc, #128]	; (800d188 <mem_free+0xc0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d907      	bls.n	800d11e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d10e:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <mem_free+0xb0>)
 800d110:	f240 227f 	movw	r2, #639	; 0x27f
 800d114:	491d      	ldr	r1, [pc, #116]	; (800d18c <mem_free+0xc4>)
 800d116:	481a      	ldr	r0, [pc, #104]	; (800d180 <mem_free+0xb8>)
 800d118:	f00a fe46 	bl	8017da8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d11c:	e029      	b.n	800d172 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	791b      	ldrb	r3, [r3, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d107      	bne.n	800d136 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d126:	4b14      	ldr	r3, [pc, #80]	; (800d178 <mem_free+0xb0>)
 800d128:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d12c:	4918      	ldr	r1, [pc, #96]	; (800d190 <mem_free+0xc8>)
 800d12e:	4814      	ldr	r0, [pc, #80]	; (800d180 <mem_free+0xb8>)
 800d130:	f00a fe3a 	bl	8017da8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d134:	e01d      	b.n	800d172 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f7ff ff8a 	bl	800d050 <mem_link_valid>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d107      	bne.n	800d152 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d142:	4b0d      	ldr	r3, [pc, #52]	; (800d178 <mem_free+0xb0>)
 800d144:	f240 2295 	movw	r2, #661	; 0x295
 800d148:	4912      	ldr	r1, [pc, #72]	; (800d194 <mem_free+0xcc>)
 800d14a:	480d      	ldr	r0, [pc, #52]	; (800d180 <mem_free+0xb8>)
 800d14c:	f00a fe2c 	bl	8017da8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d150:	e00f      	b.n	800d172 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d158:	4b0f      	ldr	r3, [pc, #60]	; (800d198 <mem_free+0xd0>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	429a      	cmp	r2, r3
 800d160:	d202      	bcs.n	800d168 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d162:	4a0d      	ldr	r2, [pc, #52]	; (800d198 <mem_free+0xd0>)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff fe93 	bl	800ce94 <plug_holes>
 800d16e:	e000      	b.n	800d172 <mem_free+0xaa>
    return;
 800d170:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	0801f1a4 	.word	0x0801f1a4
 800d17c:	0801f278 	.word	0x0801f278
 800d180:	0801f1ec 	.word	0x0801f1ec
 800d184:	20000420 	.word	0x20000420
 800d188:	20000424 	.word	0x20000424
 800d18c:	0801f29c 	.word	0x0801f29c
 800d190:	0801f2b8 	.word	0x0801f2b8
 800d194:	0801f2e0 	.word	0x0801f2e0
 800d198:	20000428 	.word	0x20000428

0800d19c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b088      	sub	sp, #32
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d1a8:	887b      	ldrh	r3, [r7, #2]
 800d1aa:	3303      	adds	r3, #3
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	f023 0303 	bic.w	r3, r3, #3
 800d1b2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d1b4:	8bfb      	ldrh	r3, [r7, #30]
 800d1b6:	2b0b      	cmp	r3, #11
 800d1b8:	d801      	bhi.n	800d1be <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d1ba:	230c      	movs	r3, #12
 800d1bc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d1be:	8bfb      	ldrh	r3, [r7, #30]
 800d1c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1c4:	d803      	bhi.n	800d1ce <mem_trim+0x32>
 800d1c6:	8bfa      	ldrh	r2, [r7, #30]
 800d1c8:	887b      	ldrh	r3, [r7, #2]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d201      	bcs.n	800d1d2 <mem_trim+0x36>
    return NULL;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	e0cc      	b.n	800d36c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d1d2:	4b68      	ldr	r3, [pc, #416]	; (800d374 <mem_trim+0x1d8>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d304      	bcc.n	800d1e6 <mem_trim+0x4a>
 800d1dc:	4b66      	ldr	r3, [pc, #408]	; (800d378 <mem_trim+0x1dc>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d306      	bcc.n	800d1f4 <mem_trim+0x58>
 800d1e6:	4b65      	ldr	r3, [pc, #404]	; (800d37c <mem_trim+0x1e0>)
 800d1e8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d1ec:	4964      	ldr	r1, [pc, #400]	; (800d380 <mem_trim+0x1e4>)
 800d1ee:	4865      	ldr	r0, [pc, #404]	; (800d384 <mem_trim+0x1e8>)
 800d1f0:	f00a fdda 	bl	8017da8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d1f4:	4b5f      	ldr	r3, [pc, #380]	; (800d374 <mem_trim+0x1d8>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d304      	bcc.n	800d208 <mem_trim+0x6c>
 800d1fe:	4b5e      	ldr	r3, [pc, #376]	; (800d378 <mem_trim+0x1dc>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	429a      	cmp	r2, r3
 800d206:	d301      	bcc.n	800d20c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	e0af      	b.n	800d36c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	3b08      	subs	r3, #8
 800d210:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d212:	69b8      	ldr	r0, [r7, #24]
 800d214:	f7ff fe2c 	bl	800ce70 <mem_to_ptr>
 800d218:	4603      	mov	r3, r0
 800d21a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	881a      	ldrh	r2, [r3, #0]
 800d220:	8afb      	ldrh	r3, [r7, #22]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	b29b      	uxth	r3, r3
 800d226:	3b08      	subs	r3, #8
 800d228:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d22a:	8bfa      	ldrh	r2, [r7, #30]
 800d22c:	8abb      	ldrh	r3, [r7, #20]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d906      	bls.n	800d240 <mem_trim+0xa4>
 800d232:	4b52      	ldr	r3, [pc, #328]	; (800d37c <mem_trim+0x1e0>)
 800d234:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d238:	4953      	ldr	r1, [pc, #332]	; (800d388 <mem_trim+0x1ec>)
 800d23a:	4852      	ldr	r0, [pc, #328]	; (800d384 <mem_trim+0x1e8>)
 800d23c:	f00a fdb4 	bl	8017da8 <iprintf>
  if (newsize > size) {
 800d240:	8bfa      	ldrh	r2, [r7, #30]
 800d242:	8abb      	ldrh	r3, [r7, #20]
 800d244:	429a      	cmp	r2, r3
 800d246:	d901      	bls.n	800d24c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d248:	2300      	movs	r3, #0
 800d24a:	e08f      	b.n	800d36c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800d24c:	8bfa      	ldrh	r2, [r7, #30]
 800d24e:	8abb      	ldrh	r3, [r7, #20]
 800d250:	429a      	cmp	r2, r3
 800d252:	d101      	bne.n	800d258 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	e089      	b.n	800d36c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	881b      	ldrh	r3, [r3, #0]
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff fdf5 	bl	800ce4c <ptr_to_mem>
 800d262:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	791b      	ldrb	r3, [r3, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d13f      	bne.n	800d2ec <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	881b      	ldrh	r3, [r3, #0]
 800d270:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d274:	d106      	bne.n	800d284 <mem_trim+0xe8>
 800d276:	4b41      	ldr	r3, [pc, #260]	; (800d37c <mem_trim+0x1e0>)
 800d278:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d27c:	4943      	ldr	r1, [pc, #268]	; (800d38c <mem_trim+0x1f0>)
 800d27e:	4841      	ldr	r0, [pc, #260]	; (800d384 <mem_trim+0x1e8>)
 800d280:	f00a fd92 	bl	8017da8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	881b      	ldrh	r3, [r3, #0]
 800d288:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d28a:	8afa      	ldrh	r2, [r7, #22]
 800d28c:	8bfb      	ldrh	r3, [r7, #30]
 800d28e:	4413      	add	r3, r2
 800d290:	b29b      	uxth	r3, r3
 800d292:	3308      	adds	r3, #8
 800d294:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d296:	4b3e      	ldr	r3, [pc, #248]	; (800d390 <mem_trim+0x1f4>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d106      	bne.n	800d2ae <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800d2a0:	89fb      	ldrh	r3, [r7, #14]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff fdd2 	bl	800ce4c <ptr_to_mem>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	4a39      	ldr	r2, [pc, #228]	; (800d390 <mem_trim+0x1f4>)
 800d2ac:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d2ae:	89fb      	ldrh	r3, [r7, #14]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7ff fdcb 	bl	800ce4c <ptr_to_mem>
 800d2b6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	89ba      	ldrh	r2, [r7, #12]
 800d2c2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	8afa      	ldrh	r2, [r7, #22]
 800d2c8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	89fa      	ldrh	r2, [r7, #14]
 800d2ce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	881b      	ldrh	r3, [r3, #0]
 800d2d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2d8:	d047      	beq.n	800d36a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	881b      	ldrh	r3, [r3, #0]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fdb4 	bl	800ce4c <ptr_to_mem>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	89fb      	ldrh	r3, [r7, #14]
 800d2e8:	8053      	strh	r3, [r2, #2]
 800d2ea:	e03e      	b.n	800d36a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d2ec:	8bfb      	ldrh	r3, [r7, #30]
 800d2ee:	f103 0214 	add.w	r2, r3, #20
 800d2f2:	8abb      	ldrh	r3, [r7, #20]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d838      	bhi.n	800d36a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d2f8:	8afa      	ldrh	r2, [r7, #22]
 800d2fa:	8bfb      	ldrh	r3, [r7, #30]
 800d2fc:	4413      	add	r3, r2
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	3308      	adds	r3, #8
 800d302:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	881b      	ldrh	r3, [r3, #0]
 800d308:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d30c:	d106      	bne.n	800d31c <mem_trim+0x180>
 800d30e:	4b1b      	ldr	r3, [pc, #108]	; (800d37c <mem_trim+0x1e0>)
 800d310:	f240 3216 	movw	r2, #790	; 0x316
 800d314:	491d      	ldr	r1, [pc, #116]	; (800d38c <mem_trim+0x1f0>)
 800d316:	481b      	ldr	r0, [pc, #108]	; (800d384 <mem_trim+0x1e8>)
 800d318:	f00a fd46 	bl	8017da8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d31c:	89fb      	ldrh	r3, [r7, #14]
 800d31e:	4618      	mov	r0, r3
 800d320:	f7ff fd94 	bl	800ce4c <ptr_to_mem>
 800d324:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d326:	4b1a      	ldr	r3, [pc, #104]	; (800d390 <mem_trim+0x1f4>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d202      	bcs.n	800d336 <mem_trim+0x19a>
      lfree = mem2;
 800d330:	4a17      	ldr	r2, [pc, #92]	; (800d390 <mem_trim+0x1f4>)
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	2200      	movs	r2, #0
 800d33a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	881a      	ldrh	r2, [r3, #0]
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	8afa      	ldrh	r2, [r7, #22]
 800d348:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	89fa      	ldrh	r2, [r7, #14]
 800d34e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d358:	d007      	beq.n	800d36a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	4618      	mov	r0, r3
 800d360:	f7ff fd74 	bl	800ce4c <ptr_to_mem>
 800d364:	4602      	mov	r2, r0
 800d366:	89fb      	ldrh	r3, [r7, #14]
 800d368:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800d36a:	687b      	ldr	r3, [r7, #4]
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3720      	adds	r7, #32
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	20000420 	.word	0x20000420
 800d378:	20000424 	.word	0x20000424
 800d37c:	0801f1a4 	.word	0x0801f1a4
 800d380:	0801f314 	.word	0x0801f314
 800d384:	0801f1ec 	.word	0x0801f1ec
 800d388:	0801f32c 	.word	0x0801f32c
 800d38c:	0801f34c 	.word	0x0801f34c
 800d390:	20000428 	.word	0x20000428

0800d394 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b088      	sub	sp, #32
 800d398:	af00      	add	r7, sp, #0
 800d39a:	4603      	mov	r3, r0
 800d39c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d39e:	88fb      	ldrh	r3, [r7, #6]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <mem_malloc+0x14>
    return NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e0d9      	b.n	800d55c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d3a8:	88fb      	ldrh	r3, [r7, #6]
 800d3aa:	3303      	adds	r3, #3
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	f023 0303 	bic.w	r3, r3, #3
 800d3b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d3b4:	8bbb      	ldrh	r3, [r7, #28]
 800d3b6:	2b0b      	cmp	r3, #11
 800d3b8:	d801      	bhi.n	800d3be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d3ba:	230c      	movs	r3, #12
 800d3bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d3be:	8bbb      	ldrh	r3, [r7, #28]
 800d3c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3c4:	d803      	bhi.n	800d3ce <mem_malloc+0x3a>
 800d3c6:	8bba      	ldrh	r2, [r7, #28]
 800d3c8:	88fb      	ldrh	r3, [r7, #6]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d201      	bcs.n	800d3d2 <mem_malloc+0x3e>
    return NULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e0c4      	b.n	800d55c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d3d2:	4b64      	ldr	r3, [pc, #400]	; (800d564 <mem_malloc+0x1d0>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7ff fd4a 	bl	800ce70 <mem_to_ptr>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	83fb      	strh	r3, [r7, #30]
 800d3e0:	e0b4      	b.n	800d54c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d3e2:	8bfb      	ldrh	r3, [r7, #30]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7ff fd31 	bl	800ce4c <ptr_to_mem>
 800d3ea:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	791b      	ldrb	r3, [r3, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f040 80a4 	bne.w	800d53e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	881b      	ldrh	r3, [r3, #0]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	8bfb      	ldrh	r3, [r7, #30]
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	f1a3 0208 	sub.w	r2, r3, #8
 800d404:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d406:	429a      	cmp	r2, r3
 800d408:	f0c0 8099 	bcc.w	800d53e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	8bfb      	ldrh	r3, [r7, #30]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	f1a3 0208 	sub.w	r2, r3, #8
 800d41a:	8bbb      	ldrh	r3, [r7, #28]
 800d41c:	3314      	adds	r3, #20
 800d41e:	429a      	cmp	r2, r3
 800d420:	d333      	bcc.n	800d48a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d422:	8bfa      	ldrh	r2, [r7, #30]
 800d424:	8bbb      	ldrh	r3, [r7, #28]
 800d426:	4413      	add	r3, r2
 800d428:	b29b      	uxth	r3, r3
 800d42a:	3308      	adds	r3, #8
 800d42c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d42e:	8a7b      	ldrh	r3, [r7, #18]
 800d430:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d434:	d106      	bne.n	800d444 <mem_malloc+0xb0>
 800d436:	4b4c      	ldr	r3, [pc, #304]	; (800d568 <mem_malloc+0x1d4>)
 800d438:	f240 3287 	movw	r2, #903	; 0x387
 800d43c:	494b      	ldr	r1, [pc, #300]	; (800d56c <mem_malloc+0x1d8>)
 800d43e:	484c      	ldr	r0, [pc, #304]	; (800d570 <mem_malloc+0x1dc>)
 800d440:	f00a fcb2 	bl	8017da8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d444:	8a7b      	ldrh	r3, [r7, #18]
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff fd00 	bl	800ce4c <ptr_to_mem>
 800d44c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	881a      	ldrh	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	8bfa      	ldrh	r2, [r7, #30]
 800d460:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	8a7a      	ldrh	r2, [r7, #18]
 800d466:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2201      	movs	r2, #1
 800d46c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	881b      	ldrh	r3, [r3, #0]
 800d472:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d476:	d00b      	beq.n	800d490 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7ff fce5 	bl	800ce4c <ptr_to_mem>
 800d482:	4602      	mov	r2, r0
 800d484:	8a7b      	ldrh	r3, [r7, #18]
 800d486:	8053      	strh	r3, [r2, #2]
 800d488:	e002      	b.n	800d490 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	2201      	movs	r2, #1
 800d48e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d490:	4b34      	ldr	r3, [pc, #208]	; (800d564 <mem_malloc+0x1d0>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	429a      	cmp	r2, r3
 800d498:	d127      	bne.n	800d4ea <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d49a:	4b32      	ldr	r3, [pc, #200]	; (800d564 <mem_malloc+0x1d0>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d4a0:	e005      	b.n	800d4ae <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	881b      	ldrh	r3, [r3, #0]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff fcd0 	bl	800ce4c <ptr_to_mem>
 800d4ac:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	791b      	ldrb	r3, [r3, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d004      	beq.n	800d4c0 <mem_malloc+0x12c>
 800d4b6:	4b2f      	ldr	r3, [pc, #188]	; (800d574 <mem_malloc+0x1e0>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	69ba      	ldr	r2, [r7, #24]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d1f0      	bne.n	800d4a2 <mem_malloc+0x10e>
          }
          lfree = cur;
 800d4c0:	4a28      	ldr	r2, [pc, #160]	; (800d564 <mem_malloc+0x1d0>)
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d4c6:	4b27      	ldr	r3, [pc, #156]	; (800d564 <mem_malloc+0x1d0>)
 800d4c8:	681a      	ldr	r2, [r3, #0]
 800d4ca:	4b2a      	ldr	r3, [pc, #168]	; (800d574 <mem_malloc+0x1e0>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d00b      	beq.n	800d4ea <mem_malloc+0x156>
 800d4d2:	4b24      	ldr	r3, [pc, #144]	; (800d564 <mem_malloc+0x1d0>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	791b      	ldrb	r3, [r3, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d006      	beq.n	800d4ea <mem_malloc+0x156>
 800d4dc:	4b22      	ldr	r3, [pc, #136]	; (800d568 <mem_malloc+0x1d4>)
 800d4de:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d4e2:	4925      	ldr	r1, [pc, #148]	; (800d578 <mem_malloc+0x1e4>)
 800d4e4:	4822      	ldr	r0, [pc, #136]	; (800d570 <mem_malloc+0x1dc>)
 800d4e6:	f00a fc5f 	bl	8017da8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d4ea:	8bba      	ldrh	r2, [r7, #28]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	3308      	adds	r3, #8
 800d4f2:	4a20      	ldr	r2, [pc, #128]	; (800d574 <mem_malloc+0x1e0>)
 800d4f4:	6812      	ldr	r2, [r2, #0]
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d906      	bls.n	800d508 <mem_malloc+0x174>
 800d4fa:	4b1b      	ldr	r3, [pc, #108]	; (800d568 <mem_malloc+0x1d4>)
 800d4fc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d500:	491e      	ldr	r1, [pc, #120]	; (800d57c <mem_malloc+0x1e8>)
 800d502:	481b      	ldr	r0, [pc, #108]	; (800d570 <mem_malloc+0x1dc>)
 800d504:	f00a fc50 	bl	8017da8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	f003 0303 	and.w	r3, r3, #3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d006      	beq.n	800d520 <mem_malloc+0x18c>
 800d512:	4b15      	ldr	r3, [pc, #84]	; (800d568 <mem_malloc+0x1d4>)
 800d514:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d518:	4919      	ldr	r1, [pc, #100]	; (800d580 <mem_malloc+0x1ec>)
 800d51a:	4815      	ldr	r0, [pc, #84]	; (800d570 <mem_malloc+0x1dc>)
 800d51c:	f00a fc44 	bl	8017da8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	f003 0303 	and.w	r3, r3, #3
 800d526:	2b00      	cmp	r3, #0
 800d528:	d006      	beq.n	800d538 <mem_malloc+0x1a4>
 800d52a:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <mem_malloc+0x1d4>)
 800d52c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d530:	4914      	ldr	r1, [pc, #80]	; (800d584 <mem_malloc+0x1f0>)
 800d532:	480f      	ldr	r0, [pc, #60]	; (800d570 <mem_malloc+0x1dc>)
 800d534:	f00a fc38 	bl	8017da8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	3308      	adds	r3, #8
 800d53c:	e00e      	b.n	800d55c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d53e:	8bfb      	ldrh	r3, [r7, #30]
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fc83 	bl	800ce4c <ptr_to_mem>
 800d546:	4603      	mov	r3, r0
 800d548:	881b      	ldrh	r3, [r3, #0]
 800d54a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d54c:	8bfa      	ldrh	r2, [r7, #30]
 800d54e:	8bbb      	ldrh	r3, [r7, #28]
 800d550:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d554:	429a      	cmp	r2, r3
 800d556:	f4ff af44 	bcc.w	800d3e2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3720      	adds	r7, #32
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	20000428 	.word	0x20000428
 800d568:	0801f1a4 	.word	0x0801f1a4
 800d56c:	0801f34c 	.word	0x0801f34c
 800d570:	0801f1ec 	.word	0x0801f1ec
 800d574:	20000424 	.word	0x20000424
 800d578:	0801f360 	.word	0x0801f360
 800d57c:	0801f37c 	.word	0x0801f37c
 800d580:	0801f3ac 	.word	0x0801f3ac
 800d584:	0801f3dc 	.word	0x0801f3dc

0800d588 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	2200      	movs	r2, #0
 800d596:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	3303      	adds	r3, #3
 800d59e:	f023 0303 	bic.w	r3, r3, #3
 800d5a2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	e011      	b.n	800d5ce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	881b      	ldrh	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	885b      	ldrh	r3, [r3, #2]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	dbe7      	blt.n	800d5aa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d5da:	bf00      	nop
 800d5dc:	bf00      	nop
 800d5de:	3714      	adds	r7, #20
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	80fb      	strh	r3, [r7, #6]
 800d5f2:	e009      	b.n	800d608 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d5f4:	88fb      	ldrh	r3, [r7, #6]
 800d5f6:	4a08      	ldr	r2, [pc, #32]	; (800d618 <memp_init+0x30>)
 800d5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff ffc3 	bl	800d588 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d602:	88fb      	ldrh	r3, [r7, #6]
 800d604:	3301      	adds	r3, #1
 800d606:	80fb      	strh	r3, [r7, #6]
 800d608:	88fb      	ldrh	r3, [r7, #6]
 800d60a:	2b08      	cmp	r3, #8
 800d60c:	d9f2      	bls.n	800d5f4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d60e:	bf00      	nop
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	08021bdc 	.word	0x08021bdc

0800d61c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	689b      	ldr	r3, [r3, #8]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d012      	beq.n	800d658 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	68fa      	ldr	r2, [r7, #12]
 800d638:	6812      	ldr	r2, [r2, #0]
 800d63a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f003 0303 	and.w	r3, r3, #3
 800d642:	2b00      	cmp	r3, #0
 800d644:	d006      	beq.n	800d654 <do_memp_malloc_pool+0x38>
 800d646:	4b07      	ldr	r3, [pc, #28]	; (800d664 <do_memp_malloc_pool+0x48>)
 800d648:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d64c:	4906      	ldr	r1, [pc, #24]	; (800d668 <do_memp_malloc_pool+0x4c>)
 800d64e:	4807      	ldr	r0, [pc, #28]	; (800d66c <do_memp_malloc_pool+0x50>)
 800d650:	f00a fbaa 	bl	8017da8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	e000      	b.n	800d65a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	0801f400 	.word	0x0801f400
 800d668:	0801f430 	.word	0x0801f430
 800d66c:	0801f454 	.word	0x0801f454

0800d670 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	4603      	mov	r3, r0
 800d678:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d67a:	79fb      	ldrb	r3, [r7, #7]
 800d67c:	2b08      	cmp	r3, #8
 800d67e:	d908      	bls.n	800d692 <memp_malloc+0x22>
 800d680:	4b0a      	ldr	r3, [pc, #40]	; (800d6ac <memp_malloc+0x3c>)
 800d682:	f240 1257 	movw	r2, #343	; 0x157
 800d686:	490a      	ldr	r1, [pc, #40]	; (800d6b0 <memp_malloc+0x40>)
 800d688:	480a      	ldr	r0, [pc, #40]	; (800d6b4 <memp_malloc+0x44>)
 800d68a:	f00a fb8d 	bl	8017da8 <iprintf>
 800d68e:	2300      	movs	r3, #0
 800d690:	e008      	b.n	800d6a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	4a08      	ldr	r2, [pc, #32]	; (800d6b8 <memp_malloc+0x48>)
 800d696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7ff ffbe 	bl	800d61c <do_memp_malloc_pool>
 800d6a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	0801f400 	.word	0x0801f400
 800d6b0:	0801f490 	.word	0x0801f490
 800d6b4:	0801f454 	.word	0x0801f454
 800d6b8:	08021bdc 	.word	0x08021bdc

0800d6bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	f003 0303 	and.w	r3, r3, #3
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d006      	beq.n	800d6de <do_memp_free_pool+0x22>
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <do_memp_free_pool+0x40>)
 800d6d2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d6d6:	490a      	ldr	r1, [pc, #40]	; (800d700 <do_memp_free_pool+0x44>)
 800d6d8:	480a      	ldr	r0, [pc, #40]	; (800d704 <do_memp_free_pool+0x48>)
 800d6da:	f00a fb65 	bl	8017da8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d6f4:	bf00      	nop
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	0801f400 	.word	0x0801f400
 800d700:	0801f4b0 	.word	0x0801f4b0
 800d704:	0801f454 	.word	0x0801f454

0800d708 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	4603      	mov	r3, r0
 800d710:	6039      	str	r1, [r7, #0]
 800d712:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d714:	79fb      	ldrb	r3, [r7, #7]
 800d716:	2b08      	cmp	r3, #8
 800d718:	d907      	bls.n	800d72a <memp_free+0x22>
 800d71a:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <memp_free+0x44>)
 800d71c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d720:	490b      	ldr	r1, [pc, #44]	; (800d750 <memp_free+0x48>)
 800d722:	480c      	ldr	r0, [pc, #48]	; (800d754 <memp_free+0x4c>)
 800d724:	f00a fb40 	bl	8017da8 <iprintf>
 800d728:	e00c      	b.n	800d744 <memp_free+0x3c>

  if (mem == NULL) {
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d008      	beq.n	800d742 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d730:	79fb      	ldrb	r3, [r7, #7]
 800d732:	4a09      	ldr	r2, [pc, #36]	; (800d758 <memp_free+0x50>)
 800d734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff ffbe 	bl	800d6bc <do_memp_free_pool>
 800d740:	e000      	b.n	800d744 <memp_free+0x3c>
    return;
 800d742:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	0801f400 	.word	0x0801f400
 800d750:	0801f4d0 	.word	0x0801f4d0
 800d754:	0801f454 	.word	0x0801f454
 800d758:	08021bdc 	.word	0x08021bdc

0800d75c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d75c:	b480      	push	{r7}
 800d75e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d760:	bf00      	nop
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr
	...

0800d76c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
 800d778:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d108      	bne.n	800d792 <netif_add+0x26>
 800d780:	4b57      	ldr	r3, [pc, #348]	; (800d8e0 <netif_add+0x174>)
 800d782:	f240 1227 	movw	r2, #295	; 0x127
 800d786:	4957      	ldr	r1, [pc, #348]	; (800d8e4 <netif_add+0x178>)
 800d788:	4857      	ldr	r0, [pc, #348]	; (800d8e8 <netif_add+0x17c>)
 800d78a:	f00a fb0d 	bl	8017da8 <iprintf>
 800d78e:	2300      	movs	r3, #0
 800d790:	e0a2      	b.n	800d8d8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	d108      	bne.n	800d7aa <netif_add+0x3e>
 800d798:	4b51      	ldr	r3, [pc, #324]	; (800d8e0 <netif_add+0x174>)
 800d79a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d79e:	4953      	ldr	r1, [pc, #332]	; (800d8ec <netif_add+0x180>)
 800d7a0:	4851      	ldr	r0, [pc, #324]	; (800d8e8 <netif_add+0x17c>)
 800d7a2:	f00a fb01 	bl	8017da8 <iprintf>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e096      	b.n	800d8d8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d101      	bne.n	800d7b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d7b0:	4b4f      	ldr	r3, [pc, #316]	; (800d8f0 <netif_add+0x184>)
 800d7b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d101      	bne.n	800d7be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d7ba:	4b4d      	ldr	r3, [pc, #308]	; (800d8f0 <netif_add+0x184>)
 800d7bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d101      	bne.n	800d7c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d7c4:	4b4a      	ldr	r3, [pc, #296]	; (800d8f0 <netif_add+0x184>)
 800d7c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4a45      	ldr	r2, [pc, #276]	; (800d8f4 <netif_add+0x188>)
 800d7de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	6a3a      	ldr	r2, [r7, #32]
 800d7f8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d7fa:	4b3f      	ldr	r3, [pc, #252]	; (800d8f8 <netif_add+0x18c>)
 800d7fc:	781a      	ldrb	r2, [r3, #0]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d808:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	687a      	ldr	r2, [r7, #4]
 800d80e:	68b9      	ldr	r1, [r7, #8]
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f000 f913 	bl	800da3c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	4798      	blx	r3
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <netif_add+0xba>
    return NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	e058      	b.n	800d8d8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d82c:	2bff      	cmp	r3, #255	; 0xff
 800d82e:	d103      	bne.n	800d838 <netif_add+0xcc>
        netif->num = 0;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2200      	movs	r2, #0
 800d834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d83c:	4b2f      	ldr	r3, [pc, #188]	; (800d8fc <netif_add+0x190>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	617b      	str	r3, [r7, #20]
 800d842:	e02b      	b.n	800d89c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d844:	697a      	ldr	r2, [r7, #20]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d106      	bne.n	800d85a <netif_add+0xee>
 800d84c:	4b24      	ldr	r3, [pc, #144]	; (800d8e0 <netif_add+0x174>)
 800d84e:	f240 128b 	movw	r2, #395	; 0x18b
 800d852:	492b      	ldr	r1, [pc, #172]	; (800d900 <netif_add+0x194>)
 800d854:	4824      	ldr	r0, [pc, #144]	; (800d8e8 <netif_add+0x17c>)
 800d856:	f00a faa7 	bl	8017da8 <iprintf>
        num_netifs++;
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	3301      	adds	r3, #1
 800d85e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2bff      	cmp	r3, #255	; 0xff
 800d864:	dd06      	ble.n	800d874 <netif_add+0x108>
 800d866:	4b1e      	ldr	r3, [pc, #120]	; (800d8e0 <netif_add+0x174>)
 800d868:	f240 128d 	movw	r2, #397	; 0x18d
 800d86c:	4925      	ldr	r1, [pc, #148]	; (800d904 <netif_add+0x198>)
 800d86e:	481e      	ldr	r0, [pc, #120]	; (800d8e8 <netif_add+0x17c>)
 800d870:	f00a fa9a 	bl	8017da8 <iprintf>
        if (netif2->num == netif->num) {
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d880:	429a      	cmp	r2, r3
 800d882:	d108      	bne.n	800d896 <netif_add+0x12a>
          netif->num++;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d88a:	3301      	adds	r3, #1
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d894:	e005      	b.n	800d8a2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	617b      	str	r3, [r7, #20]
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1d0      	bne.n	800d844 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1be      	bne.n	800d826 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8ae:	2bfe      	cmp	r3, #254	; 0xfe
 800d8b0:	d103      	bne.n	800d8ba <netif_add+0x14e>
    netif_num = 0;
 800d8b2:	4b11      	ldr	r3, [pc, #68]	; (800d8f8 <netif_add+0x18c>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	701a      	strb	r2, [r3, #0]
 800d8b8:	e006      	b.n	800d8c8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	b2da      	uxtb	r2, r3
 800d8c4:	4b0c      	ldr	r3, [pc, #48]	; (800d8f8 <netif_add+0x18c>)
 800d8c6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d8c8:	4b0c      	ldr	r3, [pc, #48]	; (800d8fc <netif_add+0x190>)
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d8d0:	4a0a      	ldr	r2, [pc, #40]	; (800d8fc <netif_add+0x190>)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	0801f4ec 	.word	0x0801f4ec
 800d8e4:	0801f580 	.word	0x0801f580
 800d8e8:	0801f53c 	.word	0x0801f53c
 800d8ec:	0801f59c 	.word	0x0801f59c
 800d8f0:	08021c40 	.word	0x08021c40
 800d8f4:	0800dc4f 	.word	0x0800dc4f
 800d8f8:	20000450 	.word	0x20000450
 800d8fc:	20007108 	.word	0x20007108
 800d900:	0801f5c0 	.word	0x0801f5c0
 800d904:	0801f5d4 	.word	0x0801f5d4

0800d908 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d912:	6839      	ldr	r1, [r7, #0]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f002 fabf 	bl	800fe98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d91a:	6839      	ldr	r1, [r7, #0]
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f006 fb5d 	bl	8013fdc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d922:	bf00      	nop
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <netif_do_set_ipaddr+0x20>
 800d93e:	4b1d      	ldr	r3, [pc, #116]	; (800d9b4 <netif_do_set_ipaddr+0x88>)
 800d940:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d944:	491c      	ldr	r1, [pc, #112]	; (800d9b8 <netif_do_set_ipaddr+0x8c>)
 800d946:	481d      	ldr	r0, [pc, #116]	; (800d9bc <netif_do_set_ipaddr+0x90>)
 800d948:	f00a fa2e 	bl	8017da8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <netif_do_set_ipaddr+0x34>
 800d952:	4b18      	ldr	r3, [pc, #96]	; (800d9b4 <netif_do_set_ipaddr+0x88>)
 800d954:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d958:	4917      	ldr	r1, [pc, #92]	; (800d9b8 <netif_do_set_ipaddr+0x8c>)
 800d95a:	4818      	ldr	r0, [pc, #96]	; (800d9bc <netif_do_set_ipaddr+0x90>)
 800d95c:	f00a fa24 	bl	8017da8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	3304      	adds	r3, #4
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d01c      	beq.n	800d9a8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3304      	adds	r3, #4
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d97e:	f107 0314 	add.w	r3, r7, #20
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff ffbf 	bl	800d908 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <netif_do_set_ipaddr+0x6a>
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	e000      	b.n	800d998 <netif_do_set_ipaddr+0x6c>
 800d996:	2300      	movs	r3, #0
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d99c:	2101      	movs	r1, #1
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	f000 f8d2 	bl	800db48 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e000      	b.n	800d9aa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	0801f4ec 	.word	0x0801f4ec
 800d9b8:	0801f604 	.word	0x0801f604
 800d9bc:	0801f53c 	.word	0x0801f53c

0800d9c0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3308      	adds	r3, #8
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d00a      	beq.n	800d9f0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d002      	beq.n	800d9e6 <netif_do_set_netmask+0x26>
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	e000      	b.n	800d9e8 <netif_do_set_netmask+0x28>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e000      	b.n	800d9f2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3714      	adds	r7, #20
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d9fe:	b480      	push	{r7}
 800da00:	b085      	sub	sp, #20
 800da02:	af00      	add	r7, sp, #0
 800da04:	60f8      	str	r0, [r7, #12]
 800da06:	60b9      	str	r1, [r7, #8]
 800da08:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	330c      	adds	r3, #12
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	429a      	cmp	r2, r3
 800da16:	d00a      	beq.n	800da2e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d002      	beq.n	800da24 <netif_do_set_gw+0x26>
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	e000      	b.n	800da26 <netif_do_set_gw+0x28>
 800da24:	2300      	movs	r3, #0
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800da2a:	2301      	movs	r3, #1
 800da2c:	e000      	b.n	800da30 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3714      	adds	r7, #20
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
 800da48:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800da4e:	2300      	movs	r3, #0
 800da50:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d101      	bne.n	800da5c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800da58:	4b1c      	ldr	r3, [pc, #112]	; (800dacc <netif_set_addr+0x90>)
 800da5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d101      	bne.n	800da66 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800da62:	4b1a      	ldr	r3, [pc, #104]	; (800dacc <netif_set_addr+0x90>)
 800da64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d101      	bne.n	800da70 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800da6c:	4b17      	ldr	r3, [pc, #92]	; (800dacc <netif_set_addr+0x90>)
 800da6e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <netif_set_addr+0x42>
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d101      	bne.n	800da82 <netif_set_addr+0x46>
 800da7e:	2301      	movs	r3, #1
 800da80:	e000      	b.n	800da84 <netif_set_addr+0x48>
 800da82:	2300      	movs	r3, #0
 800da84:	617b      	str	r3, [r7, #20]
  if (remove) {
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d006      	beq.n	800da9a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800da8c:	f107 0310 	add.w	r3, r7, #16
 800da90:	461a      	mov	r2, r3
 800da92:	68b9      	ldr	r1, [r7, #8]
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f7ff ff49 	bl	800d92c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800da9a:	69fa      	ldr	r2, [r7, #28]
 800da9c:	6879      	ldr	r1, [r7, #4]
 800da9e:	68f8      	ldr	r0, [r7, #12]
 800daa0:	f7ff ff8e 	bl	800d9c0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800daa4:	69ba      	ldr	r2, [r7, #24]
 800daa6:	6839      	ldr	r1, [r7, #0]
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f7ff ffa8 	bl	800d9fe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d106      	bne.n	800dac2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dab4:	f107 0310 	add.w	r3, r7, #16
 800dab8:	461a      	mov	r2, r3
 800daba:	68b9      	ldr	r1, [r7, #8]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff ff35 	bl	800d92c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dac2:	bf00      	nop
 800dac4:	3720      	adds	r7, #32
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	08021c40 	.word	0x08021c40

0800dad0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dad8:	4a04      	ldr	r2, [pc, #16]	; (800daec <netif_set_default+0x1c>)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dade:	bf00      	nop
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	2000710c 	.word	0x2000710c

0800daf0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d107      	bne.n	800db0e <netif_set_up+0x1e>
 800dafe:	4b0f      	ldr	r3, [pc, #60]	; (800db3c <netif_set_up+0x4c>)
 800db00:	f44f 7254 	mov.w	r2, #848	; 0x350
 800db04:	490e      	ldr	r1, [pc, #56]	; (800db40 <netif_set_up+0x50>)
 800db06:	480f      	ldr	r0, [pc, #60]	; (800db44 <netif_set_up+0x54>)
 800db08:	f00a f94e 	bl	8017da8 <iprintf>
 800db0c:	e013      	b.n	800db36 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10c      	bne.n	800db36 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db22:	f043 0301 	orr.w	r3, r3, #1
 800db26:	b2da      	uxtb	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800db2e:	2103      	movs	r1, #3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f809 	bl	800db48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	0801f4ec 	.word	0x0801f4ec
 800db40:	0801f674 	.word	0x0801f674
 800db44:	0801f53c 	.word	0x0801f53c

0800db48 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	460b      	mov	r3, r1
 800db52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <netif_issue_reports+0x20>
 800db5a:	4b18      	ldr	r3, [pc, #96]	; (800dbbc <netif_issue_reports+0x74>)
 800db5c:	f240 326d 	movw	r2, #877	; 0x36d
 800db60:	4917      	ldr	r1, [pc, #92]	; (800dbc0 <netif_issue_reports+0x78>)
 800db62:	4818      	ldr	r0, [pc, #96]	; (800dbc4 <netif_issue_reports+0x7c>)
 800db64:	f00a f920 	bl	8017da8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db6e:	f003 0304 	and.w	r3, r3, #4
 800db72:	2b00      	cmp	r3, #0
 800db74:	d01e      	beq.n	800dbb4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db7c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800db80:	2b00      	cmp	r3, #0
 800db82:	d017      	beq.n	800dbb4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	f003 0301 	and.w	r3, r3, #1
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d013      	beq.n	800dbb6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	3304      	adds	r3, #4
 800db92:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800db94:	2b00      	cmp	r3, #0
 800db96:	d00e      	beq.n	800dbb6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db9e:	f003 0308 	and.w	r3, r3, #8
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d007      	beq.n	800dbb6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	3304      	adds	r3, #4
 800dbaa:	4619      	mov	r1, r3
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f007 f97f 	bl	8014eb0 <etharp_request>
 800dbb2:	e000      	b.n	800dbb6 <netif_issue_reports+0x6e>
    return;
 800dbb4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	0801f4ec 	.word	0x0801f4ec
 800dbc0:	0801f690 	.word	0x0801f690
 800dbc4:	0801f53c 	.word	0x0801f53c

0800dbc8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d107      	bne.n	800dbe6 <netif_set_down+0x1e>
 800dbd6:	4b12      	ldr	r3, [pc, #72]	; (800dc20 <netif_set_down+0x58>)
 800dbd8:	f240 329b 	movw	r2, #923	; 0x39b
 800dbdc:	4911      	ldr	r1, [pc, #68]	; (800dc24 <netif_set_down+0x5c>)
 800dbde:	4812      	ldr	r0, [pc, #72]	; (800dc28 <netif_set_down+0x60>)
 800dbe0:	f00a f8e2 	bl	8017da8 <iprintf>
 800dbe4:	e019      	b.n	800dc1a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbec:	f003 0301 	and.w	r3, r3, #1
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d012      	beq.n	800dc1a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbfa:	f023 0301 	bic.w	r3, r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc0c:	f003 0308 	and.w	r3, r3, #8
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f006 fd09 	bl	801462c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dc1a:	3708      	adds	r7, #8
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	0801f4ec 	.word	0x0801f4ec
 800dc24:	0801f6b4 	.word	0x0801f6b4
 800dc28:	0801f53c 	.word	0x0801f53c

0800dc2c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d002      	beq.n	800dc42 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	683a      	ldr	r2, [r7, #0]
 800dc40:	61da      	str	r2, [r3, #28]
  }
}
 800dc42:	bf00      	nop
 800dc44:	370c      	adds	r7, #12
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr

0800dc4e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dc4e:	b480      	push	{r7}
 800dc50:	b085      	sub	sp, #20
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	60f8      	str	r0, [r7, #12]
 800dc56:	60b9      	str	r1, [r7, #8]
 800dc58:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dc5a:	f06f 030b 	mvn.w	r3, #11
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
	...

0800dc6c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d013      	beq.n	800dca4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800dc7c:	4b0d      	ldr	r3, [pc, #52]	; (800dcb4 <netif_get_by_index+0x48>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	e00c      	b.n	800dc9e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	79fa      	ldrb	r2, [r7, #7]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d101      	bne.n	800dc98 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	e006      	b.n	800dca6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d1ef      	bne.n	800dc84 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dca4:	2300      	movs	r3, #0
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	20007108 	.word	0x20007108

0800dcb8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800dcbc:	4b03      	ldr	r3, [pc, #12]	; (800dccc <pbuf_pool_is_empty+0x14>)
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dcc2:	bf00      	nop
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	20007110 	.word	0x20007110

0800dcd0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	4611      	mov	r1, r2
 800dcdc:	461a      	mov	r2, r3
 800dcde:	460b      	mov	r3, r1
 800dce0:	80fb      	strh	r3, [r7, #6]
 800dce2:	4613      	mov	r3, r2
 800dce4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	88fa      	ldrh	r2, [r7, #6]
 800dcf6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	88ba      	ldrh	r2, [r7, #4]
 800dcfc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800dcfe:	8b3b      	ldrh	r3, [r7, #24]
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	7f3a      	ldrb	r2, [r7, #28]
 800dd0a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2200      	movs	r2, #0
 800dd16:	73da      	strb	r2, [r3, #15]
}
 800dd18:	bf00      	nop
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b08c      	sub	sp, #48	; 0x30
 800dd28:	af02      	add	r7, sp, #8
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	71fb      	strb	r3, [r7, #7]
 800dd2e:	460b      	mov	r3, r1
 800dd30:	80bb      	strh	r3, [r7, #4]
 800dd32:	4613      	mov	r3, r2
 800dd34:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dd3a:	887b      	ldrh	r3, [r7, #2]
 800dd3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dd40:	d07f      	beq.n	800de42 <pbuf_alloc+0x11e>
 800dd42:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dd46:	f300 80c8 	bgt.w	800deda <pbuf_alloc+0x1b6>
 800dd4a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dd4e:	d010      	beq.n	800dd72 <pbuf_alloc+0x4e>
 800dd50:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dd54:	f300 80c1 	bgt.w	800deda <pbuf_alloc+0x1b6>
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d002      	beq.n	800dd62 <pbuf_alloc+0x3e>
 800dd5c:	2b41      	cmp	r3, #65	; 0x41
 800dd5e:	f040 80bc 	bne.w	800deda <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dd62:	887a      	ldrh	r2, [r7, #2]
 800dd64:	88bb      	ldrh	r3, [r7, #4]
 800dd66:	4619      	mov	r1, r3
 800dd68:	2000      	movs	r0, #0
 800dd6a:	f000 f8d1 	bl	800df10 <pbuf_alloc_reference>
 800dd6e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dd70:	e0bd      	b.n	800deee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dd72:	2300      	movs	r3, #0
 800dd74:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dd76:	2300      	movs	r3, #0
 800dd78:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dd7a:	88bb      	ldrh	r3, [r7, #4]
 800dd7c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dd7e:	2008      	movs	r0, #8
 800dd80:	f7ff fc76 	bl	800d670 <memp_malloc>
 800dd84:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d109      	bne.n	800dda0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800dd8c:	f7ff ff94 	bl	800dcb8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <pbuf_alloc+0x78>
            pbuf_free(p);
 800dd96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd98:	f000 faa8 	bl	800e2ec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e0a7      	b.n	800def0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dda0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dda2:	3303      	adds	r3, #3
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	f023 0303 	bic.w	r3, r3, #3
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	8b7a      	ldrh	r2, [r7, #26]
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	bf28      	it	cs
 800ddb8:	4613      	movcs	r3, r2
 800ddba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ddbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddbe:	3310      	adds	r3, #16
 800ddc0:	693a      	ldr	r2, [r7, #16]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	3303      	adds	r3, #3
 800ddc6:	f023 0303 	bic.w	r3, r3, #3
 800ddca:	4618      	mov	r0, r3
 800ddcc:	89f9      	ldrh	r1, [r7, #14]
 800ddce:	8b7a      	ldrh	r2, [r7, #26]
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9301      	str	r3, [sp, #4]
 800ddd4:	887b      	ldrh	r3, [r7, #2]
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4601      	mov	r1, r0
 800dddc:	6938      	ldr	r0, [r7, #16]
 800ddde:	f7ff ff77 	bl	800dcd0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d006      	beq.n	800ddfc <pbuf_alloc+0xd8>
 800ddee:	4b42      	ldr	r3, [pc, #264]	; (800def8 <pbuf_alloc+0x1d4>)
 800ddf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ddf4:	4941      	ldr	r1, [pc, #260]	; (800defc <pbuf_alloc+0x1d8>)
 800ddf6:	4842      	ldr	r0, [pc, #264]	; (800df00 <pbuf_alloc+0x1dc>)
 800ddf8:	f009 ffd6 	bl	8017da8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ddfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddfe:	3303      	adds	r3, #3
 800de00:	f023 0303 	bic.w	r3, r3, #3
 800de04:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800de08:	d106      	bne.n	800de18 <pbuf_alloc+0xf4>
 800de0a:	4b3b      	ldr	r3, [pc, #236]	; (800def8 <pbuf_alloc+0x1d4>)
 800de0c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800de10:	493c      	ldr	r1, [pc, #240]	; (800df04 <pbuf_alloc+0x1e0>)
 800de12:	483b      	ldr	r0, [pc, #236]	; (800df00 <pbuf_alloc+0x1dc>)
 800de14:	f009 ffc8 	bl	8017da8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800de18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d102      	bne.n	800de24 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	627b      	str	r3, [r7, #36]	; 0x24
 800de22:	e002      	b.n	800de2a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800de2e:	8b7a      	ldrh	r2, [r7, #26]
 800de30:	89fb      	ldrh	r3, [r7, #14]
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800de3a:	8b7b      	ldrh	r3, [r7, #26]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d19e      	bne.n	800dd7e <pbuf_alloc+0x5a>
      break;
 800de40:	e055      	b.n	800deee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800de42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de44:	3303      	adds	r3, #3
 800de46:	b29b      	uxth	r3, r3
 800de48:	f023 0303 	bic.w	r3, r3, #3
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	88bb      	ldrh	r3, [r7, #4]
 800de50:	3303      	adds	r3, #3
 800de52:	b29b      	uxth	r3, r3
 800de54:	f023 0303 	bic.w	r3, r3, #3
 800de58:	b29b      	uxth	r3, r3
 800de5a:	4413      	add	r3, r2
 800de5c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800de5e:	8b3b      	ldrh	r3, [r7, #24]
 800de60:	3310      	adds	r3, #16
 800de62:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800de64:	8b3a      	ldrh	r2, [r7, #24]
 800de66:	88bb      	ldrh	r3, [r7, #4]
 800de68:	3303      	adds	r3, #3
 800de6a:	f023 0303 	bic.w	r3, r3, #3
 800de6e:	429a      	cmp	r2, r3
 800de70:	d306      	bcc.n	800de80 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800de72:	8afa      	ldrh	r2, [r7, #22]
 800de74:	88bb      	ldrh	r3, [r7, #4]
 800de76:	3303      	adds	r3, #3
 800de78:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d201      	bcs.n	800de84 <pbuf_alloc+0x160>
        return NULL;
 800de80:	2300      	movs	r3, #0
 800de82:	e035      	b.n	800def0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800de84:	8afb      	ldrh	r3, [r7, #22]
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff fa84 	bl	800d394 <mem_malloc>
 800de8c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <pbuf_alloc+0x174>
        return NULL;
 800de94:	2300      	movs	r3, #0
 800de96:	e02b      	b.n	800def0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800de98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de9a:	3310      	adds	r3, #16
 800de9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de9e:	4413      	add	r3, r2
 800dea0:	3303      	adds	r3, #3
 800dea2:	f023 0303 	bic.w	r3, r3, #3
 800dea6:	4618      	mov	r0, r3
 800dea8:	88b9      	ldrh	r1, [r7, #4]
 800deaa:	88ba      	ldrh	r2, [r7, #4]
 800deac:	2300      	movs	r3, #0
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	887b      	ldrh	r3, [r7, #2]
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	460b      	mov	r3, r1
 800deb6:	4601      	mov	r1, r0
 800deb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deba:	f7ff ff09 	bl	800dcd0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	f003 0303 	and.w	r3, r3, #3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d010      	beq.n	800deec <pbuf_alloc+0x1c8>
 800deca:	4b0b      	ldr	r3, [pc, #44]	; (800def8 <pbuf_alloc+0x1d4>)
 800decc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ded0:	490d      	ldr	r1, [pc, #52]	; (800df08 <pbuf_alloc+0x1e4>)
 800ded2:	480b      	ldr	r0, [pc, #44]	; (800df00 <pbuf_alloc+0x1dc>)
 800ded4:	f009 ff68 	bl	8017da8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ded8:	e008      	b.n	800deec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800deda:	4b07      	ldr	r3, [pc, #28]	; (800def8 <pbuf_alloc+0x1d4>)
 800dedc:	f240 1227 	movw	r2, #295	; 0x127
 800dee0:	490a      	ldr	r1, [pc, #40]	; (800df0c <pbuf_alloc+0x1e8>)
 800dee2:	4807      	ldr	r0, [pc, #28]	; (800df00 <pbuf_alloc+0x1dc>)
 800dee4:	f009 ff60 	bl	8017da8 <iprintf>
      return NULL;
 800dee8:	2300      	movs	r3, #0
 800deea:	e001      	b.n	800def0 <pbuf_alloc+0x1cc>
      break;
 800deec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800def0:	4618      	mov	r0, r3
 800def2:	3728      	adds	r7, #40	; 0x28
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	0801f71c 	.word	0x0801f71c
 800defc:	0801f74c 	.word	0x0801f74c
 800df00:	0801f77c 	.word	0x0801f77c
 800df04:	0801f7a4 	.word	0x0801f7a4
 800df08:	0801f7d8 	.word	0x0801f7d8
 800df0c:	0801f804 	.word	0x0801f804

0800df10 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af02      	add	r7, sp, #8
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	807b      	strh	r3, [r7, #2]
 800df1c:	4613      	mov	r3, r2
 800df1e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800df20:	883b      	ldrh	r3, [r7, #0]
 800df22:	2b41      	cmp	r3, #65	; 0x41
 800df24:	d009      	beq.n	800df3a <pbuf_alloc_reference+0x2a>
 800df26:	883b      	ldrh	r3, [r7, #0]
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d006      	beq.n	800df3a <pbuf_alloc_reference+0x2a>
 800df2c:	4b0f      	ldr	r3, [pc, #60]	; (800df6c <pbuf_alloc_reference+0x5c>)
 800df2e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800df32:	490f      	ldr	r1, [pc, #60]	; (800df70 <pbuf_alloc_reference+0x60>)
 800df34:	480f      	ldr	r0, [pc, #60]	; (800df74 <pbuf_alloc_reference+0x64>)
 800df36:	f009 ff37 	bl	8017da8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800df3a:	2007      	movs	r0, #7
 800df3c:	f7ff fb98 	bl	800d670 <memp_malloc>
 800df40:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800df48:	2300      	movs	r3, #0
 800df4a:	e00b      	b.n	800df64 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800df4c:	8879      	ldrh	r1, [r7, #2]
 800df4e:	887a      	ldrh	r2, [r7, #2]
 800df50:	2300      	movs	r3, #0
 800df52:	9301      	str	r3, [sp, #4]
 800df54:	883b      	ldrh	r3, [r7, #0]
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	460b      	mov	r3, r1
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f7ff feb7 	bl	800dcd0 <pbuf_init_alloced_pbuf>
  return p;
 800df62:	68fb      	ldr	r3, [r7, #12]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	0801f71c 	.word	0x0801f71c
 800df70:	0801f820 	.word	0x0801f820
 800df74:	0801f77c 	.word	0x0801f77c

0800df78 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af02      	add	r7, sp, #8
 800df7e:	607b      	str	r3, [r7, #4]
 800df80:	4603      	mov	r3, r0
 800df82:	73fb      	strb	r3, [r7, #15]
 800df84:	460b      	mov	r3, r1
 800df86:	81bb      	strh	r3, [r7, #12]
 800df88:	4613      	mov	r3, r2
 800df8a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800df90:	8a7b      	ldrh	r3, [r7, #18]
 800df92:	3303      	adds	r3, #3
 800df94:	f023 0203 	bic.w	r2, r3, #3
 800df98:	89bb      	ldrh	r3, [r7, #12]
 800df9a:	441a      	add	r2, r3
 800df9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d901      	bls.n	800dfa6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	e018      	b.n	800dfd8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d007      	beq.n	800dfbc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dfac:	8a7b      	ldrh	r3, [r7, #18]
 800dfae:	3303      	adds	r3, #3
 800dfb0:	f023 0303 	bic.w	r3, r3, #3
 800dfb4:	6a3a      	ldr	r2, [r7, #32]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	617b      	str	r3, [r7, #20]
 800dfba:	e001      	b.n	800dfc0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	89b9      	ldrh	r1, [r7, #12]
 800dfc4:	89ba      	ldrh	r2, [r7, #12]
 800dfc6:	2302      	movs	r3, #2
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	897b      	ldrh	r3, [r7, #10]
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	460b      	mov	r3, r1
 800dfd0:	6979      	ldr	r1, [r7, #20]
 800dfd2:	f7ff fe7d 	bl	800dcd0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dfd6:	687b      	ldr	r3, [r7, #4]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <pbuf_realloc+0x20>
 800dff2:	4b3a      	ldr	r3, [pc, #232]	; (800e0dc <pbuf_realloc+0xfc>)
 800dff4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dff8:	4939      	ldr	r1, [pc, #228]	; (800e0e0 <pbuf_realloc+0x100>)
 800dffa:	483a      	ldr	r0, [pc, #232]	; (800e0e4 <pbuf_realloc+0x104>)
 800dffc:	f009 fed4 	bl	8017da8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	891b      	ldrh	r3, [r3, #8]
 800e004:	887a      	ldrh	r2, [r7, #2]
 800e006:	429a      	cmp	r2, r3
 800e008:	d263      	bcs.n	800e0d2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	891a      	ldrh	r2, [r3, #8]
 800e00e:	887b      	ldrh	r3, [r7, #2]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e014:	887b      	ldrh	r3, [r7, #2]
 800e016:	817b      	strh	r3, [r7, #10]
  q = p;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e01c:	e018      	b.n	800e050 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	895b      	ldrh	r3, [r3, #10]
 800e022:	897a      	ldrh	r2, [r7, #10]
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	891a      	ldrh	r2, [r3, #8]
 800e02c:	893b      	ldrh	r3, [r7, #8]
 800e02e:	1ad3      	subs	r3, r2, r3
 800e030:	b29a      	uxth	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d106      	bne.n	800e050 <pbuf_realloc+0x70>
 800e042:	4b26      	ldr	r3, [pc, #152]	; (800e0dc <pbuf_realloc+0xfc>)
 800e044:	f240 12af 	movw	r2, #431	; 0x1af
 800e048:	4927      	ldr	r1, [pc, #156]	; (800e0e8 <pbuf_realloc+0x108>)
 800e04a:	4826      	ldr	r0, [pc, #152]	; (800e0e4 <pbuf_realloc+0x104>)
 800e04c:	f009 feac 	bl	8017da8 <iprintf>
  while (rem_len > q->len) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	895b      	ldrh	r3, [r3, #10]
 800e054:	897a      	ldrh	r2, [r7, #10]
 800e056:	429a      	cmp	r2, r3
 800e058:	d8e1      	bhi.n	800e01e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	7b1b      	ldrb	r3, [r3, #12]
 800e05e:	f003 030f 	and.w	r3, r3, #15
 800e062:	2b00      	cmp	r3, #0
 800e064:	d121      	bne.n	800e0aa <pbuf_realloc+0xca>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	895b      	ldrh	r3, [r3, #10]
 800e06a:	897a      	ldrh	r2, [r7, #10]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d01c      	beq.n	800e0aa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	7b5b      	ldrb	r3, [r3, #13]
 800e074:	f003 0302 	and.w	r3, r3, #2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d116      	bne.n	800e0aa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	b29a      	uxth	r2, r3
 800e086:	897b      	ldrh	r3, [r7, #10]
 800e088:	4413      	add	r3, r2
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	4619      	mov	r1, r3
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f7ff f884 	bl	800d19c <mem_trim>
 800e094:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d106      	bne.n	800e0aa <pbuf_realloc+0xca>
 800e09c:	4b0f      	ldr	r3, [pc, #60]	; (800e0dc <pbuf_realloc+0xfc>)
 800e09e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e0a2:	4912      	ldr	r1, [pc, #72]	; (800e0ec <pbuf_realloc+0x10c>)
 800e0a4:	480f      	ldr	r0, [pc, #60]	; (800e0e4 <pbuf_realloc+0x104>)
 800e0a6:	f009 fe7f 	bl	8017da8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	897a      	ldrh	r2, [r7, #10]
 800e0ae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	895a      	ldrh	r2, [r3, #10]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d004      	beq.n	800e0ca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f000 f911 	bl	800e2ec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	e000      	b.n	800e0d4 <pbuf_realloc+0xf4>
    return;
 800e0d2:	bf00      	nop

}
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	0801f71c 	.word	0x0801f71c
 800e0e0:	0801f834 	.word	0x0801f834
 800e0e4:	0801f77c 	.word	0x0801f77c
 800e0e8:	0801f84c 	.word	0x0801f84c
 800e0ec:	0801f864 	.word	0x0801f864

0800e0f0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <pbuf_add_header_impl+0x22>
 800e104:	4b2b      	ldr	r3, [pc, #172]	; (800e1b4 <pbuf_add_header_impl+0xc4>)
 800e106:	f240 12df 	movw	r2, #479	; 0x1df
 800e10a:	492b      	ldr	r1, [pc, #172]	; (800e1b8 <pbuf_add_header_impl+0xc8>)
 800e10c:	482b      	ldr	r0, [pc, #172]	; (800e1bc <pbuf_add_header_impl+0xcc>)
 800e10e:	f009 fe4b 	bl	8017da8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d003      	beq.n	800e120 <pbuf_add_header_impl+0x30>
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e11e:	d301      	bcc.n	800e124 <pbuf_add_header_impl+0x34>
    return 1;
 800e120:	2301      	movs	r3, #1
 800e122:	e043      	b.n	800e1ac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d101      	bne.n	800e12e <pbuf_add_header_impl+0x3e>
    return 0;
 800e12a:	2300      	movs	r3, #0
 800e12c:	e03e      	b.n	800e1ac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	891a      	ldrh	r2, [r3, #8]
 800e136:	8a7b      	ldrh	r3, [r7, #18]
 800e138:	4413      	add	r3, r2
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	8a7a      	ldrh	r2, [r7, #18]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d901      	bls.n	800e146 <pbuf_add_header_impl+0x56>
    return 1;
 800e142:	2301      	movs	r3, #1
 800e144:	e032      	b.n	800e1ac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	7b1b      	ldrb	r3, [r3, #12]
 800e14a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e14c:	8a3b      	ldrh	r3, [r7, #16]
 800e14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00c      	beq.n	800e170 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	685a      	ldr	r2, [r3, #4]
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	425b      	negs	r3, r3
 800e15e:	4413      	add	r3, r2
 800e160:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	3310      	adds	r3, #16
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d20d      	bcs.n	800e188 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e16c:	2301      	movs	r3, #1
 800e16e:	e01d      	b.n	800e1ac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e170:	79fb      	ldrb	r3, [r7, #7]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d006      	beq.n	800e184 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	685a      	ldr	r2, [r3, #4]
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	425b      	negs	r3, r3
 800e17e:	4413      	add	r3, r2
 800e180:	617b      	str	r3, [r7, #20]
 800e182:	e001      	b.n	800e188 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e184:	2301      	movs	r3, #1
 800e186:	e011      	b.n	800e1ac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	697a      	ldr	r2, [r7, #20]
 800e18c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	895a      	ldrh	r2, [r3, #10]
 800e192:	8a7b      	ldrh	r3, [r7, #18]
 800e194:	4413      	add	r3, r2
 800e196:	b29a      	uxth	r2, r3
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	891a      	ldrh	r2, [r3, #8]
 800e1a0:	8a7b      	ldrh	r3, [r7, #18]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	811a      	strh	r2, [r3, #8]


  return 0;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	0801f71c 	.word	0x0801f71c
 800e1b8:	0801f880 	.word	0x0801f880
 800e1bc:	0801f77c 	.word	0x0801f77c

0800e1c0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff ff8e 	bl	800e0f0 <pbuf_add_header_impl>
 800e1d4:	4603      	mov	r3, r0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d106      	bne.n	800e1fe <pbuf_remove_header+0x1e>
 800e1f0:	4b20      	ldr	r3, [pc, #128]	; (800e274 <pbuf_remove_header+0x94>)
 800e1f2:	f240 224b 	movw	r2, #587	; 0x24b
 800e1f6:	4920      	ldr	r1, [pc, #128]	; (800e278 <pbuf_remove_header+0x98>)
 800e1f8:	4820      	ldr	r0, [pc, #128]	; (800e27c <pbuf_remove_header+0x9c>)
 800e1fa:	f009 fdd5 	bl	8017da8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d003      	beq.n	800e20c <pbuf_remove_header+0x2c>
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e20a:	d301      	bcc.n	800e210 <pbuf_remove_header+0x30>
    return 1;
 800e20c:	2301      	movs	r3, #1
 800e20e:	e02c      	b.n	800e26a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d101      	bne.n	800e21a <pbuf_remove_header+0x3a>
    return 0;
 800e216:	2300      	movs	r3, #0
 800e218:	e027      	b.n	800e26a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	895b      	ldrh	r3, [r3, #10]
 800e222:	89fa      	ldrh	r2, [r7, #14]
 800e224:	429a      	cmp	r2, r3
 800e226:	d908      	bls.n	800e23a <pbuf_remove_header+0x5a>
 800e228:	4b12      	ldr	r3, [pc, #72]	; (800e274 <pbuf_remove_header+0x94>)
 800e22a:	f240 2255 	movw	r2, #597	; 0x255
 800e22e:	4914      	ldr	r1, [pc, #80]	; (800e280 <pbuf_remove_header+0xa0>)
 800e230:	4812      	ldr	r0, [pc, #72]	; (800e27c <pbuf_remove_header+0x9c>)
 800e232:	f009 fdb9 	bl	8017da8 <iprintf>
 800e236:	2301      	movs	r3, #1
 800e238:	e017      	b.n	800e26a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685a      	ldr	r2, [r3, #4]
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	441a      	add	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	895a      	ldrh	r2, [r3, #10]
 800e250:	89fb      	ldrh	r3, [r7, #14]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	b29a      	uxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	891a      	ldrh	r2, [r3, #8]
 800e25e:	89fb      	ldrh	r3, [r7, #14]
 800e260:	1ad3      	subs	r3, r2, r3
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	0801f71c 	.word	0x0801f71c
 800e278:	0801f880 	.word	0x0801f880
 800e27c:	0801f77c 	.word	0x0801f77c
 800e280:	0801f88c 	.word	0x0801f88c

0800e284 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	460b      	mov	r3, r1
 800e28e:	807b      	strh	r3, [r7, #2]
 800e290:	4613      	mov	r3, r2
 800e292:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e294:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	da08      	bge.n	800e2ae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e29c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e2a0:	425b      	negs	r3, r3
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7ff ff9b 	bl	800e1e0 <pbuf_remove_header>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	e007      	b.n	800e2be <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e2ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e2b2:	787a      	ldrb	r2, [r7, #1]
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff ff1a 	bl	800e0f0 <pbuf_add_header_impl>
 800e2bc:	4603      	mov	r3, r0
  }
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b082      	sub	sp, #8
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e2d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	4619      	mov	r1, r3
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff ffd2 	bl	800e284 <pbuf_header_impl>
 800e2e0:	4603      	mov	r3, r0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
	...

0800e2ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d10b      	bne.n	800e312 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d106      	bne.n	800e30e <pbuf_free+0x22>
 800e300:	4b38      	ldr	r3, [pc, #224]	; (800e3e4 <pbuf_free+0xf8>)
 800e302:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e306:	4938      	ldr	r1, [pc, #224]	; (800e3e8 <pbuf_free+0xfc>)
 800e308:	4838      	ldr	r0, [pc, #224]	; (800e3ec <pbuf_free+0x100>)
 800e30a:	f009 fd4d 	bl	8017da8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e30e:	2300      	movs	r3, #0
 800e310:	e063      	b.n	800e3da <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e312:	2300      	movs	r3, #0
 800e314:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e316:	e05c      	b.n	800e3d2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	7b9b      	ldrb	r3, [r3, #14]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d106      	bne.n	800e32e <pbuf_free+0x42>
 800e320:	4b30      	ldr	r3, [pc, #192]	; (800e3e4 <pbuf_free+0xf8>)
 800e322:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e326:	4932      	ldr	r1, [pc, #200]	; (800e3f0 <pbuf_free+0x104>)
 800e328:	4830      	ldr	r0, [pc, #192]	; (800e3ec <pbuf_free+0x100>)
 800e32a:	f009 fd3d 	bl	8017da8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	7b9b      	ldrb	r3, [r3, #14]
 800e332:	3b01      	subs	r3, #1
 800e334:	b2da      	uxtb	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	739a      	strb	r2, [r3, #14]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	7b9b      	ldrb	r3, [r3, #14]
 800e33e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e340:	7dbb      	ldrb	r3, [r7, #22]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d143      	bne.n	800e3ce <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	7b1b      	ldrb	r3, [r3, #12]
 800e350:	f003 030f 	and.w	r3, r3, #15
 800e354:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	7b5b      	ldrb	r3, [r3, #13]
 800e35a:	f003 0302 	and.w	r3, r3, #2
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d011      	beq.n	800e386 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d106      	bne.n	800e37c <pbuf_free+0x90>
 800e36e:	4b1d      	ldr	r3, [pc, #116]	; (800e3e4 <pbuf_free+0xf8>)
 800e370:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e374:	491f      	ldr	r1, [pc, #124]	; (800e3f4 <pbuf_free+0x108>)
 800e376:	481d      	ldr	r0, [pc, #116]	; (800e3ec <pbuf_free+0x100>)
 800e378:	f009 fd16 	bl	8017da8 <iprintf>
        pc->custom_free_function(p);
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	4798      	blx	r3
 800e384:	e01d      	b.n	800e3c2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e386:	7bfb      	ldrb	r3, [r7, #15]
 800e388:	2b02      	cmp	r3, #2
 800e38a:	d104      	bne.n	800e396 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e38c:	6879      	ldr	r1, [r7, #4]
 800e38e:	2008      	movs	r0, #8
 800e390:	f7ff f9ba 	bl	800d708 <memp_free>
 800e394:	e015      	b.n	800e3c2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e396:	7bfb      	ldrb	r3, [r7, #15]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d104      	bne.n	800e3a6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e39c:	6879      	ldr	r1, [r7, #4]
 800e39e:	2007      	movs	r0, #7
 800e3a0:	f7ff f9b2 	bl	800d708 <memp_free>
 800e3a4:	e00d      	b.n	800e3c2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e3a6:	7bfb      	ldrb	r3, [r7, #15]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d103      	bne.n	800e3b4 <pbuf_free+0xc8>
          mem_free(p);
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7fe fe8b 	bl	800d0c8 <mem_free>
 800e3b2:	e006      	b.n	800e3c2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e3b4:	4b0b      	ldr	r3, [pc, #44]	; (800e3e4 <pbuf_free+0xf8>)
 800e3b6:	f240 320f 	movw	r2, #783	; 0x30f
 800e3ba:	490f      	ldr	r1, [pc, #60]	; (800e3f8 <pbuf_free+0x10c>)
 800e3bc:	480b      	ldr	r0, [pc, #44]	; (800e3ec <pbuf_free+0x100>)
 800e3be:	f009 fcf3 	bl	8017da8 <iprintf>
        }
      }
      count++;
 800e3c2:	7dfb      	ldrb	r3, [r7, #23]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	607b      	str	r3, [r7, #4]
 800e3cc:	e001      	b.n	800e3d2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d19f      	bne.n	800e318 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3da:	4618      	mov	r0, r3
 800e3dc:	3718      	adds	r7, #24
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	0801f71c 	.word	0x0801f71c
 800e3e8:	0801f880 	.word	0x0801f880
 800e3ec:	0801f77c 	.word	0x0801f77c
 800e3f0:	0801f8ac 	.word	0x0801f8ac
 800e3f4:	0801f8c4 	.word	0x0801f8c4
 800e3f8:	0801f8e8 	.word	0x0801f8e8

0800e3fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e408:	e005      	b.n	800e416 <pbuf_clen+0x1a>
    ++len;
 800e40a:	89fb      	ldrh	r3, [r7, #14]
 800e40c:	3301      	adds	r3, #1
 800e40e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1f6      	bne.n	800e40a <pbuf_clen+0xe>
  }
  return len;
 800e41c:	89fb      	ldrh	r3, [r7, #14]
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3714      	adds	r7, #20
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
	...

0800e42c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b082      	sub	sp, #8
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d010      	beq.n	800e45c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	7b9b      	ldrb	r3, [r3, #14]
 800e43e:	3301      	adds	r3, #1
 800e440:	b2da      	uxtb	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	7b9b      	ldrb	r3, [r3, #14]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d106      	bne.n	800e45c <pbuf_ref+0x30>
 800e44e:	4b05      	ldr	r3, [pc, #20]	; (800e464 <pbuf_ref+0x38>)
 800e450:	f240 3242 	movw	r2, #834	; 0x342
 800e454:	4904      	ldr	r1, [pc, #16]	; (800e468 <pbuf_ref+0x3c>)
 800e456:	4805      	ldr	r0, [pc, #20]	; (800e46c <pbuf_ref+0x40>)
 800e458:	f009 fca6 	bl	8017da8 <iprintf>
  }
}
 800e45c:	bf00      	nop
 800e45e:	3708      	adds	r7, #8
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	0801f71c 	.word	0x0801f71c
 800e468:	0801f8fc 	.word	0x0801f8fc
 800e46c:	0801f77c 	.word	0x0801f77c

0800e470 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <pbuf_cat+0x16>
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d107      	bne.n	800e496 <pbuf_cat+0x26>
 800e486:	4b20      	ldr	r3, [pc, #128]	; (800e508 <pbuf_cat+0x98>)
 800e488:	f240 3259 	movw	r2, #857	; 0x359
 800e48c:	491f      	ldr	r1, [pc, #124]	; (800e50c <pbuf_cat+0x9c>)
 800e48e:	4820      	ldr	r0, [pc, #128]	; (800e510 <pbuf_cat+0xa0>)
 800e490:	f009 fc8a 	bl	8017da8 <iprintf>
 800e494:	e034      	b.n	800e500 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	60fb      	str	r3, [r7, #12]
 800e49a:	e00a      	b.n	800e4b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	891a      	ldrh	r2, [r3, #8]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	891b      	ldrh	r3, [r3, #8]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	60fb      	str	r3, [r7, #12]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1f0      	bne.n	800e49c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	891a      	ldrh	r2, [r3, #8]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	895b      	ldrh	r3, [r3, #10]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d006      	beq.n	800e4d4 <pbuf_cat+0x64>
 800e4c6:	4b10      	ldr	r3, [pc, #64]	; (800e508 <pbuf_cat+0x98>)
 800e4c8:	f240 3262 	movw	r2, #866	; 0x362
 800e4cc:	4911      	ldr	r1, [pc, #68]	; (800e514 <pbuf_cat+0xa4>)
 800e4ce:	4810      	ldr	r0, [pc, #64]	; (800e510 <pbuf_cat+0xa0>)
 800e4d0:	f009 fc6a 	bl	8017da8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d006      	beq.n	800e4ea <pbuf_cat+0x7a>
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	; (800e508 <pbuf_cat+0x98>)
 800e4de:	f240 3263 	movw	r2, #867	; 0x363
 800e4e2:	490d      	ldr	r1, [pc, #52]	; (800e518 <pbuf_cat+0xa8>)
 800e4e4:	480a      	ldr	r0, [pc, #40]	; (800e510 <pbuf_cat+0xa0>)
 800e4e6:	f009 fc5f 	bl	8017da8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	891a      	ldrh	r2, [r3, #8]
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	891b      	ldrh	r3, [r3, #8]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	683a      	ldr	r2, [r7, #0]
 800e4fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	0801f71c 	.word	0x0801f71c
 800e50c:	0801f910 	.word	0x0801f910
 800e510:	0801f77c 	.word	0x0801f77c
 800e514:	0801f948 	.word	0x0801f948
 800e518:	0801f978 	.word	0x0801f978

0800e51c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e526:	2300      	movs	r3, #0
 800e528:	617b      	str	r3, [r7, #20]
 800e52a:	2300      	movs	r3, #0
 800e52c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d008      	beq.n	800e546 <pbuf_copy+0x2a>
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d005      	beq.n	800e546 <pbuf_copy+0x2a>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	891a      	ldrh	r2, [r3, #8]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	891b      	ldrh	r3, [r3, #8]
 800e542:	429a      	cmp	r2, r3
 800e544:	d209      	bcs.n	800e55a <pbuf_copy+0x3e>
 800e546:	4b57      	ldr	r3, [pc, #348]	; (800e6a4 <pbuf_copy+0x188>)
 800e548:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e54c:	4956      	ldr	r1, [pc, #344]	; (800e6a8 <pbuf_copy+0x18c>)
 800e54e:	4857      	ldr	r0, [pc, #348]	; (800e6ac <pbuf_copy+0x190>)
 800e550:	f009 fc2a 	bl	8017da8 <iprintf>
 800e554:	f06f 030f 	mvn.w	r3, #15
 800e558:	e09f      	b.n	800e69a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	895b      	ldrh	r3, [r3, #10]
 800e55e:	461a      	mov	r2, r3
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	1ad2      	subs	r2, r2, r3
 800e564:	683b      	ldr	r3, [r7, #0]
 800e566:	895b      	ldrh	r3, [r3, #10]
 800e568:	4619      	mov	r1, r3
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	1acb      	subs	r3, r1, r3
 800e56e:	429a      	cmp	r2, r3
 800e570:	d306      	bcc.n	800e580 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	895b      	ldrh	r3, [r3, #10]
 800e576:	461a      	mov	r2, r3
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	1ad3      	subs	r3, r2, r3
 800e57c:	60fb      	str	r3, [r7, #12]
 800e57e:	e005      	b.n	800e58c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	895b      	ldrh	r3, [r3, #10]
 800e584:	461a      	mov	r2, r3
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	1ad3      	subs	r3, r2, r3
 800e58a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685a      	ldr	r2, [r3, #4]
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	18d0      	adds	r0, r2, r3
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	4413      	add	r3, r2
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	4619      	mov	r1, r3
 800e5a0:	f008 fd58 	bl	8017054 <memcpy>
    offset_to += len;
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	4413      	add	r3, r2
 800e5aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	895b      	ldrh	r3, [r3, #10]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d906      	bls.n	800e5ce <pbuf_copy+0xb2>
 800e5c0:	4b38      	ldr	r3, [pc, #224]	; (800e6a4 <pbuf_copy+0x188>)
 800e5c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e5c6:	493a      	ldr	r1, [pc, #232]	; (800e6b0 <pbuf_copy+0x194>)
 800e5c8:	4838      	ldr	r0, [pc, #224]	; (800e6ac <pbuf_copy+0x190>)
 800e5ca:	f009 fbed 	bl	8017da8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	895b      	ldrh	r3, [r3, #10]
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d906      	bls.n	800e5e8 <pbuf_copy+0xcc>
 800e5da:	4b32      	ldr	r3, [pc, #200]	; (800e6a4 <pbuf_copy+0x188>)
 800e5dc:	f240 32da 	movw	r2, #986	; 0x3da
 800e5e0:	4934      	ldr	r1, [pc, #208]	; (800e6b4 <pbuf_copy+0x198>)
 800e5e2:	4832      	ldr	r0, [pc, #200]	; (800e6ac <pbuf_copy+0x190>)
 800e5e4:	f009 fbe0 	bl	8017da8 <iprintf>
    if (offset_from >= p_from->len) {
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	895b      	ldrh	r3, [r3, #10]
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d304      	bcc.n	800e5fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	895b      	ldrh	r3, [r3, #10]
 800e602:	461a      	mov	r2, r3
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	4293      	cmp	r3, r2
 800e608:	d114      	bne.n	800e634 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10c      	bne.n	800e634 <pbuf_copy+0x118>
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d009      	beq.n	800e634 <pbuf_copy+0x118>
 800e620:	4b20      	ldr	r3, [pc, #128]	; (800e6a4 <pbuf_copy+0x188>)
 800e622:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e626:	4924      	ldr	r1, [pc, #144]	; (800e6b8 <pbuf_copy+0x19c>)
 800e628:	4820      	ldr	r0, [pc, #128]	; (800e6ac <pbuf_copy+0x190>)
 800e62a:	f009 fbbd 	bl	8017da8 <iprintf>
 800e62e:	f06f 030f 	mvn.w	r3, #15
 800e632:	e032      	b.n	800e69a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d013      	beq.n	800e662 <pbuf_copy+0x146>
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	895a      	ldrh	r2, [r3, #10]
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	891b      	ldrh	r3, [r3, #8]
 800e642:	429a      	cmp	r2, r3
 800e644:	d10d      	bne.n	800e662 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d009      	beq.n	800e662 <pbuf_copy+0x146>
 800e64e:	4b15      	ldr	r3, [pc, #84]	; (800e6a4 <pbuf_copy+0x188>)
 800e650:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e654:	4919      	ldr	r1, [pc, #100]	; (800e6bc <pbuf_copy+0x1a0>)
 800e656:	4815      	ldr	r0, [pc, #84]	; (800e6ac <pbuf_copy+0x190>)
 800e658:	f009 fba6 	bl	8017da8 <iprintf>
 800e65c:	f06f 0305 	mvn.w	r3, #5
 800e660:	e01b      	b.n	800e69a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d013      	beq.n	800e690 <pbuf_copy+0x174>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	895a      	ldrh	r2, [r3, #10]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	891b      	ldrh	r3, [r3, #8]
 800e670:	429a      	cmp	r2, r3
 800e672:	d10d      	bne.n	800e690 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d009      	beq.n	800e690 <pbuf_copy+0x174>
 800e67c:	4b09      	ldr	r3, [pc, #36]	; (800e6a4 <pbuf_copy+0x188>)
 800e67e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e682:	490e      	ldr	r1, [pc, #56]	; (800e6bc <pbuf_copy+0x1a0>)
 800e684:	4809      	ldr	r0, [pc, #36]	; (800e6ac <pbuf_copy+0x190>)
 800e686:	f009 fb8f 	bl	8017da8 <iprintf>
 800e68a:	f06f 0305 	mvn.w	r3, #5
 800e68e:	e004      	b.n	800e69a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	f47f af61 	bne.w	800e55a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	0801f71c 	.word	0x0801f71c
 800e6a8:	0801f9c4 	.word	0x0801f9c4
 800e6ac:	0801f77c 	.word	0x0801f77c
 800e6b0:	0801f9f4 	.word	0x0801f9f4
 800e6b4:	0801fa0c 	.word	0x0801fa0c
 800e6b8:	0801fa28 	.word	0x0801fa28
 800e6bc:	0801fa38 	.word	0x0801fa38

0800e6c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b088      	sub	sp, #32
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	80fb      	strh	r3, [r7, #6]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d108      	bne.n	800e6f6 <pbuf_copy_partial+0x36>
 800e6e4:	4b2b      	ldr	r3, [pc, #172]	; (800e794 <pbuf_copy_partial+0xd4>)
 800e6e6:	f240 420a 	movw	r2, #1034	; 0x40a
 800e6ea:	492b      	ldr	r1, [pc, #172]	; (800e798 <pbuf_copy_partial+0xd8>)
 800e6ec:	482b      	ldr	r0, [pc, #172]	; (800e79c <pbuf_copy_partial+0xdc>)
 800e6ee:	f009 fb5b 	bl	8017da8 <iprintf>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	e04a      	b.n	800e78c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d108      	bne.n	800e70e <pbuf_copy_partial+0x4e>
 800e6fc:	4b25      	ldr	r3, [pc, #148]	; (800e794 <pbuf_copy_partial+0xd4>)
 800e6fe:	f240 420b 	movw	r2, #1035	; 0x40b
 800e702:	4927      	ldr	r1, [pc, #156]	; (800e7a0 <pbuf_copy_partial+0xe0>)
 800e704:	4825      	ldr	r0, [pc, #148]	; (800e79c <pbuf_copy_partial+0xdc>)
 800e706:	f009 fb4f 	bl	8017da8 <iprintf>
 800e70a:	2300      	movs	r3, #0
 800e70c:	e03e      	b.n	800e78c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	61fb      	str	r3, [r7, #28]
 800e712:	e034      	b.n	800e77e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e714:	88bb      	ldrh	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00a      	beq.n	800e730 <pbuf_copy_partial+0x70>
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	895b      	ldrh	r3, [r3, #10]
 800e71e:	88ba      	ldrh	r2, [r7, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	d305      	bcc.n	800e730 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	895b      	ldrh	r3, [r3, #10]
 800e728:	88ba      	ldrh	r2, [r7, #4]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	80bb      	strh	r3, [r7, #4]
 800e72e:	e023      	b.n	800e778 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e730:	69fb      	ldr	r3, [r7, #28]
 800e732:	895a      	ldrh	r2, [r3, #10]
 800e734:	88bb      	ldrh	r3, [r7, #4]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e73a:	8b3a      	ldrh	r2, [r7, #24]
 800e73c:	88fb      	ldrh	r3, [r7, #6]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d901      	bls.n	800e746 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e742:	88fb      	ldrh	r3, [r7, #6]
 800e744:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e746:	8b7b      	ldrh	r3, [r7, #26]
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	18d0      	adds	r0, r2, r3
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	685a      	ldr	r2, [r3, #4]
 800e750:	88bb      	ldrh	r3, [r7, #4]
 800e752:	4413      	add	r3, r2
 800e754:	8b3a      	ldrh	r2, [r7, #24]
 800e756:	4619      	mov	r1, r3
 800e758:	f008 fc7c 	bl	8017054 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e75c:	8afa      	ldrh	r2, [r7, #22]
 800e75e:	8b3b      	ldrh	r3, [r7, #24]
 800e760:	4413      	add	r3, r2
 800e762:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e764:	8b7a      	ldrh	r2, [r7, #26]
 800e766:	8b3b      	ldrh	r3, [r7, #24]
 800e768:	4413      	add	r3, r2
 800e76a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e76c:	88fa      	ldrh	r2, [r7, #6]
 800e76e:	8b3b      	ldrh	r3, [r7, #24]
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e774:	2300      	movs	r3, #0
 800e776:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	61fb      	str	r3, [r7, #28]
 800e77e:	88fb      	ldrh	r3, [r7, #6]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <pbuf_copy_partial+0xca>
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1c4      	bne.n	800e714 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e78a:	8afb      	ldrh	r3, [r7, #22]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3720      	adds	r7, #32
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	0801f71c 	.word	0x0801f71c
 800e798:	0801fa64 	.word	0x0801fa64
 800e79c:	0801f77c 	.word	0x0801f77c
 800e7a0:	0801fa84 	.word	0x0801fa84

0800e7a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	603a      	str	r2, [r7, #0]
 800e7ae:	71fb      	strb	r3, [r7, #7]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	8919      	ldrh	r1, [r3, #8]
 800e7b8:	88ba      	ldrh	r2, [r7, #4]
 800e7ba:	79fb      	ldrb	r3, [r7, #7]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7ff fab1 	bl	800dd24 <pbuf_alloc>
 800e7c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <pbuf_clone+0x2a>
    return NULL;
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e011      	b.n	800e7f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f7ff fea3 	bl	800e51c <pbuf_copy>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e7da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d006      	beq.n	800e7f0 <pbuf_clone+0x4c>
 800e7e2:	4b06      	ldr	r3, [pc, #24]	; (800e7fc <pbuf_clone+0x58>)
 800e7e4:	f240 5224 	movw	r2, #1316	; 0x524
 800e7e8:	4905      	ldr	r1, [pc, #20]	; (800e800 <pbuf_clone+0x5c>)
 800e7ea:	4806      	ldr	r0, [pc, #24]	; (800e804 <pbuf_clone+0x60>)
 800e7ec:	f009 fadc 	bl	8017da8 <iprintf>
  return q;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	0801f71c 	.word	0x0801f71c
 800e800:	0801fb90 	.word	0x0801fb90
 800e804:	0801f77c 	.word	0x0801f77c

0800e808 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e80c:	f009 fae4 	bl	8017dd8 <rand>
 800e810:	4603      	mov	r3, r0
 800e812:	b29b      	uxth	r3, r3
 800e814:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e818:	b29b      	uxth	r3, r3
 800e81a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e81e:	b29a      	uxth	r2, r3
 800e820:	4b01      	ldr	r3, [pc, #4]	; (800e828 <tcp_init+0x20>)
 800e822:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e824:	bf00      	nop
 800e826:	bd80      	pop	{r7, pc}
 800e828:	20000124 	.word	0x20000124

0800e82c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	7d1b      	ldrb	r3, [r3, #20]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d105      	bne.n	800e848 <tcp_free+0x1c>
 800e83c:	4b06      	ldr	r3, [pc, #24]	; (800e858 <tcp_free+0x2c>)
 800e83e:	22d4      	movs	r2, #212	; 0xd4
 800e840:	4906      	ldr	r1, [pc, #24]	; (800e85c <tcp_free+0x30>)
 800e842:	4807      	ldr	r0, [pc, #28]	; (800e860 <tcp_free+0x34>)
 800e844:	f009 fab0 	bl	8017da8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e848:	6879      	ldr	r1, [r7, #4]
 800e84a:	2001      	movs	r0, #1
 800e84c:	f7fe ff5c 	bl	800d708 <memp_free>
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	0801fc1c 	.word	0x0801fc1c
 800e85c:	0801fc4c 	.word	0x0801fc4c
 800e860:	0801fc60 	.word	0x0801fc60

0800e864 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	7d1b      	ldrb	r3, [r3, #20]
 800e870:	2b01      	cmp	r3, #1
 800e872:	d105      	bne.n	800e880 <tcp_free_listen+0x1c>
 800e874:	4b06      	ldr	r3, [pc, #24]	; (800e890 <tcp_free_listen+0x2c>)
 800e876:	22df      	movs	r2, #223	; 0xdf
 800e878:	4906      	ldr	r1, [pc, #24]	; (800e894 <tcp_free_listen+0x30>)
 800e87a:	4807      	ldr	r0, [pc, #28]	; (800e898 <tcp_free_listen+0x34>)
 800e87c:	f009 fa94 	bl	8017da8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e880:	6879      	ldr	r1, [r7, #4]
 800e882:	2002      	movs	r0, #2
 800e884:	f7fe ff40 	bl	800d708 <memp_free>
}
 800e888:	bf00      	nop
 800e88a:	3708      	adds	r7, #8
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	0801fc1c 	.word	0x0801fc1c
 800e894:	0801fc88 	.word	0x0801fc88
 800e898:	0801fc60 	.word	0x0801fc60

0800e89c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e8a0:	f000 fea2 	bl	800f5e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e8a4:	4b07      	ldr	r3, [pc, #28]	; (800e8c4 <tcp_tmr+0x28>)
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <tcp_tmr+0x28>)
 800e8ae:	701a      	strb	r2, [r3, #0]
 800e8b0:	4b04      	ldr	r3, [pc, #16]	; (800e8c4 <tcp_tmr+0x28>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f003 0301 	and.w	r3, r3, #1
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d001      	beq.n	800e8c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e8bc:	f000 fb54 	bl	800ef68 <tcp_slowtmr>
  }
}
 800e8c0:	bf00      	nop
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	20000451 	.word	0x20000451

0800e8c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d105      	bne.n	800e8e4 <tcp_remove_listener+0x1c>
 800e8d8:	4b0d      	ldr	r3, [pc, #52]	; (800e910 <tcp_remove_listener+0x48>)
 800e8da:	22ff      	movs	r2, #255	; 0xff
 800e8dc:	490d      	ldr	r1, [pc, #52]	; (800e914 <tcp_remove_listener+0x4c>)
 800e8de:	480e      	ldr	r0, [pc, #56]	; (800e918 <tcp_remove_listener+0x50>)
 800e8e0:	f009 fa62 	bl	8017da8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	60fb      	str	r3, [r7, #12]
 800e8e8:	e00a      	b.n	800e900 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d102      	bne.n	800e8fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	60fb      	str	r3, [r7, #12]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1f1      	bne.n	800e8ea <tcp_remove_listener+0x22>
    }
  }
}
 800e906:	bf00      	nop
 800e908:	bf00      	nop
 800e90a:	3710      	adds	r7, #16
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	0801fc1c 	.word	0x0801fc1c
 800e914:	0801fca4 	.word	0x0801fca4
 800e918:	0801fc60 	.word	0x0801fc60

0800e91c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b084      	sub	sp, #16
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <tcp_listen_closed+0x1c>
 800e92a:	4b14      	ldr	r3, [pc, #80]	; (800e97c <tcp_listen_closed+0x60>)
 800e92c:	f240 1211 	movw	r2, #273	; 0x111
 800e930:	4913      	ldr	r1, [pc, #76]	; (800e980 <tcp_listen_closed+0x64>)
 800e932:	4814      	ldr	r0, [pc, #80]	; (800e984 <tcp_listen_closed+0x68>)
 800e934:	f009 fa38 	bl	8017da8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	7d1b      	ldrb	r3, [r3, #20]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d006      	beq.n	800e94e <tcp_listen_closed+0x32>
 800e940:	4b0e      	ldr	r3, [pc, #56]	; (800e97c <tcp_listen_closed+0x60>)
 800e942:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e946:	4910      	ldr	r1, [pc, #64]	; (800e988 <tcp_listen_closed+0x6c>)
 800e948:	480e      	ldr	r0, [pc, #56]	; (800e984 <tcp_listen_closed+0x68>)
 800e94a:	f009 fa2d 	bl	8017da8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e94e:	2301      	movs	r3, #1
 800e950:	60fb      	str	r3, [r7, #12]
 800e952:	e00b      	b.n	800e96c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e954:	4a0d      	ldr	r2, [pc, #52]	; (800e98c <tcp_listen_closed+0x70>)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff ffb1 	bl	800e8c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	3301      	adds	r3, #1
 800e96a:	60fb      	str	r3, [r7, #12]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2b03      	cmp	r3, #3
 800e970:	d9f0      	bls.n	800e954 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e972:	bf00      	nop
 800e974:	bf00      	nop
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	0801fc1c 	.word	0x0801fc1c
 800e980:	0801fccc 	.word	0x0801fccc
 800e984:	0801fc60 	.word	0x0801fc60
 800e988:	0801fcd8 	.word	0x0801fcd8
 800e98c:	08021c18 	.word	0x08021c18

0800e990 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e990:	b5b0      	push	{r4, r5, r7, lr}
 800e992:	b088      	sub	sp, #32
 800e994:	af04      	add	r7, sp, #16
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	460b      	mov	r3, r1
 800e99a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <tcp_close_shutdown+0x20>
 800e9a2:	4b63      	ldr	r3, [pc, #396]	; (800eb30 <tcp_close_shutdown+0x1a0>)
 800e9a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e9a8:	4962      	ldr	r1, [pc, #392]	; (800eb34 <tcp_close_shutdown+0x1a4>)
 800e9aa:	4863      	ldr	r0, [pc, #396]	; (800eb38 <tcp_close_shutdown+0x1a8>)
 800e9ac:	f009 f9fc 	bl	8017da8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d066      	beq.n	800ea84 <tcp_close_shutdown+0xf4>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ba:	2b04      	cmp	r3, #4
 800e9bc:	d003      	beq.n	800e9c6 <tcp_close_shutdown+0x36>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	7d1b      	ldrb	r3, [r3, #20]
 800e9c2:	2b07      	cmp	r3, #7
 800e9c4:	d15e      	bne.n	800ea84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d104      	bne.n	800e9d8 <tcp_close_shutdown+0x48>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9d6:	d055      	beq.n	800ea84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	8b5b      	ldrh	r3, [r3, #26]
 800e9dc:	f003 0310 	and.w	r3, r3, #16
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d106      	bne.n	800e9f2 <tcp_close_shutdown+0x62>
 800e9e4:	4b52      	ldr	r3, [pc, #328]	; (800eb30 <tcp_close_shutdown+0x1a0>)
 800e9e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e9ea:	4954      	ldr	r1, [pc, #336]	; (800eb3c <tcp_close_shutdown+0x1ac>)
 800e9ec:	4852      	ldr	r0, [pc, #328]	; (800eb38 <tcp_close_shutdown+0x1a8>)
 800e9ee:	f009 f9db 	bl	8017da8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e9fa:	687d      	ldr	r5, [r7, #4]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3304      	adds	r3, #4
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	8ad2      	ldrh	r2, [r2, #22]
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	8b09      	ldrh	r1, [r1, #24]
 800ea08:	9102      	str	r1, [sp, #8]
 800ea0a:	9201      	str	r2, [sp, #4]
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	462b      	mov	r3, r5
 800ea10:	4622      	mov	r2, r4
 800ea12:	4601      	mov	r1, r0
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f004 fe8d 	bl	8013734 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f001 f8c6 	bl	800fbac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ea20:	4b47      	ldr	r3, [pc, #284]	; (800eb40 <tcp_close_shutdown+0x1b0>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d105      	bne.n	800ea36 <tcp_close_shutdown+0xa6>
 800ea2a:	4b45      	ldr	r3, [pc, #276]	; (800eb40 <tcp_close_shutdown+0x1b0>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	4a43      	ldr	r2, [pc, #268]	; (800eb40 <tcp_close_shutdown+0x1b0>)
 800ea32:	6013      	str	r3, [r2, #0]
 800ea34:	e013      	b.n	800ea5e <tcp_close_shutdown+0xce>
 800ea36:	4b42      	ldr	r3, [pc, #264]	; (800eb40 <tcp_close_shutdown+0x1b0>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	60fb      	str	r3, [r7, #12]
 800ea3c:	e00c      	b.n	800ea58 <tcp_close_shutdown+0xc8>
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d104      	bne.n	800ea52 <tcp_close_shutdown+0xc2>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	60da      	str	r2, [r3, #12]
 800ea50:	e005      	b.n	800ea5e <tcp_close_shutdown+0xce>
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	60fb      	str	r3, [r7, #12]
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d1ef      	bne.n	800ea3e <tcp_close_shutdown+0xae>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	60da      	str	r2, [r3, #12]
 800ea64:	4b37      	ldr	r3, [pc, #220]	; (800eb44 <tcp_close_shutdown+0x1b4>)
 800ea66:	2201      	movs	r2, #1
 800ea68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ea6a:	4b37      	ldr	r3, [pc, #220]	; (800eb48 <tcp_close_shutdown+0x1b8>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d102      	bne.n	800ea7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ea74:	f003 fd5a 	bl	801252c <tcp_trigger_input_pcb_close>
 800ea78:	e002      	b.n	800ea80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7ff fed6 	bl	800e82c <tcp_free>
      }
      return ERR_OK;
 800ea80:	2300      	movs	r3, #0
 800ea82:	e050      	b.n	800eb26 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	7d1b      	ldrb	r3, [r3, #20]
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d03b      	beq.n	800eb04 <tcp_close_shutdown+0x174>
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	dc44      	bgt.n	800eb1a <tcp_close_shutdown+0x18a>
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <tcp_close_shutdown+0x10a>
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d02a      	beq.n	800eaee <tcp_close_shutdown+0x15e>
 800ea98:	e03f      	b.n	800eb1a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	8adb      	ldrh	r3, [r3, #22]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d021      	beq.n	800eae6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eaa2:	4b2a      	ldr	r3, [pc, #168]	; (800eb4c <tcp_close_shutdown+0x1bc>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d105      	bne.n	800eab8 <tcp_close_shutdown+0x128>
 800eaac:	4b27      	ldr	r3, [pc, #156]	; (800eb4c <tcp_close_shutdown+0x1bc>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	4a26      	ldr	r2, [pc, #152]	; (800eb4c <tcp_close_shutdown+0x1bc>)
 800eab4:	6013      	str	r3, [r2, #0]
 800eab6:	e013      	b.n	800eae0 <tcp_close_shutdown+0x150>
 800eab8:	4b24      	ldr	r3, [pc, #144]	; (800eb4c <tcp_close_shutdown+0x1bc>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	60bb      	str	r3, [r7, #8]
 800eabe:	e00c      	b.n	800eada <tcp_close_shutdown+0x14a>
 800eac0:	68bb      	ldr	r3, [r7, #8]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d104      	bne.n	800ead4 <tcp_close_shutdown+0x144>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68da      	ldr	r2, [r3, #12]
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	60da      	str	r2, [r3, #12]
 800ead2:	e005      	b.n	800eae0 <tcp_close_shutdown+0x150>
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	60bb      	str	r3, [r7, #8]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1ef      	bne.n	800eac0 <tcp_close_shutdown+0x130>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff fea0 	bl	800e82c <tcp_free>
      break;
 800eaec:	e01a      	b.n	800eb24 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f7ff ff14 	bl	800e91c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800eaf4:	6879      	ldr	r1, [r7, #4]
 800eaf6:	4816      	ldr	r0, [pc, #88]	; (800eb50 <tcp_close_shutdown+0x1c0>)
 800eaf8:	f001 f8a8 	bl	800fc4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff feb1 	bl	800e864 <tcp_free_listen>
      break;
 800eb02:	e00f      	b.n	800eb24 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eb04:	6879      	ldr	r1, [r7, #4]
 800eb06:	480e      	ldr	r0, [pc, #56]	; (800eb40 <tcp_close_shutdown+0x1b0>)
 800eb08:	f001 f8a0 	bl	800fc4c <tcp_pcb_remove>
 800eb0c:	4b0d      	ldr	r3, [pc, #52]	; (800eb44 <tcp_close_shutdown+0x1b4>)
 800eb0e:	2201      	movs	r2, #1
 800eb10:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7ff fe8a 	bl	800e82c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800eb18:	e004      	b.n	800eb24 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f81a 	bl	800eb54 <tcp_close_shutdown_fin>
 800eb20:	4603      	mov	r3, r0
 800eb22:	e000      	b.n	800eb26 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800eb24:	2300      	movs	r3, #0
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bdb0      	pop	{r4, r5, r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	0801fc1c 	.word	0x0801fc1c
 800eb34:	0801fcf0 	.word	0x0801fcf0
 800eb38:	0801fc60 	.word	0x0801fc60
 800eb3c:	0801fd10 	.word	0x0801fd10
 800eb40:	20007118 	.word	0x20007118
 800eb44:	20007114 	.word	0x20007114
 800eb48:	2000712c 	.word	0x2000712c
 800eb4c:	20007124 	.word	0x20007124
 800eb50:	20007120 	.word	0x20007120

0800eb54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d106      	bne.n	800eb70 <tcp_close_shutdown_fin+0x1c>
 800eb62:	4b2e      	ldr	r3, [pc, #184]	; (800ec1c <tcp_close_shutdown_fin+0xc8>)
 800eb64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eb68:	492d      	ldr	r1, [pc, #180]	; (800ec20 <tcp_close_shutdown_fin+0xcc>)
 800eb6a:	482e      	ldr	r0, [pc, #184]	; (800ec24 <tcp_close_shutdown_fin+0xd0>)
 800eb6c:	f009 f91c 	bl	8017da8 <iprintf>

  switch (pcb->state) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	7d1b      	ldrb	r3, [r3, #20]
 800eb74:	2b07      	cmp	r3, #7
 800eb76:	d020      	beq.n	800ebba <tcp_close_shutdown_fin+0x66>
 800eb78:	2b07      	cmp	r3, #7
 800eb7a:	dc2b      	bgt.n	800ebd4 <tcp_close_shutdown_fin+0x80>
 800eb7c:	2b03      	cmp	r3, #3
 800eb7e:	d002      	beq.n	800eb86 <tcp_close_shutdown_fin+0x32>
 800eb80:	2b04      	cmp	r3, #4
 800eb82:	d00d      	beq.n	800eba0 <tcp_close_shutdown_fin+0x4c>
 800eb84:	e026      	b.n	800ebd4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f003 fee2 	bl	8012950 <tcp_send_fin>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eb90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d11f      	bne.n	800ebd8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2205      	movs	r2, #5
 800eb9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eb9e:	e01b      	b.n	800ebd8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f003 fed5 	bl	8012950 <tcp_send_fin>
 800eba6:	4603      	mov	r3, r0
 800eba8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ebaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d114      	bne.n	800ebdc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2205      	movs	r2, #5
 800ebb6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ebb8:	e010      	b.n	800ebdc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f003 fec8 	bl	8012950 <tcp_send_fin>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ebc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d109      	bne.n	800ebe0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2209      	movs	r2, #9
 800ebd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ebd2:	e005      	b.n	800ebe0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e01c      	b.n	800ec12 <tcp_close_shutdown_fin+0xbe>
      break;
 800ebd8:	bf00      	nop
 800ebda:	e002      	b.n	800ebe2 <tcp_close_shutdown_fin+0x8e>
      break;
 800ebdc:	bf00      	nop
 800ebde:	e000      	b.n	800ebe2 <tcp_close_shutdown_fin+0x8e>
      break;
 800ebe0:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ebe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d103      	bne.n	800ebf2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f003 ffee 	bl	8012bcc <tcp_output>
 800ebf0:	e00d      	b.n	800ec0e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ebf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfa:	d108      	bne.n	800ec0e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	8b5b      	ldrh	r3, [r3, #26]
 800ec00:	f043 0308 	orr.w	r3, r3, #8
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	e001      	b.n	800ec12 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ec0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3710      	adds	r7, #16
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0801fc1c 	.word	0x0801fc1c
 800ec20:	0801fccc 	.word	0x0801fccc
 800ec24:	0801fc60 	.word	0x0801fc60

0800ec28 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d109      	bne.n	800ec4a <tcp_close+0x22>
 800ec36:	4b0f      	ldr	r3, [pc, #60]	; (800ec74 <tcp_close+0x4c>)
 800ec38:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ec3c:	490e      	ldr	r1, [pc, #56]	; (800ec78 <tcp_close+0x50>)
 800ec3e:	480f      	ldr	r0, [pc, #60]	; (800ec7c <tcp_close+0x54>)
 800ec40:	f009 f8b2 	bl	8017da8 <iprintf>
 800ec44:	f06f 030f 	mvn.w	r3, #15
 800ec48:	e00f      	b.n	800ec6a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	7d1b      	ldrb	r3, [r3, #20]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d006      	beq.n	800ec60 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	8b5b      	ldrh	r3, [r3, #26]
 800ec56:	f043 0310 	orr.w	r3, r3, #16
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ec60:	2101      	movs	r1, #1
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f7ff fe94 	bl	800e990 <tcp_close_shutdown>
 800ec68:	4603      	mov	r3, r0
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	0801fc1c 	.word	0x0801fc1c
 800ec78:	0801fd2c 	.word	0x0801fd2c
 800ec7c:	0801fc60 	.word	0x0801fc60

0800ec80 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b08e      	sub	sp, #56	; 0x38
 800ec84:	af04      	add	r7, sp, #16
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d107      	bne.n	800eca0 <tcp_abandon+0x20>
 800ec90:	4b52      	ldr	r3, [pc, #328]	; (800eddc <tcp_abandon+0x15c>)
 800ec92:	f240 223d 	movw	r2, #573	; 0x23d
 800ec96:	4952      	ldr	r1, [pc, #328]	; (800ede0 <tcp_abandon+0x160>)
 800ec98:	4852      	ldr	r0, [pc, #328]	; (800ede4 <tcp_abandon+0x164>)
 800ec9a:	f009 f885 	bl	8017da8 <iprintf>
 800ec9e:	e099      	b.n	800edd4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7d1b      	ldrb	r3, [r3, #20]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d106      	bne.n	800ecb6 <tcp_abandon+0x36>
 800eca8:	4b4c      	ldr	r3, [pc, #304]	; (800eddc <tcp_abandon+0x15c>)
 800ecaa:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ecae:	494e      	ldr	r1, [pc, #312]	; (800ede8 <tcp_abandon+0x168>)
 800ecb0:	484c      	ldr	r0, [pc, #304]	; (800ede4 <tcp_abandon+0x164>)
 800ecb2:	f009 f879 	bl	8017da8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	7d1b      	ldrb	r3, [r3, #20]
 800ecba:	2b0a      	cmp	r3, #10
 800ecbc:	d107      	bne.n	800ecce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ecbe:	6879      	ldr	r1, [r7, #4]
 800ecc0:	484a      	ldr	r0, [pc, #296]	; (800edec <tcp_abandon+0x16c>)
 800ecc2:	f000 ffc3 	bl	800fc4c <tcp_pcb_remove>
    tcp_free(pcb);
 800ecc6:	6878      	ldr	r0, [r7, #4]
 800ecc8:	f7ff fdb0 	bl	800e82c <tcp_free>
 800eccc:	e082      	b.n	800edd4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecda:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ece8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	691b      	ldr	r3, [r3, #16]
 800ecee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	7d1b      	ldrb	r3, [r3, #20]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d126      	bne.n	800ed46 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	8adb      	ldrh	r3, [r3, #22]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d02e      	beq.n	800ed5e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ed00:	4b3b      	ldr	r3, [pc, #236]	; (800edf0 <tcp_abandon+0x170>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d105      	bne.n	800ed16 <tcp_abandon+0x96>
 800ed0a:	4b39      	ldr	r3, [pc, #228]	; (800edf0 <tcp_abandon+0x170>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	4a37      	ldr	r2, [pc, #220]	; (800edf0 <tcp_abandon+0x170>)
 800ed12:	6013      	str	r3, [r2, #0]
 800ed14:	e013      	b.n	800ed3e <tcp_abandon+0xbe>
 800ed16:	4b36      	ldr	r3, [pc, #216]	; (800edf0 <tcp_abandon+0x170>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	61fb      	str	r3, [r7, #28]
 800ed1c:	e00c      	b.n	800ed38 <tcp_abandon+0xb8>
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d104      	bne.n	800ed32 <tcp_abandon+0xb2>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	68da      	ldr	r2, [r3, #12]
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	60da      	str	r2, [r3, #12]
 800ed30:	e005      	b.n	800ed3e <tcp_abandon+0xbe>
 800ed32:	69fb      	ldr	r3, [r7, #28]
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	61fb      	str	r3, [r7, #28]
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1ef      	bne.n	800ed1e <tcp_abandon+0x9e>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	60da      	str	r2, [r3, #12]
 800ed44:	e00b      	b.n	800ed5e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	8adb      	ldrh	r3, [r3, #22]
 800ed4e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ed50:	6879      	ldr	r1, [r7, #4]
 800ed52:	4828      	ldr	r0, [pc, #160]	; (800edf4 <tcp_abandon+0x174>)
 800ed54:	f000 ff7a 	bl	800fc4c <tcp_pcb_remove>
 800ed58:	4b27      	ldr	r3, [pc, #156]	; (800edf8 <tcp_abandon+0x178>)
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d004      	beq.n	800ed70 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f000 fd1c 	bl	800f7a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d004      	beq.n	800ed82 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f000 fd13 	bl	800f7a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d004      	beq.n	800ed94 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f000 fd0a 	bl	800f7a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00e      	beq.n	800edb8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ed9a:	6879      	ldr	r1, [r7, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	3304      	adds	r3, #4
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	8b12      	ldrh	r2, [r2, #24]
 800eda4:	9202      	str	r2, [sp, #8]
 800eda6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eda8:	9201      	str	r2, [sp, #4]
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	460b      	mov	r3, r1
 800edae:	697a      	ldr	r2, [r7, #20]
 800edb0:	69b9      	ldr	r1, [r7, #24]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f004 fcbe 	bl	8013734 <tcp_rst>
    }
    last_state = pcb->state;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	7d1b      	ldrb	r3, [r3, #20]
 800edbc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7ff fd34 	bl	800e82c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d004      	beq.n	800edd4 <tcp_abandon+0x154>
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	f06f 010c 	mvn.w	r1, #12
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	4798      	blx	r3
  }
}
 800edd4:	3728      	adds	r7, #40	; 0x28
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	0801fc1c 	.word	0x0801fc1c
 800ede0:	0801fd60 	.word	0x0801fd60
 800ede4:	0801fc60 	.word	0x0801fc60
 800ede8:	0801fd7c 	.word	0x0801fd7c
 800edec:	20007128 	.word	0x20007128
 800edf0:	20007124 	.word	0x20007124
 800edf4:	20007118 	.word	0x20007118
 800edf8:	20007114 	.word	0x20007114

0800edfc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ee04:	2101      	movs	r1, #1
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7ff ff3a 	bl	800ec80 <tcp_abandon>
}
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d106      	bne.n	800ee30 <tcp_update_rcv_ann_wnd+0x1c>
 800ee22:	4b25      	ldr	r3, [pc, #148]	; (800eeb8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ee24:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ee28:	4924      	ldr	r1, [pc, #144]	; (800eebc <tcp_update_rcv_ann_wnd+0xa8>)
 800ee2a:	4825      	ldr	r0, [pc, #148]	; (800eec0 <tcp_update_rcv_ann_wnd+0xac>)
 800ee2c:	f008 ffbc 	bl	8017da8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ee38:	4413      	add	r3, r2
 800ee3a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ee44:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ee48:	bf28      	it	cs
 800ee4a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ee4e:	b292      	uxth	r2, r2
 800ee50:	4413      	add	r3, r2
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	1ad3      	subs	r3, r2, r3
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	db08      	blt.n	800ee6c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	68fa      	ldr	r2, [r7, #12]
 800ee68:	1ad3      	subs	r3, r2, r3
 800ee6a:	e020      	b.n	800eeae <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	dd03      	ble.n	800ee82 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ee80:	e014      	b.n	800eeac <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8a:	1ad3      	subs	r3, r2, r3
 800ee8c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee94:	d306      	bcc.n	800eea4 <tcp_update_rcv_ann_wnd+0x90>
 800ee96:	4b08      	ldr	r3, [pc, #32]	; (800eeb8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ee98:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ee9c:	4909      	ldr	r1, [pc, #36]	; (800eec4 <tcp_update_rcv_ann_wnd+0xb0>)
 800ee9e:	4808      	ldr	r0, [pc, #32]	; (800eec0 <tcp_update_rcv_ann_wnd+0xac>)
 800eea0:	f008 ff82 	bl	8017da8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	b29a      	uxth	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800eeac:	2300      	movs	r3, #0
  }
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3710      	adds	r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	0801fc1c 	.word	0x0801fc1c
 800eebc:	0801fe78 	.word	0x0801fe78
 800eec0:	0801fc60 	.word	0x0801fc60
 800eec4:	0801fe9c 	.word	0x0801fe9c

0800eec8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d107      	bne.n	800eeea <tcp_recved+0x22>
 800eeda:	4b1f      	ldr	r3, [pc, #124]	; (800ef58 <tcp_recved+0x90>)
 800eedc:	f240 32cf 	movw	r2, #975	; 0x3cf
 800eee0:	491e      	ldr	r1, [pc, #120]	; (800ef5c <tcp_recved+0x94>)
 800eee2:	481f      	ldr	r0, [pc, #124]	; (800ef60 <tcp_recved+0x98>)
 800eee4:	f008 ff60 	bl	8017da8 <iprintf>
 800eee8:	e032      	b.n	800ef50 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7d1b      	ldrb	r3, [r3, #20]
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d106      	bne.n	800ef00 <tcp_recved+0x38>
 800eef2:	4b19      	ldr	r3, [pc, #100]	; (800ef58 <tcp_recved+0x90>)
 800eef4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eef8:	491a      	ldr	r1, [pc, #104]	; (800ef64 <tcp_recved+0x9c>)
 800eefa:	4819      	ldr	r0, [pc, #100]	; (800ef60 <tcp_recved+0x98>)
 800eefc:	f008 ff54 	bl	8017da8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef04:	887b      	ldrh	r3, [r7, #2]
 800ef06:	4413      	add	r3, r2
 800ef08:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ef0a:	89fb      	ldrh	r3, [r7, #14]
 800ef0c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ef10:	d804      	bhi.n	800ef1c <tcp_recved+0x54>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef16:	89fa      	ldrh	r2, [r7, #14]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d204      	bcs.n	800ef26 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef22:	851a      	strh	r2, [r3, #40]	; 0x28
 800ef24:	e002      	b.n	800ef2c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	89fa      	ldrh	r2, [r7, #14]
 800ef2a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7ff ff71 	bl	800ee14 <tcp_update_rcv_ann_wnd>
 800ef32:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ef3a:	d309      	bcc.n	800ef50 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	8b5b      	ldrh	r3, [r3, #26]
 800ef40:	f043 0302 	orr.w	r3, r3, #2
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f003 fe3e 	bl	8012bcc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	0801fc1c 	.word	0x0801fc1c
 800ef5c:	0801feb8 	.word	0x0801feb8
 800ef60:	0801fc60 	.word	0x0801fc60
 800ef64:	0801fed0 	.word	0x0801fed0

0800ef68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ef68:	b5b0      	push	{r4, r5, r7, lr}
 800ef6a:	b090      	sub	sp, #64	; 0x40
 800ef6c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ef74:	4b94      	ldr	r3, [pc, #592]	; (800f1c8 <tcp_slowtmr+0x260>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	4a93      	ldr	r2, [pc, #588]	; (800f1c8 <tcp_slowtmr+0x260>)
 800ef7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ef7e:	4b93      	ldr	r3, [pc, #588]	; (800f1cc <tcp_slowtmr+0x264>)
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	3301      	adds	r3, #1
 800ef84:	b2da      	uxtb	r2, r3
 800ef86:	4b91      	ldr	r3, [pc, #580]	; (800f1cc <tcp_slowtmr+0x264>)
 800ef88:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ef8e:	4b90      	ldr	r3, [pc, #576]	; (800f1d0 <tcp_slowtmr+0x268>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ef94:	e29f      	b.n	800f4d6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ef96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef98:	7d1b      	ldrb	r3, [r3, #20]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d106      	bne.n	800efac <tcp_slowtmr+0x44>
 800ef9e:	4b8d      	ldr	r3, [pc, #564]	; (800f1d4 <tcp_slowtmr+0x26c>)
 800efa0:	f240 42be 	movw	r2, #1214	; 0x4be
 800efa4:	498c      	ldr	r1, [pc, #560]	; (800f1d8 <tcp_slowtmr+0x270>)
 800efa6:	488d      	ldr	r0, [pc, #564]	; (800f1dc <tcp_slowtmr+0x274>)
 800efa8:	f008 fefe 	bl	8017da8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	7d1b      	ldrb	r3, [r3, #20]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d106      	bne.n	800efc2 <tcp_slowtmr+0x5a>
 800efb4:	4b87      	ldr	r3, [pc, #540]	; (800f1d4 <tcp_slowtmr+0x26c>)
 800efb6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800efba:	4989      	ldr	r1, [pc, #548]	; (800f1e0 <tcp_slowtmr+0x278>)
 800efbc:	4887      	ldr	r0, [pc, #540]	; (800f1dc <tcp_slowtmr+0x274>)
 800efbe:	f008 fef3 	bl	8017da8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800efc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc4:	7d1b      	ldrb	r3, [r3, #20]
 800efc6:	2b0a      	cmp	r3, #10
 800efc8:	d106      	bne.n	800efd8 <tcp_slowtmr+0x70>
 800efca:	4b82      	ldr	r3, [pc, #520]	; (800f1d4 <tcp_slowtmr+0x26c>)
 800efcc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800efd0:	4984      	ldr	r1, [pc, #528]	; (800f1e4 <tcp_slowtmr+0x27c>)
 800efd2:	4882      	ldr	r0, [pc, #520]	; (800f1dc <tcp_slowtmr+0x274>)
 800efd4:	f008 fee8 	bl	8017da8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800efd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efda:	7f9a      	ldrb	r2, [r3, #30]
 800efdc:	4b7b      	ldr	r3, [pc, #492]	; (800f1cc <tcp_slowtmr+0x264>)
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d105      	bne.n	800eff0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800efe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800efee:	e272      	b.n	800f4d6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eff0:	4b76      	ldr	r3, [pc, #472]	; (800f1cc <tcp_slowtmr+0x264>)
 800eff2:	781a      	ldrb	r2, [r3, #0]
 800eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eff8:	2300      	movs	r3, #0
 800effa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	7d1b      	ldrb	r3, [r3, #20]
 800f008:	2b02      	cmp	r3, #2
 800f00a:	d10a      	bne.n	800f022 <tcp_slowtmr+0xba>
 800f00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f00e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f012:	2b05      	cmp	r3, #5
 800f014:	d905      	bls.n	800f022 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f01a:	3301      	adds	r3, #1
 800f01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f020:	e11e      	b.n	800f260 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f024:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f028:	2b0b      	cmp	r3, #11
 800f02a:	d905      	bls.n	800f038 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f030:	3301      	adds	r3, #1
 800f032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f036:	e113      	b.n	800f260 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d075      	beq.n	800f12e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f046:	2b00      	cmp	r3, #0
 800f048:	d006      	beq.n	800f058 <tcp_slowtmr+0xf0>
 800f04a:	4b62      	ldr	r3, [pc, #392]	; (800f1d4 <tcp_slowtmr+0x26c>)
 800f04c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f050:	4965      	ldr	r1, [pc, #404]	; (800f1e8 <tcp_slowtmr+0x280>)
 800f052:	4862      	ldr	r0, [pc, #392]	; (800f1dc <tcp_slowtmr+0x274>)
 800f054:	f008 fea8 	bl	8017da8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d106      	bne.n	800f06e <tcp_slowtmr+0x106>
 800f060:	4b5c      	ldr	r3, [pc, #368]	; (800f1d4 <tcp_slowtmr+0x26c>)
 800f062:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f066:	4961      	ldr	r1, [pc, #388]	; (800f1ec <tcp_slowtmr+0x284>)
 800f068:	485c      	ldr	r0, [pc, #368]	; (800f1dc <tcp_slowtmr+0x274>)
 800f06a:	f008 fe9d 	bl	8017da8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f074:	2b0b      	cmp	r3, #11
 800f076:	d905      	bls.n	800f084 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f07c:	3301      	adds	r3, #1
 800f07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f082:	e0ed      	b.n	800f260 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f08a:	3b01      	subs	r3, #1
 800f08c:	4a58      	ldr	r2, [pc, #352]	; (800f1f0 <tcp_slowtmr+0x288>)
 800f08e:	5cd3      	ldrb	r3, [r2, r3]
 800f090:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f094:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f098:	7c7a      	ldrb	r2, [r7, #17]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d907      	bls.n	800f0ae <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f0b4:	7c7a      	ldrb	r2, [r7, #17]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	f200 80d2 	bhi.w	800f260 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f0bc:	2301      	movs	r3, #1
 800f0be:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d108      	bne.n	800f0dc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f0ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0cc:	f004 fc26 	bl	801391c <tcp_zero_window_probe>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d014      	beq.n	800f100 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	623b      	str	r3, [r7, #32]
 800f0da:	e011      	b.n	800f100 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0e6:	f003 faeb 	bl	80126c0 <tcp_split_unsent_seg>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d107      	bne.n	800f100 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0f2:	f003 fd6b 	bl	8012bcc <tcp_output>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d101      	bne.n	800f100 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f100:	6a3b      	ldr	r3, [r7, #32]
 800f102:	2b00      	cmp	r3, #0
 800f104:	f000 80ac 	beq.w	800f260 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	2200      	movs	r2, #0
 800f10c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f116:	2b06      	cmp	r3, #6
 800f118:	f200 80a2 	bhi.w	800f260 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f122:	3301      	adds	r3, #1
 800f124:	b2da      	uxtb	r2, r3
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f12c:	e098      	b.n	800f260 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f134:	2b00      	cmp	r3, #0
 800f136:	db0f      	blt.n	800f158 <tcp_slowtmr+0x1f0>
 800f138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f13e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f142:	4293      	cmp	r3, r2
 800f144:	d008      	beq.n	800f158 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	3301      	adds	r3, #1
 800f150:	b29b      	uxth	r3, r3
 800f152:	b21a      	sxth	r2, r3
 800f154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f156:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f160:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f164:	429a      	cmp	r2, r3
 800f166:	db7b      	blt.n	800f260 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f16a:	f004 f821 	bl	80131b0 <tcp_rexmit_rto_prepare>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d007      	beq.n	800f184 <tcp_slowtmr+0x21c>
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d171      	bne.n	800f260 <tcp_slowtmr+0x2f8>
 800f17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f180:	2b00      	cmp	r3, #0
 800f182:	d06d      	beq.n	800f260 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	7d1b      	ldrb	r3, [r3, #20]
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d03a      	beq.n	800f202 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f192:	2b0c      	cmp	r3, #12
 800f194:	bf28      	it	cs
 800f196:	230c      	movcs	r3, #12
 800f198:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1a0:	10db      	asrs	r3, r3, #3
 800f1a2:	b21b      	sxth	r3, r3
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1ac:	4413      	add	r3, r2
 800f1ae:	7efa      	ldrb	r2, [r7, #27]
 800f1b0:	4910      	ldr	r1, [pc, #64]	; (800f1f4 <tcp_slowtmr+0x28c>)
 800f1b2:	5c8a      	ldrb	r2, [r1, r2]
 800f1b4:	4093      	lsls	r3, r2
 800f1b6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	dc1a      	bgt.n	800f1f8 <tcp_slowtmr+0x290>
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	b21a      	sxth	r2, r3
 800f1c6:	e019      	b.n	800f1fc <tcp_slowtmr+0x294>
 800f1c8:	2000711c 	.word	0x2000711c
 800f1cc:	20000452 	.word	0x20000452
 800f1d0:	20007118 	.word	0x20007118
 800f1d4:	0801fc1c 	.word	0x0801fc1c
 800f1d8:	0801ff60 	.word	0x0801ff60
 800f1dc:	0801fc60 	.word	0x0801fc60
 800f1e0:	0801ff8c 	.word	0x0801ff8c
 800f1e4:	0801ffb8 	.word	0x0801ffb8
 800f1e8:	0801ffe8 	.word	0x0801ffe8
 800f1ec:	0802001c 	.word	0x0802001c
 800f1f0:	08021c10 	.word	0x08021c10
 800f1f4:	08021c00 	.word	0x08021c00
 800f1f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f204:	2200      	movs	r2, #0
 800f206:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f214:	4293      	cmp	r3, r2
 800f216:	bf28      	it	cs
 800f218:	4613      	movcs	r3, r2
 800f21a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f21c:	8a7b      	ldrh	r3, [r7, #18]
 800f21e:	085b      	lsrs	r3, r3, #1
 800f220:	b29a      	uxth	r2, r3
 800f222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f224:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f232:	005b      	lsls	r3, r3, #1
 800f234:	b29b      	uxth	r3, r3
 800f236:	429a      	cmp	r2, r3
 800f238:	d206      	bcs.n	800f248 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f23e:	005b      	lsls	r3, r3, #1
 800f240:	b29a      	uxth	r2, r3
 800f242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f244:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	2200      	movs	r2, #0
 800f256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f25a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f25c:	f004 f818 	bl	8013290 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	7d1b      	ldrb	r3, [r3, #20]
 800f264:	2b06      	cmp	r3, #6
 800f266:	d111      	bne.n	800f28c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	8b5b      	ldrh	r3, [r3, #26]
 800f26c:	f003 0310 	and.w	r3, r3, #16
 800f270:	2b00      	cmp	r3, #0
 800f272:	d00b      	beq.n	800f28c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f274:	4b9d      	ldr	r3, [pc, #628]	; (800f4ec <tcp_slowtmr+0x584>)
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f27a:	6a1b      	ldr	r3, [r3, #32]
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	2b28      	cmp	r3, #40	; 0x28
 800f280:	d904      	bls.n	800f28c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f286:	3301      	adds	r3, #1
 800f288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	7a5b      	ldrb	r3, [r3, #9]
 800f290:	f003 0308 	and.w	r3, r3, #8
 800f294:	2b00      	cmp	r3, #0
 800f296:	d04c      	beq.n	800f332 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f29c:	2b04      	cmp	r3, #4
 800f29e:	d003      	beq.n	800f2a8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f2a4:	2b07      	cmp	r3, #7
 800f2a6:	d144      	bne.n	800f332 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2a8:	4b90      	ldr	r3, [pc, #576]	; (800f4ec <tcp_slowtmr+0x584>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ae:	6a1b      	ldr	r3, [r3, #32]
 800f2b0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f2b8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f2bc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f2c0:	498b      	ldr	r1, [pc, #556]	; (800f4f0 <tcp_slowtmr+0x588>)
 800f2c2:	fba1 1303 	umull	r1, r3, r1, r3
 800f2c6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d90a      	bls.n	800f2e2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f2d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2da:	3301      	adds	r3, #1
 800f2dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2e0:	e027      	b.n	800f332 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f2e2:	4b82      	ldr	r3, [pc, #520]	; (800f4ec <tcp_slowtmr+0x584>)
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e8:	6a1b      	ldr	r3, [r3, #32]
 800f2ea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ee:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	4b7e      	ldr	r3, [pc, #504]	; (800f4f4 <tcp_slowtmr+0x58c>)
 800f2fc:	fb03 f300 	mul.w	r3, r3, r0
 800f300:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f302:	497b      	ldr	r1, [pc, #492]	; (800f4f0 <tcp_slowtmr+0x588>)
 800f304:	fba1 1303 	umull	r1, r3, r1, r3
 800f308:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d911      	bls.n	800f332 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f310:	f004 fac4 	bl	801389c <tcp_keepalive>
 800f314:	4603      	mov	r3, r0
 800f316:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f31a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d107      	bne.n	800f332 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f324:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f328:	3301      	adds	r3, #1
 800f32a:	b2da      	uxtb	r2, r3
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f336:	2b00      	cmp	r3, #0
 800f338:	d011      	beq.n	800f35e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f33a:	4b6c      	ldr	r3, [pc, #432]	; (800f4ec <tcp_slowtmr+0x584>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	1ad2      	subs	r2, r2, r3
 800f344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f346:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f34a:	4619      	mov	r1, r3
 800f34c:	460b      	mov	r3, r1
 800f34e:	005b      	lsls	r3, r3, #1
 800f350:	440b      	add	r3, r1
 800f352:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f354:	429a      	cmp	r2, r3
 800f356:	d302      	bcc.n	800f35e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f35a:	f000 fddb 	bl	800ff14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f360:	7d1b      	ldrb	r3, [r3, #20]
 800f362:	2b03      	cmp	r3, #3
 800f364:	d10b      	bne.n	800f37e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f366:	4b61      	ldr	r3, [pc, #388]	; (800f4ec <tcp_slowtmr+0x584>)
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	6a1b      	ldr	r3, [r3, #32]
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	2b28      	cmp	r3, #40	; 0x28
 800f372:	d904      	bls.n	800f37e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f378:	3301      	adds	r3, #1
 800f37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f380:	7d1b      	ldrb	r3, [r3, #20]
 800f382:	2b09      	cmp	r3, #9
 800f384:	d10b      	bne.n	800f39e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f386:	4b59      	ldr	r3, [pc, #356]	; (800f4ec <tcp_slowtmr+0x584>)
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38c:	6a1b      	ldr	r3, [r3, #32]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	2bf0      	cmp	r3, #240	; 0xf0
 800f392:	d904      	bls.n	800f39e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f398:	3301      	adds	r3, #1
 800f39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f39e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d060      	beq.n	800f468 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3ac:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f3ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3b0:	f000 fbfc 	bl	800fbac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d010      	beq.n	800f3dc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f3ba:	4b4f      	ldr	r3, [pc, #316]	; (800f4f8 <tcp_slowtmr+0x590>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d106      	bne.n	800f3d2 <tcp_slowtmr+0x46a>
 800f3c4:	4b4d      	ldr	r3, [pc, #308]	; (800f4fc <tcp_slowtmr+0x594>)
 800f3c6:	f240 526d 	movw	r2, #1389	; 0x56d
 800f3ca:	494d      	ldr	r1, [pc, #308]	; (800f500 <tcp_slowtmr+0x598>)
 800f3cc:	484d      	ldr	r0, [pc, #308]	; (800f504 <tcp_slowtmr+0x59c>)
 800f3ce:	f008 fceb 	bl	8017da8 <iprintf>
        prev->next = pcb->next;
 800f3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d4:	68da      	ldr	r2, [r3, #12]
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	60da      	str	r2, [r3, #12]
 800f3da:	e00f      	b.n	800f3fc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f3dc:	4b46      	ldr	r3, [pc, #280]	; (800f4f8 <tcp_slowtmr+0x590>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d006      	beq.n	800f3f4 <tcp_slowtmr+0x48c>
 800f3e6:	4b45      	ldr	r3, [pc, #276]	; (800f4fc <tcp_slowtmr+0x594>)
 800f3e8:	f240 5271 	movw	r2, #1393	; 0x571
 800f3ec:	4946      	ldr	r1, [pc, #280]	; (800f508 <tcp_slowtmr+0x5a0>)
 800f3ee:	4845      	ldr	r0, [pc, #276]	; (800f504 <tcp_slowtmr+0x59c>)
 800f3f0:	f008 fcda 	bl	8017da8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	4a3f      	ldr	r2, [pc, #252]	; (800f4f8 <tcp_slowtmr+0x590>)
 800f3fa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f400:	2b00      	cmp	r3, #0
 800f402:	d013      	beq.n	800f42c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f406:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f40a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f40c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	3304      	adds	r3, #4
 800f412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f414:	8ad2      	ldrh	r2, [r2, #22]
 800f416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f418:	8b09      	ldrh	r1, [r1, #24]
 800f41a:	9102      	str	r1, [sp, #8]
 800f41c:	9201      	str	r2, [sp, #4]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	462b      	mov	r3, r5
 800f422:	4622      	mov	r2, r4
 800f424:	4601      	mov	r1, r0
 800f426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f428:	f004 f984 	bl	8013734 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f434:	7d1b      	ldrb	r3, [r3, #20]
 800f436:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f442:	6838      	ldr	r0, [r7, #0]
 800f444:	f7ff f9f2 	bl	800e82c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f448:	4b30      	ldr	r3, [pc, #192]	; (800f50c <tcp_slowtmr+0x5a4>)
 800f44a:	2200      	movs	r2, #0
 800f44c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d004      	beq.n	800f45e <tcp_slowtmr+0x4f6>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f06f 010c 	mvn.w	r1, #12
 800f45a:	68b8      	ldr	r0, [r7, #8]
 800f45c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f45e:	4b2b      	ldr	r3, [pc, #172]	; (800f50c <tcp_slowtmr+0x5a4>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d037      	beq.n	800f4d6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f466:	e590      	b.n	800ef8a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f474:	7f1b      	ldrb	r3, [r3, #28]
 800f476:	3301      	adds	r3, #1
 800f478:	b2da      	uxtb	r2, r3
 800f47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	7f1a      	ldrb	r2, [r3, #28]
 800f482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f484:	7f5b      	ldrb	r3, [r3, #29]
 800f486:	429a      	cmp	r2, r3
 800f488:	d325      	bcc.n	800f4d6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f48c:	2200      	movs	r2, #0
 800f48e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f490:	4b1e      	ldr	r3, [pc, #120]	; (800f50c <tcp_slowtmr+0x5a4>)
 800f492:	2200      	movs	r2, #0
 800f494:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00b      	beq.n	800f4b8 <tcp_slowtmr+0x550>
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4a8:	6912      	ldr	r2, [r2, #16]
 800f4aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	4798      	blx	r3
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f4b6:	e002      	b.n	800f4be <tcp_slowtmr+0x556>
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f4be:	4b13      	ldr	r3, [pc, #76]	; (800f50c <tcp_slowtmr+0x5a4>)
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d000      	beq.n	800f4c8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f4c6:	e560      	b.n	800ef8a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f4c8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d102      	bne.n	800f4d6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4d2:	f003 fb7b 	bl	8012bcc <tcp_output>
  while (pcb != NULL) {
 800f4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f47f ad5c 	bne.w	800ef96 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f4e2:	4b0b      	ldr	r3, [pc, #44]	; (800f510 <tcp_slowtmr+0x5a8>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4e8:	e067      	b.n	800f5ba <tcp_slowtmr+0x652>
 800f4ea:	bf00      	nop
 800f4ec:	2000711c 	.word	0x2000711c
 800f4f0:	10624dd3 	.word	0x10624dd3
 800f4f4:	000124f8 	.word	0x000124f8
 800f4f8:	20007118 	.word	0x20007118
 800f4fc:	0801fc1c 	.word	0x0801fc1c
 800f500:	08020054 	.word	0x08020054
 800f504:	0801fc60 	.word	0x0801fc60
 800f508:	08020080 	.word	0x08020080
 800f50c:	20007114 	.word	0x20007114
 800f510:	20007128 	.word	0x20007128
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f516:	7d1b      	ldrb	r3, [r3, #20]
 800f518:	2b0a      	cmp	r3, #10
 800f51a:	d006      	beq.n	800f52a <tcp_slowtmr+0x5c2>
 800f51c:	4b2b      	ldr	r3, [pc, #172]	; (800f5cc <tcp_slowtmr+0x664>)
 800f51e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f522:	492b      	ldr	r1, [pc, #172]	; (800f5d0 <tcp_slowtmr+0x668>)
 800f524:	482b      	ldr	r0, [pc, #172]	; (800f5d4 <tcp_slowtmr+0x66c>)
 800f526:	f008 fc3f 	bl	8017da8 <iprintf>
    pcb_remove = 0;
 800f52a:	2300      	movs	r3, #0
 800f52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f530:	4b29      	ldr	r3, [pc, #164]	; (800f5d8 <tcp_slowtmr+0x670>)
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f536:	6a1b      	ldr	r3, [r3, #32]
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	2bf0      	cmp	r3, #240	; 0xf0
 800f53c:	d904      	bls.n	800f548 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f53e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f542:	3301      	adds	r3, #1
 800f544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d02f      	beq.n	800f5b0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f552:	f000 fb2b 	bl	800fbac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d010      	beq.n	800f57e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f55c:	4b1f      	ldr	r3, [pc, #124]	; (800f5dc <tcp_slowtmr+0x674>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f562:	429a      	cmp	r2, r3
 800f564:	d106      	bne.n	800f574 <tcp_slowtmr+0x60c>
 800f566:	4b19      	ldr	r3, [pc, #100]	; (800f5cc <tcp_slowtmr+0x664>)
 800f568:	f240 52af 	movw	r2, #1455	; 0x5af
 800f56c:	491c      	ldr	r1, [pc, #112]	; (800f5e0 <tcp_slowtmr+0x678>)
 800f56e:	4819      	ldr	r0, [pc, #100]	; (800f5d4 <tcp_slowtmr+0x66c>)
 800f570:	f008 fc1a 	bl	8017da8 <iprintf>
        prev->next = pcb->next;
 800f574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f576:	68da      	ldr	r2, [r3, #12]
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	60da      	str	r2, [r3, #12]
 800f57c:	e00f      	b.n	800f59e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f57e:	4b17      	ldr	r3, [pc, #92]	; (800f5dc <tcp_slowtmr+0x674>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f584:	429a      	cmp	r2, r3
 800f586:	d006      	beq.n	800f596 <tcp_slowtmr+0x62e>
 800f588:	4b10      	ldr	r3, [pc, #64]	; (800f5cc <tcp_slowtmr+0x664>)
 800f58a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f58e:	4915      	ldr	r1, [pc, #84]	; (800f5e4 <tcp_slowtmr+0x67c>)
 800f590:	4810      	ldr	r0, [pc, #64]	; (800f5d4 <tcp_slowtmr+0x66c>)
 800f592:	f008 fc09 	bl	8017da8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	4a10      	ldr	r2, [pc, #64]	; (800f5dc <tcp_slowtmr+0x674>)
 800f59c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f5a8:	69f8      	ldr	r0, [r7, #28]
 800f5aa:	f7ff f93f 	bl	800e82c <tcp_free>
 800f5ae:	e004      	b.n	800f5ba <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1a9      	bne.n	800f514 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f5c0:	bf00      	nop
 800f5c2:	bf00      	nop
 800f5c4:	3730      	adds	r7, #48	; 0x30
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bdb0      	pop	{r4, r5, r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	0801fc1c 	.word	0x0801fc1c
 800f5d0:	080200ac 	.word	0x080200ac
 800f5d4:	0801fc60 	.word	0x0801fc60
 800f5d8:	2000711c 	.word	0x2000711c
 800f5dc:	20007128 	.word	0x20007128
 800f5e0:	080200dc 	.word	0x080200dc
 800f5e4:	08020104 	.word	0x08020104

0800f5e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f5ee:	4b2d      	ldr	r3, [pc, #180]	; (800f6a4 <tcp_fasttmr+0xbc>)
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	4b2b      	ldr	r3, [pc, #172]	; (800f6a4 <tcp_fasttmr+0xbc>)
 800f5f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f5fa:	4b2b      	ldr	r3, [pc, #172]	; (800f6a8 <tcp_fasttmr+0xc0>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f600:	e048      	b.n	800f694 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	7f9a      	ldrb	r2, [r3, #30]
 800f606:	4b27      	ldr	r3, [pc, #156]	; (800f6a4 <tcp_fasttmr+0xbc>)
 800f608:	781b      	ldrb	r3, [r3, #0]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d03f      	beq.n	800f68e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f60e:	4b25      	ldr	r3, [pc, #148]	; (800f6a4 <tcp_fasttmr+0xbc>)
 800f610:	781a      	ldrb	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	8b5b      	ldrh	r3, [r3, #26]
 800f61a:	f003 0301 	and.w	r3, r3, #1
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d010      	beq.n	800f644 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	8b5b      	ldrh	r3, [r3, #26]
 800f626:	f043 0302 	orr.w	r3, r3, #2
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f003 facb 	bl	8012bcc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	8b5b      	ldrh	r3, [r3, #26]
 800f63a:	f023 0303 	bic.w	r3, r3, #3
 800f63e:	b29a      	uxth	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8b5b      	ldrh	r3, [r3, #26]
 800f648:	f003 0308 	and.w	r3, r3, #8
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d009      	beq.n	800f664 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8b5b      	ldrh	r3, [r3, #26]
 800f654:	f023 0308 	bic.w	r3, r3, #8
 800f658:	b29a      	uxth	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff fa78 	bl	800eb54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00a      	beq.n	800f688 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f672:	4b0e      	ldr	r3, [pc, #56]	; (800f6ac <tcp_fasttmr+0xc4>)
 800f674:	2200      	movs	r2, #0
 800f676:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f819 	bl	800f6b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f67e:	4b0b      	ldr	r3, [pc, #44]	; (800f6ac <tcp_fasttmr+0xc4>)
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d000      	beq.n	800f688 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f686:	e7b8      	b.n	800f5fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	607b      	str	r3, [r7, #4]
 800f68c:	e002      	b.n	800f694 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	68db      	ldr	r3, [r3, #12]
 800f692:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1b3      	bne.n	800f602 <tcp_fasttmr+0x1a>
    }
  }
}
 800f69a:	bf00      	nop
 800f69c:	bf00      	nop
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	20000452 	.word	0x20000452
 800f6a8:	20007118 	.word	0x20007118
 800f6ac:	20007114 	.word	0x20007114

0800f6b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f6b0:	b590      	push	{r4, r7, lr}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d109      	bne.n	800f6d2 <tcp_process_refused_data+0x22>
 800f6be:	4b37      	ldr	r3, [pc, #220]	; (800f79c <tcp_process_refused_data+0xec>)
 800f6c0:	f240 6209 	movw	r2, #1545	; 0x609
 800f6c4:	4936      	ldr	r1, [pc, #216]	; (800f7a0 <tcp_process_refused_data+0xf0>)
 800f6c6:	4837      	ldr	r0, [pc, #220]	; (800f7a4 <tcp_process_refused_data+0xf4>)
 800f6c8:	f008 fb6e 	bl	8017da8 <iprintf>
 800f6cc:	f06f 030f 	mvn.w	r3, #15
 800f6d0:	e060      	b.n	800f794 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6d6:	7b5b      	ldrb	r3, [r3, #13]
 800f6d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00b      	beq.n	800f708 <tcp_process_refused_data+0x58>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6918      	ldr	r0, [r3, #16]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	6879      	ldr	r1, [r7, #4]
 800f700:	47a0      	blx	r4
 800f702:	4603      	mov	r3, r0
 800f704:	73fb      	strb	r3, [r7, #15]
 800f706:	e007      	b.n	800f718 <tcp_process_refused_data+0x68>
 800f708:	2300      	movs	r3, #0
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	6879      	ldr	r1, [r7, #4]
 800f70e:	2000      	movs	r0, #0
 800f710:	f000 f8a4 	bl	800f85c <tcp_recv_null>
 800f714:	4603      	mov	r3, r0
 800f716:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d12a      	bne.n	800f776 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f720:	7bbb      	ldrb	r3, [r7, #14]
 800f722:	f003 0320 	and.w	r3, r3, #32
 800f726:	2b00      	cmp	r3, #0
 800f728:	d033      	beq.n	800f792 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f72e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f732:	d005      	beq.n	800f740 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f738:	3301      	adds	r3, #1
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f746:	2b00      	cmp	r3, #0
 800f748:	d00b      	beq.n	800f762 <tcp_process_refused_data+0xb2>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6918      	ldr	r0, [r3, #16]
 800f754:	2300      	movs	r3, #0
 800f756:	2200      	movs	r2, #0
 800f758:	6879      	ldr	r1, [r7, #4]
 800f75a:	47a0      	blx	r4
 800f75c:	4603      	mov	r3, r0
 800f75e:	73fb      	strb	r3, [r7, #15]
 800f760:	e001      	b.n	800f766 <tcp_process_refused_data+0xb6>
 800f762:	2300      	movs	r3, #0
 800f764:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f76a:	f113 0f0d 	cmn.w	r3, #13
 800f76e:	d110      	bne.n	800f792 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f770:	f06f 030c 	mvn.w	r3, #12
 800f774:	e00e      	b.n	800f794 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f77a:	f113 0f0d 	cmn.w	r3, #13
 800f77e:	d102      	bne.n	800f786 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f780:	f06f 030c 	mvn.w	r3, #12
 800f784:	e006      	b.n	800f794 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f78c:	f06f 0304 	mvn.w	r3, #4
 800f790:	e000      	b.n	800f794 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd90      	pop	{r4, r7, pc}
 800f79c:	0801fc1c 	.word	0x0801fc1c
 800f7a0:	0802012c 	.word	0x0802012c
 800f7a4:	0801fc60 	.word	0x0801fc60

0800f7a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f7b0:	e007      	b.n	800f7c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f80a 	bl	800f7d2 <tcp_seg_free>
    seg = next;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d1f4      	bne.n	800f7b2 <tcp_segs_free+0xa>
  }
}
 800f7c8:	bf00      	nop
 800f7ca:	bf00      	nop
 800f7cc:	3710      	adds	r7, #16
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b082      	sub	sp, #8
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00c      	beq.n	800f7fa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d004      	beq.n	800f7f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7fe fd7d 	bl	800e2ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f7f2:	6879      	ldr	r1, [r7, #4]
 800f7f4:	2003      	movs	r0, #3
 800f7f6:	f7fd ff87 	bl	800d708 <memp_free>
  }
}
 800f7fa:	bf00      	nop
 800f7fc:	3708      	adds	r7, #8
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
	...

0800f804 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d106      	bne.n	800f820 <tcp_seg_copy+0x1c>
 800f812:	4b0f      	ldr	r3, [pc, #60]	; (800f850 <tcp_seg_copy+0x4c>)
 800f814:	f240 6282 	movw	r2, #1666	; 0x682
 800f818:	490e      	ldr	r1, [pc, #56]	; (800f854 <tcp_seg_copy+0x50>)
 800f81a:	480f      	ldr	r0, [pc, #60]	; (800f858 <tcp_seg_copy+0x54>)
 800f81c:	f008 fac4 	bl	8017da8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f820:	2003      	movs	r0, #3
 800f822:	f7fd ff25 	bl	800d670 <memp_malloc>
 800f826:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d101      	bne.n	800f832 <tcp_seg_copy+0x2e>
    return NULL;
 800f82e:	2300      	movs	r3, #0
 800f830:	e00a      	b.n	800f848 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f832:	2210      	movs	r2, #16
 800f834:	6879      	ldr	r1, [r7, #4]
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f007 fc0c 	bl	8017054 <memcpy>
  pbuf_ref(cseg->p);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	f7fe fdf3 	bl	800e42c <pbuf_ref>
  return cseg;
 800f846:	68fb      	ldr	r3, [r7, #12]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	0801fc1c 	.word	0x0801fc1c
 800f854:	08020170 	.word	0x08020170
 800f858:	0801fc60 	.word	0x0801fc60

0800f85c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d109      	bne.n	800f884 <tcp_recv_null+0x28>
 800f870:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <tcp_recv_null+0x60>)
 800f872:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f876:	4912      	ldr	r1, [pc, #72]	; (800f8c0 <tcp_recv_null+0x64>)
 800f878:	4812      	ldr	r0, [pc, #72]	; (800f8c4 <tcp_recv_null+0x68>)
 800f87a:	f008 fa95 	bl	8017da8 <iprintf>
 800f87e:	f06f 030f 	mvn.w	r3, #15
 800f882:	e016      	b.n	800f8b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d009      	beq.n	800f89e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	891b      	ldrh	r3, [r3, #8]
 800f88e:	4619      	mov	r1, r3
 800f890:	68b8      	ldr	r0, [r7, #8]
 800f892:	f7ff fb19 	bl	800eec8 <tcp_recved>
    pbuf_free(p);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7fe fd28 	bl	800e2ec <pbuf_free>
 800f89c:	e008      	b.n	800f8b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f89e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d104      	bne.n	800f8b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f8a6:	68b8      	ldr	r0, [r7, #8]
 800f8a8:	f7ff f9be 	bl	800ec28 <tcp_close>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	e000      	b.n	800f8b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f8b0:	2300      	movs	r3, #0
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	0801fc1c 	.word	0x0801fc1c
 800f8c0:	0802018c 	.word	0x0802018c
 800f8c4:	0801fc60 	.word	0x0801fc60

0800f8c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f8d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	db01      	blt.n	800f8de <tcp_kill_prio+0x16>
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	e000      	b.n	800f8e0 <tcp_kill_prio+0x18>
 800f8de:	237f      	movs	r3, #127	; 0x7f
 800f8e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f8e2:	7afb      	ldrb	r3, [r7, #11]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d034      	beq.n	800f952 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f8e8:	7afb      	ldrb	r3, [r7, #11]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8f6:	4b19      	ldr	r3, [pc, #100]	; (800f95c <tcp_kill_prio+0x94>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	617b      	str	r3, [r7, #20]
 800f8fc:	e01f      	b.n	800f93e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	7d5b      	ldrb	r3, [r3, #21]
 800f902:	7afa      	ldrb	r2, [r7, #11]
 800f904:	429a      	cmp	r2, r3
 800f906:	d80c      	bhi.n	800f922 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f90c:	7afa      	ldrb	r2, [r7, #11]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d112      	bne.n	800f938 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f912:	4b13      	ldr	r3, [pc, #76]	; (800f960 <tcp_kill_prio+0x98>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	6a1b      	ldr	r3, [r3, #32]
 800f91a:	1ad3      	subs	r3, r2, r3
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d80a      	bhi.n	800f938 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f922:	4b0f      	ldr	r3, [pc, #60]	; (800f960 <tcp_kill_prio+0x98>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	6a1b      	ldr	r3, [r3, #32]
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	7d5b      	ldrb	r3, [r3, #21]
 800f936:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	617b      	str	r3, [r7, #20]
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d1dc      	bne.n	800f8fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d004      	beq.n	800f954 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f94a:	6938      	ldr	r0, [r7, #16]
 800f94c:	f7ff fa56 	bl	800edfc <tcp_abort>
 800f950:	e000      	b.n	800f954 <tcp_kill_prio+0x8c>
    return;
 800f952:	bf00      	nop
  }
}
 800f954:	3718      	adds	r7, #24
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	20007118 	.word	0x20007118
 800f960:	2000711c 	.word	0x2000711c

0800f964 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b086      	sub	sp, #24
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4603      	mov	r3, r0
 800f96c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f96e:	79fb      	ldrb	r3, [r7, #7]
 800f970:	2b08      	cmp	r3, #8
 800f972:	d009      	beq.n	800f988 <tcp_kill_state+0x24>
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	2b09      	cmp	r3, #9
 800f978:	d006      	beq.n	800f988 <tcp_kill_state+0x24>
 800f97a:	4b1a      	ldr	r3, [pc, #104]	; (800f9e4 <tcp_kill_state+0x80>)
 800f97c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f980:	4919      	ldr	r1, [pc, #100]	; (800f9e8 <tcp_kill_state+0x84>)
 800f982:	481a      	ldr	r0, [pc, #104]	; (800f9ec <tcp_kill_state+0x88>)
 800f984:	f008 fa10 	bl	8017da8 <iprintf>

  inactivity = 0;
 800f988:	2300      	movs	r3, #0
 800f98a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f98c:	2300      	movs	r3, #0
 800f98e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f990:	4b17      	ldr	r3, [pc, #92]	; (800f9f0 <tcp_kill_state+0x8c>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	617b      	str	r3, [r7, #20]
 800f996:	e017      	b.n	800f9c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	7d1b      	ldrb	r3, [r3, #20]
 800f99c:	79fa      	ldrb	r2, [r7, #7]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d10f      	bne.n	800f9c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f9a2:	4b14      	ldr	r3, [pc, #80]	; (800f9f4 <tcp_kill_state+0x90>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	6a1b      	ldr	r3, [r3, #32]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d807      	bhi.n	800f9c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f9b2:	4b10      	ldr	r3, [pc, #64]	; (800f9f4 <tcp_kill_state+0x90>)
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	617b      	str	r3, [r7, #20]
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1e4      	bne.n	800f998 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d003      	beq.n	800f9dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f9d4:	2100      	movs	r1, #0
 800f9d6:	6938      	ldr	r0, [r7, #16]
 800f9d8:	f7ff f952 	bl	800ec80 <tcp_abandon>
  }
}
 800f9dc:	bf00      	nop
 800f9de:	3718      	adds	r7, #24
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	0801fc1c 	.word	0x0801fc1c
 800f9e8:	080201a8 	.word	0x080201a8
 800f9ec:	0801fc60 	.word	0x0801fc60
 800f9f0:	20007118 	.word	0x20007118
 800f9f4:	2000711c 	.word	0x2000711c

0800f9f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fa02:	2300      	movs	r3, #0
 800fa04:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa06:	4b12      	ldr	r3, [pc, #72]	; (800fa50 <tcp_kill_timewait+0x58>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	60fb      	str	r3, [r7, #12]
 800fa0c:	e012      	b.n	800fa34 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fa0e:	4b11      	ldr	r3, [pc, #68]	; (800fa54 <tcp_kill_timewait+0x5c>)
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6a1b      	ldr	r3, [r3, #32]
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d807      	bhi.n	800fa2e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fa1e:	4b0d      	ldr	r3, [pc, #52]	; (800fa54 <tcp_kill_timewait+0x5c>)
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	6a1b      	ldr	r3, [r3, #32]
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	60fb      	str	r3, [r7, #12]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1e9      	bne.n	800fa0e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fa40:	68b8      	ldr	r0, [r7, #8]
 800fa42:	f7ff f9db 	bl	800edfc <tcp_abort>
  }
}
 800fa46:	bf00      	nop
 800fa48:	3710      	adds	r7, #16
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	20007128 	.word	0x20007128
 800fa54:	2000711c 	.word	0x2000711c

0800fa58 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fa5e:	4b10      	ldr	r3, [pc, #64]	; (800faa0 <tcp_handle_closepend+0x48>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fa64:	e014      	b.n	800fa90 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	8b5b      	ldrh	r3, [r3, #26]
 800fa70:	f003 0308 	and.w	r3, r3, #8
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d009      	beq.n	800fa8c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	8b5b      	ldrh	r3, [r3, #26]
 800fa7c:	f023 0308 	bic.w	r3, r3, #8
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7ff f864 	bl	800eb54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1e7      	bne.n	800fa66 <tcp_handle_closepend+0xe>
  }
}
 800fa96:	bf00      	nop
 800fa98:	bf00      	nop
 800fa9a:	3708      	adds	r7, #8
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	20007118 	.word	0x20007118

0800faa4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b084      	sub	sp, #16
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	4603      	mov	r3, r0
 800faac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800faae:	2001      	movs	r0, #1
 800fab0:	f7fd fdde 	bl	800d670 <memp_malloc>
 800fab4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d126      	bne.n	800fb0a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fabc:	f7ff ffcc 	bl	800fa58 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fac0:	f7ff ff9a 	bl	800f9f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fac4:	2001      	movs	r0, #1
 800fac6:	f7fd fdd3 	bl	800d670 <memp_malloc>
 800faca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d11b      	bne.n	800fb0a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fad2:	2009      	movs	r0, #9
 800fad4:	f7ff ff46 	bl	800f964 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fad8:	2001      	movs	r0, #1
 800fada:	f7fd fdc9 	bl	800d670 <memp_malloc>
 800fade:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d111      	bne.n	800fb0a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fae6:	2008      	movs	r0, #8
 800fae8:	f7ff ff3c 	bl	800f964 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800faec:	2001      	movs	r0, #1
 800faee:	f7fd fdbf 	bl	800d670 <memp_malloc>
 800faf2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d107      	bne.n	800fb0a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fafa:	79fb      	ldrb	r3, [r7, #7]
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7ff fee3 	bl	800f8c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fb02:	2001      	movs	r0, #1
 800fb04:	f7fd fdb4 	bl	800d670 <memp_malloc>
 800fb08:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d03f      	beq.n	800fb90 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fb10:	229c      	movs	r2, #156	; 0x9c
 800fb12:	2100      	movs	r1, #0
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f007 fac5 	bl	80170a4 <memset>
    pcb->prio = prio;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	79fa      	ldrb	r2, [r7, #7]
 800fb1e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fb26:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fb30:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	22ff      	movs	r2, #255	; 0xff
 800fb3e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fb46:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2206      	movs	r2, #6
 800fb4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2206      	movs	r2, #6
 800fb54:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb5c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	2201      	movs	r2, #1
 800fb62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fb66:	4b0d      	ldr	r3, [pc, #52]	; (800fb9c <tcp_alloc+0xf8>)
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fb6e:	4b0c      	ldr	r3, [pc, #48]	; (800fba0 <tcp_alloc+0xfc>)
 800fb70:	781a      	ldrb	r2, [r3, #0]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fb7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	4a08      	ldr	r2, [pc, #32]	; (800fba4 <tcp_alloc+0x100>)
 800fb84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	4a07      	ldr	r2, [pc, #28]	; (800fba8 <tcp_alloc+0x104>)
 800fb8c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fb90:	68fb      	ldr	r3, [r7, #12]
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	bf00      	nop
 800fb9c:	2000711c 	.word	0x2000711c
 800fba0:	20000452 	.word	0x20000452
 800fba4:	0800f85d 	.word	0x0800f85d
 800fba8:	006ddd00 	.word	0x006ddd00

0800fbac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d107      	bne.n	800fbca <tcp_pcb_purge+0x1e>
 800fbba:	4b21      	ldr	r3, [pc, #132]	; (800fc40 <tcp_pcb_purge+0x94>)
 800fbbc:	f640 0251 	movw	r2, #2129	; 0x851
 800fbc0:	4920      	ldr	r1, [pc, #128]	; (800fc44 <tcp_pcb_purge+0x98>)
 800fbc2:	4821      	ldr	r0, [pc, #132]	; (800fc48 <tcp_pcb_purge+0x9c>)
 800fbc4:	f008 f8f0 	bl	8017da8 <iprintf>
 800fbc8:	e037      	b.n	800fc3a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	7d1b      	ldrb	r3, [r3, #20]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d033      	beq.n	800fc3a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fbd6:	2b0a      	cmp	r3, #10
 800fbd8:	d02f      	beq.n	800fc3a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d02b      	beq.n	800fc3a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d007      	beq.n	800fbfa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe fb7c 	bl	800e2ec <pbuf_free>
      pcb->refused_data = NULL;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d002      	beq.n	800fc08 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 f986 	bl	800ff14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc0e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff fdc7 	bl	800f7a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7ff fdc2 	bl	800f7a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2200      	movs	r2, #0
 800fc28:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	0801fc1c 	.word	0x0801fc1c
 800fc44:	08020268 	.word	0x08020268
 800fc48:	0801fc60 	.word	0x0801fc60

0800fc4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d106      	bne.n	800fc6a <tcp_pcb_remove+0x1e>
 800fc5c:	4b3e      	ldr	r3, [pc, #248]	; (800fd58 <tcp_pcb_remove+0x10c>)
 800fc5e:	f640 0283 	movw	r2, #2179	; 0x883
 800fc62:	493e      	ldr	r1, [pc, #248]	; (800fd5c <tcp_pcb_remove+0x110>)
 800fc64:	483e      	ldr	r0, [pc, #248]	; (800fd60 <tcp_pcb_remove+0x114>)
 800fc66:	f008 f89f 	bl	8017da8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <tcp_pcb_remove+0x32>
 800fc70:	4b39      	ldr	r3, [pc, #228]	; (800fd58 <tcp_pcb_remove+0x10c>)
 800fc72:	f640 0284 	movw	r2, #2180	; 0x884
 800fc76:	493b      	ldr	r1, [pc, #236]	; (800fd64 <tcp_pcb_remove+0x118>)
 800fc78:	4839      	ldr	r0, [pc, #228]	; (800fd60 <tcp_pcb_remove+0x114>)
 800fc7a:	f008 f895 	bl	8017da8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	683a      	ldr	r2, [r7, #0]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d105      	bne.n	800fc94 <tcp_pcb_remove+0x48>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	68da      	ldr	r2, [r3, #12]
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	601a      	str	r2, [r3, #0]
 800fc92:	e013      	b.n	800fcbc <tcp_pcb_remove+0x70>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	60fb      	str	r3, [r7, #12]
 800fc9a:	e00c      	b.n	800fcb6 <tcp_pcb_remove+0x6a>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	68db      	ldr	r3, [r3, #12]
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d104      	bne.n	800fcb0 <tcp_pcb_remove+0x64>
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	68da      	ldr	r2, [r3, #12]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	60da      	str	r2, [r3, #12]
 800fcae:	e005      	b.n	800fcbc <tcp_pcb_remove+0x70>
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	68db      	ldr	r3, [r3, #12]
 800fcb4:	60fb      	str	r3, [r7, #12]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d1ef      	bne.n	800fc9c <tcp_pcb_remove+0x50>
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fcc2:	6838      	ldr	r0, [r7, #0]
 800fcc4:	f7ff ff72 	bl	800fbac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	7d1b      	ldrb	r3, [r3, #20]
 800fccc:	2b0a      	cmp	r3, #10
 800fcce:	d013      	beq.n	800fcf8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	d00f      	beq.n	800fcf8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	8b5b      	ldrh	r3, [r3, #26]
 800fcdc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d009      	beq.n	800fcf8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	8b5b      	ldrh	r3, [r3, #26]
 800fce8:	f043 0302 	orr.w	r3, r3, #2
 800fcec:	b29a      	uxth	r2, r3
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fcf2:	6838      	ldr	r0, [r7, #0]
 800fcf4:	f002 ff6a 	bl	8012bcc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	7d1b      	ldrb	r3, [r3, #20]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d020      	beq.n	800fd42 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d006      	beq.n	800fd16 <tcp_pcb_remove+0xca>
 800fd08:	4b13      	ldr	r3, [pc, #76]	; (800fd58 <tcp_pcb_remove+0x10c>)
 800fd0a:	f640 0293 	movw	r2, #2195	; 0x893
 800fd0e:	4916      	ldr	r1, [pc, #88]	; (800fd68 <tcp_pcb_remove+0x11c>)
 800fd10:	4813      	ldr	r0, [pc, #76]	; (800fd60 <tcp_pcb_remove+0x114>)
 800fd12:	f008 f849 	bl	8017da8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d006      	beq.n	800fd2c <tcp_pcb_remove+0xe0>
 800fd1e:	4b0e      	ldr	r3, [pc, #56]	; (800fd58 <tcp_pcb_remove+0x10c>)
 800fd20:	f640 0294 	movw	r2, #2196	; 0x894
 800fd24:	4911      	ldr	r1, [pc, #68]	; (800fd6c <tcp_pcb_remove+0x120>)
 800fd26:	480e      	ldr	r0, [pc, #56]	; (800fd60 <tcp_pcb_remove+0x114>)
 800fd28:	f008 f83e 	bl	8017da8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d006      	beq.n	800fd42 <tcp_pcb_remove+0xf6>
 800fd34:	4b08      	ldr	r3, [pc, #32]	; (800fd58 <tcp_pcb_remove+0x10c>)
 800fd36:	f640 0296 	movw	r2, #2198	; 0x896
 800fd3a:	490d      	ldr	r1, [pc, #52]	; (800fd70 <tcp_pcb_remove+0x124>)
 800fd3c:	4808      	ldr	r0, [pc, #32]	; (800fd60 <tcp_pcb_remove+0x114>)
 800fd3e:	f008 f833 	bl	8017da8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	2200      	movs	r2, #0
 800fd46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fd4e:	bf00      	nop
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	0801fc1c 	.word	0x0801fc1c
 800fd5c:	08020284 	.word	0x08020284
 800fd60:	0801fc60 	.word	0x0801fc60
 800fd64:	080202a0 	.word	0x080202a0
 800fd68:	080202c0 	.word	0x080202c0
 800fd6c:	080202d8 	.word	0x080202d8
 800fd70:	080202f4 	.word	0x080202f4

0800fd74 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <tcp_next_iss+0x1c>
 800fd82:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <tcp_next_iss+0x38>)
 800fd84:	f640 02af 	movw	r2, #2223	; 0x8af
 800fd88:	4909      	ldr	r1, [pc, #36]	; (800fdb0 <tcp_next_iss+0x3c>)
 800fd8a:	480a      	ldr	r0, [pc, #40]	; (800fdb4 <tcp_next_iss+0x40>)
 800fd8c:	f008 f80c 	bl	8017da8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fd90:	4b09      	ldr	r3, [pc, #36]	; (800fdb8 <tcp_next_iss+0x44>)
 800fd92:	681a      	ldr	r2, [r3, #0]
 800fd94:	4b09      	ldr	r3, [pc, #36]	; (800fdbc <tcp_next_iss+0x48>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4413      	add	r3, r2
 800fd9a:	4a07      	ldr	r2, [pc, #28]	; (800fdb8 <tcp_next_iss+0x44>)
 800fd9c:	6013      	str	r3, [r2, #0]
  return iss;
 800fd9e:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <tcp_next_iss+0x44>)
 800fda0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	0801fc1c 	.word	0x0801fc1c
 800fdb0:	0802030c 	.word	0x0802030c
 800fdb4:	0801fc60 	.word	0x0801fc60
 800fdb8:	20000128 	.word	0x20000128
 800fdbc:	2000711c 	.word	0x2000711c

0800fdc0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d106      	bne.n	800fde2 <tcp_eff_send_mss_netif+0x22>
 800fdd4:	4b14      	ldr	r3, [pc, #80]	; (800fe28 <tcp_eff_send_mss_netif+0x68>)
 800fdd6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fdda:	4914      	ldr	r1, [pc, #80]	; (800fe2c <tcp_eff_send_mss_netif+0x6c>)
 800fddc:	4814      	ldr	r0, [pc, #80]	; (800fe30 <tcp_eff_send_mss_netif+0x70>)
 800fdde:	f007 ffe3 	bl	8017da8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d101      	bne.n	800fdec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fde8:	89fb      	ldrh	r3, [r7, #14]
 800fdea:	e019      	b.n	800fe20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fdf0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fdf2:	8afb      	ldrh	r3, [r7, #22]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d012      	beq.n	800fe1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fdf8:	2328      	movs	r3, #40	; 0x28
 800fdfa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fdfc:	8afa      	ldrh	r2, [r7, #22]
 800fdfe:	8abb      	ldrh	r3, [r7, #20]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d904      	bls.n	800fe0e <tcp_eff_send_mss_netif+0x4e>
 800fe04:	8afa      	ldrh	r2, [r7, #22]
 800fe06:	8abb      	ldrh	r3, [r7, #20]
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	e000      	b.n	800fe10 <tcp_eff_send_mss_netif+0x50>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fe12:	8a7a      	ldrh	r2, [r7, #18]
 800fe14:	89fb      	ldrh	r3, [r7, #14]
 800fe16:	4293      	cmp	r3, r2
 800fe18:	bf28      	it	cs
 800fe1a:	4613      	movcs	r3, r2
 800fe1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fe1e:	89fb      	ldrh	r3, [r7, #14]
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3718      	adds	r7, #24
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	0801fc1c 	.word	0x0801fc1c
 800fe2c:	08020328 	.word	0x08020328
 800fe30:	0801fc60 	.word	0x0801fc60

0800fe34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d119      	bne.n	800fe7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fe48:	4b10      	ldr	r3, [pc, #64]	; (800fe8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fe4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fe4e:	4910      	ldr	r1, [pc, #64]	; (800fe90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fe50:	4810      	ldr	r0, [pc, #64]	; (800fe94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fe52:	f007 ffa9 	bl	8017da8 <iprintf>

  while (pcb != NULL) {
 800fe56:	e011      	b.n	800fe7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d108      	bne.n	800fe76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f7fe ffc6 	bl	800edfc <tcp_abort>
      pcb = next;
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	60fb      	str	r3, [r7, #12]
 800fe74:	e002      	b.n	800fe7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1ea      	bne.n	800fe58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fe82:	bf00      	nop
 800fe84:	bf00      	nop
 800fe86:	3710      	adds	r7, #16
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	0801fc1c 	.word	0x0801fc1c
 800fe90:	08020350 	.word	0x08020350
 800fe94:	0801fc60 	.word	0x0801fc60

0800fe98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d02a      	beq.n	800fefe <tcp_netif_ip_addr_changed+0x66>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d026      	beq.n	800fefe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800feb0:	4b15      	ldr	r3, [pc, #84]	; (800ff08 <tcp_netif_ip_addr_changed+0x70>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4619      	mov	r1, r3
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f7ff ffbc 	bl	800fe34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800febc:	4b13      	ldr	r3, [pc, #76]	; (800ff0c <tcp_netif_ip_addr_changed+0x74>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4619      	mov	r1, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7ff ffb6 	bl	800fe34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d017      	beq.n	800fefe <tcp_netif_ip_addr_changed+0x66>
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d013      	beq.n	800fefe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fed6:	4b0e      	ldr	r3, [pc, #56]	; (800ff10 <tcp_netif_ip_addr_changed+0x78>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	60fb      	str	r3, [r7, #12]
 800fedc:	e00c      	b.n	800fef8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d103      	bne.n	800fef2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	60fb      	str	r3, [r7, #12]
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1ef      	bne.n	800fede <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fefe:	bf00      	nop
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	20007118 	.word	0x20007118
 800ff0c:	20007124 	.word	0x20007124
 800ff10:	20007120 	.word	0x20007120

0800ff14 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d007      	beq.n	800ff34 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7ff fc3d 	bl	800f7a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ff34:	bf00      	nop
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ff3c:	b590      	push	{r4, r7, lr}
 800ff3e:	b08d      	sub	sp, #52	; 0x34
 800ff40:	af04      	add	r7, sp, #16
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d105      	bne.n	800ff58 <tcp_input+0x1c>
 800ff4c:	4b9b      	ldr	r3, [pc, #620]	; (80101bc <tcp_input+0x280>)
 800ff4e:	2283      	movs	r2, #131	; 0x83
 800ff50:	499b      	ldr	r1, [pc, #620]	; (80101c0 <tcp_input+0x284>)
 800ff52:	489c      	ldr	r0, [pc, #624]	; (80101c4 <tcp_input+0x288>)
 800ff54:	f007 ff28 	bl	8017da8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	4a9a      	ldr	r2, [pc, #616]	; (80101c8 <tcp_input+0x28c>)
 800ff5e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	895b      	ldrh	r3, [r3, #10]
 800ff64:	2b13      	cmp	r3, #19
 800ff66:	f240 83c4 	bls.w	80106f2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ff6a:	4b98      	ldr	r3, [pc, #608]	; (80101cc <tcp_input+0x290>)
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	4a97      	ldr	r2, [pc, #604]	; (80101cc <tcp_input+0x290>)
 800ff70:	6812      	ldr	r2, [r2, #0]
 800ff72:	4611      	mov	r1, r2
 800ff74:	4618      	mov	r0, r3
 800ff76:	f005 fbd1 	bl	801571c <ip4_addr_isbroadcast_u32>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f040 83ba 	bne.w	80106f6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ff82:	4b92      	ldr	r3, [pc, #584]	; (80101cc <tcp_input+0x290>)
 800ff84:	695b      	ldr	r3, [r3, #20]
 800ff86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ff8a:	2be0      	cmp	r3, #224	; 0xe0
 800ff8c:	f000 83b3 	beq.w	80106f6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ff90:	4b8d      	ldr	r3, [pc, #564]	; (80101c8 <tcp_input+0x28c>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	899b      	ldrh	r3, [r3, #12]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fc ff14 	bl	800cdc6 <lwip_htons>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	0b1b      	lsrs	r3, r3, #12
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ffaa:	7cbb      	ldrb	r3, [r7, #18]
 800ffac:	2b13      	cmp	r3, #19
 800ffae:	f240 83a4 	bls.w	80106fa <tcp_input+0x7be>
 800ffb2:	7cbb      	ldrb	r3, [r7, #18]
 800ffb4:	b29a      	uxth	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	891b      	ldrh	r3, [r3, #8]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	f200 839d 	bhi.w	80106fa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ffc0:	7cbb      	ldrb	r3, [r7, #18]
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	3b14      	subs	r3, #20
 800ffc6:	b29a      	uxth	r2, r3
 800ffc8:	4b81      	ldr	r3, [pc, #516]	; (80101d0 <tcp_input+0x294>)
 800ffca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ffcc:	4b81      	ldr	r3, [pc, #516]	; (80101d4 <tcp_input+0x298>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	895a      	ldrh	r2, [r3, #10]
 800ffd6:	7cbb      	ldrb	r3, [r7, #18]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d309      	bcc.n	800fff2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ffde:	4b7c      	ldr	r3, [pc, #496]	; (80101d0 <tcp_input+0x294>)
 800ffe0:	881a      	ldrh	r2, [r3, #0]
 800ffe2:	4b7d      	ldr	r3, [pc, #500]	; (80101d8 <tcp_input+0x29c>)
 800ffe4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ffe6:	7cbb      	ldrb	r3, [r7, #18]
 800ffe8:	4619      	mov	r1, r3
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f7fe f8f8 	bl	800e1e0 <pbuf_remove_header>
 800fff0:	e04e      	b.n	8010090 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d105      	bne.n	8010006 <tcp_input+0xca>
 800fffa:	4b70      	ldr	r3, [pc, #448]	; (80101bc <tcp_input+0x280>)
 800fffc:	22c2      	movs	r2, #194	; 0xc2
 800fffe:	4977      	ldr	r1, [pc, #476]	; (80101dc <tcp_input+0x2a0>)
 8010000:	4870      	ldr	r0, [pc, #448]	; (80101c4 <tcp_input+0x288>)
 8010002:	f007 fed1 	bl	8017da8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010006:	2114      	movs	r1, #20
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7fe f8e9 	bl	800e1e0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	895a      	ldrh	r2, [r3, #10]
 8010012:	4b71      	ldr	r3, [pc, #452]	; (80101d8 <tcp_input+0x29c>)
 8010014:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010016:	4b6e      	ldr	r3, [pc, #440]	; (80101d0 <tcp_input+0x294>)
 8010018:	881a      	ldrh	r2, [r3, #0]
 801001a:	4b6f      	ldr	r3, [pc, #444]	; (80101d8 <tcp_input+0x29c>)
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	1ad3      	subs	r3, r2, r3
 8010020:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010022:	4b6d      	ldr	r3, [pc, #436]	; (80101d8 <tcp_input+0x29c>)
 8010024:	881b      	ldrh	r3, [r3, #0]
 8010026:	4619      	mov	r1, r3
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7fe f8d9 	bl	800e1e0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	895b      	ldrh	r3, [r3, #10]
 8010034:	8a3a      	ldrh	r2, [r7, #16]
 8010036:	429a      	cmp	r2, r3
 8010038:	f200 8361 	bhi.w	80106fe <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	4a64      	ldr	r2, [pc, #400]	; (80101d4 <tcp_input+0x298>)
 8010044:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	8a3a      	ldrh	r2, [r7, #16]
 801004c:	4611      	mov	r1, r2
 801004e:	4618      	mov	r0, r3
 8010050:	f7fe f8c6 	bl	800e1e0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	891a      	ldrh	r2, [r3, #8]
 8010058:	8a3b      	ldrh	r3, [r7, #16]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	b29a      	uxth	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	895b      	ldrh	r3, [r3, #10]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d005      	beq.n	8010076 <tcp_input+0x13a>
 801006a:	4b54      	ldr	r3, [pc, #336]	; (80101bc <tcp_input+0x280>)
 801006c:	22df      	movs	r2, #223	; 0xdf
 801006e:	495c      	ldr	r1, [pc, #368]	; (80101e0 <tcp_input+0x2a4>)
 8010070:	4854      	ldr	r0, [pc, #336]	; (80101c4 <tcp_input+0x288>)
 8010072:	f007 fe99 	bl	8017da8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	891a      	ldrh	r2, [r3, #8]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	891b      	ldrh	r3, [r3, #8]
 8010080:	429a      	cmp	r2, r3
 8010082:	d005      	beq.n	8010090 <tcp_input+0x154>
 8010084:	4b4d      	ldr	r3, [pc, #308]	; (80101bc <tcp_input+0x280>)
 8010086:	22e0      	movs	r2, #224	; 0xe0
 8010088:	4956      	ldr	r1, [pc, #344]	; (80101e4 <tcp_input+0x2a8>)
 801008a:	484e      	ldr	r0, [pc, #312]	; (80101c4 <tcp_input+0x288>)
 801008c:	f007 fe8c 	bl	8017da8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010090:	4b4d      	ldr	r3, [pc, #308]	; (80101c8 <tcp_input+0x28c>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	b29b      	uxth	r3, r3
 8010098:	4a4b      	ldr	r2, [pc, #300]	; (80101c8 <tcp_input+0x28c>)
 801009a:	6814      	ldr	r4, [r2, #0]
 801009c:	4618      	mov	r0, r3
 801009e:	f7fc fe92 	bl	800cdc6 <lwip_htons>
 80100a2:	4603      	mov	r3, r0
 80100a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80100a6:	4b48      	ldr	r3, [pc, #288]	; (80101c8 <tcp_input+0x28c>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	885b      	ldrh	r3, [r3, #2]
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	4a46      	ldr	r2, [pc, #280]	; (80101c8 <tcp_input+0x28c>)
 80100b0:	6814      	ldr	r4, [r2, #0]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fc fe87 	bl	800cdc6 <lwip_htons>
 80100b8:	4603      	mov	r3, r0
 80100ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80100bc:	4b42      	ldr	r3, [pc, #264]	; (80101c8 <tcp_input+0x28c>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	4a41      	ldr	r2, [pc, #260]	; (80101c8 <tcp_input+0x28c>)
 80100c4:	6814      	ldr	r4, [r2, #0]
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fc fe92 	bl	800cdf0 <lwip_htonl>
 80100cc:	4603      	mov	r3, r0
 80100ce:	6063      	str	r3, [r4, #4]
 80100d0:	6863      	ldr	r3, [r4, #4]
 80100d2:	4a45      	ldr	r2, [pc, #276]	; (80101e8 <tcp_input+0x2ac>)
 80100d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80100d6:	4b3c      	ldr	r3, [pc, #240]	; (80101c8 <tcp_input+0x28c>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	4a3a      	ldr	r2, [pc, #232]	; (80101c8 <tcp_input+0x28c>)
 80100de:	6814      	ldr	r4, [r2, #0]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fc fe85 	bl	800cdf0 <lwip_htonl>
 80100e6:	4603      	mov	r3, r0
 80100e8:	60a3      	str	r3, [r4, #8]
 80100ea:	68a3      	ldr	r3, [r4, #8]
 80100ec:	4a3f      	ldr	r2, [pc, #252]	; (80101ec <tcp_input+0x2b0>)
 80100ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80100f0:	4b35      	ldr	r3, [pc, #212]	; (80101c8 <tcp_input+0x28c>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	89db      	ldrh	r3, [r3, #14]
 80100f6:	b29b      	uxth	r3, r3
 80100f8:	4a33      	ldr	r2, [pc, #204]	; (80101c8 <tcp_input+0x28c>)
 80100fa:	6814      	ldr	r4, [r2, #0]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fc fe62 	bl	800cdc6 <lwip_htons>
 8010102:	4603      	mov	r3, r0
 8010104:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010106:	4b30      	ldr	r3, [pc, #192]	; (80101c8 <tcp_input+0x28c>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	899b      	ldrh	r3, [r3, #12]
 801010c:	b29b      	uxth	r3, r3
 801010e:	4618      	mov	r0, r3
 8010110:	f7fc fe59 	bl	800cdc6 <lwip_htons>
 8010114:	4603      	mov	r3, r0
 8010116:	b2db      	uxtb	r3, r3
 8010118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801011c:	b2da      	uxtb	r2, r3
 801011e:	4b34      	ldr	r3, [pc, #208]	; (80101f0 <tcp_input+0x2b4>)
 8010120:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	891a      	ldrh	r2, [r3, #8]
 8010126:	4b33      	ldr	r3, [pc, #204]	; (80101f4 <tcp_input+0x2b8>)
 8010128:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801012a:	4b31      	ldr	r3, [pc, #196]	; (80101f0 <tcp_input+0x2b4>)
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	f003 0303 	and.w	r3, r3, #3
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00c      	beq.n	8010150 <tcp_input+0x214>
    tcplen++;
 8010136:	4b2f      	ldr	r3, [pc, #188]	; (80101f4 <tcp_input+0x2b8>)
 8010138:	881b      	ldrh	r3, [r3, #0]
 801013a:	3301      	adds	r3, #1
 801013c:	b29a      	uxth	r2, r3
 801013e:	4b2d      	ldr	r3, [pc, #180]	; (80101f4 <tcp_input+0x2b8>)
 8010140:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	891a      	ldrh	r2, [r3, #8]
 8010146:	4b2b      	ldr	r3, [pc, #172]	; (80101f4 <tcp_input+0x2b8>)
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	429a      	cmp	r2, r3
 801014c:	f200 82d9 	bhi.w	8010702 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010150:	2300      	movs	r3, #0
 8010152:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010154:	4b28      	ldr	r3, [pc, #160]	; (80101f8 <tcp_input+0x2bc>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	61fb      	str	r3, [r7, #28]
 801015a:	e09d      	b.n	8010298 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	7d1b      	ldrb	r3, [r3, #20]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d105      	bne.n	8010170 <tcp_input+0x234>
 8010164:	4b15      	ldr	r3, [pc, #84]	; (80101bc <tcp_input+0x280>)
 8010166:	22fb      	movs	r2, #251	; 0xfb
 8010168:	4924      	ldr	r1, [pc, #144]	; (80101fc <tcp_input+0x2c0>)
 801016a:	4816      	ldr	r0, [pc, #88]	; (80101c4 <tcp_input+0x288>)
 801016c:	f007 fe1c 	bl	8017da8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	7d1b      	ldrb	r3, [r3, #20]
 8010174:	2b0a      	cmp	r3, #10
 8010176:	d105      	bne.n	8010184 <tcp_input+0x248>
 8010178:	4b10      	ldr	r3, [pc, #64]	; (80101bc <tcp_input+0x280>)
 801017a:	22fc      	movs	r2, #252	; 0xfc
 801017c:	4920      	ldr	r1, [pc, #128]	; (8010200 <tcp_input+0x2c4>)
 801017e:	4811      	ldr	r0, [pc, #68]	; (80101c4 <tcp_input+0x288>)
 8010180:	f007 fe12 	bl	8017da8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	7d1b      	ldrb	r3, [r3, #20]
 8010188:	2b01      	cmp	r3, #1
 801018a:	d105      	bne.n	8010198 <tcp_input+0x25c>
 801018c:	4b0b      	ldr	r3, [pc, #44]	; (80101bc <tcp_input+0x280>)
 801018e:	22fd      	movs	r2, #253	; 0xfd
 8010190:	491c      	ldr	r1, [pc, #112]	; (8010204 <tcp_input+0x2c8>)
 8010192:	480c      	ldr	r0, [pc, #48]	; (80101c4 <tcp_input+0x288>)
 8010194:	f007 fe08 	bl	8017da8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	7a1b      	ldrb	r3, [r3, #8]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d033      	beq.n	8010208 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101a0:	69fb      	ldr	r3, [r7, #28]
 80101a2:	7a1a      	ldrb	r2, [r3, #8]
 80101a4:	4b09      	ldr	r3, [pc, #36]	; (80101cc <tcp_input+0x290>)
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101ac:	3301      	adds	r3, #1
 80101ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d029      	beq.n	8010208 <tcp_input+0x2cc>
      prev = pcb;
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	61bb      	str	r3, [r7, #24]
      continue;
 80101b8:	e06b      	b.n	8010292 <tcp_input+0x356>
 80101ba:	bf00      	nop
 80101bc:	08020384 	.word	0x08020384
 80101c0:	080203b8 	.word	0x080203b8
 80101c4:	080203d0 	.word	0x080203d0
 80101c8:	20000464 	.word	0x20000464
 80101cc:	20003bd4 	.word	0x20003bd4
 80101d0:	20000468 	.word	0x20000468
 80101d4:	2000046c 	.word	0x2000046c
 80101d8:	2000046a 	.word	0x2000046a
 80101dc:	080203f8 	.word	0x080203f8
 80101e0:	08020408 	.word	0x08020408
 80101e4:	08020414 	.word	0x08020414
 80101e8:	20000474 	.word	0x20000474
 80101ec:	20000478 	.word	0x20000478
 80101f0:	20000480 	.word	0x20000480
 80101f4:	2000047e 	.word	0x2000047e
 80101f8:	20007118 	.word	0x20007118
 80101fc:	08020434 	.word	0x08020434
 8010200:	0802045c 	.word	0x0802045c
 8010204:	08020488 	.word	0x08020488
    }

    if (pcb->remote_port == tcphdr->src &&
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	8b1a      	ldrh	r2, [r3, #24]
 801020c:	4b94      	ldr	r3, [pc, #592]	; (8010460 <tcp_input+0x524>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	881b      	ldrh	r3, [r3, #0]
 8010212:	b29b      	uxth	r3, r3
 8010214:	429a      	cmp	r2, r3
 8010216:	d13a      	bne.n	801028e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	8ada      	ldrh	r2, [r3, #22]
 801021c:	4b90      	ldr	r3, [pc, #576]	; (8010460 <tcp_input+0x524>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	885b      	ldrh	r3, [r3, #2]
 8010222:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010224:	429a      	cmp	r2, r3
 8010226:	d132      	bne.n	801028e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	685a      	ldr	r2, [r3, #4]
 801022c:	4b8d      	ldr	r3, [pc, #564]	; (8010464 <tcp_input+0x528>)
 801022e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010230:	429a      	cmp	r2, r3
 8010232:	d12c      	bne.n	801028e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	4b8a      	ldr	r3, [pc, #552]	; (8010464 <tcp_input+0x528>)
 801023a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801023c:	429a      	cmp	r2, r3
 801023e:	d126      	bne.n	801028e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	69fa      	ldr	r2, [r7, #28]
 8010246:	429a      	cmp	r2, r3
 8010248:	d106      	bne.n	8010258 <tcp_input+0x31c>
 801024a:	4b87      	ldr	r3, [pc, #540]	; (8010468 <tcp_input+0x52c>)
 801024c:	f240 120d 	movw	r2, #269	; 0x10d
 8010250:	4986      	ldr	r1, [pc, #536]	; (801046c <tcp_input+0x530>)
 8010252:	4887      	ldr	r0, [pc, #540]	; (8010470 <tcp_input+0x534>)
 8010254:	f007 fda8 	bl	8017da8 <iprintf>
      if (prev != NULL) {
 8010258:	69bb      	ldr	r3, [r7, #24]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00a      	beq.n	8010274 <tcp_input+0x338>
        prev->next = pcb->next;
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	68da      	ldr	r2, [r3, #12]
 8010262:	69bb      	ldr	r3, [r7, #24]
 8010264:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010266:	4b83      	ldr	r3, [pc, #524]	; (8010474 <tcp_input+0x538>)
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801026e:	4a81      	ldr	r2, [pc, #516]	; (8010474 <tcp_input+0x538>)
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	69fa      	ldr	r2, [r7, #28]
 801027a:	429a      	cmp	r2, r3
 801027c:	d111      	bne.n	80102a2 <tcp_input+0x366>
 801027e:	4b7a      	ldr	r3, [pc, #488]	; (8010468 <tcp_input+0x52c>)
 8010280:	f240 1215 	movw	r2, #277	; 0x115
 8010284:	497c      	ldr	r1, [pc, #496]	; (8010478 <tcp_input+0x53c>)
 8010286:	487a      	ldr	r0, [pc, #488]	; (8010470 <tcp_input+0x534>)
 8010288:	f007 fd8e 	bl	8017da8 <iprintf>
      break;
 801028c:	e009      	b.n	80102a2 <tcp_input+0x366>
    }
    prev = pcb;
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	68db      	ldr	r3, [r3, #12]
 8010296:	61fb      	str	r3, [r7, #28]
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	2b00      	cmp	r3, #0
 801029c:	f47f af5e 	bne.w	801015c <tcp_input+0x220>
 80102a0:	e000      	b.n	80102a4 <tcp_input+0x368>
      break;
 80102a2:	bf00      	nop
  }

  if (pcb == NULL) {
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f040 8095 	bne.w	80103d6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ac:	4b73      	ldr	r3, [pc, #460]	; (801047c <tcp_input+0x540>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	61fb      	str	r3, [r7, #28]
 80102b2:	e03f      	b.n	8010334 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	7d1b      	ldrb	r3, [r3, #20]
 80102b8:	2b0a      	cmp	r3, #10
 80102ba:	d006      	beq.n	80102ca <tcp_input+0x38e>
 80102bc:	4b6a      	ldr	r3, [pc, #424]	; (8010468 <tcp_input+0x52c>)
 80102be:	f240 121f 	movw	r2, #287	; 0x11f
 80102c2:	496f      	ldr	r1, [pc, #444]	; (8010480 <tcp_input+0x544>)
 80102c4:	486a      	ldr	r0, [pc, #424]	; (8010470 <tcp_input+0x534>)
 80102c6:	f007 fd6f 	bl	8017da8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	7a1b      	ldrb	r3, [r3, #8]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d009      	beq.n	80102e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	7a1a      	ldrb	r2, [r3, #8]
 80102d6:	4b63      	ldr	r3, [pc, #396]	; (8010464 <tcp_input+0x528>)
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80102de:	3301      	adds	r3, #1
 80102e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d122      	bne.n	801032c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	8b1a      	ldrh	r2, [r3, #24]
 80102ea:	4b5d      	ldr	r3, [pc, #372]	; (8010460 <tcp_input+0x524>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	881b      	ldrh	r3, [r3, #0]
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d11b      	bne.n	801032e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	8ada      	ldrh	r2, [r3, #22]
 80102fa:	4b59      	ldr	r3, [pc, #356]	; (8010460 <tcp_input+0x524>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	885b      	ldrh	r3, [r3, #2]
 8010300:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010302:	429a      	cmp	r2, r3
 8010304:	d113      	bne.n	801032e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	685a      	ldr	r2, [r3, #4]
 801030a:	4b56      	ldr	r3, [pc, #344]	; (8010464 <tcp_input+0x528>)
 801030c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801030e:	429a      	cmp	r2, r3
 8010310:	d10d      	bne.n	801032e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	4b53      	ldr	r3, [pc, #332]	; (8010464 <tcp_input+0x528>)
 8010318:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801031a:	429a      	cmp	r2, r3
 801031c:	d107      	bne.n	801032e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801031e:	69f8      	ldr	r0, [r7, #28]
 8010320:	f000 fb54 	bl	80109cc <tcp_timewait_input>
        }
        pbuf_free(p);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7fd ffe1 	bl	800e2ec <pbuf_free>
        return;
 801032a:	e1f0      	b.n	801070e <tcp_input+0x7d2>
        continue;
 801032c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	61fb      	str	r3, [r7, #28]
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1bc      	bne.n	80102b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801033a:	2300      	movs	r3, #0
 801033c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801033e:	4b51      	ldr	r3, [pc, #324]	; (8010484 <tcp_input+0x548>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	617b      	str	r3, [r7, #20]
 8010344:	e02a      	b.n	801039c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	7a1b      	ldrb	r3, [r3, #8]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00c      	beq.n	8010368 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	7a1a      	ldrb	r2, [r3, #8]
 8010352:	4b44      	ldr	r3, [pc, #272]	; (8010464 <tcp_input+0x528>)
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801035a:	3301      	adds	r3, #1
 801035c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801035e:	429a      	cmp	r2, r3
 8010360:	d002      	beq.n	8010368 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	61bb      	str	r3, [r7, #24]
        continue;
 8010366:	e016      	b.n	8010396 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	8ada      	ldrh	r2, [r3, #22]
 801036c:	4b3c      	ldr	r3, [pc, #240]	; (8010460 <tcp_input+0x524>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	885b      	ldrh	r3, [r3, #2]
 8010372:	b29b      	uxth	r3, r3
 8010374:	429a      	cmp	r2, r3
 8010376:	d10c      	bne.n	8010392 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	4b39      	ldr	r3, [pc, #228]	; (8010464 <tcp_input+0x528>)
 801037e:	695b      	ldr	r3, [r3, #20]
 8010380:	429a      	cmp	r2, r3
 8010382:	d00f      	beq.n	80103a4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00d      	beq.n	80103a6 <tcp_input+0x46a>
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d009      	beq.n	80103a6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	617b      	str	r3, [r7, #20]
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d1d1      	bne.n	8010346 <tcp_input+0x40a>
 80103a2:	e000      	b.n	80103a6 <tcp_input+0x46a>
            break;
 80103a4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d014      	beq.n	80103d6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00a      	beq.n	80103c8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	68da      	ldr	r2, [r3, #12]
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80103ba:	4b32      	ldr	r3, [pc, #200]	; (8010484 <tcp_input+0x548>)
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80103c2:	4a30      	ldr	r2, [pc, #192]	; (8010484 <tcp_input+0x548>)
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80103c8:	6978      	ldr	r0, [r7, #20]
 80103ca:	f000 fa01 	bl	80107d0 <tcp_listen_input>
      }
      pbuf_free(p);
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f7fd ff8c 	bl	800e2ec <pbuf_free>
      return;
 80103d4:	e19b      	b.n	801070e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 8160 	beq.w	801069e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80103de:	4b2a      	ldr	r3, [pc, #168]	; (8010488 <tcp_input+0x54c>)
 80103e0:	2200      	movs	r2, #0
 80103e2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	891a      	ldrh	r2, [r3, #8]
 80103e8:	4b27      	ldr	r3, [pc, #156]	; (8010488 <tcp_input+0x54c>)
 80103ea:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80103ec:	4a26      	ldr	r2, [pc, #152]	; (8010488 <tcp_input+0x54c>)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80103f2:	4b1b      	ldr	r3, [pc, #108]	; (8010460 <tcp_input+0x524>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4a24      	ldr	r2, [pc, #144]	; (8010488 <tcp_input+0x54c>)
 80103f8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80103fa:	4b24      	ldr	r3, [pc, #144]	; (801048c <tcp_input+0x550>)
 80103fc:	2200      	movs	r2, #0
 80103fe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010400:	4b23      	ldr	r3, [pc, #140]	; (8010490 <tcp_input+0x554>)
 8010402:	2200      	movs	r2, #0
 8010404:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010406:	4b23      	ldr	r3, [pc, #140]	; (8010494 <tcp_input+0x558>)
 8010408:	2200      	movs	r2, #0
 801040a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801040c:	4b22      	ldr	r3, [pc, #136]	; (8010498 <tcp_input+0x55c>)
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	f003 0308 	and.w	r3, r3, #8
 8010414:	2b00      	cmp	r3, #0
 8010416:	d006      	beq.n	8010426 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	7b5b      	ldrb	r3, [r3, #13]
 801041c:	f043 0301 	orr.w	r3, r3, #1
 8010420:	b2da      	uxtb	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801042a:	2b00      	cmp	r3, #0
 801042c:	d038      	beq.n	80104a0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801042e:	69f8      	ldr	r0, [r7, #28]
 8010430:	f7ff f93e 	bl	800f6b0 <tcp_process_refused_data>
 8010434:	4603      	mov	r3, r0
 8010436:	f113 0f0d 	cmn.w	r3, #13
 801043a:	d007      	beq.n	801044c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010440:	2b00      	cmp	r3, #0
 8010442:	d02d      	beq.n	80104a0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010444:	4b15      	ldr	r3, [pc, #84]	; (801049c <tcp_input+0x560>)
 8010446:	881b      	ldrh	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d029      	beq.n	80104a0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010450:	2b00      	cmp	r3, #0
 8010452:	f040 8104 	bne.w	801065e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010456:	69f8      	ldr	r0, [r7, #28]
 8010458:	f003 f9be 	bl	80137d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801045c:	e0ff      	b.n	801065e <tcp_input+0x722>
 801045e:	bf00      	nop
 8010460:	20000464 	.word	0x20000464
 8010464:	20003bd4 	.word	0x20003bd4
 8010468:	08020384 	.word	0x08020384
 801046c:	080204b0 	.word	0x080204b0
 8010470:	080203d0 	.word	0x080203d0
 8010474:	20007118 	.word	0x20007118
 8010478:	080204dc 	.word	0x080204dc
 801047c:	20007128 	.word	0x20007128
 8010480:	08020508 	.word	0x08020508
 8010484:	20007120 	.word	0x20007120
 8010488:	20000454 	.word	0x20000454
 801048c:	20000484 	.word	0x20000484
 8010490:	20000481 	.word	0x20000481
 8010494:	2000047c 	.word	0x2000047c
 8010498:	20000480 	.word	0x20000480
 801049c:	2000047e 	.word	0x2000047e
      }
    }
    tcp_input_pcb = pcb;
 80104a0:	4a9c      	ldr	r2, [pc, #624]	; (8010714 <tcp_input+0x7d8>)
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80104a6:	69f8      	ldr	r0, [r7, #28]
 80104a8:	f000 fb0a 	bl	8010ac0 <tcp_process>
 80104ac:	4603      	mov	r3, r0
 80104ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80104b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104b4:	f113 0f0d 	cmn.w	r3, #13
 80104b8:	f000 80d3 	beq.w	8010662 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80104bc:	4b96      	ldr	r3, [pc, #600]	; (8010718 <tcp_input+0x7dc>)
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	f003 0308 	and.w	r3, r3, #8
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d015      	beq.n	80104f4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d008      	beq.n	80104e4 <tcp_input+0x5a8>
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104d8:	69fa      	ldr	r2, [r7, #28]
 80104da:	6912      	ldr	r2, [r2, #16]
 80104dc:	f06f 010d 	mvn.w	r1, #13
 80104e0:	4610      	mov	r0, r2
 80104e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80104e4:	69f9      	ldr	r1, [r7, #28]
 80104e6:	488d      	ldr	r0, [pc, #564]	; (801071c <tcp_input+0x7e0>)
 80104e8:	f7ff fbb0 	bl	800fc4c <tcp_pcb_remove>
        tcp_free(pcb);
 80104ec:	69f8      	ldr	r0, [r7, #28]
 80104ee:	f7fe f99d 	bl	800e82c <tcp_free>
 80104f2:	e0c1      	b.n	8010678 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80104f4:	2300      	movs	r3, #0
 80104f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80104f8:	4b89      	ldr	r3, [pc, #548]	; (8010720 <tcp_input+0x7e4>)
 80104fa:	881b      	ldrh	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d01d      	beq.n	801053c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010500:	4b87      	ldr	r3, [pc, #540]	; (8010720 <tcp_input+0x7e4>)
 8010502:	881b      	ldrh	r3, [r3, #0]
 8010504:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801050c:	2b00      	cmp	r3, #0
 801050e:	d00a      	beq.n	8010526 <tcp_input+0x5ea>
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010516:	69fa      	ldr	r2, [r7, #28]
 8010518:	6910      	ldr	r0, [r2, #16]
 801051a:	89fa      	ldrh	r2, [r7, #14]
 801051c:	69f9      	ldr	r1, [r7, #28]
 801051e:	4798      	blx	r3
 8010520:	4603      	mov	r3, r0
 8010522:	74fb      	strb	r3, [r7, #19]
 8010524:	e001      	b.n	801052a <tcp_input+0x5ee>
 8010526:	2300      	movs	r3, #0
 8010528:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801052a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801052e:	f113 0f0d 	cmn.w	r3, #13
 8010532:	f000 8098 	beq.w	8010666 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010536:	4b7a      	ldr	r3, [pc, #488]	; (8010720 <tcp_input+0x7e4>)
 8010538:	2200      	movs	r2, #0
 801053a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801053c:	69f8      	ldr	r0, [r7, #28]
 801053e:	f000 f907 	bl	8010750 <tcp_input_delayed_close>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	f040 8090 	bne.w	801066a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801054a:	4b76      	ldr	r3, [pc, #472]	; (8010724 <tcp_input+0x7e8>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d041      	beq.n	80105d6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010556:	2b00      	cmp	r3, #0
 8010558:	d006      	beq.n	8010568 <tcp_input+0x62c>
 801055a:	4b73      	ldr	r3, [pc, #460]	; (8010728 <tcp_input+0x7ec>)
 801055c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010560:	4972      	ldr	r1, [pc, #456]	; (801072c <tcp_input+0x7f0>)
 8010562:	4873      	ldr	r0, [pc, #460]	; (8010730 <tcp_input+0x7f4>)
 8010564:	f007 fc20 	bl	8017da8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	8b5b      	ldrh	r3, [r3, #26]
 801056c:	f003 0310 	and.w	r3, r3, #16
 8010570:	2b00      	cmp	r3, #0
 8010572:	d008      	beq.n	8010586 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010574:	4b6b      	ldr	r3, [pc, #428]	; (8010724 <tcp_input+0x7e8>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4618      	mov	r0, r3
 801057a:	f7fd feb7 	bl	800e2ec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801057e:	69f8      	ldr	r0, [r7, #28]
 8010580:	f7fe fc3c 	bl	800edfc <tcp_abort>
            goto aborted;
 8010584:	e078      	b.n	8010678 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801058c:	2b00      	cmp	r3, #0
 801058e:	d00c      	beq.n	80105aa <tcp_input+0x66e>
 8010590:	69fb      	ldr	r3, [r7, #28]
 8010592:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010596:	69fb      	ldr	r3, [r7, #28]
 8010598:	6918      	ldr	r0, [r3, #16]
 801059a:	4b62      	ldr	r3, [pc, #392]	; (8010724 <tcp_input+0x7e8>)
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	2300      	movs	r3, #0
 80105a0:	69f9      	ldr	r1, [r7, #28]
 80105a2:	47a0      	blx	r4
 80105a4:	4603      	mov	r3, r0
 80105a6:	74fb      	strb	r3, [r7, #19]
 80105a8:	e008      	b.n	80105bc <tcp_input+0x680>
 80105aa:	4b5e      	ldr	r3, [pc, #376]	; (8010724 <tcp_input+0x7e8>)
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	2300      	movs	r3, #0
 80105b0:	69f9      	ldr	r1, [r7, #28]
 80105b2:	2000      	movs	r0, #0
 80105b4:	f7ff f952 	bl	800f85c <tcp_recv_null>
 80105b8:	4603      	mov	r3, r0
 80105ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80105bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105c0:	f113 0f0d 	cmn.w	r3, #13
 80105c4:	d053      	beq.n	801066e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80105c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d003      	beq.n	80105d6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80105ce:	4b55      	ldr	r3, [pc, #340]	; (8010724 <tcp_input+0x7e8>)
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	69fb      	ldr	r3, [r7, #28]
 80105d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80105d6:	4b50      	ldr	r3, [pc, #320]	; (8010718 <tcp_input+0x7dc>)
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	f003 0320 	and.w	r3, r3, #32
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d030      	beq.n	8010644 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d009      	beq.n	80105fe <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80105ea:	69fb      	ldr	r3, [r7, #28]
 80105ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105ee:	7b5a      	ldrb	r2, [r3, #13]
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105f4:	f042 0220 	orr.w	r2, r2, #32
 80105f8:	b2d2      	uxtb	r2, r2
 80105fa:	735a      	strb	r2, [r3, #13]
 80105fc:	e022      	b.n	8010644 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010602:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010606:	d005      	beq.n	8010614 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801060c:	3301      	adds	r3, #1
 801060e:	b29a      	uxth	r2, r3
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00b      	beq.n	8010636 <tcp_input+0x6fa>
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010624:	69fb      	ldr	r3, [r7, #28]
 8010626:	6918      	ldr	r0, [r3, #16]
 8010628:	2300      	movs	r3, #0
 801062a:	2200      	movs	r2, #0
 801062c:	69f9      	ldr	r1, [r7, #28]
 801062e:	47a0      	blx	r4
 8010630:	4603      	mov	r3, r0
 8010632:	74fb      	strb	r3, [r7, #19]
 8010634:	e001      	b.n	801063a <tcp_input+0x6fe>
 8010636:	2300      	movs	r3, #0
 8010638:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801063a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801063e:	f113 0f0d 	cmn.w	r3, #13
 8010642:	d016      	beq.n	8010672 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010644:	4b33      	ldr	r3, [pc, #204]	; (8010714 <tcp_input+0x7d8>)
 8010646:	2200      	movs	r2, #0
 8010648:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801064a:	69f8      	ldr	r0, [r7, #28]
 801064c:	f000 f880 	bl	8010750 <tcp_input_delayed_close>
 8010650:	4603      	mov	r3, r0
 8010652:	2b00      	cmp	r3, #0
 8010654:	d10f      	bne.n	8010676 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010656:	69f8      	ldr	r0, [r7, #28]
 8010658:	f002 fab8 	bl	8012bcc <tcp_output>
 801065c:	e00c      	b.n	8010678 <tcp_input+0x73c>
        goto aborted;
 801065e:	bf00      	nop
 8010660:	e00a      	b.n	8010678 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010662:	bf00      	nop
 8010664:	e008      	b.n	8010678 <tcp_input+0x73c>
              goto aborted;
 8010666:	bf00      	nop
 8010668:	e006      	b.n	8010678 <tcp_input+0x73c>
          goto aborted;
 801066a:	bf00      	nop
 801066c:	e004      	b.n	8010678 <tcp_input+0x73c>
            goto aborted;
 801066e:	bf00      	nop
 8010670:	e002      	b.n	8010678 <tcp_input+0x73c>
              goto aborted;
 8010672:	bf00      	nop
 8010674:	e000      	b.n	8010678 <tcp_input+0x73c>
          goto aborted;
 8010676:	bf00      	nop
    tcp_input_pcb = NULL;
 8010678:	4b26      	ldr	r3, [pc, #152]	; (8010714 <tcp_input+0x7d8>)
 801067a:	2200      	movs	r2, #0
 801067c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801067e:	4b29      	ldr	r3, [pc, #164]	; (8010724 <tcp_input+0x7e8>)
 8010680:	2200      	movs	r2, #0
 8010682:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010684:	4b2b      	ldr	r3, [pc, #172]	; (8010734 <tcp_input+0x7f8>)
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d03f      	beq.n	801070c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801068c:	4b29      	ldr	r3, [pc, #164]	; (8010734 <tcp_input+0x7f8>)
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	4618      	mov	r0, r3
 8010692:	f7fd fe2b 	bl	800e2ec <pbuf_free>
      inseg.p = NULL;
 8010696:	4b27      	ldr	r3, [pc, #156]	; (8010734 <tcp_input+0x7f8>)
 8010698:	2200      	movs	r2, #0
 801069a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801069c:	e036      	b.n	801070c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801069e:	4b26      	ldr	r3, [pc, #152]	; (8010738 <tcp_input+0x7fc>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	899b      	ldrh	r3, [r3, #12]
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7fc fb8d 	bl	800cdc6 <lwip_htons>
 80106ac:	4603      	mov	r3, r0
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	f003 0304 	and.w	r3, r3, #4
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d118      	bne.n	80106ea <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106b8:	4b20      	ldr	r3, [pc, #128]	; (801073c <tcp_input+0x800>)
 80106ba:	6819      	ldr	r1, [r3, #0]
 80106bc:	4b20      	ldr	r3, [pc, #128]	; (8010740 <tcp_input+0x804>)
 80106be:	881b      	ldrh	r3, [r3, #0]
 80106c0:	461a      	mov	r2, r3
 80106c2:	4b20      	ldr	r3, [pc, #128]	; (8010744 <tcp_input+0x808>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106c8:	4b1b      	ldr	r3, [pc, #108]	; (8010738 <tcp_input+0x7fc>)
 80106ca:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106cc:	885b      	ldrh	r3, [r3, #2]
 80106ce:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106d0:	4a19      	ldr	r2, [pc, #100]	; (8010738 <tcp_input+0x7fc>)
 80106d2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106d4:	8812      	ldrh	r2, [r2, #0]
 80106d6:	b292      	uxth	r2, r2
 80106d8:	9202      	str	r2, [sp, #8]
 80106da:	9301      	str	r3, [sp, #4]
 80106dc:	4b1a      	ldr	r3, [pc, #104]	; (8010748 <tcp_input+0x80c>)
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	4b1a      	ldr	r3, [pc, #104]	; (801074c <tcp_input+0x810>)
 80106e2:	4602      	mov	r2, r0
 80106e4:	2000      	movs	r0, #0
 80106e6:	f003 f825 	bl	8013734 <tcp_rst>
    pbuf_free(p);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7fd fdfe 	bl	800e2ec <pbuf_free>
  return;
 80106f0:	e00c      	b.n	801070c <tcp_input+0x7d0>
    goto dropped;
 80106f2:	bf00      	nop
 80106f4:	e006      	b.n	8010704 <tcp_input+0x7c8>
    goto dropped;
 80106f6:	bf00      	nop
 80106f8:	e004      	b.n	8010704 <tcp_input+0x7c8>
    goto dropped;
 80106fa:	bf00      	nop
 80106fc:	e002      	b.n	8010704 <tcp_input+0x7c8>
      goto dropped;
 80106fe:	bf00      	nop
 8010700:	e000      	b.n	8010704 <tcp_input+0x7c8>
      goto dropped;
 8010702:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7fd fdf1 	bl	800e2ec <pbuf_free>
 801070a:	e000      	b.n	801070e <tcp_input+0x7d2>
  return;
 801070c:	bf00      	nop
}
 801070e:	3724      	adds	r7, #36	; 0x24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd90      	pop	{r4, r7, pc}
 8010714:	2000712c 	.word	0x2000712c
 8010718:	20000481 	.word	0x20000481
 801071c:	20007118 	.word	0x20007118
 8010720:	2000047c 	.word	0x2000047c
 8010724:	20000484 	.word	0x20000484
 8010728:	08020384 	.word	0x08020384
 801072c:	08020538 	.word	0x08020538
 8010730:	080203d0 	.word	0x080203d0
 8010734:	20000454 	.word	0x20000454
 8010738:	20000464 	.word	0x20000464
 801073c:	20000478 	.word	0x20000478
 8010740:	2000047e 	.word	0x2000047e
 8010744:	20000474 	.word	0x20000474
 8010748:	20003be4 	.word	0x20003be4
 801074c:	20003be8 	.word	0x20003be8

08010750 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d106      	bne.n	801076c <tcp_input_delayed_close+0x1c>
 801075e:	4b17      	ldr	r3, [pc, #92]	; (80107bc <tcp_input_delayed_close+0x6c>)
 8010760:	f240 225a 	movw	r2, #602	; 0x25a
 8010764:	4916      	ldr	r1, [pc, #88]	; (80107c0 <tcp_input_delayed_close+0x70>)
 8010766:	4817      	ldr	r0, [pc, #92]	; (80107c4 <tcp_input_delayed_close+0x74>)
 8010768:	f007 fb1e 	bl	8017da8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801076c:	4b16      	ldr	r3, [pc, #88]	; (80107c8 <tcp_input_delayed_close+0x78>)
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	f003 0310 	and.w	r3, r3, #16
 8010774:	2b00      	cmp	r3, #0
 8010776:	d01c      	beq.n	80107b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	8b5b      	ldrh	r3, [r3, #26]
 801077c:	f003 0310 	and.w	r3, r3, #16
 8010780:	2b00      	cmp	r3, #0
 8010782:	d10d      	bne.n	80107a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801078a:	2b00      	cmp	r3, #0
 801078c:	d008      	beq.n	80107a0 <tcp_input_delayed_close+0x50>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	6912      	ldr	r2, [r2, #16]
 8010798:	f06f 010e 	mvn.w	r1, #14
 801079c:	4610      	mov	r0, r2
 801079e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80107a0:	6879      	ldr	r1, [r7, #4]
 80107a2:	480a      	ldr	r0, [pc, #40]	; (80107cc <tcp_input_delayed_close+0x7c>)
 80107a4:	f7ff fa52 	bl	800fc4c <tcp_pcb_remove>
    tcp_free(pcb);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7fe f83f 	bl	800e82c <tcp_free>
    return 1;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e000      	b.n	80107b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80107b2:	2300      	movs	r3, #0
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	08020384 	.word	0x08020384
 80107c0:	08020554 	.word	0x08020554
 80107c4:	080203d0 	.word	0x080203d0
 80107c8:	20000481 	.word	0x20000481
 80107cc:	20007118 	.word	0x20007118

080107d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80107d0:	b590      	push	{r4, r7, lr}
 80107d2:	b08b      	sub	sp, #44	; 0x2c
 80107d4:	af04      	add	r7, sp, #16
 80107d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80107d8:	4b6f      	ldr	r3, [pc, #444]	; (8010998 <tcp_listen_input+0x1c8>)
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	f003 0304 	and.w	r3, r3, #4
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	f040 80d2 	bne.w	801098a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <tcp_listen_input+0x2a>
 80107ec:	4b6b      	ldr	r3, [pc, #428]	; (801099c <tcp_listen_input+0x1cc>)
 80107ee:	f240 2281 	movw	r2, #641	; 0x281
 80107f2:	496b      	ldr	r1, [pc, #428]	; (80109a0 <tcp_listen_input+0x1d0>)
 80107f4:	486b      	ldr	r0, [pc, #428]	; (80109a4 <tcp_listen_input+0x1d4>)
 80107f6:	f007 fad7 	bl	8017da8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80107fa:	4b67      	ldr	r3, [pc, #412]	; (8010998 <tcp_listen_input+0x1c8>)
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	f003 0310 	and.w	r3, r3, #16
 8010802:	2b00      	cmp	r3, #0
 8010804:	d019      	beq.n	801083a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010806:	4b68      	ldr	r3, [pc, #416]	; (80109a8 <tcp_listen_input+0x1d8>)
 8010808:	6819      	ldr	r1, [r3, #0]
 801080a:	4b68      	ldr	r3, [pc, #416]	; (80109ac <tcp_listen_input+0x1dc>)
 801080c:	881b      	ldrh	r3, [r3, #0]
 801080e:	461a      	mov	r2, r3
 8010810:	4b67      	ldr	r3, [pc, #412]	; (80109b0 <tcp_listen_input+0x1e0>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010816:	4b67      	ldr	r3, [pc, #412]	; (80109b4 <tcp_listen_input+0x1e4>)
 8010818:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801081a:	885b      	ldrh	r3, [r3, #2]
 801081c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801081e:	4a65      	ldr	r2, [pc, #404]	; (80109b4 <tcp_listen_input+0x1e4>)
 8010820:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010822:	8812      	ldrh	r2, [r2, #0]
 8010824:	b292      	uxth	r2, r2
 8010826:	9202      	str	r2, [sp, #8]
 8010828:	9301      	str	r3, [sp, #4]
 801082a:	4b63      	ldr	r3, [pc, #396]	; (80109b8 <tcp_listen_input+0x1e8>)
 801082c:	9300      	str	r3, [sp, #0]
 801082e:	4b63      	ldr	r3, [pc, #396]	; (80109bc <tcp_listen_input+0x1ec>)
 8010830:	4602      	mov	r2, r0
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f002 ff7e 	bl	8013734 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010838:	e0a9      	b.n	801098e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801083a:	4b57      	ldr	r3, [pc, #348]	; (8010998 <tcp_listen_input+0x1c8>)
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	f003 0302 	and.w	r3, r3, #2
 8010842:	2b00      	cmp	r3, #0
 8010844:	f000 80a3 	beq.w	801098e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	7d5b      	ldrb	r3, [r3, #21]
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff f929 	bl	800faa4 <tcp_alloc>
 8010852:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d111      	bne.n	801087e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	699b      	ldr	r3, [r3, #24]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d00a      	beq.n	8010878 <tcp_listen_input+0xa8>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	699b      	ldr	r3, [r3, #24]
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	6910      	ldr	r0, [r2, #16]
 801086a:	f04f 32ff 	mov.w	r2, #4294967295
 801086e:	2100      	movs	r1, #0
 8010870:	4798      	blx	r3
 8010872:	4603      	mov	r3, r0
 8010874:	73bb      	strb	r3, [r7, #14]
      return;
 8010876:	e08b      	b.n	8010990 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010878:	23f0      	movs	r3, #240	; 0xf0
 801087a:	73bb      	strb	r3, [r7, #14]
      return;
 801087c:	e088      	b.n	8010990 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801087e:	4b50      	ldr	r3, [pc, #320]	; (80109c0 <tcp_listen_input+0x1f0>)
 8010880:	695a      	ldr	r2, [r3, #20]
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010886:	4b4e      	ldr	r3, [pc, #312]	; (80109c0 <tcp_listen_input+0x1f0>)
 8010888:	691a      	ldr	r2, [r3, #16]
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	8ada      	ldrh	r2, [r3, #22]
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010896:	4b47      	ldr	r3, [pc, #284]	; (80109b4 <tcp_listen_input+0x1e4>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	b29a      	uxth	r2, r3
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	2203      	movs	r2, #3
 80108a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80108a8:	4b41      	ldr	r3, [pc, #260]	; (80109b0 <tcp_listen_input+0x1e0>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	1c5a      	adds	r2, r3, #1
 80108ae:	697b      	ldr	r3, [r7, #20]
 80108b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108b6:	697b      	ldr	r3, [r7, #20]
 80108b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80108ba:	6978      	ldr	r0, [r7, #20]
 80108bc:	f7ff fa5a 	bl	800fd74 <tcp_next_iss>
 80108c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	693a      	ldr	r2, [r7, #16]
 80108c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	693a      	ldr	r2, [r7, #16]
 80108cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	693a      	ldr	r2, [r7, #16]
 80108d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	693a      	ldr	r2, [r7, #16]
 80108d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80108da:	4b35      	ldr	r3, [pc, #212]	; (80109b0 <tcp_listen_input+0x1e0>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	1e5a      	subs	r2, r3, #1
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	691a      	ldr	r2, [r3, #16]
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	687a      	ldr	r2, [r7, #4]
 80108f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	7a5b      	ldrb	r3, [r3, #9]
 80108f6:	f003 030c 	and.w	r3, r3, #12
 80108fa:	b2da      	uxtb	r2, r3
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	7a1a      	ldrb	r2, [r3, #8]
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010908:	4b2e      	ldr	r3, [pc, #184]	; (80109c4 <tcp_listen_input+0x1f4>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	60da      	str	r2, [r3, #12]
 8010910:	4a2c      	ldr	r2, [pc, #176]	; (80109c4 <tcp_listen_input+0x1f4>)
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	6013      	str	r3, [r2, #0]
 8010916:	f003 f8cf 	bl	8013ab8 <tcp_timer_needed>
 801091a:	4b2b      	ldr	r3, [pc, #172]	; (80109c8 <tcp_listen_input+0x1f8>)
 801091c:	2201      	movs	r2, #1
 801091e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010920:	6978      	ldr	r0, [r7, #20]
 8010922:	f001 fd8d 	bl	8012440 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010926:	4b23      	ldr	r3, [pc, #140]	; (80109b4 <tcp_listen_input+0x1e4>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	89db      	ldrh	r3, [r3, #14]
 801092c:	b29a      	uxth	r2, r3
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	3304      	adds	r3, #4
 8010948:	4618      	mov	r0, r3
 801094a:	f004 fc51 	bl	80151f0 <ip4_route>
 801094e:	4601      	mov	r1, r0
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	3304      	adds	r3, #4
 8010954:	461a      	mov	r2, r3
 8010956:	4620      	mov	r0, r4
 8010958:	f7ff fa32 	bl	800fdc0 <tcp_eff_send_mss_netif>
 801095c:	4603      	mov	r3, r0
 801095e:	461a      	mov	r2, r3
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010964:	2112      	movs	r1, #18
 8010966:	6978      	ldr	r0, [r7, #20]
 8010968:	f002 f842 	bl	80129f0 <tcp_enqueue_flags>
 801096c:	4603      	mov	r3, r0
 801096e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d004      	beq.n	8010982 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010978:	2100      	movs	r1, #0
 801097a:	6978      	ldr	r0, [r7, #20]
 801097c:	f7fe f980 	bl	800ec80 <tcp_abandon>
      return;
 8010980:	e006      	b.n	8010990 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010982:	6978      	ldr	r0, [r7, #20]
 8010984:	f002 f922 	bl	8012bcc <tcp_output>
  return;
 8010988:	e001      	b.n	801098e <tcp_listen_input+0x1be>
    return;
 801098a:	bf00      	nop
 801098c:	e000      	b.n	8010990 <tcp_listen_input+0x1c0>
  return;
 801098e:	bf00      	nop
}
 8010990:	371c      	adds	r7, #28
 8010992:	46bd      	mov	sp, r7
 8010994:	bd90      	pop	{r4, r7, pc}
 8010996:	bf00      	nop
 8010998:	20000480 	.word	0x20000480
 801099c:	08020384 	.word	0x08020384
 80109a0:	0802057c 	.word	0x0802057c
 80109a4:	080203d0 	.word	0x080203d0
 80109a8:	20000478 	.word	0x20000478
 80109ac:	2000047e 	.word	0x2000047e
 80109b0:	20000474 	.word	0x20000474
 80109b4:	20000464 	.word	0x20000464
 80109b8:	20003be4 	.word	0x20003be4
 80109bc:	20003be8 	.word	0x20003be8
 80109c0:	20003bd4 	.word	0x20003bd4
 80109c4:	20007118 	.word	0x20007118
 80109c8:	20007114 	.word	0x20007114

080109cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b086      	sub	sp, #24
 80109d0:	af04      	add	r7, sp, #16
 80109d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80109d4:	4b2f      	ldr	r3, [pc, #188]	; (8010a94 <tcp_timewait_input+0xc8>)
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	f003 0304 	and.w	r3, r3, #4
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d153      	bne.n	8010a88 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <tcp_timewait_input+0x28>
 80109e6:	4b2c      	ldr	r3, [pc, #176]	; (8010a98 <tcp_timewait_input+0xcc>)
 80109e8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80109ec:	492b      	ldr	r1, [pc, #172]	; (8010a9c <tcp_timewait_input+0xd0>)
 80109ee:	482c      	ldr	r0, [pc, #176]	; (8010aa0 <tcp_timewait_input+0xd4>)
 80109f0:	f007 f9da 	bl	8017da8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80109f4:	4b27      	ldr	r3, [pc, #156]	; (8010a94 <tcp_timewait_input+0xc8>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	f003 0302 	and.w	r3, r3, #2
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d02a      	beq.n	8010a56 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010a00:	4b28      	ldr	r3, [pc, #160]	; (8010aa4 <tcp_timewait_input+0xd8>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	db2d      	blt.n	8010a6a <tcp_timewait_input+0x9e>
 8010a0e:	4b25      	ldr	r3, [pc, #148]	; (8010aa4 <tcp_timewait_input+0xd8>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a16:	6879      	ldr	r1, [r7, #4]
 8010a18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a1a:	440b      	add	r3, r1
 8010a1c:	1ad3      	subs	r3, r2, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	dc23      	bgt.n	8010a6a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a22:	4b21      	ldr	r3, [pc, #132]	; (8010aa8 <tcp_timewait_input+0xdc>)
 8010a24:	6819      	ldr	r1, [r3, #0]
 8010a26:	4b21      	ldr	r3, [pc, #132]	; (8010aac <tcp_timewait_input+0xe0>)
 8010a28:	881b      	ldrh	r3, [r3, #0]
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4b1d      	ldr	r3, [pc, #116]	; (8010aa4 <tcp_timewait_input+0xd8>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a32:	4b1f      	ldr	r3, [pc, #124]	; (8010ab0 <tcp_timewait_input+0xe4>)
 8010a34:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a36:	885b      	ldrh	r3, [r3, #2]
 8010a38:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a3a:	4a1d      	ldr	r2, [pc, #116]	; (8010ab0 <tcp_timewait_input+0xe4>)
 8010a3c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a3e:	8812      	ldrh	r2, [r2, #0]
 8010a40:	b292      	uxth	r2, r2
 8010a42:	9202      	str	r2, [sp, #8]
 8010a44:	9301      	str	r3, [sp, #4]
 8010a46:	4b1b      	ldr	r3, [pc, #108]	; (8010ab4 <tcp_timewait_input+0xe8>)
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	4b1b      	ldr	r3, [pc, #108]	; (8010ab8 <tcp_timewait_input+0xec>)
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f002 fe70 	bl	8013734 <tcp_rst>
      return;
 8010a54:	e01b      	b.n	8010a8e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010a56:	4b0f      	ldr	r3, [pc, #60]	; (8010a94 <tcp_timewait_input+0xc8>)
 8010a58:	781b      	ldrb	r3, [r3, #0]
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d003      	beq.n	8010a6a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010a62:	4b16      	ldr	r3, [pc, #88]	; (8010abc <tcp_timewait_input+0xf0>)
 8010a64:	681a      	ldr	r2, [r3, #0]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010a6a:	4b10      	ldr	r3, [pc, #64]	; (8010aac <tcp_timewait_input+0xe0>)
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d00c      	beq.n	8010a8c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	8b5b      	ldrh	r3, [r3, #26]
 8010a76:	f043 0302 	orr.w	r3, r3, #2
 8010a7a:	b29a      	uxth	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f002 f8a3 	bl	8012bcc <tcp_output>
  }
  return;
 8010a86:	e001      	b.n	8010a8c <tcp_timewait_input+0xc0>
    return;
 8010a88:	bf00      	nop
 8010a8a:	e000      	b.n	8010a8e <tcp_timewait_input+0xc2>
  return;
 8010a8c:	bf00      	nop
}
 8010a8e:	3708      	adds	r7, #8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	20000480 	.word	0x20000480
 8010a98:	08020384 	.word	0x08020384
 8010a9c:	0802059c 	.word	0x0802059c
 8010aa0:	080203d0 	.word	0x080203d0
 8010aa4:	20000474 	.word	0x20000474
 8010aa8:	20000478 	.word	0x20000478
 8010aac:	2000047e 	.word	0x2000047e
 8010ab0:	20000464 	.word	0x20000464
 8010ab4:	20003be4 	.word	0x20003be4
 8010ab8:	20003be8 	.word	0x20003be8
 8010abc:	2000711c 	.word	0x2000711c

08010ac0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010ac0:	b590      	push	{r4, r7, lr}
 8010ac2:	b08d      	sub	sp, #52	; 0x34
 8010ac4:	af04      	add	r7, sp, #16
 8010ac6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010acc:	2300      	movs	r3, #0
 8010ace:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d106      	bne.n	8010ae4 <tcp_process+0x24>
 8010ad6:	4ba5      	ldr	r3, [pc, #660]	; (8010d6c <tcp_process+0x2ac>)
 8010ad8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010adc:	49a4      	ldr	r1, [pc, #656]	; (8010d70 <tcp_process+0x2b0>)
 8010ade:	48a5      	ldr	r0, [pc, #660]	; (8010d74 <tcp_process+0x2b4>)
 8010ae0:	f007 f962 	bl	8017da8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010ae4:	4ba4      	ldr	r3, [pc, #656]	; (8010d78 <tcp_process+0x2b8>)
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	f003 0304 	and.w	r3, r3, #4
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d04e      	beq.n	8010b8e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	7d1b      	ldrb	r3, [r3, #20]
 8010af4:	2b02      	cmp	r3, #2
 8010af6:	d108      	bne.n	8010b0a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010afc:	4b9f      	ldr	r3, [pc, #636]	; (8010d7c <tcp_process+0x2bc>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d123      	bne.n	8010b4c <tcp_process+0x8c>
        acceptable = 1;
 8010b04:	2301      	movs	r3, #1
 8010b06:	76fb      	strb	r3, [r7, #27]
 8010b08:	e020      	b.n	8010b4c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b0e:	4b9c      	ldr	r3, [pc, #624]	; (8010d80 <tcp_process+0x2c0>)
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d102      	bne.n	8010b1c <tcp_process+0x5c>
        acceptable = 1;
 8010b16:	2301      	movs	r3, #1
 8010b18:	76fb      	strb	r3, [r7, #27]
 8010b1a:	e017      	b.n	8010b4c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b1c:	4b98      	ldr	r3, [pc, #608]	; (8010d80 <tcp_process+0x2c0>)
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	db10      	blt.n	8010b4c <tcp_process+0x8c>
 8010b2a:	4b95      	ldr	r3, [pc, #596]	; (8010d80 <tcp_process+0x2c0>)
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b32:	6879      	ldr	r1, [r7, #4]
 8010b34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b36:	440b      	add	r3, r1
 8010b38:	1ad3      	subs	r3, r2, r3
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	dc06      	bgt.n	8010b4c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	8b5b      	ldrh	r3, [r3, #26]
 8010b42:	f043 0302 	orr.w	r3, r3, #2
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010b4c:	7efb      	ldrb	r3, [r7, #27]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d01b      	beq.n	8010b8a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	7d1b      	ldrb	r3, [r3, #20]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d106      	bne.n	8010b68 <tcp_process+0xa8>
 8010b5a:	4b84      	ldr	r3, [pc, #528]	; (8010d6c <tcp_process+0x2ac>)
 8010b5c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010b60:	4988      	ldr	r1, [pc, #544]	; (8010d84 <tcp_process+0x2c4>)
 8010b62:	4884      	ldr	r0, [pc, #528]	; (8010d74 <tcp_process+0x2b4>)
 8010b64:	f007 f920 	bl	8017da8 <iprintf>
      recv_flags |= TF_RESET;
 8010b68:	4b87      	ldr	r3, [pc, #540]	; (8010d88 <tcp_process+0x2c8>)
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	f043 0308 	orr.w	r3, r3, #8
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	4b85      	ldr	r3, [pc, #532]	; (8010d88 <tcp_process+0x2c8>)
 8010b74:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	8b5b      	ldrh	r3, [r3, #26]
 8010b7a:	f023 0301 	bic.w	r3, r3, #1
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010b84:	f06f 030d 	mvn.w	r3, #13
 8010b88:	e37a      	b.n	8011280 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	e378      	b.n	8011280 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010b8e:	4b7a      	ldr	r3, [pc, #488]	; (8010d78 <tcp_process+0x2b8>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	f003 0302 	and.w	r3, r3, #2
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d010      	beq.n	8010bbc <tcp_process+0xfc>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	7d1b      	ldrb	r3, [r3, #20]
 8010b9e:	2b02      	cmp	r3, #2
 8010ba0:	d00c      	beq.n	8010bbc <tcp_process+0xfc>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	7d1b      	ldrb	r3, [r3, #20]
 8010ba6:	2b03      	cmp	r3, #3
 8010ba8:	d008      	beq.n	8010bbc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	8b5b      	ldrh	r3, [r3, #26]
 8010bae:	f043 0302 	orr.w	r3, r3, #2
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	e361      	b.n	8011280 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	8b5b      	ldrh	r3, [r3, #26]
 8010bc0:	f003 0310 	and.w	r3, r3, #16
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d103      	bne.n	8010bd0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010bc8:	4b70      	ldr	r3, [pc, #448]	; (8010d8c <tcp_process+0x2cc>)
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f001 fc2d 	bl	8012440 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	7d1b      	ldrb	r3, [r3, #20]
 8010bea:	3b02      	subs	r3, #2
 8010bec:	2b07      	cmp	r3, #7
 8010bee:	f200 8337 	bhi.w	8011260 <tcp_process+0x7a0>
 8010bf2:	a201      	add	r2, pc, #4	; (adr r2, 8010bf8 <tcp_process+0x138>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010c19 	.word	0x08010c19
 8010bfc:	08010e49 	.word	0x08010e49
 8010c00:	08010fc1 	.word	0x08010fc1
 8010c04:	08010feb 	.word	0x08010feb
 8010c08:	0801110f 	.word	0x0801110f
 8010c0c:	08010fc1 	.word	0x08010fc1
 8010c10:	0801119b 	.word	0x0801119b
 8010c14:	0801122b 	.word	0x0801122b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010c18:	4b57      	ldr	r3, [pc, #348]	; (8010d78 <tcp_process+0x2b8>)
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	f003 0310 	and.w	r3, r3, #16
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f000 80e4 	beq.w	8010dee <tcp_process+0x32e>
 8010c26:	4b54      	ldr	r3, [pc, #336]	; (8010d78 <tcp_process+0x2b8>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f003 0302 	and.w	r3, r3, #2
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f000 80dd 	beq.w	8010dee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c38:	1c5a      	adds	r2, r3, #1
 8010c3a:	4b50      	ldr	r3, [pc, #320]	; (8010d7c <tcp_process+0x2bc>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	f040 80d5 	bne.w	8010dee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010c44:	4b4e      	ldr	r3, [pc, #312]	; (8010d80 <tcp_process+0x2c0>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	1c5a      	adds	r2, r3, #1
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010c56:	4b49      	ldr	r3, [pc, #292]	; (8010d7c <tcp_process+0x2bc>)
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010c5e:	4b4c      	ldr	r3, [pc, #304]	; (8010d90 <tcp_process+0x2d0>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	89db      	ldrh	r3, [r3, #14]
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010c78:	4b41      	ldr	r3, [pc, #260]	; (8010d80 <tcp_process+0x2c0>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	1e5a      	subs	r2, r3, #1
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2204      	movs	r2, #4
 8010c86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	3304      	adds	r3, #4
 8010c90:	4618      	mov	r0, r3
 8010c92:	f004 faad 	bl	80151f0 <ip4_route>
 8010c96:	4601      	mov	r1, r0
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	3304      	adds	r3, #4
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f7ff f88e 	bl	800fdc0 <tcp_eff_send_mss_netif>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	461a      	mov	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cb0:	009a      	lsls	r2, r3, #2
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cb6:	005b      	lsls	r3, r3, #1
 8010cb8:	f241 111c 	movw	r1, #4380	; 0x111c
 8010cbc:	428b      	cmp	r3, r1
 8010cbe:	bf38      	it	cc
 8010cc0:	460b      	movcc	r3, r1
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d204      	bcs.n	8010cd0 <tcp_process+0x210>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	b29b      	uxth	r3, r3
 8010cce:	e00d      	b.n	8010cec <tcp_process+0x22c>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cd4:	005b      	lsls	r3, r3, #1
 8010cd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d904      	bls.n	8010ce8 <tcp_process+0x228>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ce2:	005b      	lsls	r3, r3, #1
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	e001      	b.n	8010cec <tcp_process+0x22c>
 8010ce8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d106      	bne.n	8010d0a <tcp_process+0x24a>
 8010cfc:	4b1b      	ldr	r3, [pc, #108]	; (8010d6c <tcp_process+0x2ac>)
 8010cfe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010d02:	4924      	ldr	r1, [pc, #144]	; (8010d94 <tcp_process+0x2d4>)
 8010d04:	481b      	ldr	r0, [pc, #108]	; (8010d74 <tcp_process+0x2b4>)
 8010d06:	f007 f84f 	bl	8017da8 <iprintf>
        --pcb->snd_queuelen;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d10:	3b01      	subs	r3, #1
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d1e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010d20:	69fb      	ldr	r3, [r7, #28]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d111      	bne.n	8010d4a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d2a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d106      	bne.n	8010d40 <tcp_process+0x280>
 8010d32:	4b0e      	ldr	r3, [pc, #56]	; (8010d6c <tcp_process+0x2ac>)
 8010d34:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010d38:	4917      	ldr	r1, [pc, #92]	; (8010d98 <tcp_process+0x2d8>)
 8010d3a:	480e      	ldr	r0, [pc, #56]	; (8010d74 <tcp_process+0x2b4>)
 8010d3c:	f007 f834 	bl	8017da8 <iprintf>
          pcb->unsent = rseg->next;
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	66da      	str	r2, [r3, #108]	; 0x6c
 8010d48:	e003      	b.n	8010d52 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	681a      	ldr	r2, [r3, #0]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010d52:	69f8      	ldr	r0, [r7, #28]
 8010d54:	f7fe fd3d 	bl	800f7d2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d11d      	bne.n	8010d9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d66:	861a      	strh	r2, [r3, #48]	; 0x30
 8010d68:	e01f      	b.n	8010daa <tcp_process+0x2ea>
 8010d6a:	bf00      	nop
 8010d6c:	08020384 	.word	0x08020384
 8010d70:	080205bc 	.word	0x080205bc
 8010d74:	080203d0 	.word	0x080203d0
 8010d78:	20000480 	.word	0x20000480
 8010d7c:	20000478 	.word	0x20000478
 8010d80:	20000474 	.word	0x20000474
 8010d84:	080205d8 	.word	0x080205d8
 8010d88:	20000481 	.word	0x20000481
 8010d8c:	2000711c 	.word	0x2000711c
 8010d90:	20000464 	.word	0x20000464
 8010d94:	080205f8 	.word	0x080205f8
 8010d98:	08020610 	.word	0x08020610
        } else {
          pcb->rtime = 0;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d00a      	beq.n	8010dca <tcp_process+0x30a>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	6910      	ldr	r0, [r2, #16]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	6879      	ldr	r1, [r7, #4]
 8010dc2:	4798      	blx	r3
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	76bb      	strb	r3, [r7, #26]
 8010dc8:	e001      	b.n	8010dce <tcp_process+0x30e>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010dce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010dd2:	f113 0f0d 	cmn.w	r3, #13
 8010dd6:	d102      	bne.n	8010dde <tcp_process+0x31e>
          return ERR_ABRT;
 8010dd8:	f06f 030c 	mvn.w	r3, #12
 8010ddc:	e250      	b.n	8011280 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	8b5b      	ldrh	r3, [r3, #26]
 8010de2:	f043 0302 	orr.w	r3, r3, #2
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010dec:	e23a      	b.n	8011264 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010dee:	4b9d      	ldr	r3, [pc, #628]	; (8011064 <tcp_process+0x5a4>)
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	f003 0310 	and.w	r3, r3, #16
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f000 8234 	beq.w	8011264 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010dfc:	4b9a      	ldr	r3, [pc, #616]	; (8011068 <tcp_process+0x5a8>)
 8010dfe:	6819      	ldr	r1, [r3, #0]
 8010e00:	4b9a      	ldr	r3, [pc, #616]	; (801106c <tcp_process+0x5ac>)
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	461a      	mov	r2, r3
 8010e06:	4b9a      	ldr	r3, [pc, #616]	; (8011070 <tcp_process+0x5b0>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e0c:	4b99      	ldr	r3, [pc, #612]	; (8011074 <tcp_process+0x5b4>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e10:	885b      	ldrh	r3, [r3, #2]
 8010e12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e14:	4a97      	ldr	r2, [pc, #604]	; (8011074 <tcp_process+0x5b4>)
 8010e16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e18:	8812      	ldrh	r2, [r2, #0]
 8010e1a:	b292      	uxth	r2, r2
 8010e1c:	9202      	str	r2, [sp, #8]
 8010e1e:	9301      	str	r3, [sp, #4]
 8010e20:	4b95      	ldr	r3, [pc, #596]	; (8011078 <tcp_process+0x5b8>)
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	4b95      	ldr	r3, [pc, #596]	; (801107c <tcp_process+0x5bc>)
 8010e26:	4602      	mov	r2, r0
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f002 fc83 	bl	8013734 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e34:	2b05      	cmp	r3, #5
 8010e36:	f200 8215 	bhi.w	8011264 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f002 fa4d 	bl	80132e0 <tcp_rexmit_rto>
      break;
 8010e46:	e20d      	b.n	8011264 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010e48:	4b86      	ldr	r3, [pc, #536]	; (8011064 <tcp_process+0x5a4>)
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	f003 0310 	and.w	r3, r3, #16
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f000 80a1 	beq.w	8010f98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e56:	4b84      	ldr	r3, [pc, #528]	; (8011068 <tcp_process+0x5a8>)
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	3b01      	subs	r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	db7e      	blt.n	8010f64 <tcp_process+0x4a4>
 8010e66:	4b80      	ldr	r3, [pc, #512]	; (8011068 <tcp_process+0x5a8>)
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	dc77      	bgt.n	8010f64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2204      	movs	r2, #4
 8010e78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d102      	bne.n	8010e88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010e82:	23fa      	movs	r3, #250	; 0xfa
 8010e84:	76bb      	strb	r3, [r7, #26]
 8010e86:	e01d      	b.n	8010ec4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e8c:	699b      	ldr	r3, [r3, #24]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d106      	bne.n	8010ea0 <tcp_process+0x3e0>
 8010e92:	4b7b      	ldr	r3, [pc, #492]	; (8011080 <tcp_process+0x5c0>)
 8010e94:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010e98:	497a      	ldr	r1, [pc, #488]	; (8011084 <tcp_process+0x5c4>)
 8010e9a:	487b      	ldr	r0, [pc, #492]	; (8011088 <tcp_process+0x5c8>)
 8010e9c:	f006 ff84 	bl	8017da8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ea4:	699b      	ldr	r3, [r3, #24]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d00a      	beq.n	8010ec0 <tcp_process+0x400>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010eae:	699b      	ldr	r3, [r3, #24]
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	6910      	ldr	r0, [r2, #16]
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	4798      	blx	r3
 8010eba:	4603      	mov	r3, r0
 8010ebc:	76bb      	strb	r3, [r7, #26]
 8010ebe:	e001      	b.n	8010ec4 <tcp_process+0x404>
 8010ec0:	23f0      	movs	r3, #240	; 0xf0
 8010ec2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010ec4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d00a      	beq.n	8010ee2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010ecc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ed0:	f113 0f0d 	cmn.w	r3, #13
 8010ed4:	d002      	beq.n	8010edc <tcp_process+0x41c>
              tcp_abort(pcb);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7fd ff90 	bl	800edfc <tcp_abort>
            }
            return ERR_ABRT;
 8010edc:	f06f 030c 	mvn.w	r3, #12
 8010ee0:	e1ce      	b.n	8011280 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 fae0 	bl	80114a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010ee8:	4b68      	ldr	r3, [pc, #416]	; (801108c <tcp_process+0x5cc>)
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d005      	beq.n	8010efc <tcp_process+0x43c>
            recv_acked--;
 8010ef0:	4b66      	ldr	r3, [pc, #408]	; (801108c <tcp_process+0x5cc>)
 8010ef2:	881b      	ldrh	r3, [r3, #0]
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	b29a      	uxth	r2, r3
 8010ef8:	4b64      	ldr	r3, [pc, #400]	; (801108c <tcp_process+0x5cc>)
 8010efa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f00:	009a      	lsls	r2, r3, #2
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f06:	005b      	lsls	r3, r3, #1
 8010f08:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f0c:	428b      	cmp	r3, r1
 8010f0e:	bf38      	it	cc
 8010f10:	460b      	movcc	r3, r1
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d204      	bcs.n	8010f20 <tcp_process+0x460>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f1a:	009b      	lsls	r3, r3, #2
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	e00d      	b.n	8010f3c <tcp_process+0x47c>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f24:	005b      	lsls	r3, r3, #1
 8010f26:	f241 121c 	movw	r2, #4380	; 0x111c
 8010f2a:	4293      	cmp	r3, r2
 8010f2c:	d904      	bls.n	8010f38 <tcp_process+0x478>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f32:	005b      	lsls	r3, r3, #1
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	e001      	b.n	8010f3c <tcp_process+0x47c>
 8010f38:	f241 131c 	movw	r3, #4380	; 0x111c
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010f42:	4b53      	ldr	r3, [pc, #332]	; (8011090 <tcp_process+0x5d0>)
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	f003 0320 	and.w	r3, r3, #32
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d037      	beq.n	8010fbe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	8b5b      	ldrh	r3, [r3, #26]
 8010f52:	f043 0302 	orr.w	r3, r3, #2
 8010f56:	b29a      	uxth	r2, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2207      	movs	r2, #7
 8010f60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010f62:	e02c      	b.n	8010fbe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f64:	4b40      	ldr	r3, [pc, #256]	; (8011068 <tcp_process+0x5a8>)
 8010f66:	6819      	ldr	r1, [r3, #0]
 8010f68:	4b40      	ldr	r3, [pc, #256]	; (801106c <tcp_process+0x5ac>)
 8010f6a:	881b      	ldrh	r3, [r3, #0]
 8010f6c:	461a      	mov	r2, r3
 8010f6e:	4b40      	ldr	r3, [pc, #256]	; (8011070 <tcp_process+0x5b0>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f74:	4b3f      	ldr	r3, [pc, #252]	; (8011074 <tcp_process+0x5b4>)
 8010f76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f78:	885b      	ldrh	r3, [r3, #2]
 8010f7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f7c:	4a3d      	ldr	r2, [pc, #244]	; (8011074 <tcp_process+0x5b4>)
 8010f7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f80:	8812      	ldrh	r2, [r2, #0]
 8010f82:	b292      	uxth	r2, r2
 8010f84:	9202      	str	r2, [sp, #8]
 8010f86:	9301      	str	r3, [sp, #4]
 8010f88:	4b3b      	ldr	r3, [pc, #236]	; (8011078 <tcp_process+0x5b8>)
 8010f8a:	9300      	str	r3, [sp, #0]
 8010f8c:	4b3b      	ldr	r3, [pc, #236]	; (801107c <tcp_process+0x5bc>)
 8010f8e:	4602      	mov	r2, r0
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f002 fbcf 	bl	8013734 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010f96:	e167      	b.n	8011268 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010f98:	4b32      	ldr	r3, [pc, #200]	; (8011064 <tcp_process+0x5a4>)
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	f003 0302 	and.w	r3, r3, #2
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	f000 8161 	beq.w	8011268 <tcp_process+0x7a8>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010faa:	1e5a      	subs	r2, r3, #1
 8010fac:	4b30      	ldr	r3, [pc, #192]	; (8011070 <tcp_process+0x5b0>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	f040 8159 	bne.w	8011268 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f002 f9b4 	bl	8013324 <tcp_rexmit>
      break;
 8010fbc:	e154      	b.n	8011268 <tcp_process+0x7a8>
 8010fbe:	e153      	b.n	8011268 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f000 fa71 	bl	80114a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010fc6:	4b32      	ldr	r3, [pc, #200]	; (8011090 <tcp_process+0x5d0>)
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	f003 0320 	and.w	r3, r3, #32
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f000 814c 	beq.w	801126c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	8b5b      	ldrh	r3, [r3, #26]
 8010fd8:	f043 0302 	orr.w	r3, r3, #2
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2207      	movs	r2, #7
 8010fe6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010fe8:	e140      	b.n	801126c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f000 fa5c 	bl	80114a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010ff0:	4b27      	ldr	r3, [pc, #156]	; (8011090 <tcp_process+0x5d0>)
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	f003 0320 	and.w	r3, r3, #32
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d071      	beq.n	80110e0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ffc:	4b19      	ldr	r3, [pc, #100]	; (8011064 <tcp_process+0x5a4>)
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	f003 0310 	and.w	r3, r3, #16
 8011004:	2b00      	cmp	r3, #0
 8011006:	d060      	beq.n	80110ca <tcp_process+0x60a>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801100c:	4b16      	ldr	r3, [pc, #88]	; (8011068 <tcp_process+0x5a8>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	429a      	cmp	r2, r3
 8011012:	d15a      	bne.n	80110ca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011018:	2b00      	cmp	r3, #0
 801101a:	d156      	bne.n	80110ca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	8b5b      	ldrh	r3, [r3, #26]
 8011020:	f043 0302 	orr.w	r3, r3, #2
 8011024:	b29a      	uxth	r2, r3
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801102a:	6878      	ldr	r0, [r7, #4]
 801102c:	f7fe fdbe 	bl	800fbac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011030:	4b18      	ldr	r3, [pc, #96]	; (8011094 <tcp_process+0x5d4>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	687a      	ldr	r2, [r7, #4]
 8011036:	429a      	cmp	r2, r3
 8011038:	d105      	bne.n	8011046 <tcp_process+0x586>
 801103a:	4b16      	ldr	r3, [pc, #88]	; (8011094 <tcp_process+0x5d4>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	4a14      	ldr	r2, [pc, #80]	; (8011094 <tcp_process+0x5d4>)
 8011042:	6013      	str	r3, [r2, #0]
 8011044:	e02e      	b.n	80110a4 <tcp_process+0x5e4>
 8011046:	4b13      	ldr	r3, [pc, #76]	; (8011094 <tcp_process+0x5d4>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	617b      	str	r3, [r7, #20]
 801104c:	e027      	b.n	801109e <tcp_process+0x5de>
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	429a      	cmp	r2, r3
 8011056:	d11f      	bne.n	8011098 <tcp_process+0x5d8>
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	68da      	ldr	r2, [r3, #12]
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	60da      	str	r2, [r3, #12]
 8011060:	e020      	b.n	80110a4 <tcp_process+0x5e4>
 8011062:	bf00      	nop
 8011064:	20000480 	.word	0x20000480
 8011068:	20000478 	.word	0x20000478
 801106c:	2000047e 	.word	0x2000047e
 8011070:	20000474 	.word	0x20000474
 8011074:	20000464 	.word	0x20000464
 8011078:	20003be4 	.word	0x20003be4
 801107c:	20003be8 	.word	0x20003be8
 8011080:	08020384 	.word	0x08020384
 8011084:	08020624 	.word	0x08020624
 8011088:	080203d0 	.word	0x080203d0
 801108c:	2000047c 	.word	0x2000047c
 8011090:	20000481 	.word	0x20000481
 8011094:	20007118 	.word	0x20007118
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	68db      	ldr	r3, [r3, #12]
 801109c:	617b      	str	r3, [r7, #20]
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d1d4      	bne.n	801104e <tcp_process+0x58e>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	60da      	str	r2, [r3, #12]
 80110aa:	4b77      	ldr	r3, [pc, #476]	; (8011288 <tcp_process+0x7c8>)
 80110ac:	2201      	movs	r2, #1
 80110ae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	220a      	movs	r2, #10
 80110b4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80110b6:	4b75      	ldr	r3, [pc, #468]	; (801128c <tcp_process+0x7cc>)
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	60da      	str	r2, [r3, #12]
 80110be:	4a73      	ldr	r2, [pc, #460]	; (801128c <tcp_process+0x7cc>)
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6013      	str	r3, [r2, #0]
 80110c4:	f002 fcf8 	bl	8013ab8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80110c8:	e0d2      	b.n	8011270 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8b5b      	ldrh	r3, [r3, #26]
 80110ce:	f043 0302 	orr.w	r3, r3, #2
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2208      	movs	r2, #8
 80110dc:	751a      	strb	r2, [r3, #20]
      break;
 80110de:	e0c7      	b.n	8011270 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80110e0:	4b6b      	ldr	r3, [pc, #428]	; (8011290 <tcp_process+0x7d0>)
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	f003 0310 	and.w	r3, r3, #16
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f000 80c1 	beq.w	8011270 <tcp_process+0x7b0>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110f2:	4b68      	ldr	r3, [pc, #416]	; (8011294 <tcp_process+0x7d4>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	f040 80ba 	bne.w	8011270 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011100:	2b00      	cmp	r3, #0
 8011102:	f040 80b5 	bne.w	8011270 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2206      	movs	r2, #6
 801110a:	751a      	strb	r2, [r3, #20]
      break;
 801110c:	e0b0      	b.n	8011270 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 f9ca 	bl	80114a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011114:	4b60      	ldr	r3, [pc, #384]	; (8011298 <tcp_process+0x7d8>)
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	f003 0320 	and.w	r3, r3, #32
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80a9 	beq.w	8011274 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	8b5b      	ldrh	r3, [r3, #26]
 8011126:	f043 0302 	orr.w	r3, r3, #2
 801112a:	b29a      	uxth	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	f7fe fd3b 	bl	800fbac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011136:	4b59      	ldr	r3, [pc, #356]	; (801129c <tcp_process+0x7dc>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	429a      	cmp	r2, r3
 801113e:	d105      	bne.n	801114c <tcp_process+0x68c>
 8011140:	4b56      	ldr	r3, [pc, #344]	; (801129c <tcp_process+0x7dc>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	68db      	ldr	r3, [r3, #12]
 8011146:	4a55      	ldr	r2, [pc, #340]	; (801129c <tcp_process+0x7dc>)
 8011148:	6013      	str	r3, [r2, #0]
 801114a:	e013      	b.n	8011174 <tcp_process+0x6b4>
 801114c:	4b53      	ldr	r3, [pc, #332]	; (801129c <tcp_process+0x7dc>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	613b      	str	r3, [r7, #16]
 8011152:	e00c      	b.n	801116e <tcp_process+0x6ae>
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	687a      	ldr	r2, [r7, #4]
 801115a:	429a      	cmp	r2, r3
 801115c:	d104      	bne.n	8011168 <tcp_process+0x6a8>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	68da      	ldr	r2, [r3, #12]
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	60da      	str	r2, [r3, #12]
 8011166:	e005      	b.n	8011174 <tcp_process+0x6b4>
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	613b      	str	r3, [r7, #16]
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d1ef      	bne.n	8011154 <tcp_process+0x694>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2200      	movs	r2, #0
 8011178:	60da      	str	r2, [r3, #12]
 801117a:	4b43      	ldr	r3, [pc, #268]	; (8011288 <tcp_process+0x7c8>)
 801117c:	2201      	movs	r2, #1
 801117e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	220a      	movs	r2, #10
 8011184:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011186:	4b41      	ldr	r3, [pc, #260]	; (801128c <tcp_process+0x7cc>)
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	60da      	str	r2, [r3, #12]
 801118e:	4a3f      	ldr	r2, [pc, #252]	; (801128c <tcp_process+0x7cc>)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6013      	str	r3, [r2, #0]
 8011194:	f002 fc90 	bl	8013ab8 <tcp_timer_needed>
      }
      break;
 8011198:	e06c      	b.n	8011274 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 f984 	bl	80114a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80111a0:	4b3b      	ldr	r3, [pc, #236]	; (8011290 <tcp_process+0x7d0>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	f003 0310 	and.w	r3, r3, #16
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d065      	beq.n	8011278 <tcp_process+0x7b8>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111b0:	4b38      	ldr	r3, [pc, #224]	; (8011294 <tcp_process+0x7d4>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d15f      	bne.n	8011278 <tcp_process+0x7b8>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d15b      	bne.n	8011278 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7fe fcf3 	bl	800fbac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80111c6:	4b35      	ldr	r3, [pc, #212]	; (801129c <tcp_process+0x7dc>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	687a      	ldr	r2, [r7, #4]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d105      	bne.n	80111dc <tcp_process+0x71c>
 80111d0:	4b32      	ldr	r3, [pc, #200]	; (801129c <tcp_process+0x7dc>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	4a31      	ldr	r2, [pc, #196]	; (801129c <tcp_process+0x7dc>)
 80111d8:	6013      	str	r3, [r2, #0]
 80111da:	e013      	b.n	8011204 <tcp_process+0x744>
 80111dc:	4b2f      	ldr	r3, [pc, #188]	; (801129c <tcp_process+0x7dc>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	60fb      	str	r3, [r7, #12]
 80111e2:	e00c      	b.n	80111fe <tcp_process+0x73e>
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	687a      	ldr	r2, [r7, #4]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d104      	bne.n	80111f8 <tcp_process+0x738>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	68da      	ldr	r2, [r3, #12]
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	60da      	str	r2, [r3, #12]
 80111f6:	e005      	b.n	8011204 <tcp_process+0x744>
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	60fb      	str	r3, [r7, #12]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1ef      	bne.n	80111e4 <tcp_process+0x724>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	60da      	str	r2, [r3, #12]
 801120a:	4b1f      	ldr	r3, [pc, #124]	; (8011288 <tcp_process+0x7c8>)
 801120c:	2201      	movs	r2, #1
 801120e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	220a      	movs	r2, #10
 8011214:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011216:	4b1d      	ldr	r3, [pc, #116]	; (801128c <tcp_process+0x7cc>)
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	60da      	str	r2, [r3, #12]
 801121e:	4a1b      	ldr	r2, [pc, #108]	; (801128c <tcp_process+0x7cc>)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6013      	str	r3, [r2, #0]
 8011224:	f002 fc48 	bl	8013ab8 <tcp_timer_needed>
      }
      break;
 8011228:	e026      	b.n	8011278 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 f93c 	bl	80114a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011230:	4b17      	ldr	r3, [pc, #92]	; (8011290 <tcp_process+0x7d0>)
 8011232:	781b      	ldrb	r3, [r3, #0]
 8011234:	f003 0310 	and.w	r3, r3, #16
 8011238:	2b00      	cmp	r3, #0
 801123a:	d01f      	beq.n	801127c <tcp_process+0x7bc>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011240:	4b14      	ldr	r3, [pc, #80]	; (8011294 <tcp_process+0x7d4>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	429a      	cmp	r2, r3
 8011246:	d119      	bne.n	801127c <tcp_process+0x7bc>
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801124c:	2b00      	cmp	r3, #0
 801124e:	d115      	bne.n	801127c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011250:	4b11      	ldr	r3, [pc, #68]	; (8011298 <tcp_process+0x7d8>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	f043 0310 	orr.w	r3, r3, #16
 8011258:	b2da      	uxtb	r2, r3
 801125a:	4b0f      	ldr	r3, [pc, #60]	; (8011298 <tcp_process+0x7d8>)
 801125c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801125e:	e00d      	b.n	801127c <tcp_process+0x7bc>
    default:
      break;
 8011260:	bf00      	nop
 8011262:	e00c      	b.n	801127e <tcp_process+0x7be>
      break;
 8011264:	bf00      	nop
 8011266:	e00a      	b.n	801127e <tcp_process+0x7be>
      break;
 8011268:	bf00      	nop
 801126a:	e008      	b.n	801127e <tcp_process+0x7be>
      break;
 801126c:	bf00      	nop
 801126e:	e006      	b.n	801127e <tcp_process+0x7be>
      break;
 8011270:	bf00      	nop
 8011272:	e004      	b.n	801127e <tcp_process+0x7be>
      break;
 8011274:	bf00      	nop
 8011276:	e002      	b.n	801127e <tcp_process+0x7be>
      break;
 8011278:	bf00      	nop
 801127a:	e000      	b.n	801127e <tcp_process+0x7be>
      break;
 801127c:	bf00      	nop
  }
  return ERR_OK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	3724      	adds	r7, #36	; 0x24
 8011284:	46bd      	mov	sp, r7
 8011286:	bd90      	pop	{r4, r7, pc}
 8011288:	20007114 	.word	0x20007114
 801128c:	20007128 	.word	0x20007128
 8011290:	20000480 	.word	0x20000480
 8011294:	20000478 	.word	0x20000478
 8011298:	20000481 	.word	0x20000481
 801129c:	20007118 	.word	0x20007118

080112a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80112a0:	b590      	push	{r4, r7, lr}
 80112a2:	b085      	sub	sp, #20
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d106      	bne.n	80112be <tcp_oos_insert_segment+0x1e>
 80112b0:	4b3b      	ldr	r3, [pc, #236]	; (80113a0 <tcp_oos_insert_segment+0x100>)
 80112b2:	f240 421f 	movw	r2, #1055	; 0x41f
 80112b6:	493b      	ldr	r1, [pc, #236]	; (80113a4 <tcp_oos_insert_segment+0x104>)
 80112b8:	483b      	ldr	r0, [pc, #236]	; (80113a8 <tcp_oos_insert_segment+0x108>)
 80112ba:	f006 fd75 	bl	8017da8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	899b      	ldrh	r3, [r3, #12]
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fb fd7d 	bl	800cdc6 <lwip_htons>
 80112cc:	4603      	mov	r3, r0
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	f003 0301 	and.w	r3, r3, #1
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d028      	beq.n	801132a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80112d8:	6838      	ldr	r0, [r7, #0]
 80112da:	f7fe fa65 	bl	800f7a8 <tcp_segs_free>
    next = NULL;
 80112de:	2300      	movs	r3, #0
 80112e0:	603b      	str	r3, [r7, #0]
 80112e2:	e056      	b.n	8011392 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	899b      	ldrh	r3, [r3, #12]
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fb fd6a 	bl	800cdc6 <lwip_htons>
 80112f2:	4603      	mov	r3, r0
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	f003 0301 	and.w	r3, r3, #1
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00d      	beq.n	801131a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	899b      	ldrh	r3, [r3, #12]
 8011304:	b29c      	uxth	r4, r3
 8011306:	2001      	movs	r0, #1
 8011308:	f7fb fd5d 	bl	800cdc6 <lwip_htons>
 801130c:	4603      	mov	r3, r0
 801130e:	461a      	mov	r2, r3
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	4322      	orrs	r2, r4
 8011316:	b292      	uxth	r2, r2
 8011318:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	f7fe fa54 	bl	800f7d2 <tcp_seg_free>
    while (next &&
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d00e      	beq.n	801134e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	891b      	ldrh	r3, [r3, #8]
 8011334:	461a      	mov	r2, r3
 8011336:	4b1d      	ldr	r3, [pc, #116]	; (80113ac <tcp_oos_insert_segment+0x10c>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	441a      	add	r2, r3
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	6839      	ldr	r1, [r7, #0]
 8011344:	8909      	ldrh	r1, [r1, #8]
 8011346:	440b      	add	r3, r1
 8011348:	1ad3      	subs	r3, r2, r3
    while (next &&
 801134a:	2b00      	cmp	r3, #0
 801134c:	daca      	bge.n	80112e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d01e      	beq.n	8011392 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	891b      	ldrh	r3, [r3, #8]
 8011358:	461a      	mov	r2, r3
 801135a:	4b14      	ldr	r3, [pc, #80]	; (80113ac <tcp_oos_insert_segment+0x10c>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	441a      	add	r2, r3
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011368:	2b00      	cmp	r3, #0
 801136a:	dd12      	ble.n	8011392 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	b29a      	uxth	r2, r3
 8011374:	4b0d      	ldr	r3, [pc, #52]	; (80113ac <tcp_oos_insert_segment+0x10c>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	b29b      	uxth	r3, r3
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	b29a      	uxth	r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	685a      	ldr	r2, [r3, #4]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	891b      	ldrh	r3, [r3, #8]
 801138a:	4619      	mov	r1, r3
 801138c:	4610      	mov	r0, r2
 801138e:	f7fc fe27 	bl	800dfe0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	683a      	ldr	r2, [r7, #0]
 8011396:	601a      	str	r2, [r3, #0]
}
 8011398:	bf00      	nop
 801139a:	3714      	adds	r7, #20
 801139c:	46bd      	mov	sp, r7
 801139e:	bd90      	pop	{r4, r7, pc}
 80113a0:	08020384 	.word	0x08020384
 80113a4:	08020644 	.word	0x08020644
 80113a8:	080203d0 	.word	0x080203d0
 80113ac:	20000474 	.word	0x20000474

080113b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80113b0:	b5b0      	push	{r4, r5, r7, lr}
 80113b2:	b086      	sub	sp, #24
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	60f8      	str	r0, [r7, #12]
 80113b8:	60b9      	str	r1, [r7, #8]
 80113ba:	607a      	str	r2, [r7, #4]
 80113bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80113be:	e03e      	b.n	801143e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fd f814 	bl	800e3fc <pbuf_clen>
 80113d4:	4603      	mov	r3, r0
 80113d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113de:	8a7a      	ldrh	r2, [r7, #18]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d906      	bls.n	80113f2 <tcp_free_acked_segments+0x42>
 80113e4:	4b2a      	ldr	r3, [pc, #168]	; (8011490 <tcp_free_acked_segments+0xe0>)
 80113e6:	f240 4257 	movw	r2, #1111	; 0x457
 80113ea:	492a      	ldr	r1, [pc, #168]	; (8011494 <tcp_free_acked_segments+0xe4>)
 80113ec:	482a      	ldr	r0, [pc, #168]	; (8011498 <tcp_free_acked_segments+0xe8>)
 80113ee:	f006 fcdb 	bl	8017da8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80113f8:	8a7b      	ldrh	r3, [r7, #18]
 80113fa:	1ad3      	subs	r3, r2, r3
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	891a      	ldrh	r2, [r3, #8]
 8011408:	4b24      	ldr	r3, [pc, #144]	; (801149c <tcp_free_acked_segments+0xec>)
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	4413      	add	r3, r2
 801140e:	b29a      	uxth	r2, r3
 8011410:	4b22      	ldr	r3, [pc, #136]	; (801149c <tcp_free_acked_segments+0xec>)
 8011412:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011414:	6978      	ldr	r0, [r7, #20]
 8011416:	f7fe f9dc 	bl	800f7d2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00c      	beq.n	801143e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d109      	bne.n	801143e <tcp_free_acked_segments+0x8e>
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d106      	bne.n	801143e <tcp_free_acked_segments+0x8e>
 8011430:	4b17      	ldr	r3, [pc, #92]	; (8011490 <tcp_free_acked_segments+0xe0>)
 8011432:	f240 4261 	movw	r2, #1121	; 0x461
 8011436:	491a      	ldr	r1, [pc, #104]	; (80114a0 <tcp_free_acked_segments+0xf0>)
 8011438:	4817      	ldr	r0, [pc, #92]	; (8011498 <tcp_free_acked_segments+0xe8>)
 801143a:	f006 fcb5 	bl	8017da8 <iprintf>
  while (seg_list != NULL &&
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d020      	beq.n	8011486 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	4618      	mov	r0, r3
 801144c:	f7fb fcd0 	bl	800cdf0 <lwip_htonl>
 8011450:	4604      	mov	r4, r0
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	891b      	ldrh	r3, [r3, #8]
 8011456:	461d      	mov	r5, r3
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	899b      	ldrh	r3, [r3, #12]
 801145e:	b29b      	uxth	r3, r3
 8011460:	4618      	mov	r0, r3
 8011462:	f7fb fcb0 	bl	800cdc6 <lwip_htons>
 8011466:	4603      	mov	r3, r0
 8011468:	b2db      	uxtb	r3, r3
 801146a:	f003 0303 	and.w	r3, r3, #3
 801146e:	2b00      	cmp	r3, #0
 8011470:	d001      	beq.n	8011476 <tcp_free_acked_segments+0xc6>
 8011472:	2301      	movs	r3, #1
 8011474:	e000      	b.n	8011478 <tcp_free_acked_segments+0xc8>
 8011476:	2300      	movs	r3, #0
 8011478:	442b      	add	r3, r5
 801147a:	18e2      	adds	r2, r4, r3
 801147c:	4b09      	ldr	r3, [pc, #36]	; (80114a4 <tcp_free_acked_segments+0xf4>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011482:	2b00      	cmp	r3, #0
 8011484:	dd9c      	ble.n	80113c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011486:	68bb      	ldr	r3, [r7, #8]
}
 8011488:	4618      	mov	r0, r3
 801148a:	3718      	adds	r7, #24
 801148c:	46bd      	mov	sp, r7
 801148e:	bdb0      	pop	{r4, r5, r7, pc}
 8011490:	08020384 	.word	0x08020384
 8011494:	0802066c 	.word	0x0802066c
 8011498:	080203d0 	.word	0x080203d0
 801149c:	2000047c 	.word	0x2000047c
 80114a0:	08020694 	.word	0x08020694
 80114a4:	20000478 	.word	0x20000478

080114a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80114a8:	b5b0      	push	{r4, r5, r7, lr}
 80114aa:	b094      	sub	sp, #80	; 0x50
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80114b0:	2300      	movs	r3, #0
 80114b2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d106      	bne.n	80114c8 <tcp_receive+0x20>
 80114ba:	4ba6      	ldr	r3, [pc, #664]	; (8011754 <tcp_receive+0x2ac>)
 80114bc:	f240 427b 	movw	r2, #1147	; 0x47b
 80114c0:	49a5      	ldr	r1, [pc, #660]	; (8011758 <tcp_receive+0x2b0>)
 80114c2:	48a6      	ldr	r0, [pc, #664]	; (801175c <tcp_receive+0x2b4>)
 80114c4:	f006 fc70 	bl	8017da8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	7d1b      	ldrb	r3, [r3, #20]
 80114cc:	2b03      	cmp	r3, #3
 80114ce:	d806      	bhi.n	80114de <tcp_receive+0x36>
 80114d0:	4ba0      	ldr	r3, [pc, #640]	; (8011754 <tcp_receive+0x2ac>)
 80114d2:	f240 427c 	movw	r2, #1148	; 0x47c
 80114d6:	49a2      	ldr	r1, [pc, #648]	; (8011760 <tcp_receive+0x2b8>)
 80114d8:	48a0      	ldr	r0, [pc, #640]	; (801175c <tcp_receive+0x2b4>)
 80114da:	f006 fc65 	bl	8017da8 <iprintf>

  if (flags & TCP_ACK) {
 80114de:	4ba1      	ldr	r3, [pc, #644]	; (8011764 <tcp_receive+0x2bc>)
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	f003 0310 	and.w	r3, r3, #16
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	f000 8263 	beq.w	80119b2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80114f2:	461a      	mov	r2, r3
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114f8:	4413      	add	r3, r2
 80114fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011500:	4b99      	ldr	r3, [pc, #612]	; (8011768 <tcp_receive+0x2c0>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	1ad3      	subs	r3, r2, r3
 8011506:	2b00      	cmp	r3, #0
 8011508:	db1b      	blt.n	8011542 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801150e:	4b96      	ldr	r3, [pc, #600]	; (8011768 <tcp_receive+0x2c0>)
 8011510:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011512:	429a      	cmp	r2, r3
 8011514:	d106      	bne.n	8011524 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801151a:	4b94      	ldr	r3, [pc, #592]	; (801176c <tcp_receive+0x2c4>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	1ad3      	subs	r3, r2, r3
 8011520:	2b00      	cmp	r3, #0
 8011522:	db0e      	blt.n	8011542 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011528:	4b90      	ldr	r3, [pc, #576]	; (801176c <tcp_receive+0x2c4>)
 801152a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801152c:	429a      	cmp	r2, r3
 801152e:	d125      	bne.n	801157c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011530:	4b8f      	ldr	r3, [pc, #572]	; (8011770 <tcp_receive+0x2c8>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	89db      	ldrh	r3, [r3, #14]
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801153e:	429a      	cmp	r2, r3
 8011540:	d91c      	bls.n	801157c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011542:	4b8b      	ldr	r3, [pc, #556]	; (8011770 <tcp_receive+0x2c8>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	89db      	ldrh	r3, [r3, #14]
 8011548:	b29a      	uxth	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801155c:	429a      	cmp	r2, r3
 801155e:	d205      	bcs.n	801156c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801156c:	4b7e      	ldr	r3, [pc, #504]	; (8011768 <tcp_receive+0x2c0>)
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011574:	4b7d      	ldr	r3, [pc, #500]	; (801176c <tcp_receive+0x2c4>)
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801157c:	4b7b      	ldr	r3, [pc, #492]	; (801176c <tcp_receive+0x2c4>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	2b00      	cmp	r3, #0
 8011588:	dc58      	bgt.n	801163c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801158a:	4b7a      	ldr	r3, [pc, #488]	; (8011774 <tcp_receive+0x2cc>)
 801158c:	881b      	ldrh	r3, [r3, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d14b      	bne.n	801162a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011596:	687a      	ldr	r2, [r7, #4]
 8011598:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801159c:	4413      	add	r3, r2
 801159e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d142      	bne.n	801162a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	db3d      	blt.n	801162a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115b2:	4b6e      	ldr	r3, [pc, #440]	; (801176c <tcp_receive+0x2c4>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d137      	bne.n	801162a <tcp_receive+0x182>
              found_dupack = 1;
 80115ba:	2301      	movs	r3, #1
 80115bc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115c4:	2bff      	cmp	r3, #255	; 0xff
 80115c6:	d007      	beq.n	80115d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115ce:	3301      	adds	r3, #1
 80115d0:	b2da      	uxtb	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115de:	2b03      	cmp	r3, #3
 80115e0:	d91b      	bls.n	801161a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115ec:	4413      	add	r3, r2
 80115ee:	b29a      	uxth	r2, r3
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d30a      	bcc.n	8011610 <tcp_receive+0x168>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011604:	4413      	add	r3, r2
 8011606:	b29a      	uxth	r2, r3
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801160e:	e004      	b.n	801161a <tcp_receive+0x172>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011616:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011620:	2b02      	cmp	r3, #2
 8011622:	d902      	bls.n	801162a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f001 fee9 	bl	80133fc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801162a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801162c:	2b00      	cmp	r3, #0
 801162e:	f040 8160 	bne.w	80118f2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2200      	movs	r2, #0
 8011636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801163a:	e15a      	b.n	80118f2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801163c:	4b4b      	ldr	r3, [pc, #300]	; (801176c <tcp_receive+0x2c4>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011644:	1ad3      	subs	r3, r2, r3
 8011646:	3b01      	subs	r3, #1
 8011648:	2b00      	cmp	r3, #0
 801164a:	f2c0 814d 	blt.w	80118e8 <tcp_receive+0x440>
 801164e:	4b47      	ldr	r3, [pc, #284]	; (801176c <tcp_receive+0x2c4>)
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011656:	1ad3      	subs	r3, r2, r3
 8011658:	2b00      	cmp	r3, #0
 801165a:	f300 8145 	bgt.w	80118e8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	8b5b      	ldrh	r3, [r3, #26]
 8011662:	f003 0304 	and.w	r3, r3, #4
 8011666:	2b00      	cmp	r3, #0
 8011668:	d010      	beq.n	801168c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	8b5b      	ldrh	r3, [r3, #26]
 801166e:	f023 0304 	bic.w	r3, r3, #4
 8011672:	b29a      	uxth	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2200      	movs	r2, #0
 8011688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801169a:	10db      	asrs	r3, r3, #3
 801169c:	b21b      	sxth	r3, r3
 801169e:	b29a      	uxth	r2, r3
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	4413      	add	r3, r2
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	b21a      	sxth	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80116b4:	4b2d      	ldr	r3, [pc, #180]	; (801176c <tcp_receive+0x2c4>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116be:	b29b      	uxth	r3, r3
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2200      	movs	r2, #0
 80116c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80116cc:	4b27      	ldr	r3, [pc, #156]	; (801176c <tcp_receive+0x2c4>)
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	7d1b      	ldrb	r3, [r3, #20]
 80116d8:	2b03      	cmp	r3, #3
 80116da:	f240 8096 	bls.w	801180a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d244      	bcs.n	8011778 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	8b5b      	ldrh	r3, [r3, #26]
 80116f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d001      	beq.n	80116fe <tcp_receive+0x256>
 80116fa:	2301      	movs	r3, #1
 80116fc:	e000      	b.n	8011700 <tcp_receive+0x258>
 80116fe:	2302      	movs	r3, #2
 8011700:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011704:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011708:	b29a      	uxth	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801170e:	fb12 f303 	smulbb	r3, r2, r3
 8011712:	b29b      	uxth	r3, r3
 8011714:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011716:	4293      	cmp	r3, r2
 8011718:	bf28      	it	cs
 801171a:	4613      	movcs	r3, r2
 801171c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011724:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011726:	4413      	add	r3, r2
 8011728:	b29a      	uxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011730:	429a      	cmp	r2, r3
 8011732:	d309      	bcc.n	8011748 <tcp_receive+0x2a0>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801173a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801173c:	4413      	add	r3, r2
 801173e:	b29a      	uxth	r2, r3
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011746:	e060      	b.n	801180a <tcp_receive+0x362>
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801174e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011752:	e05a      	b.n	801180a <tcp_receive+0x362>
 8011754:	08020384 	.word	0x08020384
 8011758:	080206b4 	.word	0x080206b4
 801175c:	080203d0 	.word	0x080203d0
 8011760:	080206d0 	.word	0x080206d0
 8011764:	20000480 	.word	0x20000480
 8011768:	20000474 	.word	0x20000474
 801176c:	20000478 	.word	0x20000478
 8011770:	20000464 	.word	0x20000464
 8011774:	2000047e 	.word	0x2000047e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801177e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011780:	4413      	add	r3, r2
 8011782:	b29a      	uxth	r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801178a:	429a      	cmp	r2, r3
 801178c:	d309      	bcc.n	80117a2 <tcp_receive+0x2fa>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011794:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011796:	4413      	add	r3, r2
 8011798:	b29a      	uxth	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80117a0:	e004      	b.n	80117ac <tcp_receive+0x304>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d326      	bcc.n	801180a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117c8:	1ad3      	subs	r3, r2, r3
 80117ca:	b29a      	uxth	r2, r3
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117dc:	4413      	add	r3, r2
 80117de:	b29a      	uxth	r2, r3
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d30a      	bcc.n	8011800 <tcp_receive+0x358>
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117f4:	4413      	add	r3, r2
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117fe:	e004      	b.n	801180a <tcp_receive+0x362>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011806:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011812:	4a98      	ldr	r2, [pc, #608]	; (8011a74 <tcp_receive+0x5cc>)
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f7ff fdcb 	bl	80113b0 <tcp_free_acked_segments>
 801181a:	4602      	mov	r2, r0
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011828:	4a93      	ldr	r2, [pc, #588]	; (8011a78 <tcp_receive+0x5d0>)
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7ff fdc0 	bl	80113b0 <tcp_free_acked_segments>
 8011830:	4602      	mov	r2, r0
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801183a:	2b00      	cmp	r3, #0
 801183c:	d104      	bne.n	8011848 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011844:	861a      	strh	r2, [r3, #48]	; 0x30
 8011846:	e002      	b.n	801184e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2200      	movs	r2, #0
 801184c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2200      	movs	r2, #0
 8011852:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011858:	2b00      	cmp	r3, #0
 801185a:	d103      	bne.n	8011864 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2200      	movs	r2, #0
 8011860:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801186a:	4b84      	ldr	r3, [pc, #528]	; (8011a7c <tcp_receive+0x5d4>)
 801186c:	881b      	ldrh	r3, [r3, #0]
 801186e:	4413      	add	r3, r2
 8011870:	b29a      	uxth	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	8b5b      	ldrh	r3, [r3, #26]
 801187c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011880:	2b00      	cmp	r3, #0
 8011882:	d035      	beq.n	80118f0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011888:	2b00      	cmp	r3, #0
 801188a:	d118      	bne.n	80118be <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011890:	2b00      	cmp	r3, #0
 8011892:	d00c      	beq.n	80118ae <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fb faa5 	bl	800cdf0 <lwip_htonl>
 80118a6:	4603      	mov	r3, r0
 80118a8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	dc20      	bgt.n	80118f0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	8b5b      	ldrh	r3, [r3, #26]
 80118b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118b6:	b29a      	uxth	r2, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80118bc:	e018      	b.n	80118f0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7fb fa90 	bl	800cdf0 <lwip_htonl>
 80118d0:	4603      	mov	r3, r0
 80118d2:	1ae3      	subs	r3, r4, r3
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	dc0b      	bgt.n	80118f0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	8b5b      	ldrh	r3, [r3, #26]
 80118dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80118e6:	e003      	b.n	80118f0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f001 ff75 	bl	80137d8 <tcp_send_empty_ack>
 80118ee:	e000      	b.n	80118f2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80118f0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d05b      	beq.n	80119b2 <tcp_receive+0x50a>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118fe:	4b60      	ldr	r3, [pc, #384]	; (8011a80 <tcp_receive+0x5d8>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	2b00      	cmp	r3, #0
 8011906:	da54      	bge.n	80119b2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011908:	4b5e      	ldr	r3, [pc, #376]	; (8011a84 <tcp_receive+0x5dc>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	b29a      	uxth	r2, r3
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011912:	b29b      	uxth	r3, r3
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	b29b      	uxth	r3, r3
 8011918:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801191c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011926:	10db      	asrs	r3, r3, #3
 8011928:	b21b      	sxth	r3, r3
 801192a:	b29b      	uxth	r3, r3
 801192c:	1ad3      	subs	r3, r2, r3
 801192e:	b29b      	uxth	r3, r3
 8011930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801193a:	b29a      	uxth	r2, r3
 801193c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011940:	4413      	add	r3, r2
 8011942:	b29b      	uxth	r3, r3
 8011944:	b21a      	sxth	r2, r3
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801194a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801194e:	2b00      	cmp	r3, #0
 8011950:	da05      	bge.n	801195e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011952:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011956:	425b      	negs	r3, r3
 8011958:	b29b      	uxth	r3, r3
 801195a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801195e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011968:	109b      	asrs	r3, r3, #2
 801196a:	b21b      	sxth	r3, r3
 801196c:	b29b      	uxth	r3, r3
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	b29b      	uxth	r3, r3
 8011972:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801197c:	b29a      	uxth	r2, r3
 801197e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011982:	4413      	add	r3, r2
 8011984:	b29b      	uxth	r3, r3
 8011986:	b21a      	sxth	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011992:	10db      	asrs	r3, r3, #3
 8011994:	b21b      	sxth	r3, r3
 8011996:	b29a      	uxth	r2, r3
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801199e:	b29b      	uxth	r3, r3
 80119a0:	4413      	add	r3, r2
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	b21a      	sxth	r2, r3
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80119b2:	4b35      	ldr	r3, [pc, #212]	; (8011a88 <tcp_receive+0x5e0>)
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	f000 84e1 	beq.w	801237e <tcp_receive+0xed6>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	7d1b      	ldrb	r3, [r3, #20]
 80119c0:	2b06      	cmp	r3, #6
 80119c2:	f200 84dc 	bhi.w	801237e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119ca:	4b30      	ldr	r3, [pc, #192]	; (8011a8c <tcp_receive+0x5e4>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	3b01      	subs	r3, #1
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	f2c0 808e 	blt.w	8011af4 <tcp_receive+0x64c>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119dc:	4b2a      	ldr	r3, [pc, #168]	; (8011a88 <tcp_receive+0x5e0>)
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	4619      	mov	r1, r3
 80119e2:	4b2a      	ldr	r3, [pc, #168]	; (8011a8c <tcp_receive+0x5e4>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	440b      	add	r3, r1
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	3301      	adds	r3, #1
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f300 8081 	bgt.w	8011af4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80119f2:	4b27      	ldr	r3, [pc, #156]	; (8011a90 <tcp_receive+0x5e8>)
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119fc:	4b23      	ldr	r3, [pc, #140]	; (8011a8c <tcp_receive+0x5e4>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011a04:	4b22      	ldr	r3, [pc, #136]	; (8011a90 <tcp_receive+0x5e8>)
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d106      	bne.n	8011a1a <tcp_receive+0x572>
 8011a0c:	4b21      	ldr	r3, [pc, #132]	; (8011a94 <tcp_receive+0x5ec>)
 8011a0e:	f240 5294 	movw	r2, #1428	; 0x594
 8011a12:	4921      	ldr	r1, [pc, #132]	; (8011a98 <tcp_receive+0x5f0>)
 8011a14:	4821      	ldr	r0, [pc, #132]	; (8011a9c <tcp_receive+0x5f4>)
 8011a16:	f006 f9c7 	bl	8017da8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d906      	bls.n	8011a32 <tcp_receive+0x58a>
 8011a24:	4b1b      	ldr	r3, [pc, #108]	; (8011a94 <tcp_receive+0x5ec>)
 8011a26:	f240 5295 	movw	r2, #1429	; 0x595
 8011a2a:	491d      	ldr	r1, [pc, #116]	; (8011aa0 <tcp_receive+0x5f8>)
 8011a2c:	481b      	ldr	r0, [pc, #108]	; (8011a9c <tcp_receive+0x5f4>)
 8011a2e:	f006 f9bb 	bl	8017da8 <iprintf>
      off = (u16_t)off32;
 8011a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011a38:	4b15      	ldr	r3, [pc, #84]	; (8011a90 <tcp_receive+0x5e8>)
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	891b      	ldrh	r3, [r3, #8]
 8011a3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d906      	bls.n	8011a54 <tcp_receive+0x5ac>
 8011a46:	4b13      	ldr	r3, [pc, #76]	; (8011a94 <tcp_receive+0x5ec>)
 8011a48:	f240 5297 	movw	r2, #1431	; 0x597
 8011a4c:	4915      	ldr	r1, [pc, #84]	; (8011aa4 <tcp_receive+0x5fc>)
 8011a4e:	4813      	ldr	r0, [pc, #76]	; (8011a9c <tcp_receive+0x5f4>)
 8011a50:	f006 f9aa 	bl	8017da8 <iprintf>
      inseg.len -= off;
 8011a54:	4b0e      	ldr	r3, [pc, #56]	; (8011a90 <tcp_receive+0x5e8>)
 8011a56:	891a      	ldrh	r2, [r3, #8]
 8011a58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	4b0b      	ldr	r3, [pc, #44]	; (8011a90 <tcp_receive+0x5e8>)
 8011a62:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011a64:	4b0a      	ldr	r3, [pc, #40]	; (8011a90 <tcp_receive+0x5e8>)
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	891a      	ldrh	r2, [r3, #8]
 8011a6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a6e:	1ad3      	subs	r3, r2, r3
 8011a70:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011a72:	e029      	b.n	8011ac8 <tcp_receive+0x620>
 8011a74:	080206ec 	.word	0x080206ec
 8011a78:	080206f4 	.word	0x080206f4
 8011a7c:	2000047c 	.word	0x2000047c
 8011a80:	20000478 	.word	0x20000478
 8011a84:	2000711c 	.word	0x2000711c
 8011a88:	2000047e 	.word	0x2000047e
 8011a8c:	20000474 	.word	0x20000474
 8011a90:	20000454 	.word	0x20000454
 8011a94:	08020384 	.word	0x08020384
 8011a98:	080206fc 	.word	0x080206fc
 8011a9c:	080203d0 	.word	0x080203d0
 8011aa0:	0802070c 	.word	0x0802070c
 8011aa4:	0802071c 	.word	0x0802071c
        off -= p->len;
 8011aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aaa:	895b      	ldrh	r3, [r3, #10]
 8011aac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ab0:	1ad3      	subs	r3, r2, r3
 8011ab2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ab8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011aba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011abe:	2200      	movs	r2, #0
 8011ac0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011aca:	895b      	ldrh	r3, [r3, #10]
 8011acc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d8e9      	bhi.n	8011aa8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011ad4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ad8:	4619      	mov	r1, r3
 8011ada:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011adc:	f7fc fb80 	bl	800e1e0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae4:	4a91      	ldr	r2, [pc, #580]	; (8011d2c <tcp_receive+0x884>)
 8011ae6:	6013      	str	r3, [r2, #0]
 8011ae8:	4b91      	ldr	r3, [pc, #580]	; (8011d30 <tcp_receive+0x888>)
 8011aea:	68db      	ldr	r3, [r3, #12]
 8011aec:	4a8f      	ldr	r2, [pc, #572]	; (8011d2c <tcp_receive+0x884>)
 8011aee:	6812      	ldr	r2, [r2, #0]
 8011af0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011af2:	e00d      	b.n	8011b10 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011af4:	4b8d      	ldr	r3, [pc, #564]	; (8011d2c <tcp_receive+0x884>)
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011afc:	1ad3      	subs	r3, r2, r3
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	da06      	bge.n	8011b10 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8b5b      	ldrh	r3, [r3, #26]
 8011b06:	f043 0302 	orr.w	r3, r3, #2
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b10:	4b86      	ldr	r3, [pc, #536]	; (8011d2c <tcp_receive+0x884>)
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f2c0 842a 	blt.w	8012374 <tcp_receive+0xecc>
 8011b20:	4b82      	ldr	r3, [pc, #520]	; (8011d2c <tcp_receive+0x884>)
 8011b22:	681a      	ldr	r2, [r3, #0]
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b28:	6879      	ldr	r1, [r7, #4]
 8011b2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b2c:	440b      	add	r3, r1
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	3301      	adds	r3, #1
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	f300 841e 	bgt.w	8012374 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b3c:	4b7b      	ldr	r3, [pc, #492]	; (8011d2c <tcp_receive+0x884>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	f040 829a 	bne.w	801207a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011b46:	4b7a      	ldr	r3, [pc, #488]	; (8011d30 <tcp_receive+0x888>)
 8011b48:	891c      	ldrh	r4, [r3, #8]
 8011b4a:	4b79      	ldr	r3, [pc, #484]	; (8011d30 <tcp_receive+0x888>)
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	899b      	ldrh	r3, [r3, #12]
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7fb f937 	bl	800cdc6 <lwip_htons>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	f003 0303 	and.w	r3, r3, #3
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d001      	beq.n	8011b68 <tcp_receive+0x6c0>
 8011b64:	2301      	movs	r3, #1
 8011b66:	e000      	b.n	8011b6a <tcp_receive+0x6c2>
 8011b68:	2300      	movs	r3, #0
 8011b6a:	4423      	add	r3, r4
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	4b71      	ldr	r3, [pc, #452]	; (8011d34 <tcp_receive+0x88c>)
 8011b70:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011b76:	4b6f      	ldr	r3, [pc, #444]	; (8011d34 <tcp_receive+0x88c>)
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d275      	bcs.n	8011c6a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011b7e:	4b6c      	ldr	r3, [pc, #432]	; (8011d30 <tcp_receive+0x888>)
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	899b      	ldrh	r3, [r3, #12]
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7fb f91d 	bl	800cdc6 <lwip_htons>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	b2db      	uxtb	r3, r3
 8011b90:	f003 0301 	and.w	r3, r3, #1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d01f      	beq.n	8011bd8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011b98:	4b65      	ldr	r3, [pc, #404]	; (8011d30 <tcp_receive+0x888>)
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	899b      	ldrh	r3, [r3, #12]
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	b21b      	sxth	r3, r3
 8011ba2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011ba6:	b21c      	sxth	r4, r3
 8011ba8:	4b61      	ldr	r3, [pc, #388]	; (8011d30 <tcp_receive+0x888>)
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	899b      	ldrh	r3, [r3, #12]
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f7fb f908 	bl	800cdc6 <lwip_htons>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fb f8ff 	bl	800cdc6 <lwip_htons>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	b21b      	sxth	r3, r3
 8011bcc:	4323      	orrs	r3, r4
 8011bce:	b21a      	sxth	r2, r3
 8011bd0:	4b57      	ldr	r3, [pc, #348]	; (8011d30 <tcp_receive+0x888>)
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	b292      	uxth	r2, r2
 8011bd6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bdc:	4b54      	ldr	r3, [pc, #336]	; (8011d30 <tcp_receive+0x888>)
 8011bde:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011be0:	4b53      	ldr	r3, [pc, #332]	; (8011d30 <tcp_receive+0x888>)
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	899b      	ldrh	r3, [r3, #12]
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7fb f8ec 	bl	800cdc6 <lwip_htons>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	f003 0302 	and.w	r3, r3, #2
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d005      	beq.n	8011c06 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011bfa:	4b4d      	ldr	r3, [pc, #308]	; (8011d30 <tcp_receive+0x888>)
 8011bfc:	891b      	ldrh	r3, [r3, #8]
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	4b4b      	ldr	r3, [pc, #300]	; (8011d30 <tcp_receive+0x888>)
 8011c04:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011c06:	4b4a      	ldr	r3, [pc, #296]	; (8011d30 <tcp_receive+0x888>)
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	4a49      	ldr	r2, [pc, #292]	; (8011d30 <tcp_receive+0x888>)
 8011c0c:	8912      	ldrh	r2, [r2, #8]
 8011c0e:	4611      	mov	r1, r2
 8011c10:	4618      	mov	r0, r3
 8011c12:	f7fc f9e5 	bl	800dfe0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011c16:	4b46      	ldr	r3, [pc, #280]	; (8011d30 <tcp_receive+0x888>)
 8011c18:	891c      	ldrh	r4, [r3, #8]
 8011c1a:	4b45      	ldr	r3, [pc, #276]	; (8011d30 <tcp_receive+0x888>)
 8011c1c:	68db      	ldr	r3, [r3, #12]
 8011c1e:	899b      	ldrh	r3, [r3, #12]
 8011c20:	b29b      	uxth	r3, r3
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7fb f8cf 	bl	800cdc6 <lwip_htons>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	f003 0303 	and.w	r3, r3, #3
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d001      	beq.n	8011c38 <tcp_receive+0x790>
 8011c34:	2301      	movs	r3, #1
 8011c36:	e000      	b.n	8011c3a <tcp_receive+0x792>
 8011c38:	2300      	movs	r3, #0
 8011c3a:	4423      	add	r3, r4
 8011c3c:	b29a      	uxth	r2, r3
 8011c3e:	4b3d      	ldr	r3, [pc, #244]	; (8011d34 <tcp_receive+0x88c>)
 8011c40:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011c42:	4b3c      	ldr	r3, [pc, #240]	; (8011d34 <tcp_receive+0x88c>)
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	461a      	mov	r2, r3
 8011c48:	4b38      	ldr	r3, [pc, #224]	; (8011d2c <tcp_receive+0x884>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	441a      	add	r2, r3
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c52:	6879      	ldr	r1, [r7, #4]
 8011c54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c56:	440b      	add	r3, r1
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d006      	beq.n	8011c6a <tcp_receive+0x7c2>
 8011c5c:	4b36      	ldr	r3, [pc, #216]	; (8011d38 <tcp_receive+0x890>)
 8011c5e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011c62:	4936      	ldr	r1, [pc, #216]	; (8011d3c <tcp_receive+0x894>)
 8011c64:	4836      	ldr	r0, [pc, #216]	; (8011d40 <tcp_receive+0x898>)
 8011c66:	f006 f89f 	bl	8017da8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	f000 80e7 	beq.w	8011e42 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c74:	4b2e      	ldr	r3, [pc, #184]	; (8011d30 <tcp_receive+0x888>)
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	899b      	ldrh	r3, [r3, #12]
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7fb f8a2 	bl	800cdc6 <lwip_htons>
 8011c82:	4603      	mov	r3, r0
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	f003 0301 	and.w	r3, r3, #1
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d010      	beq.n	8011cb0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011c8e:	e00a      	b.n	8011ca6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c94:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011ca0:	68f8      	ldr	r0, [r7, #12]
 8011ca2:	f7fd fd96 	bl	800f7d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1f0      	bne.n	8011c90 <tcp_receive+0x7e8>
 8011cae:	e0c8      	b.n	8011e42 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011cb6:	e052      	b.n	8011d5e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	899b      	ldrh	r3, [r3, #12]
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fb f880 	bl	800cdc6 <lwip_htons>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	f003 0301 	and.w	r3, r3, #1
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d03d      	beq.n	8011d4e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011cd2:	4b17      	ldr	r3, [pc, #92]	; (8011d30 <tcp_receive+0x888>)
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	899b      	ldrh	r3, [r3, #12]
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fb f873 	bl	800cdc6 <lwip_htons>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d130      	bne.n	8011d4e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011cec:	4b10      	ldr	r3, [pc, #64]	; (8011d30 <tcp_receive+0x888>)
 8011cee:	68db      	ldr	r3, [r3, #12]
 8011cf0:	899b      	ldrh	r3, [r3, #12]
 8011cf2:	b29c      	uxth	r4, r3
 8011cf4:	2001      	movs	r0, #1
 8011cf6:	f7fb f866 	bl	800cdc6 <lwip_htons>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	4b0c      	ldr	r3, [pc, #48]	; (8011d30 <tcp_receive+0x888>)
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	4322      	orrs	r2, r4
 8011d04:	b292      	uxth	r2, r2
 8011d06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011d08:	4b09      	ldr	r3, [pc, #36]	; (8011d30 <tcp_receive+0x888>)
 8011d0a:	891c      	ldrh	r4, [r3, #8]
 8011d0c:	4b08      	ldr	r3, [pc, #32]	; (8011d30 <tcp_receive+0x888>)
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	899b      	ldrh	r3, [r3, #12]
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fb f856 	bl	800cdc6 <lwip_htons>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	f003 0303 	and.w	r3, r3, #3
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00e      	beq.n	8011d44 <tcp_receive+0x89c>
 8011d26:	2301      	movs	r3, #1
 8011d28:	e00d      	b.n	8011d46 <tcp_receive+0x89e>
 8011d2a:	bf00      	nop
 8011d2c:	20000474 	.word	0x20000474
 8011d30:	20000454 	.word	0x20000454
 8011d34:	2000047e 	.word	0x2000047e
 8011d38:	08020384 	.word	0x08020384
 8011d3c:	0802072c 	.word	0x0802072c
 8011d40:	080203d0 	.word	0x080203d0
 8011d44:	2300      	movs	r3, #0
 8011d46:	4423      	add	r3, r4
 8011d48:	b29a      	uxth	r2, r3
 8011d4a:	4b98      	ldr	r3, [pc, #608]	; (8011fac <tcp_receive+0xb04>)
 8011d4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d50:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011d58:	6938      	ldr	r0, [r7, #16]
 8011d5a:	f7fd fd3a 	bl	800f7d2 <tcp_seg_free>
            while (next &&
 8011d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d00e      	beq.n	8011d82 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011d64:	4b91      	ldr	r3, [pc, #580]	; (8011fac <tcp_receive+0xb04>)
 8011d66:	881b      	ldrh	r3, [r3, #0]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	4b91      	ldr	r3, [pc, #580]	; (8011fb0 <tcp_receive+0xb08>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	441a      	add	r2, r3
 8011d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d78:	8909      	ldrh	r1, [r1, #8]
 8011d7a:	440b      	add	r3, r1
 8011d7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	da9a      	bge.n	8011cb8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d059      	beq.n	8011e3c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011d88:	4b88      	ldr	r3, [pc, #544]	; (8011fac <tcp_receive+0xb04>)
 8011d8a:	881b      	ldrh	r3, [r3, #0]
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	4b88      	ldr	r3, [pc, #544]	; (8011fb0 <tcp_receive+0xb08>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	441a      	add	r2, r3
 8011d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	dd4d      	ble.n	8011e3c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	4b81      	ldr	r3, [pc, #516]	; (8011fb0 <tcp_receive+0xb08>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	b29a      	uxth	r2, r3
 8011db2:	4b80      	ldr	r3, [pc, #512]	; (8011fb4 <tcp_receive+0xb0c>)
 8011db4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011db6:	4b7f      	ldr	r3, [pc, #508]	; (8011fb4 <tcp_receive+0xb0c>)
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	899b      	ldrh	r3, [r3, #12]
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fb f801 	bl	800cdc6 <lwip_htons>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	b2db      	uxtb	r3, r3
 8011dc8:	f003 0302 	and.w	r3, r3, #2
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d005      	beq.n	8011ddc <tcp_receive+0x934>
                inseg.len -= 1;
 8011dd0:	4b78      	ldr	r3, [pc, #480]	; (8011fb4 <tcp_receive+0xb0c>)
 8011dd2:	891b      	ldrh	r3, [r3, #8]
 8011dd4:	3b01      	subs	r3, #1
 8011dd6:	b29a      	uxth	r2, r3
 8011dd8:	4b76      	ldr	r3, [pc, #472]	; (8011fb4 <tcp_receive+0xb0c>)
 8011dda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011ddc:	4b75      	ldr	r3, [pc, #468]	; (8011fb4 <tcp_receive+0xb0c>)
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	4a74      	ldr	r2, [pc, #464]	; (8011fb4 <tcp_receive+0xb0c>)
 8011de2:	8912      	ldrh	r2, [r2, #8]
 8011de4:	4611      	mov	r1, r2
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fc f8fa 	bl	800dfe0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011dec:	4b71      	ldr	r3, [pc, #452]	; (8011fb4 <tcp_receive+0xb0c>)
 8011dee:	891c      	ldrh	r4, [r3, #8]
 8011df0:	4b70      	ldr	r3, [pc, #448]	; (8011fb4 <tcp_receive+0xb0c>)
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	899b      	ldrh	r3, [r3, #12]
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7fa ffe4 	bl	800cdc6 <lwip_htons>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	b2db      	uxtb	r3, r3
 8011e02:	f003 0303 	and.w	r3, r3, #3
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d001      	beq.n	8011e0e <tcp_receive+0x966>
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	e000      	b.n	8011e10 <tcp_receive+0x968>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	4423      	add	r3, r4
 8011e12:	b29a      	uxth	r2, r3
 8011e14:	4b65      	ldr	r3, [pc, #404]	; (8011fac <tcp_receive+0xb04>)
 8011e16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011e18:	4b64      	ldr	r3, [pc, #400]	; (8011fac <tcp_receive+0xb04>)
 8011e1a:	881b      	ldrh	r3, [r3, #0]
 8011e1c:	461a      	mov	r2, r3
 8011e1e:	4b64      	ldr	r3, [pc, #400]	; (8011fb0 <tcp_receive+0xb08>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	441a      	add	r2, r3
 8011e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d006      	beq.n	8011e3c <tcp_receive+0x994>
 8011e2e:	4b62      	ldr	r3, [pc, #392]	; (8011fb8 <tcp_receive+0xb10>)
 8011e30:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011e34:	4961      	ldr	r1, [pc, #388]	; (8011fbc <tcp_receive+0xb14>)
 8011e36:	4862      	ldr	r0, [pc, #392]	; (8011fc0 <tcp_receive+0xb18>)
 8011e38:	f005 ffb6 	bl	8017da8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011e42:	4b5a      	ldr	r3, [pc, #360]	; (8011fac <tcp_receive+0xb04>)
 8011e44:	881b      	ldrh	r3, [r3, #0]
 8011e46:	461a      	mov	r2, r3
 8011e48:	4b59      	ldr	r3, [pc, #356]	; (8011fb0 <tcp_receive+0xb08>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	441a      	add	r2, r3
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e56:	4b55      	ldr	r3, [pc, #340]	; (8011fac <tcp_receive+0xb04>)
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d206      	bcs.n	8011e6c <tcp_receive+0x9c4>
 8011e5e:	4b56      	ldr	r3, [pc, #344]	; (8011fb8 <tcp_receive+0xb10>)
 8011e60:	f240 6207 	movw	r2, #1543	; 0x607
 8011e64:	4957      	ldr	r1, [pc, #348]	; (8011fc4 <tcp_receive+0xb1c>)
 8011e66:	4856      	ldr	r0, [pc, #344]	; (8011fc0 <tcp_receive+0xb18>)
 8011e68:	f005 ff9e 	bl	8017da8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e70:	4b4e      	ldr	r3, [pc, #312]	; (8011fac <tcp_receive+0xb04>)
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	1ad3      	subs	r3, r2, r3
 8011e76:	b29a      	uxth	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7fc ffc9 	bl	800ee14 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011e82:	4b4c      	ldr	r3, [pc, #304]	; (8011fb4 <tcp_receive+0xb0c>)
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	891b      	ldrh	r3, [r3, #8]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d006      	beq.n	8011e9a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011e8c:	4b49      	ldr	r3, [pc, #292]	; (8011fb4 <tcp_receive+0xb0c>)
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	4a4d      	ldr	r2, [pc, #308]	; (8011fc8 <tcp_receive+0xb20>)
 8011e92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011e94:	4b47      	ldr	r3, [pc, #284]	; (8011fb4 <tcp_receive+0xb0c>)
 8011e96:	2200      	movs	r2, #0
 8011e98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011e9a:	4b46      	ldr	r3, [pc, #280]	; (8011fb4 <tcp_receive+0xb0c>)
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	899b      	ldrh	r3, [r3, #12]
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fa ff8f 	bl	800cdc6 <lwip_htons>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	f003 0301 	and.w	r3, r3, #1
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	f000 80b8 	beq.w	8012026 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011eb6:	4b45      	ldr	r3, [pc, #276]	; (8011fcc <tcp_receive+0xb24>)
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	f043 0320 	orr.w	r3, r3, #32
 8011ebe:	b2da      	uxtb	r2, r3
 8011ec0:	4b42      	ldr	r3, [pc, #264]	; (8011fcc <tcp_receive+0xb24>)
 8011ec2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011ec4:	e0af      	b.n	8012026 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011eca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	4a36      	ldr	r2, [pc, #216]	; (8011fb0 <tcp_receive+0xb08>)
 8011ed6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	891b      	ldrh	r3, [r3, #8]
 8011edc:	461c      	mov	r4, r3
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	899b      	ldrh	r3, [r3, #12]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fa ff6d 	bl	800cdc6 <lwip_htons>
 8011eec:	4603      	mov	r3, r0
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	f003 0303 	and.w	r3, r3, #3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d001      	beq.n	8011efc <tcp_receive+0xa54>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	e000      	b.n	8011efe <tcp_receive+0xa56>
 8011efc:	2300      	movs	r3, #0
 8011efe:	191a      	adds	r2, r3, r4
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f04:	441a      	add	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f0e:	461c      	mov	r4, r3
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	891b      	ldrh	r3, [r3, #8]
 8011f14:	461d      	mov	r5, r3
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	899b      	ldrh	r3, [r3, #12]
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fa ff51 	bl	800cdc6 <lwip_htons>
 8011f24:	4603      	mov	r3, r0
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	f003 0303 	and.w	r3, r3, #3
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d001      	beq.n	8011f34 <tcp_receive+0xa8c>
 8011f30:	2301      	movs	r3, #1
 8011f32:	e000      	b.n	8011f36 <tcp_receive+0xa8e>
 8011f34:	2300      	movs	r3, #0
 8011f36:	442b      	add	r3, r5
 8011f38:	429c      	cmp	r4, r3
 8011f3a:	d206      	bcs.n	8011f4a <tcp_receive+0xaa2>
 8011f3c:	4b1e      	ldr	r3, [pc, #120]	; (8011fb8 <tcp_receive+0xb10>)
 8011f3e:	f240 622b 	movw	r2, #1579	; 0x62b
 8011f42:	4923      	ldr	r1, [pc, #140]	; (8011fd0 <tcp_receive+0xb28>)
 8011f44:	481e      	ldr	r0, [pc, #120]	; (8011fc0 <tcp_receive+0xb18>)
 8011f46:	f005 ff2f 	bl	8017da8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	891b      	ldrh	r3, [r3, #8]
 8011f4e:	461c      	mov	r4, r3
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	899b      	ldrh	r3, [r3, #12]
 8011f56:	b29b      	uxth	r3, r3
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fa ff34 	bl	800cdc6 <lwip_htons>
 8011f5e:	4603      	mov	r3, r0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	f003 0303 	and.w	r3, r3, #3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d001      	beq.n	8011f6e <tcp_receive+0xac6>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e000      	b.n	8011f70 <tcp_receive+0xac8>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	1919      	adds	r1, r3, r4
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f76:	b28b      	uxth	r3, r1
 8011f78:	1ad3      	subs	r3, r2, r3
 8011f7a:	b29a      	uxth	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f7fc ff47 	bl	800ee14 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	891b      	ldrh	r3, [r3, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d028      	beq.n	8011fe2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011f90:	4b0d      	ldr	r3, [pc, #52]	; (8011fc8 <tcp_receive+0xb20>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d01d      	beq.n	8011fd4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011f98:	4b0b      	ldr	r3, [pc, #44]	; (8011fc8 <tcp_receive+0xb20>)
 8011f9a:	681a      	ldr	r2, [r3, #0]
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	f7fc fa64 	bl	800e470 <pbuf_cat>
 8011fa8:	e018      	b.n	8011fdc <tcp_receive+0xb34>
 8011faa:	bf00      	nop
 8011fac:	2000047e 	.word	0x2000047e
 8011fb0:	20000474 	.word	0x20000474
 8011fb4:	20000454 	.word	0x20000454
 8011fb8:	08020384 	.word	0x08020384
 8011fbc:	08020764 	.word	0x08020764
 8011fc0:	080203d0 	.word	0x080203d0
 8011fc4:	080207a0 	.word	0x080207a0
 8011fc8:	20000484 	.word	0x20000484
 8011fcc:	20000481 	.word	0x20000481
 8011fd0:	080207c0 	.word	0x080207c0
            } else {
              recv_data = cseg->p;
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	4a70      	ldr	r2, [pc, #448]	; (801219c <tcp_receive+0xcf4>)
 8011fda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2200      	movs	r2, #0
 8011fe0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	899b      	ldrh	r3, [r3, #12]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7fa feeb 	bl	800cdc6 <lwip_htons>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	f003 0301 	and.w	r3, r3, #1
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d00d      	beq.n	8012018 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011ffc:	4b68      	ldr	r3, [pc, #416]	; (80121a0 <tcp_receive+0xcf8>)
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	f043 0320 	orr.w	r3, r3, #32
 8012004:	b2da      	uxtb	r2, r3
 8012006:	4b66      	ldr	r3, [pc, #408]	; (80121a0 <tcp_receive+0xcf8>)
 8012008:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	7d1b      	ldrb	r3, [r3, #20]
 801200e:	2b04      	cmp	r3, #4
 8012010:	d102      	bne.n	8012018 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2207      	movs	r2, #7
 8012016:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	681a      	ldr	r2, [r3, #0]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012020:	68b8      	ldr	r0, [r7, #8]
 8012022:	f7fd fbd6 	bl	800f7d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801202a:	2b00      	cmp	r3, #0
 801202c:	d008      	beq.n	8012040 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	685a      	ldr	r2, [r3, #4]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801203a:	429a      	cmp	r2, r3
 801203c:	f43f af43 	beq.w	8011ec6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	8b5b      	ldrh	r3, [r3, #26]
 8012044:	f003 0301 	and.w	r3, r3, #1
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00e      	beq.n	801206a <tcp_receive+0xbc2>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	8b5b      	ldrh	r3, [r3, #26]
 8012050:	f023 0301 	bic.w	r3, r3, #1
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	835a      	strh	r2, [r3, #26]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	8b5b      	ldrh	r3, [r3, #26]
 801205e:	f043 0302 	orr.w	r3, r3, #2
 8012062:	b29a      	uxth	r2, r3
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012068:	e188      	b.n	801237c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	8b5b      	ldrh	r3, [r3, #26]
 801206e:	f043 0301 	orr.w	r3, r3, #1
 8012072:	b29a      	uxth	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012078:	e180      	b.n	801237c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801207e:	2b00      	cmp	r3, #0
 8012080:	d106      	bne.n	8012090 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012082:	4848      	ldr	r0, [pc, #288]	; (80121a4 <tcp_receive+0xcfc>)
 8012084:	f7fd fbbe 	bl	800f804 <tcp_seg_copy>
 8012088:	4602      	mov	r2, r0
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	675a      	str	r2, [r3, #116]	; 0x74
 801208e:	e16d      	b.n	801236c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012090:	2300      	movs	r3, #0
 8012092:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012098:	63bb      	str	r3, [r7, #56]	; 0x38
 801209a:	e157      	b.n	801234c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209e:	68db      	ldr	r3, [r3, #12]
 80120a0:	685a      	ldr	r2, [r3, #4]
 80120a2:	4b41      	ldr	r3, [pc, #260]	; (80121a8 <tcp_receive+0xd00>)
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d11d      	bne.n	80120e6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80120aa:	4b3e      	ldr	r3, [pc, #248]	; (80121a4 <tcp_receive+0xcfc>)
 80120ac:	891a      	ldrh	r2, [r3, #8]
 80120ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b0:	891b      	ldrh	r3, [r3, #8]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	f240 814f 	bls.w	8012356 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80120b8:	483a      	ldr	r0, [pc, #232]	; (80121a4 <tcp_receive+0xcfc>)
 80120ba:	f7fd fba3 	bl	800f804 <tcp_seg_copy>
 80120be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	f000 8149 	beq.w	801235a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80120c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d003      	beq.n	80120d6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80120ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d0:	697a      	ldr	r2, [r7, #20]
 80120d2:	601a      	str	r2, [r3, #0]
 80120d4:	e002      	b.n	80120dc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	697a      	ldr	r2, [r7, #20]
 80120da:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80120dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80120de:	6978      	ldr	r0, [r7, #20]
 80120e0:	f7ff f8de 	bl	80112a0 <tcp_oos_insert_segment>
                }
                break;
 80120e4:	e139      	b.n	801235a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80120e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d117      	bne.n	801211c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80120ec:	4b2e      	ldr	r3, [pc, #184]	; (80121a8 <tcp_receive+0xd00>)
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	da57      	bge.n	80121ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80120fc:	4829      	ldr	r0, [pc, #164]	; (80121a4 <tcp_receive+0xcfc>)
 80120fe:	f7fd fb81 	bl	800f804 <tcp_seg_copy>
 8012102:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	2b00      	cmp	r3, #0
 8012108:	f000 8129 	beq.w	801235e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	69ba      	ldr	r2, [r7, #24]
 8012110:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012114:	69b8      	ldr	r0, [r7, #24]
 8012116:	f7ff f8c3 	bl	80112a0 <tcp_oos_insert_segment>
                  }
                  break;
 801211a:	e120      	b.n	801235e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801211c:	4b22      	ldr	r3, [pc, #136]	; (80121a8 <tcp_receive+0xd00>)
 801211e:	681a      	ldr	r2, [r3, #0]
 8012120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	1ad3      	subs	r3, r2, r3
 8012128:	3b01      	subs	r3, #1
 801212a:	2b00      	cmp	r3, #0
 801212c:	db3e      	blt.n	80121ac <tcp_receive+0xd04>
 801212e:	4b1e      	ldr	r3, [pc, #120]	; (80121a8 <tcp_receive+0xd00>)
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	685b      	ldr	r3, [r3, #4]
 8012138:	1ad3      	subs	r3, r2, r3
 801213a:	3301      	adds	r3, #1
 801213c:	2b00      	cmp	r3, #0
 801213e:	dc35      	bgt.n	80121ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012140:	4818      	ldr	r0, [pc, #96]	; (80121a4 <tcp_receive+0xcfc>)
 8012142:	f7fd fb5f 	bl	800f804 <tcp_seg_copy>
 8012146:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	2b00      	cmp	r3, #0
 801214c:	f000 8109 	beq.w	8012362 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	685b      	ldr	r3, [r3, #4]
 8012156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012158:	8912      	ldrh	r2, [r2, #8]
 801215a:	441a      	add	r2, r3
 801215c:	4b12      	ldr	r3, [pc, #72]	; (80121a8 <tcp_receive+0xd00>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	1ad3      	subs	r3, r2, r3
 8012162:	2b00      	cmp	r3, #0
 8012164:	dd12      	ble.n	801218c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012166:	4b10      	ldr	r3, [pc, #64]	; (80121a8 <tcp_receive+0xd00>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	b29a      	uxth	r2, r3
 801216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	b29b      	uxth	r3, r3
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	b29a      	uxth	r2, r3
 8012178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801217a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801217e:	685a      	ldr	r2, [r3, #4]
 8012180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012182:	891b      	ldrh	r3, [r3, #8]
 8012184:	4619      	mov	r1, r3
 8012186:	4610      	mov	r0, r2
 8012188:	f7fb ff2a 	bl	800dfe0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801218e:	69fa      	ldr	r2, [r7, #28]
 8012190:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012192:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012194:	69f8      	ldr	r0, [r7, #28]
 8012196:	f7ff f883 	bl	80112a0 <tcp_oos_insert_segment>
                  }
                  break;
 801219a:	e0e2      	b.n	8012362 <tcp_receive+0xeba>
 801219c:	20000484 	.word	0x20000484
 80121a0:	20000481 	.word	0x20000481
 80121a4:	20000454 	.word	0x20000454
 80121a8:	20000474 	.word	0x20000474
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80121ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80121b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	f040 80c6 	bne.w	8012346 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80121ba:	4b80      	ldr	r3, [pc, #512]	; (80123bc <tcp_receive+0xf14>)
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c0:	68db      	ldr	r3, [r3, #12]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	f340 80bd 	ble.w	8012346 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80121cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	899b      	ldrh	r3, [r3, #12]
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7fa fdf6 	bl	800cdc6 <lwip_htons>
 80121da:	4603      	mov	r3, r0
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	f003 0301 	and.w	r3, r3, #1
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	f040 80bf 	bne.w	8012366 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80121e8:	4875      	ldr	r0, [pc, #468]	; (80123c0 <tcp_receive+0xf18>)
 80121ea:	f7fd fb0b 	bl	800f804 <tcp_seg_copy>
 80121ee:	4602      	mov	r2, r0
 80121f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80121f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f000 80b6 	beq.w	801236a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80121fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012206:	8912      	ldrh	r2, [r2, #8]
 8012208:	441a      	add	r2, r3
 801220a:	4b6c      	ldr	r3, [pc, #432]	; (80123bc <tcp_receive+0xf14>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	1ad3      	subs	r3, r2, r3
 8012210:	2b00      	cmp	r3, #0
 8012212:	dd12      	ble.n	801223a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012214:	4b69      	ldr	r3, [pc, #420]	; (80123bc <tcp_receive+0xf14>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	b29a      	uxth	r2, r3
 801221a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	b29b      	uxth	r3, r3
 8012222:	1ad3      	subs	r3, r2, r3
 8012224:	b29a      	uxth	r2, r3
 8012226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012228:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012230:	891b      	ldrh	r3, [r3, #8]
 8012232:	4619      	mov	r1, r3
 8012234:	4610      	mov	r0, r2
 8012236:	f7fb fed3 	bl	800dfe0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801223a:	4b62      	ldr	r3, [pc, #392]	; (80123c4 <tcp_receive+0xf1c>)
 801223c:	881b      	ldrh	r3, [r3, #0]
 801223e:	461a      	mov	r2, r3
 8012240:	4b5e      	ldr	r3, [pc, #376]	; (80123bc <tcp_receive+0xf14>)
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	441a      	add	r2, r3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801224a:	6879      	ldr	r1, [r7, #4]
 801224c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801224e:	440b      	add	r3, r1
 8012250:	1ad3      	subs	r3, r2, r3
 8012252:	2b00      	cmp	r3, #0
 8012254:	f340 8089 	ble.w	801236a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	899b      	ldrh	r3, [r3, #12]
 8012260:	b29b      	uxth	r3, r3
 8012262:	4618      	mov	r0, r3
 8012264:	f7fa fdaf 	bl	800cdc6 <lwip_htons>
 8012268:	4603      	mov	r3, r0
 801226a:	b2db      	uxtb	r3, r3
 801226c:	f003 0301 	and.w	r3, r3, #1
 8012270:	2b00      	cmp	r3, #0
 8012272:	d022      	beq.n	80122ba <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	899b      	ldrh	r3, [r3, #12]
 801227c:	b29b      	uxth	r3, r3
 801227e:	b21b      	sxth	r3, r3
 8012280:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012284:	b21c      	sxth	r4, r3
 8012286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	899b      	ldrh	r3, [r3, #12]
 801228e:	b29b      	uxth	r3, r3
 8012290:	4618      	mov	r0, r3
 8012292:	f7fa fd98 	bl	800cdc6 <lwip_htons>
 8012296:	4603      	mov	r3, r0
 8012298:	b2db      	uxtb	r3, r3
 801229a:	b29b      	uxth	r3, r3
 801229c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	4618      	mov	r0, r3
 80122a4:	f7fa fd8f 	bl	800cdc6 <lwip_htons>
 80122a8:	4603      	mov	r3, r0
 80122aa:	b21b      	sxth	r3, r3
 80122ac:	4323      	orrs	r3, r4
 80122ae:	b21a      	sxth	r2, r3
 80122b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	68db      	ldr	r3, [r3, #12]
 80122b6:	b292      	uxth	r2, r2
 80122b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122be:	b29a      	uxth	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122c4:	4413      	add	r3, r2
 80122c6:	b299      	uxth	r1, r3
 80122c8:	4b3c      	ldr	r3, [pc, #240]	; (80123bc <tcp_receive+0xf14>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	1a8a      	subs	r2, r1, r2
 80122d4:	b292      	uxth	r2, r2
 80122d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80122d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	685a      	ldr	r2, [r3, #4]
 80122de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	891b      	ldrh	r3, [r3, #8]
 80122e4:	4619      	mov	r1, r3
 80122e6:	4610      	mov	r0, r2
 80122e8:	f7fb fe7a 	bl	800dfe0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80122ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	891c      	ldrh	r4, [r3, #8]
 80122f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	899b      	ldrh	r3, [r3, #12]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7fa fd62 	bl	800cdc6 <lwip_htons>
 8012302:	4603      	mov	r3, r0
 8012304:	b2db      	uxtb	r3, r3
 8012306:	f003 0303 	and.w	r3, r3, #3
 801230a:	2b00      	cmp	r3, #0
 801230c:	d001      	beq.n	8012312 <tcp_receive+0xe6a>
 801230e:	2301      	movs	r3, #1
 8012310:	e000      	b.n	8012314 <tcp_receive+0xe6c>
 8012312:	2300      	movs	r3, #0
 8012314:	4423      	add	r3, r4
 8012316:	b29a      	uxth	r2, r3
 8012318:	4b2a      	ldr	r3, [pc, #168]	; (80123c4 <tcp_receive+0xf1c>)
 801231a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801231c:	4b29      	ldr	r3, [pc, #164]	; (80123c4 <tcp_receive+0xf1c>)
 801231e:	881b      	ldrh	r3, [r3, #0]
 8012320:	461a      	mov	r2, r3
 8012322:	4b26      	ldr	r3, [pc, #152]	; (80123bc <tcp_receive+0xf14>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	441a      	add	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801232c:	6879      	ldr	r1, [r7, #4]
 801232e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012330:	440b      	add	r3, r1
 8012332:	429a      	cmp	r2, r3
 8012334:	d019      	beq.n	801236a <tcp_receive+0xec2>
 8012336:	4b24      	ldr	r3, [pc, #144]	; (80123c8 <tcp_receive+0xf20>)
 8012338:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801233c:	4923      	ldr	r1, [pc, #140]	; (80123cc <tcp_receive+0xf24>)
 801233e:	4824      	ldr	r0, [pc, #144]	; (80123d0 <tcp_receive+0xf28>)
 8012340:	f005 fd32 	bl	8017da8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012344:	e011      	b.n	801236a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	63bb      	str	r3, [r7, #56]	; 0x38
 801234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234e:	2b00      	cmp	r3, #0
 8012350:	f47f aea4 	bne.w	801209c <tcp_receive+0xbf4>
 8012354:	e00a      	b.n	801236c <tcp_receive+0xec4>
                break;
 8012356:	bf00      	nop
 8012358:	e008      	b.n	801236c <tcp_receive+0xec4>
                break;
 801235a:	bf00      	nop
 801235c:	e006      	b.n	801236c <tcp_receive+0xec4>
                  break;
 801235e:	bf00      	nop
 8012360:	e004      	b.n	801236c <tcp_receive+0xec4>
                  break;
 8012362:	bf00      	nop
 8012364:	e002      	b.n	801236c <tcp_receive+0xec4>
                  break;
 8012366:	bf00      	nop
 8012368:	e000      	b.n	801236c <tcp_receive+0xec4>
                break;
 801236a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f001 fa33 	bl	80137d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012372:	e003      	b.n	801237c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f001 fa2f 	bl	80137d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801237a:	e01a      	b.n	80123b2 <tcp_receive+0xf0a>
 801237c:	e019      	b.n	80123b2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801237e:	4b0f      	ldr	r3, [pc, #60]	; (80123bc <tcp_receive+0xf14>)
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	2b00      	cmp	r3, #0
 801238a:	db0a      	blt.n	80123a2 <tcp_receive+0xefa>
 801238c:	4b0b      	ldr	r3, [pc, #44]	; (80123bc <tcp_receive+0xf14>)
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012394:	6879      	ldr	r1, [r7, #4]
 8012396:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012398:	440b      	add	r3, r1
 801239a:	1ad3      	subs	r3, r2, r3
 801239c:	3301      	adds	r3, #1
 801239e:	2b00      	cmp	r3, #0
 80123a0:	dd07      	ble.n	80123b2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	8b5b      	ldrh	r3, [r3, #26]
 80123a6:	f043 0302 	orr.w	r3, r3, #2
 80123aa:	b29a      	uxth	r2, r3
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80123b0:	e7ff      	b.n	80123b2 <tcp_receive+0xf0a>
 80123b2:	bf00      	nop
 80123b4:	3750      	adds	r7, #80	; 0x50
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bdb0      	pop	{r4, r5, r7, pc}
 80123ba:	bf00      	nop
 80123bc:	20000474 	.word	0x20000474
 80123c0:	20000454 	.word	0x20000454
 80123c4:	2000047e 	.word	0x2000047e
 80123c8:	08020384 	.word	0x08020384
 80123cc:	0802072c 	.word	0x0802072c
 80123d0:	080203d0 	.word	0x080203d0

080123d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80123da:	4b15      	ldr	r3, [pc, #84]	; (8012430 <tcp_get_next_optbyte+0x5c>)
 80123dc:	881b      	ldrh	r3, [r3, #0]
 80123de:	1c5a      	adds	r2, r3, #1
 80123e0:	b291      	uxth	r1, r2
 80123e2:	4a13      	ldr	r2, [pc, #76]	; (8012430 <tcp_get_next_optbyte+0x5c>)
 80123e4:	8011      	strh	r1, [r2, #0]
 80123e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80123e8:	4b12      	ldr	r3, [pc, #72]	; (8012434 <tcp_get_next_optbyte+0x60>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d004      	beq.n	80123fa <tcp_get_next_optbyte+0x26>
 80123f0:	4b11      	ldr	r3, [pc, #68]	; (8012438 <tcp_get_next_optbyte+0x64>)
 80123f2:	881b      	ldrh	r3, [r3, #0]
 80123f4:	88fa      	ldrh	r2, [r7, #6]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d208      	bcs.n	801240c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80123fa:	4b10      	ldr	r3, [pc, #64]	; (801243c <tcp_get_next_optbyte+0x68>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	3314      	adds	r3, #20
 8012400:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012402:	88fb      	ldrh	r3, [r7, #6]
 8012404:	683a      	ldr	r2, [r7, #0]
 8012406:	4413      	add	r3, r2
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	e00b      	b.n	8012424 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801240c:	88fb      	ldrh	r3, [r7, #6]
 801240e:	b2da      	uxtb	r2, r3
 8012410:	4b09      	ldr	r3, [pc, #36]	; (8012438 <tcp_get_next_optbyte+0x64>)
 8012412:	881b      	ldrh	r3, [r3, #0]
 8012414:	b2db      	uxtb	r3, r3
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801241a:	4b06      	ldr	r3, [pc, #24]	; (8012434 <tcp_get_next_optbyte+0x60>)
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	797b      	ldrb	r3, [r7, #5]
 8012420:	4413      	add	r3, r2
 8012422:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012424:	4618      	mov	r0, r3
 8012426:	370c      	adds	r7, #12
 8012428:	46bd      	mov	sp, r7
 801242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242e:	4770      	bx	lr
 8012430:	20000470 	.word	0x20000470
 8012434:	2000046c 	.word	0x2000046c
 8012438:	2000046a 	.word	0x2000046a
 801243c:	20000464 	.word	0x20000464

08012440 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d106      	bne.n	801245c <tcp_parseopt+0x1c>
 801244e:	4b32      	ldr	r3, [pc, #200]	; (8012518 <tcp_parseopt+0xd8>)
 8012450:	f240 727d 	movw	r2, #1917	; 0x77d
 8012454:	4931      	ldr	r1, [pc, #196]	; (801251c <tcp_parseopt+0xdc>)
 8012456:	4832      	ldr	r0, [pc, #200]	; (8012520 <tcp_parseopt+0xe0>)
 8012458:	f005 fca6 	bl	8017da8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801245c:	4b31      	ldr	r3, [pc, #196]	; (8012524 <tcp_parseopt+0xe4>)
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d055      	beq.n	8012510 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012464:	4b30      	ldr	r3, [pc, #192]	; (8012528 <tcp_parseopt+0xe8>)
 8012466:	2200      	movs	r2, #0
 8012468:	801a      	strh	r2, [r3, #0]
 801246a:	e045      	b.n	80124f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801246c:	f7ff ffb2 	bl	80123d4 <tcp_get_next_optbyte>
 8012470:	4603      	mov	r3, r0
 8012472:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012474:	7bfb      	ldrb	r3, [r7, #15]
 8012476:	2b02      	cmp	r3, #2
 8012478:	d006      	beq.n	8012488 <tcp_parseopt+0x48>
 801247a:	2b02      	cmp	r3, #2
 801247c:	dc2b      	bgt.n	80124d6 <tcp_parseopt+0x96>
 801247e:	2b00      	cmp	r3, #0
 8012480:	d041      	beq.n	8012506 <tcp_parseopt+0xc6>
 8012482:	2b01      	cmp	r3, #1
 8012484:	d127      	bne.n	80124d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012486:	e037      	b.n	80124f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012488:	f7ff ffa4 	bl	80123d4 <tcp_get_next_optbyte>
 801248c:	4603      	mov	r3, r0
 801248e:	2b04      	cmp	r3, #4
 8012490:	d13b      	bne.n	801250a <tcp_parseopt+0xca>
 8012492:	4b25      	ldr	r3, [pc, #148]	; (8012528 <tcp_parseopt+0xe8>)
 8012494:	881b      	ldrh	r3, [r3, #0]
 8012496:	3301      	adds	r3, #1
 8012498:	4a22      	ldr	r2, [pc, #136]	; (8012524 <tcp_parseopt+0xe4>)
 801249a:	8812      	ldrh	r2, [r2, #0]
 801249c:	4293      	cmp	r3, r2
 801249e:	da34      	bge.n	801250a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80124a0:	f7ff ff98 	bl	80123d4 <tcp_get_next_optbyte>
 80124a4:	4603      	mov	r3, r0
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	021b      	lsls	r3, r3, #8
 80124aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80124ac:	f7ff ff92 	bl	80123d4 <tcp_get_next_optbyte>
 80124b0:	4603      	mov	r3, r0
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	89bb      	ldrh	r3, [r7, #12]
 80124b6:	4313      	orrs	r3, r2
 80124b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80124ba:	89bb      	ldrh	r3, [r7, #12]
 80124bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80124c0:	d804      	bhi.n	80124cc <tcp_parseopt+0x8c>
 80124c2:	89bb      	ldrh	r3, [r7, #12]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d001      	beq.n	80124cc <tcp_parseopt+0x8c>
 80124c8:	89ba      	ldrh	r2, [r7, #12]
 80124ca:	e001      	b.n	80124d0 <tcp_parseopt+0x90>
 80124cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80124d4:	e010      	b.n	80124f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80124d6:	f7ff ff7d 	bl	80123d4 <tcp_get_next_optbyte>
 80124da:	4603      	mov	r3, r0
 80124dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80124de:	7afb      	ldrb	r3, [r7, #11]
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	d914      	bls.n	801250e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80124e4:	7afb      	ldrb	r3, [r7, #11]
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	4b0f      	ldr	r3, [pc, #60]	; (8012528 <tcp_parseopt+0xe8>)
 80124ea:	881b      	ldrh	r3, [r3, #0]
 80124ec:	4413      	add	r3, r2
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	3b02      	subs	r3, #2
 80124f2:	b29a      	uxth	r2, r3
 80124f4:	4b0c      	ldr	r3, [pc, #48]	; (8012528 <tcp_parseopt+0xe8>)
 80124f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80124f8:	4b0b      	ldr	r3, [pc, #44]	; (8012528 <tcp_parseopt+0xe8>)
 80124fa:	881a      	ldrh	r2, [r3, #0]
 80124fc:	4b09      	ldr	r3, [pc, #36]	; (8012524 <tcp_parseopt+0xe4>)
 80124fe:	881b      	ldrh	r3, [r3, #0]
 8012500:	429a      	cmp	r2, r3
 8012502:	d3b3      	bcc.n	801246c <tcp_parseopt+0x2c>
 8012504:	e004      	b.n	8012510 <tcp_parseopt+0xd0>
          return;
 8012506:	bf00      	nop
 8012508:	e002      	b.n	8012510 <tcp_parseopt+0xd0>
            return;
 801250a:	bf00      	nop
 801250c:	e000      	b.n	8012510 <tcp_parseopt+0xd0>
            return;
 801250e:	bf00      	nop
      }
    }
  }
}
 8012510:	3710      	adds	r7, #16
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	08020384 	.word	0x08020384
 801251c:	080207e8 	.word	0x080207e8
 8012520:	080203d0 	.word	0x080203d0
 8012524:	20000468 	.word	0x20000468
 8012528:	20000470 	.word	0x20000470

0801252c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801252c:	b480      	push	{r7}
 801252e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012530:	4b05      	ldr	r3, [pc, #20]	; (8012548 <tcp_trigger_input_pcb_close+0x1c>)
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	f043 0310 	orr.w	r3, r3, #16
 8012538:	b2da      	uxtb	r2, r3
 801253a:	4b03      	ldr	r3, [pc, #12]	; (8012548 <tcp_trigger_input_pcb_close+0x1c>)
 801253c:	701a      	strb	r2, [r3, #0]
}
 801253e:	bf00      	nop
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr
 8012548:	20000481 	.word	0x20000481

0801254c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801254c:	b580      	push	{r7, lr}
 801254e:	b084      	sub	sp, #16
 8012550:	af00      	add	r7, sp, #0
 8012552:	60f8      	str	r0, [r7, #12]
 8012554:	60b9      	str	r1, [r7, #8]
 8012556:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00a      	beq.n	8012574 <tcp_route+0x28>
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	7a1b      	ldrb	r3, [r3, #8]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d006      	beq.n	8012574 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	7a1b      	ldrb	r3, [r3, #8]
 801256a:	4618      	mov	r0, r3
 801256c:	f7fb fb7e 	bl	800dc6c <netif_get_by_index>
 8012570:	4603      	mov	r3, r0
 8012572:	e003      	b.n	801257c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f002 fe3b 	bl	80151f0 <ip4_route>
 801257a:	4603      	mov	r3, r0
  }
}
 801257c:	4618      	mov	r0, r3
 801257e:	3710      	adds	r7, #16
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012584:	b590      	push	{r4, r7, lr}
 8012586:	b087      	sub	sp, #28
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	603b      	str	r3, [r7, #0]
 8012590:	4613      	mov	r3, r2
 8012592:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d105      	bne.n	80125a6 <tcp_create_segment+0x22>
 801259a:	4b44      	ldr	r3, [pc, #272]	; (80126ac <tcp_create_segment+0x128>)
 801259c:	22a3      	movs	r2, #163	; 0xa3
 801259e:	4944      	ldr	r1, [pc, #272]	; (80126b0 <tcp_create_segment+0x12c>)
 80125a0:	4844      	ldr	r0, [pc, #272]	; (80126b4 <tcp_create_segment+0x130>)
 80125a2:	f005 fc01 	bl	8017da8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d105      	bne.n	80125b8 <tcp_create_segment+0x34>
 80125ac:	4b3f      	ldr	r3, [pc, #252]	; (80126ac <tcp_create_segment+0x128>)
 80125ae:	22a4      	movs	r2, #164	; 0xa4
 80125b0:	4941      	ldr	r1, [pc, #260]	; (80126b8 <tcp_create_segment+0x134>)
 80125b2:	4840      	ldr	r0, [pc, #256]	; (80126b4 <tcp_create_segment+0x130>)
 80125b4:	f005 fbf8 	bl	8017da8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80125b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125bc:	009b      	lsls	r3, r3, #2
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	f003 0304 	and.w	r3, r3, #4
 80125c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80125c6:	2003      	movs	r0, #3
 80125c8:	f7fb f852 	bl	800d670 <memp_malloc>
 80125cc:	6138      	str	r0, [r7, #16]
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d104      	bne.n	80125de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80125d4:	68b8      	ldr	r0, [r7, #8]
 80125d6:	f7fb fe89 	bl	800e2ec <pbuf_free>
    return NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	e061      	b.n	80126a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80125e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	2200      	movs	r2, #0
 80125ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	891a      	ldrh	r2, [r3, #8]
 80125f6:	7dfb      	ldrb	r3, [r7, #23]
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d205      	bcs.n	801260a <tcp_create_segment+0x86>
 80125fe:	4b2b      	ldr	r3, [pc, #172]	; (80126ac <tcp_create_segment+0x128>)
 8012600:	22b0      	movs	r2, #176	; 0xb0
 8012602:	492e      	ldr	r1, [pc, #184]	; (80126bc <tcp_create_segment+0x138>)
 8012604:	482b      	ldr	r0, [pc, #172]	; (80126b4 <tcp_create_segment+0x130>)
 8012606:	f005 fbcf 	bl	8017da8 <iprintf>
  seg->len = p->tot_len - optlen;
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	891a      	ldrh	r2, [r3, #8]
 801260e:	7dfb      	ldrb	r3, [r7, #23]
 8012610:	b29b      	uxth	r3, r3
 8012612:	1ad3      	subs	r3, r2, r3
 8012614:	b29a      	uxth	r2, r3
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801261a:	2114      	movs	r1, #20
 801261c:	68b8      	ldr	r0, [r7, #8]
 801261e:	f7fb fdcf 	bl	800e1c0 <pbuf_add_header>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d004      	beq.n	8012632 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012628:	6938      	ldr	r0, [r7, #16]
 801262a:	f7fd f8d2 	bl	800f7d2 <tcp_seg_free>
    return NULL;
 801262e:	2300      	movs	r3, #0
 8012630:	e037      	b.n	80126a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	685a      	ldr	r2, [r3, #4]
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	8ada      	ldrh	r2, [r3, #22]
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	68dc      	ldr	r4, [r3, #12]
 8012644:	4610      	mov	r0, r2
 8012646:	f7fa fbbe 	bl	800cdc6 <lwip_htons>
 801264a:	4603      	mov	r3, r0
 801264c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	8b1a      	ldrh	r2, [r3, #24]
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	68dc      	ldr	r4, [r3, #12]
 8012656:	4610      	mov	r0, r2
 8012658:	f7fa fbb5 	bl	800cdc6 <lwip_htons>
 801265c:	4603      	mov	r3, r0
 801265e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	68dc      	ldr	r4, [r3, #12]
 8012664:	6838      	ldr	r0, [r7, #0]
 8012666:	f7fa fbc3 	bl	800cdf0 <lwip_htonl>
 801266a:	4603      	mov	r3, r0
 801266c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801266e:	7dfb      	ldrb	r3, [r7, #23]
 8012670:	089b      	lsrs	r3, r3, #2
 8012672:	b2db      	uxtb	r3, r3
 8012674:	b29b      	uxth	r3, r3
 8012676:	3305      	adds	r3, #5
 8012678:	b29b      	uxth	r3, r3
 801267a:	031b      	lsls	r3, r3, #12
 801267c:	b29a      	uxth	r2, r3
 801267e:	79fb      	ldrb	r3, [r7, #7]
 8012680:	b29b      	uxth	r3, r3
 8012682:	4313      	orrs	r3, r2
 8012684:	b29a      	uxth	r2, r3
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	68dc      	ldr	r4, [r3, #12]
 801268a:	4610      	mov	r0, r2
 801268c:	f7fa fb9b 	bl	800cdc6 <lwip_htons>
 8012690:	4603      	mov	r3, r0
 8012692:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	68db      	ldr	r3, [r3, #12]
 8012698:	2200      	movs	r2, #0
 801269a:	749a      	strb	r2, [r3, #18]
 801269c:	2200      	movs	r2, #0
 801269e:	74da      	strb	r2, [r3, #19]
  return seg;
 80126a0:	693b      	ldr	r3, [r7, #16]
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	371c      	adds	r7, #28
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd90      	pop	{r4, r7, pc}
 80126aa:	bf00      	nop
 80126ac:	08020804 	.word	0x08020804
 80126b0:	08020838 	.word	0x08020838
 80126b4:	08020858 	.word	0x08020858
 80126b8:	08020880 	.word	0x08020880
 80126bc:	080208a4 	.word	0x080208a4

080126c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80126c0:	b590      	push	{r4, r7, lr}
 80126c2:	b08b      	sub	sp, #44	; 0x2c
 80126c4:	af02      	add	r7, sp, #8
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	460b      	mov	r3, r1
 80126ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80126cc:	2300      	movs	r3, #0
 80126ce:	61fb      	str	r3, [r7, #28]
 80126d0:	2300      	movs	r3, #0
 80126d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80126d4:	2300      	movs	r3, #0
 80126d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <tcp_split_unsent_seg+0x2c>
 80126de:	4b95      	ldr	r3, [pc, #596]	; (8012934 <tcp_split_unsent_seg+0x274>)
 80126e0:	f240 324b 	movw	r2, #843	; 0x34b
 80126e4:	4994      	ldr	r1, [pc, #592]	; (8012938 <tcp_split_unsent_seg+0x278>)
 80126e6:	4895      	ldr	r0, [pc, #596]	; (801293c <tcp_split_unsent_seg+0x27c>)
 80126e8:	f005 fb5e 	bl	8017da8 <iprintf>

  useg = pcb->unsent;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d102      	bne.n	80126fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80126f8:	f04f 33ff 	mov.w	r3, #4294967295
 80126fc:	e116      	b.n	801292c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80126fe:	887b      	ldrh	r3, [r7, #2]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d109      	bne.n	8012718 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012704:	4b8b      	ldr	r3, [pc, #556]	; (8012934 <tcp_split_unsent_seg+0x274>)
 8012706:	f240 3253 	movw	r2, #851	; 0x353
 801270a:	498d      	ldr	r1, [pc, #564]	; (8012940 <tcp_split_unsent_seg+0x280>)
 801270c:	488b      	ldr	r0, [pc, #556]	; (801293c <tcp_split_unsent_seg+0x27c>)
 801270e:	f005 fb4b 	bl	8017da8 <iprintf>
    return ERR_VAL;
 8012712:	f06f 0305 	mvn.w	r3, #5
 8012716:	e109      	b.n	801292c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	891b      	ldrh	r3, [r3, #8]
 801271c:	887a      	ldrh	r2, [r7, #2]
 801271e:	429a      	cmp	r2, r3
 8012720:	d301      	bcc.n	8012726 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	e102      	b.n	801292c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801272a:	887a      	ldrh	r2, [r7, #2]
 801272c:	429a      	cmp	r2, r3
 801272e:	d906      	bls.n	801273e <tcp_split_unsent_seg+0x7e>
 8012730:	4b80      	ldr	r3, [pc, #512]	; (8012934 <tcp_split_unsent_seg+0x274>)
 8012732:	f240 325b 	movw	r2, #859	; 0x35b
 8012736:	4983      	ldr	r1, [pc, #524]	; (8012944 <tcp_split_unsent_seg+0x284>)
 8012738:	4880      	ldr	r0, [pc, #512]	; (801293c <tcp_split_unsent_seg+0x27c>)
 801273a:	f005 fb35 	bl	8017da8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	891b      	ldrh	r3, [r3, #8]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d106      	bne.n	8012754 <tcp_split_unsent_seg+0x94>
 8012746:	4b7b      	ldr	r3, [pc, #492]	; (8012934 <tcp_split_unsent_seg+0x274>)
 8012748:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801274c:	497e      	ldr	r1, [pc, #504]	; (8012948 <tcp_split_unsent_seg+0x288>)
 801274e:	487b      	ldr	r0, [pc, #492]	; (801293c <tcp_split_unsent_seg+0x27c>)
 8012750:	f005 fb2a 	bl	8017da8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	7a9b      	ldrb	r3, [r3, #10]
 8012758:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801275a:	7bfb      	ldrb	r3, [r7, #15]
 801275c:	009b      	lsls	r3, r3, #2
 801275e:	b2db      	uxtb	r3, r3
 8012760:	f003 0304 	and.w	r3, r3, #4
 8012764:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	891a      	ldrh	r2, [r3, #8]
 801276a:	887b      	ldrh	r3, [r7, #2]
 801276c:	1ad3      	subs	r3, r2, r3
 801276e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012770:	7bbb      	ldrb	r3, [r7, #14]
 8012772:	b29a      	uxth	r2, r3
 8012774:	89bb      	ldrh	r3, [r7, #12]
 8012776:	4413      	add	r3, r2
 8012778:	b29b      	uxth	r3, r3
 801277a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801277e:	4619      	mov	r1, r3
 8012780:	2036      	movs	r0, #54	; 0x36
 8012782:	f7fb facf 	bl	800dd24 <pbuf_alloc>
 8012786:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	2b00      	cmp	r3, #0
 801278c:	f000 80b7 	beq.w	80128fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	891a      	ldrh	r2, [r3, #8]
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	891b      	ldrh	r3, [r3, #8]
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	b29a      	uxth	r2, r3
 801279e:	887b      	ldrh	r3, [r7, #2]
 80127a0:	4413      	add	r3, r2
 80127a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	6858      	ldr	r0, [r3, #4]
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	685a      	ldr	r2, [r3, #4]
 80127ac:	7bbb      	ldrb	r3, [r7, #14]
 80127ae:	18d1      	adds	r1, r2, r3
 80127b0:	897b      	ldrh	r3, [r7, #10]
 80127b2:	89ba      	ldrh	r2, [r7, #12]
 80127b4:	f7fb ff84 	bl	800e6c0 <pbuf_copy_partial>
 80127b8:	4603      	mov	r3, r0
 80127ba:	461a      	mov	r2, r3
 80127bc:	89bb      	ldrh	r3, [r7, #12]
 80127be:	4293      	cmp	r3, r2
 80127c0:	f040 809f 	bne.w	8012902 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	899b      	ldrh	r3, [r3, #12]
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fa fafa 	bl	800cdc6 <lwip_htons>
 80127d2:	4603      	mov	r3, r0
 80127d4:	b2db      	uxtb	r3, r3
 80127d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80127dc:	2300      	movs	r3, #0
 80127de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80127e0:	7efb      	ldrb	r3, [r7, #27]
 80127e2:	f003 0308 	and.w	r3, r3, #8
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d007      	beq.n	80127fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80127ea:	7efb      	ldrb	r3, [r7, #27]
 80127ec:	f023 0308 	bic.w	r3, r3, #8
 80127f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80127f2:	7ebb      	ldrb	r3, [r7, #26]
 80127f4:	f043 0308 	orr.w	r3, r3, #8
 80127f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80127fa:	7efb      	ldrb	r3, [r7, #27]
 80127fc:	f003 0301 	and.w	r3, r3, #1
 8012800:	2b00      	cmp	r3, #0
 8012802:	d007      	beq.n	8012814 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012804:	7efb      	ldrb	r3, [r7, #27]
 8012806:	f023 0301 	bic.w	r3, r3, #1
 801280a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801280c:	7ebb      	ldrb	r3, [r7, #26]
 801280e:	f043 0301 	orr.w	r3, r3, #1
 8012812:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	4618      	mov	r0, r3
 801281c:	f7fa fae8 	bl	800cdf0 <lwip_htonl>
 8012820:	4602      	mov	r2, r0
 8012822:	887b      	ldrh	r3, [r7, #2]
 8012824:	18d1      	adds	r1, r2, r3
 8012826:	7eba      	ldrb	r2, [r7, #26]
 8012828:	7bfb      	ldrb	r3, [r7, #15]
 801282a:	9300      	str	r3, [sp, #0]
 801282c:	460b      	mov	r3, r1
 801282e:	6939      	ldr	r1, [r7, #16]
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f7ff fea7 	bl	8012584 <tcp_create_segment>
 8012836:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d063      	beq.n	8012906 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	f7fb fdda 	bl	800e3fc <pbuf_clen>
 8012848:	4603      	mov	r3, r0
 801284a:	461a      	mov	r2, r3
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012852:	1a9b      	subs	r3, r3, r2
 8012854:	b29a      	uxth	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	6858      	ldr	r0, [r3, #4]
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	891a      	ldrh	r2, [r3, #8]
 8012866:	89bb      	ldrh	r3, [r7, #12]
 8012868:	1ad3      	subs	r3, r2, r3
 801286a:	b29b      	uxth	r3, r3
 801286c:	4619      	mov	r1, r3
 801286e:	f7fb fbb7 	bl	800dfe0 <pbuf_realloc>
  useg->len -= remainder;
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	891a      	ldrh	r2, [r3, #8]
 8012876:	89bb      	ldrh	r3, [r7, #12]
 8012878:	1ad3      	subs	r3, r2, r3
 801287a:	b29a      	uxth	r2, r3
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	899b      	ldrh	r3, [r3, #12]
 8012886:	b29c      	uxth	r4, r3
 8012888:	7efb      	ldrb	r3, [r7, #27]
 801288a:	b29b      	uxth	r3, r3
 801288c:	4618      	mov	r0, r3
 801288e:	f7fa fa9a 	bl	800cdc6 <lwip_htons>
 8012892:	4603      	mov	r3, r0
 8012894:	461a      	mov	r2, r3
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	4322      	orrs	r2, r4
 801289c:	b292      	uxth	r2, r2
 801289e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	4618      	mov	r0, r3
 80128a6:	f7fb fda9 	bl	800e3fc <pbuf_clen>
 80128aa:	4603      	mov	r3, r0
 80128ac:	461a      	mov	r2, r3
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128b4:	4413      	add	r3, r2
 80128b6:	b29a      	uxth	r2, r3
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	685b      	ldr	r3, [r3, #4]
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fb fd9a 	bl	800e3fc <pbuf_clen>
 80128c8:	4603      	mov	r3, r0
 80128ca:	461a      	mov	r2, r3
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128d2:	4413      	add	r3, r2
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80128e4:	697b      	ldr	r3, [r7, #20]
 80128e6:	69fa      	ldr	r2, [r7, #28]
 80128e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80128ea:	69fb      	ldr	r3, [r7, #28]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d103      	bne.n	80128fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2200      	movs	r2, #0
 80128f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80128fa:	2300      	movs	r3, #0
 80128fc:	e016      	b.n	801292c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80128fe:	bf00      	nop
 8012900:	e002      	b.n	8012908 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012902:	bf00      	nop
 8012904:	e000      	b.n	8012908 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012906:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d006      	beq.n	801291c <tcp_split_unsent_seg+0x25c>
 801290e:	4b09      	ldr	r3, [pc, #36]	; (8012934 <tcp_split_unsent_seg+0x274>)
 8012910:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012914:	490d      	ldr	r1, [pc, #52]	; (801294c <tcp_split_unsent_seg+0x28c>)
 8012916:	4809      	ldr	r0, [pc, #36]	; (801293c <tcp_split_unsent_seg+0x27c>)
 8012918:	f005 fa46 	bl	8017da8 <iprintf>
  if (p != NULL) {
 801291c:	693b      	ldr	r3, [r7, #16]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d002      	beq.n	8012928 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012922:	6938      	ldr	r0, [r7, #16]
 8012924:	f7fb fce2 	bl	800e2ec <pbuf_free>
  }

  return ERR_MEM;
 8012928:	f04f 33ff 	mov.w	r3, #4294967295
}
 801292c:	4618      	mov	r0, r3
 801292e:	3724      	adds	r7, #36	; 0x24
 8012930:	46bd      	mov	sp, r7
 8012932:	bd90      	pop	{r4, r7, pc}
 8012934:	08020804 	.word	0x08020804
 8012938:	08020b98 	.word	0x08020b98
 801293c:	08020858 	.word	0x08020858
 8012940:	08020bbc 	.word	0x08020bbc
 8012944:	08020be0 	.word	0x08020be0
 8012948:	08020bf0 	.word	0x08020bf0
 801294c:	08020c00 	.word	0x08020c00

08012950 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012950:	b590      	push	{r4, r7, lr}
 8012952:	b085      	sub	sp, #20
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_send_fin+0x1c>
 801295e:	4b21      	ldr	r3, [pc, #132]	; (80129e4 <tcp_send_fin+0x94>)
 8012960:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012964:	4920      	ldr	r1, [pc, #128]	; (80129e8 <tcp_send_fin+0x98>)
 8012966:	4821      	ldr	r0, [pc, #132]	; (80129ec <tcp_send_fin+0x9c>)
 8012968:	f005 fa1e 	bl	8017da8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012970:	2b00      	cmp	r3, #0
 8012972:	d02e      	beq.n	80129d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012978:	60fb      	str	r3, [r7, #12]
 801297a:	e002      	b.n	8012982 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d1f8      	bne.n	801297c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	899b      	ldrh	r3, [r3, #12]
 8012990:	b29b      	uxth	r3, r3
 8012992:	4618      	mov	r0, r3
 8012994:	f7fa fa17 	bl	800cdc6 <lwip_htons>
 8012998:	4603      	mov	r3, r0
 801299a:	b2db      	uxtb	r3, r3
 801299c:	f003 0307 	and.w	r3, r3, #7
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d116      	bne.n	80129d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	68db      	ldr	r3, [r3, #12]
 80129a8:	899b      	ldrh	r3, [r3, #12]
 80129aa:	b29c      	uxth	r4, r3
 80129ac:	2001      	movs	r0, #1
 80129ae:	f7fa fa0a 	bl	800cdc6 <lwip_htons>
 80129b2:	4603      	mov	r3, r0
 80129b4:	461a      	mov	r2, r3
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	68db      	ldr	r3, [r3, #12]
 80129ba:	4322      	orrs	r2, r4
 80129bc:	b292      	uxth	r2, r2
 80129be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	8b5b      	ldrh	r3, [r3, #26]
 80129c4:	f043 0320 	orr.w	r3, r3, #32
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80129ce:	2300      	movs	r3, #0
 80129d0:	e004      	b.n	80129dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80129d2:	2101      	movs	r1, #1
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f000 f80b 	bl	80129f0 <tcp_enqueue_flags>
 80129da:	4603      	mov	r3, r0
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd90      	pop	{r4, r7, pc}
 80129e4:	08020804 	.word	0x08020804
 80129e8:	08020c0c 	.word	0x08020c0c
 80129ec:	08020858 	.word	0x08020858

080129f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b08a      	sub	sp, #40	; 0x28
 80129f4:	af02      	add	r7, sp, #8
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	460b      	mov	r3, r1
 80129fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80129fc:	2300      	movs	r3, #0
 80129fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012a00:	2300      	movs	r3, #0
 8012a02:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012a04:	78fb      	ldrb	r3, [r7, #3]
 8012a06:	f003 0303 	and.w	r3, r3, #3
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_enqueue_flags+0x2c>
 8012a0e:	4b67      	ldr	r3, [pc, #412]	; (8012bac <tcp_enqueue_flags+0x1bc>)
 8012a10:	f240 4211 	movw	r2, #1041	; 0x411
 8012a14:	4966      	ldr	r1, [pc, #408]	; (8012bb0 <tcp_enqueue_flags+0x1c0>)
 8012a16:	4867      	ldr	r0, [pc, #412]	; (8012bb4 <tcp_enqueue_flags+0x1c4>)
 8012a18:	f005 f9c6 	bl	8017da8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d106      	bne.n	8012a30 <tcp_enqueue_flags+0x40>
 8012a22:	4b62      	ldr	r3, [pc, #392]	; (8012bac <tcp_enqueue_flags+0x1bc>)
 8012a24:	f240 4213 	movw	r2, #1043	; 0x413
 8012a28:	4963      	ldr	r1, [pc, #396]	; (8012bb8 <tcp_enqueue_flags+0x1c8>)
 8012a2a:	4862      	ldr	r0, [pc, #392]	; (8012bb4 <tcp_enqueue_flags+0x1c4>)
 8012a2c:	f005 f9bc 	bl	8017da8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012a30:	78fb      	ldrb	r3, [r7, #3]
 8012a32:	f003 0302 	and.w	r3, r3, #2
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d001      	beq.n	8012a3e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012a3e:	7ffb      	ldrb	r3, [r7, #31]
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	b2db      	uxtb	r3, r3
 8012a44:	f003 0304 	and.w	r3, r3, #4
 8012a48:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012a4a:	7dfb      	ldrb	r3, [r7, #23]
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a52:	4619      	mov	r1, r3
 8012a54:	2036      	movs	r0, #54	; 0x36
 8012a56:	f7fb f965 	bl	800dd24 <pbuf_alloc>
 8012a5a:	6138      	str	r0, [r7, #16]
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d109      	bne.n	8012a76 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	8b5b      	ldrh	r3, [r3, #26]
 8012a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012a70:	f04f 33ff 	mov.w	r3, #4294967295
 8012a74:	e095      	b.n	8012ba2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	895a      	ldrh	r2, [r3, #10]
 8012a7a:	7dfb      	ldrb	r3, [r7, #23]
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d206      	bcs.n	8012a90 <tcp_enqueue_flags+0xa0>
 8012a82:	4b4a      	ldr	r3, [pc, #296]	; (8012bac <tcp_enqueue_flags+0x1bc>)
 8012a84:	f240 4239 	movw	r2, #1081	; 0x439
 8012a88:	494c      	ldr	r1, [pc, #304]	; (8012bbc <tcp_enqueue_flags+0x1cc>)
 8012a8a:	484a      	ldr	r0, [pc, #296]	; (8012bb4 <tcp_enqueue_flags+0x1c4>)
 8012a8c:	f005 f98c 	bl	8017da8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012a94:	78fa      	ldrb	r2, [r7, #3]
 8012a96:	7ffb      	ldrb	r3, [r7, #31]
 8012a98:	9300      	str	r3, [sp, #0]
 8012a9a:	460b      	mov	r3, r1
 8012a9c:	6939      	ldr	r1, [r7, #16]
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7ff fd70 	bl	8012584 <tcp_create_segment>
 8012aa4:	60f8      	str	r0, [r7, #12]
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d109      	bne.n	8012ac0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	8b5b      	ldrh	r3, [r3, #26]
 8012ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012aba:	f04f 33ff 	mov.w	r3, #4294967295
 8012abe:	e070      	b.n	8012ba2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	68db      	ldr	r3, [r3, #12]
 8012ac4:	f003 0303 	and.w	r3, r3, #3
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d006      	beq.n	8012ada <tcp_enqueue_flags+0xea>
 8012acc:	4b37      	ldr	r3, [pc, #220]	; (8012bac <tcp_enqueue_flags+0x1bc>)
 8012ace:	f240 4242 	movw	r2, #1090	; 0x442
 8012ad2:	493b      	ldr	r1, [pc, #236]	; (8012bc0 <tcp_enqueue_flags+0x1d0>)
 8012ad4:	4837      	ldr	r0, [pc, #220]	; (8012bb4 <tcp_enqueue_flags+0x1c4>)
 8012ad6:	f005 f967 	bl	8017da8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	891b      	ldrh	r3, [r3, #8]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d006      	beq.n	8012af0 <tcp_enqueue_flags+0x100>
 8012ae2:	4b32      	ldr	r3, [pc, #200]	; (8012bac <tcp_enqueue_flags+0x1bc>)
 8012ae4:	f240 4243 	movw	r2, #1091	; 0x443
 8012ae8:	4936      	ldr	r1, [pc, #216]	; (8012bc4 <tcp_enqueue_flags+0x1d4>)
 8012aea:	4832      	ldr	r0, [pc, #200]	; (8012bb4 <tcp_enqueue_flags+0x1c4>)
 8012aec:	f005 f95c 	bl	8017da8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d103      	bne.n	8012b00 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	68fa      	ldr	r2, [r7, #12]
 8012afc:	66da      	str	r2, [r3, #108]	; 0x6c
 8012afe:	e00d      	b.n	8012b1c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b04:	61bb      	str	r3, [r7, #24]
 8012b06:	e002      	b.n	8012b0e <tcp_enqueue_flags+0x11e>
 8012b08:	69bb      	ldr	r3, [r7, #24]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	61bb      	str	r3, [r7, #24]
 8012b0e:	69bb      	ldr	r3, [r7, #24]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d1f8      	bne.n	8012b08 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012b16:	69bb      	ldr	r3, [r7, #24]
 8012b18:	68fa      	ldr	r2, [r7, #12]
 8012b1a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012b24:	78fb      	ldrb	r3, [r7, #3]
 8012b26:	f003 0302 	and.w	r3, r3, #2
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d104      	bne.n	8012b38 <tcp_enqueue_flags+0x148>
 8012b2e:	78fb      	ldrb	r3, [r7, #3]
 8012b30:	f003 0301 	and.w	r3, r3, #1
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d004      	beq.n	8012b42 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b3c:	1c5a      	adds	r2, r3, #1
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012b42:	78fb      	ldrb	r3, [r7, #3]
 8012b44:	f003 0301 	and.w	r3, r3, #1
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d006      	beq.n	8012b5a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	8b5b      	ldrh	r3, [r3, #26]
 8012b50:	f043 0320 	orr.w	r3, r3, #32
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fb fc4c 	bl	800e3fc <pbuf_clen>
 8012b64:	4603      	mov	r3, r0
 8012b66:	461a      	mov	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b6e:	4413      	add	r3, r2
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d00e      	beq.n	8012ba0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d10a      	bne.n	8012ba0 <tcp_enqueue_flags+0x1b0>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d106      	bne.n	8012ba0 <tcp_enqueue_flags+0x1b0>
 8012b92:	4b06      	ldr	r3, [pc, #24]	; (8012bac <tcp_enqueue_flags+0x1bc>)
 8012b94:	f240 4265 	movw	r2, #1125	; 0x465
 8012b98:	490b      	ldr	r1, [pc, #44]	; (8012bc8 <tcp_enqueue_flags+0x1d8>)
 8012b9a:	4806      	ldr	r0, [pc, #24]	; (8012bb4 <tcp_enqueue_flags+0x1c4>)
 8012b9c:	f005 f904 	bl	8017da8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012ba0:	2300      	movs	r3, #0
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3720      	adds	r7, #32
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	08020804 	.word	0x08020804
 8012bb0:	08020c28 	.word	0x08020c28
 8012bb4:	08020858 	.word	0x08020858
 8012bb8:	08020c80 	.word	0x08020c80
 8012bbc:	08020ca0 	.word	0x08020ca0
 8012bc0:	08020cdc 	.word	0x08020cdc
 8012bc4:	08020cf4 	.word	0x08020cf4
 8012bc8:	08020d20 	.word	0x08020d20

08012bcc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012bcc:	b5b0      	push	{r4, r5, r7, lr}
 8012bce:	b08a      	sub	sp, #40	; 0x28
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d106      	bne.n	8012be8 <tcp_output+0x1c>
 8012bda:	4b9e      	ldr	r3, [pc, #632]	; (8012e54 <tcp_output+0x288>)
 8012bdc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012be0:	499d      	ldr	r1, [pc, #628]	; (8012e58 <tcp_output+0x28c>)
 8012be2:	489e      	ldr	r0, [pc, #632]	; (8012e5c <tcp_output+0x290>)
 8012be4:	f005 f8e0 	bl	8017da8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	7d1b      	ldrb	r3, [r3, #20]
 8012bec:	2b01      	cmp	r3, #1
 8012bee:	d106      	bne.n	8012bfe <tcp_output+0x32>
 8012bf0:	4b98      	ldr	r3, [pc, #608]	; (8012e54 <tcp_output+0x288>)
 8012bf2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012bf6:	499a      	ldr	r1, [pc, #616]	; (8012e60 <tcp_output+0x294>)
 8012bf8:	4898      	ldr	r0, [pc, #608]	; (8012e5c <tcp_output+0x290>)
 8012bfa:	f005 f8d5 	bl	8017da8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012bfe:	4b99      	ldr	r3, [pc, #612]	; (8012e64 <tcp_output+0x298>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	429a      	cmp	r2, r3
 8012c06:	d101      	bne.n	8012c0c <tcp_output+0x40>
    return ERR_OK;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	e1ce      	b.n	8012faa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	bf28      	it	cs
 8012c1c:	4613      	movcs	r3, r2
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c26:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d10b      	bne.n	8012c46 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	8b5b      	ldrh	r3, [r3, #26]
 8012c32:	f003 0302 	and.w	r3, r3, #2
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	f000 81aa 	beq.w	8012f90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f000 fdcb 	bl	80137d8 <tcp_send_empty_ack>
 8012c42:	4603      	mov	r3, r0
 8012c44:	e1b1      	b.n	8012faa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012c46:	6879      	ldr	r1, [r7, #4]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	3304      	adds	r3, #4
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f7ff fc7c 	bl	801254c <tcp_route>
 8012c54:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d102      	bne.n	8012c62 <tcp_output+0x96>
    return ERR_RTE;
 8012c5c:	f06f 0303 	mvn.w	r3, #3
 8012c60:	e1a3      	b.n	8012faa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d003      	beq.n	8012c70 <tcp_output+0xa4>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d111      	bne.n	8012c94 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d002      	beq.n	8012c7c <tcp_output+0xb0>
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	3304      	adds	r3, #4
 8012c7a:	e000      	b.n	8012c7e <tcp_output+0xb2>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012c80:	693b      	ldr	r3, [r7, #16]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d102      	bne.n	8012c8c <tcp_output+0xc0>
      return ERR_RTE;
 8012c86:	f06f 0303 	mvn.w	r3, #3
 8012c8a:	e18e      	b.n	8012faa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fa f8a8 	bl	800cdf0 <lwip_htonl>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ca6:	1ad3      	subs	r3, r2, r3
 8012ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012caa:	8912      	ldrh	r2, [r2, #8]
 8012cac:	4413      	add	r3, r2
 8012cae:	69ba      	ldr	r2, [r7, #24]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	d227      	bcs.n	8012d04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012cba:	461a      	mov	r2, r3
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d114      	bne.n	8012cec <tcp_output+0x120>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d110      	bne.n	8012cec <tcp_output+0x120>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d10b      	bne.n	8012cec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2201      	movs	r2, #1
 8012ce0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	8b5b      	ldrh	r3, [r3, #26]
 8012cf0:	f003 0302 	and.w	r3, r3, #2
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	f000 814d 	beq.w	8012f94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 fd6c 	bl	80137d8 <tcp_send_empty_ack>
 8012d00:	4603      	mov	r3, r0
 8012d02:	e152      	b.n	8012faa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2200      	movs	r2, #0
 8012d08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012d12:	6a3b      	ldr	r3, [r7, #32]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	f000 811c 	beq.w	8012f52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012d1a:	e002      	b.n	8012d22 <tcp_output+0x156>
 8012d1c:	6a3b      	ldr	r3, [r7, #32]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	623b      	str	r3, [r7, #32]
 8012d22:	6a3b      	ldr	r3, [r7, #32]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d1f8      	bne.n	8012d1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012d2a:	e112      	b.n	8012f52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	899b      	ldrh	r3, [r3, #12]
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7fa f846 	bl	800cdc6 <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	f003 0304 	and.w	r3, r3, #4
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d006      	beq.n	8012d54 <tcp_output+0x188>
 8012d46:	4b43      	ldr	r3, [pc, #268]	; (8012e54 <tcp_output+0x288>)
 8012d48:	f240 5236 	movw	r2, #1334	; 0x536
 8012d4c:	4946      	ldr	r1, [pc, #280]	; (8012e68 <tcp_output+0x29c>)
 8012d4e:	4843      	ldr	r0, [pc, #268]	; (8012e5c <tcp_output+0x290>)
 8012d50:	f005 f82a 	bl	8017da8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d01f      	beq.n	8012d9c <tcp_output+0x1d0>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	8b5b      	ldrh	r3, [r3, #26]
 8012d60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d119      	bne.n	8012d9c <tcp_output+0x1d0>
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d00b      	beq.n	8012d88 <tcp_output+0x1bc>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d110      	bne.n	8012d9c <tcp_output+0x1d0>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d7e:	891a      	ldrh	r2, [r3, #8]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d84:	429a      	cmp	r2, r3
 8012d86:	d209      	bcs.n	8012d9c <tcp_output+0x1d0>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d004      	beq.n	8012d9c <tcp_output+0x1d0>
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d98:	2b08      	cmp	r3, #8
 8012d9a:	d901      	bls.n	8012da0 <tcp_output+0x1d4>
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e000      	b.n	8012da2 <tcp_output+0x1d6>
 8012da0:	2300      	movs	r3, #0
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	8b5b      	ldrh	r3, [r3, #26]
 8012daa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f000 80e4 	beq.w	8012f7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	7d1b      	ldrb	r3, [r3, #20]
 8012db8:	2b02      	cmp	r3, #2
 8012dba:	d00d      	beq.n	8012dd8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	899b      	ldrh	r3, [r3, #12]
 8012dc2:	b29c      	uxth	r4, r3
 8012dc4:	2010      	movs	r0, #16
 8012dc6:	f7f9 fffe 	bl	800cdc6 <lwip_htons>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	461a      	mov	r2, r3
 8012dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	4322      	orrs	r2, r4
 8012dd4:	b292      	uxth	r2, r2
 8012dd6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012dd8:	697a      	ldr	r2, [r7, #20]
 8012dda:	6879      	ldr	r1, [r7, #4]
 8012ddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012dde:	f000 f909 	bl	8012ff4 <tcp_output_segment>
 8012de2:	4603      	mov	r3, r0
 8012de4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d009      	beq.n	8012e02 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	8b5b      	ldrh	r3, [r3, #26]
 8012df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012df6:	b29a      	uxth	r2, r3
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	835a      	strh	r2, [r3, #26]
      return err;
 8012dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e00:	e0d3      	b.n	8012faa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e04:	681a      	ldr	r2, [r3, #0]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	7d1b      	ldrb	r3, [r3, #20]
 8012e0e:	2b02      	cmp	r3, #2
 8012e10:	d006      	beq.n	8012e20 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	8b5b      	ldrh	r3, [r3, #26]
 8012e16:	f023 0303 	bic.w	r3, r3, #3
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e22:	68db      	ldr	r3, [r3, #12]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f9 ffe2 	bl	800cdf0 <lwip_htonl>
 8012e2c:	4604      	mov	r4, r0
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	891b      	ldrh	r3, [r3, #8]
 8012e32:	461d      	mov	r5, r3
 8012e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	899b      	ldrh	r3, [r3, #12]
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7f9 ffc2 	bl	800cdc6 <lwip_htons>
 8012e42:	4603      	mov	r3, r0
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	f003 0303 	and.w	r3, r3, #3
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00e      	beq.n	8012e6c <tcp_output+0x2a0>
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e00d      	b.n	8012e6e <tcp_output+0x2a2>
 8012e52:	bf00      	nop
 8012e54:	08020804 	.word	0x08020804
 8012e58:	08020d48 	.word	0x08020d48
 8012e5c:	08020858 	.word	0x08020858
 8012e60:	08020d60 	.word	0x08020d60
 8012e64:	2000712c 	.word	0x2000712c
 8012e68:	08020d88 	.word	0x08020d88
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	442b      	add	r3, r5
 8012e70:	4423      	add	r3, r4
 8012e72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	1ad3      	subs	r3, r2, r3
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	da02      	bge.n	8012e86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	68ba      	ldr	r2, [r7, #8]
 8012e84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e88:	891b      	ldrh	r3, [r3, #8]
 8012e8a:	461c      	mov	r4, r3
 8012e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8e:	68db      	ldr	r3, [r3, #12]
 8012e90:	899b      	ldrh	r3, [r3, #12]
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7f9 ff96 	bl	800cdc6 <lwip_htons>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	f003 0303 	and.w	r3, r3, #3
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d001      	beq.n	8012eaa <tcp_output+0x2de>
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e000      	b.n	8012eac <tcp_output+0x2e0>
 8012eaa:	2300      	movs	r3, #0
 8012eac:	4423      	add	r3, r4
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d049      	beq.n	8012f46 <tcp_output+0x37a>
      seg->next = NULL;
 8012eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d105      	bne.n	8012ecc <tcp_output+0x300>
        pcb->unacked = seg;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ec4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec8:	623b      	str	r3, [r7, #32]
 8012eca:	e03f      	b.n	8012f4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ece:	68db      	ldr	r3, [r3, #12]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7f9 ff8c 	bl	800cdf0 <lwip_htonl>
 8012ed8:	4604      	mov	r4, r0
 8012eda:	6a3b      	ldr	r3, [r7, #32]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7f9 ff85 	bl	800cdf0 <lwip_htonl>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	1ae3      	subs	r3, r4, r3
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	da24      	bge.n	8012f38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	3370      	adds	r3, #112	; 0x70
 8012ef2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012ef4:	e002      	b.n	8012efc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012ef6:	69fb      	ldr	r3, [r7, #28]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d011      	beq.n	8012f28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012f04:	69fb      	ldr	r3, [r7, #28]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7f9 ff6f 	bl	800cdf0 <lwip_htonl>
 8012f12:	4604      	mov	r4, r0
 8012f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7f9 ff68 	bl	800cdf0 <lwip_htonl>
 8012f20:	4603      	mov	r3, r0
 8012f22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	dbe6      	blt.n	8012ef6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f34:	601a      	str	r2, [r3, #0]
 8012f36:	e009      	b.n	8012f4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012f38:	6a3b      	ldr	r3, [r7, #32]
 8012f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012f3e:	6a3b      	ldr	r3, [r7, #32]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	623b      	str	r3, [r7, #32]
 8012f44:	e002      	b.n	8012f4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f48:	f7fc fc43 	bl	800f7d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d012      	beq.n	8012f7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7f9 ff46 	bl	800cdf0 <lwip_htonl>
 8012f64:	4602      	mov	r2, r0
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f6a:	1ad3      	subs	r3, r2, r3
 8012f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f6e:	8912      	ldrh	r2, [r2, #8]
 8012f70:	4413      	add	r3, r2
  while (seg != NULL &&
 8012f72:	69ba      	ldr	r2, [r7, #24]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	f4bf aed9 	bcs.w	8012d2c <tcp_output+0x160>
 8012f7a:	e000      	b.n	8012f7e <tcp_output+0x3b2>
      break;
 8012f7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d108      	bne.n	8012f98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012f8e:	e004      	b.n	8012f9a <tcp_output+0x3ce>
    goto output_done;
 8012f90:	bf00      	nop
 8012f92:	e002      	b.n	8012f9a <tcp_output+0x3ce>
    goto output_done;
 8012f94:	bf00      	nop
 8012f96:	e000      	b.n	8012f9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012f98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	8b5b      	ldrh	r3, [r3, #26]
 8012f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012fa2:	b29a      	uxth	r2, r3
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3728      	adds	r7, #40	; 0x28
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8012fb2:	bf00      	nop

08012fb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d106      	bne.n	8012fd0 <tcp_output_segment_busy+0x1c>
 8012fc2:	4b09      	ldr	r3, [pc, #36]	; (8012fe8 <tcp_output_segment_busy+0x34>)
 8012fc4:	f240 529a 	movw	r2, #1434	; 0x59a
 8012fc8:	4908      	ldr	r1, [pc, #32]	; (8012fec <tcp_output_segment_busy+0x38>)
 8012fca:	4809      	ldr	r0, [pc, #36]	; (8012ff0 <tcp_output_segment_busy+0x3c>)
 8012fcc:	f004 feec 	bl	8017da8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	7b9b      	ldrb	r3, [r3, #14]
 8012fd6:	2b01      	cmp	r3, #1
 8012fd8:	d001      	beq.n	8012fde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012fda:	2301      	movs	r3, #1
 8012fdc:	e000      	b.n	8012fe0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012fde:	2300      	movs	r3, #0
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3708      	adds	r7, #8
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	08020804 	.word	0x08020804
 8012fec:	08020da0 	.word	0x08020da0
 8012ff0:	08020858 	.word	0x08020858

08012ff4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012ff4:	b5b0      	push	{r4, r5, r7, lr}
 8012ff6:	b08c      	sub	sp, #48	; 0x30
 8012ff8:	af04      	add	r7, sp, #16
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d106      	bne.n	8013014 <tcp_output_segment+0x20>
 8013006:	4b63      	ldr	r3, [pc, #396]	; (8013194 <tcp_output_segment+0x1a0>)
 8013008:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801300c:	4962      	ldr	r1, [pc, #392]	; (8013198 <tcp_output_segment+0x1a4>)
 801300e:	4863      	ldr	r0, [pc, #396]	; (801319c <tcp_output_segment+0x1a8>)
 8013010:	f004 feca 	bl	8017da8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d106      	bne.n	8013028 <tcp_output_segment+0x34>
 801301a:	4b5e      	ldr	r3, [pc, #376]	; (8013194 <tcp_output_segment+0x1a0>)
 801301c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013020:	495f      	ldr	r1, [pc, #380]	; (80131a0 <tcp_output_segment+0x1ac>)
 8013022:	485e      	ldr	r0, [pc, #376]	; (801319c <tcp_output_segment+0x1a8>)
 8013024:	f004 fec0 	bl	8017da8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <tcp_output_segment+0x48>
 801302e:	4b59      	ldr	r3, [pc, #356]	; (8013194 <tcp_output_segment+0x1a0>)
 8013030:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013034:	495b      	ldr	r1, [pc, #364]	; (80131a4 <tcp_output_segment+0x1b0>)
 8013036:	4859      	ldr	r0, [pc, #356]	; (801319c <tcp_output_segment+0x1a8>)
 8013038:	f004 feb6 	bl	8017da8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f7ff ffb9 	bl	8012fb4 <tcp_output_segment_busy>
 8013042:	4603      	mov	r3, r0
 8013044:	2b00      	cmp	r3, #0
 8013046:	d001      	beq.n	801304c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013048:	2300      	movs	r3, #0
 801304a:	e09f      	b.n	801318c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	68dc      	ldr	r4, [r3, #12]
 8013054:	4610      	mov	r0, r2
 8013056:	f7f9 fecb 	bl	800cdf0 <lwip_htonl>
 801305a:	4603      	mov	r3, r0
 801305c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	68dc      	ldr	r4, [r3, #12]
 8013066:	4610      	mov	r0, r2
 8013068:	f7f9 fead 	bl	800cdc6 <lwip_htons>
 801306c:	4603      	mov	r3, r0
 801306e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013074:	68ba      	ldr	r2, [r7, #8]
 8013076:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013078:	441a      	add	r2, r3
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	68db      	ldr	r3, [r3, #12]
 8013082:	3314      	adds	r3, #20
 8013084:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	7a9b      	ldrb	r3, [r3, #10]
 801308a:	f003 0301 	and.w	r3, r3, #1
 801308e:	2b00      	cmp	r3, #0
 8013090:	d015      	beq.n	80130be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	3304      	adds	r3, #4
 8013096:	461a      	mov	r2, r3
 8013098:	6879      	ldr	r1, [r7, #4]
 801309a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801309e:	f7fc fe8f 	bl	800fdc0 <tcp_eff_send_mss_netif>
 80130a2:	4603      	mov	r3, r0
 80130a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80130a6:	8b7b      	ldrh	r3, [r7, #26]
 80130a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7f9 fe9f 	bl	800cdf0 <lwip_htonl>
 80130b2:	4602      	mov	r2, r0
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	3304      	adds	r3, #4
 80130bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	da02      	bge.n	80130ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	2200      	movs	r2, #0
 80130cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10c      	bne.n	80130f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80130d6:	4b34      	ldr	r3, [pc, #208]	; (80131a8 <tcp_output_segment+0x1b4>)
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	68db      	ldr	r3, [r3, #12]
 80130e2:	685b      	ldr	r3, [r3, #4]
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7f9 fe83 	bl	800cdf0 <lwip_htonl>
 80130ea:	4602      	mov	r2, r0
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	68da      	ldr	r2, [r3, #12]
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	685b      	ldr	r3, [r3, #4]
 80130fa:	1ad3      	subs	r3, r2, r3
 80130fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	8959      	ldrh	r1, [r3, #10]
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	8b3a      	ldrh	r2, [r7, #24]
 801310a:	1a8a      	subs	r2, r1, r2
 801310c:	b292      	uxth	r2, r2
 801310e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	8919      	ldrh	r1, [r3, #8]
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	8b3a      	ldrh	r2, [r7, #24]
 801311c:	1a8a      	subs	r2, r1, r2
 801311e:	b292      	uxth	r2, r2
 8013120:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	68fa      	ldr	r2, [r7, #12]
 8013128:	68d2      	ldr	r2, [r2, #12]
 801312a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	2200      	movs	r2, #0
 8013132:	741a      	strb	r2, [r3, #16]
 8013134:	2200      	movs	r2, #0
 8013136:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	f103 0214 	add.w	r2, r3, #20
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	7a9b      	ldrb	r3, [r3, #10]
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	f003 0304 	and.w	r3, r3, #4
 801314a:	4413      	add	r3, r2
 801314c:	69fa      	ldr	r2, [r7, #28]
 801314e:	429a      	cmp	r2, r3
 8013150:	d006      	beq.n	8013160 <tcp_output_segment+0x16c>
 8013152:	4b10      	ldr	r3, [pc, #64]	; (8013194 <tcp_output_segment+0x1a0>)
 8013154:	f240 621c 	movw	r2, #1564	; 0x61c
 8013158:	4914      	ldr	r1, [pc, #80]	; (80131ac <tcp_output_segment+0x1b8>)
 801315a:	4810      	ldr	r0, [pc, #64]	; (801319c <tcp_output_segment+0x1a8>)
 801315c:	f004 fe24 	bl	8017da8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	6858      	ldr	r0, [r3, #4]
 8013164:	68b9      	ldr	r1, [r7, #8]
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	1d1c      	adds	r4, r3, #4
 801316a:	68bb      	ldr	r3, [r7, #8]
 801316c:	7add      	ldrb	r5, [r3, #11]
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	7a9b      	ldrb	r3, [r3, #10]
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	9202      	str	r2, [sp, #8]
 8013176:	2206      	movs	r2, #6
 8013178:	9201      	str	r2, [sp, #4]
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	462b      	mov	r3, r5
 801317e:	4622      	mov	r2, r4
 8013180:	f002 f9f4 	bl	801556c <ip4_output_if>
 8013184:	4603      	mov	r3, r0
 8013186:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801318c:	4618      	mov	r0, r3
 801318e:	3720      	adds	r7, #32
 8013190:	46bd      	mov	sp, r7
 8013192:	bdb0      	pop	{r4, r5, r7, pc}
 8013194:	08020804 	.word	0x08020804
 8013198:	08020dc8 	.word	0x08020dc8
 801319c:	08020858 	.word	0x08020858
 80131a0:	08020de8 	.word	0x08020de8
 80131a4:	08020e08 	.word	0x08020e08
 80131a8:	2000711c 	.word	0x2000711c
 80131ac:	08020e2c 	.word	0x08020e2c

080131b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80131b0:	b5b0      	push	{r4, r5, r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d106      	bne.n	80131cc <tcp_rexmit_rto_prepare+0x1c>
 80131be:	4b31      	ldr	r3, [pc, #196]	; (8013284 <tcp_rexmit_rto_prepare+0xd4>)
 80131c0:	f240 6263 	movw	r2, #1635	; 0x663
 80131c4:	4930      	ldr	r1, [pc, #192]	; (8013288 <tcp_rexmit_rto_prepare+0xd8>)
 80131c6:	4831      	ldr	r0, [pc, #196]	; (801328c <tcp_rexmit_rto_prepare+0xdc>)
 80131c8:	f004 fdee 	bl	8017da8 <iprintf>

  if (pcb->unacked == NULL) {
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d102      	bne.n	80131da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80131d4:	f06f 0305 	mvn.w	r3, #5
 80131d8:	e050      	b.n	801327c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131de:	60fb      	str	r3, [r7, #12]
 80131e0:	e00b      	b.n	80131fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80131e2:	68f8      	ldr	r0, [r7, #12]
 80131e4:	f7ff fee6 	bl	8012fb4 <tcp_output_segment_busy>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d002      	beq.n	80131f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80131ee:	f06f 0305 	mvn.w	r3, #5
 80131f2:	e043      	b.n	801327c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	60fb      	str	r3, [r7, #12]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d1ef      	bne.n	80131e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013202:	68f8      	ldr	r0, [r7, #12]
 8013204:	f7ff fed6 	bl	8012fb4 <tcp_output_segment_busy>
 8013208:	4603      	mov	r3, r0
 801320a:	2b00      	cmp	r3, #0
 801320c:	d002      	beq.n	8013214 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801320e:	f06f 0305 	mvn.w	r3, #5
 8013212:	e033      	b.n	801327c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2200      	movs	r2, #0
 8013228:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	8b5b      	ldrh	r3, [r3, #26]
 801322e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013232:	b29a      	uxth	r2, r3
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	f7f9 fdd6 	bl	800cdf0 <lwip_htonl>
 8013244:	4604      	mov	r4, r0
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	891b      	ldrh	r3, [r3, #8]
 801324a:	461d      	mov	r5, r3
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	899b      	ldrh	r3, [r3, #12]
 8013252:	b29b      	uxth	r3, r3
 8013254:	4618      	mov	r0, r3
 8013256:	f7f9 fdb6 	bl	800cdc6 <lwip_htons>
 801325a:	4603      	mov	r3, r0
 801325c:	b2db      	uxtb	r3, r3
 801325e:	f003 0303 	and.w	r3, r3, #3
 8013262:	2b00      	cmp	r3, #0
 8013264:	d001      	beq.n	801326a <tcp_rexmit_rto_prepare+0xba>
 8013266:	2301      	movs	r3, #1
 8013268:	e000      	b.n	801326c <tcp_rexmit_rto_prepare+0xbc>
 801326a:	2300      	movs	r3, #0
 801326c:	442b      	add	r3, r5
 801326e:	18e2      	adds	r2, r4, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2200      	movs	r2, #0
 8013278:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bdb0      	pop	{r4, r5, r7, pc}
 8013284:	08020804 	.word	0x08020804
 8013288:	08020e40 	.word	0x08020e40
 801328c:	08020858 	.word	0x08020858

08013290 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b082      	sub	sp, #8
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d106      	bne.n	80132ac <tcp_rexmit_rto_commit+0x1c>
 801329e:	4b0d      	ldr	r3, [pc, #52]	; (80132d4 <tcp_rexmit_rto_commit+0x44>)
 80132a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80132a4:	490c      	ldr	r1, [pc, #48]	; (80132d8 <tcp_rexmit_rto_commit+0x48>)
 80132a6:	480d      	ldr	r0, [pc, #52]	; (80132dc <tcp_rexmit_rto_commit+0x4c>)
 80132a8:	f004 fd7e 	bl	8017da8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132b2:	2bff      	cmp	r3, #255	; 0xff
 80132b4:	d007      	beq.n	80132c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132bc:	3301      	adds	r3, #1
 80132be:	b2da      	uxtb	r2, r3
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f7ff fc80 	bl	8012bcc <tcp_output>
}
 80132cc:	bf00      	nop
 80132ce:	3708      	adds	r7, #8
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	08020804 	.word	0x08020804
 80132d8:	08020e64 	.word	0x08020e64
 80132dc:	08020858 	.word	0x08020858

080132e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d106      	bne.n	80132fc <tcp_rexmit_rto+0x1c>
 80132ee:	4b0a      	ldr	r3, [pc, #40]	; (8013318 <tcp_rexmit_rto+0x38>)
 80132f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80132f4:	4909      	ldr	r1, [pc, #36]	; (801331c <tcp_rexmit_rto+0x3c>)
 80132f6:	480a      	ldr	r0, [pc, #40]	; (8013320 <tcp_rexmit_rto+0x40>)
 80132f8:	f004 fd56 	bl	8017da8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f7ff ff57 	bl	80131b0 <tcp_rexmit_rto_prepare>
 8013302:	4603      	mov	r3, r0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d102      	bne.n	801330e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f7ff ffc1 	bl	8013290 <tcp_rexmit_rto_commit>
  }
}
 801330e:	bf00      	nop
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	08020804 	.word	0x08020804
 801331c:	08020e88 	.word	0x08020e88
 8013320:	08020858 	.word	0x08020858

08013324 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013324:	b590      	push	{r4, r7, lr}
 8013326:	b085      	sub	sp, #20
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d106      	bne.n	8013340 <tcp_rexmit+0x1c>
 8013332:	4b2f      	ldr	r3, [pc, #188]	; (80133f0 <tcp_rexmit+0xcc>)
 8013334:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013338:	492e      	ldr	r1, [pc, #184]	; (80133f4 <tcp_rexmit+0xd0>)
 801333a:	482f      	ldr	r0, [pc, #188]	; (80133f8 <tcp_rexmit+0xd4>)
 801333c:	f004 fd34 	bl	8017da8 <iprintf>

  if (pcb->unacked == NULL) {
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013344:	2b00      	cmp	r3, #0
 8013346:	d102      	bne.n	801334e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013348:	f06f 0305 	mvn.w	r3, #5
 801334c:	e04c      	b.n	80133e8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013352:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013354:	68b8      	ldr	r0, [r7, #8]
 8013356:	f7ff fe2d 	bl	8012fb4 <tcp_output_segment_busy>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d002      	beq.n	8013366 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013360:	f06f 0305 	mvn.w	r3, #5
 8013364:	e040      	b.n	80133e8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	336c      	adds	r3, #108	; 0x6c
 8013372:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013374:	e002      	b.n	801337c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d011      	beq.n	80133a8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	68db      	ldr	r3, [r3, #12]
 801338a:	685b      	ldr	r3, [r3, #4]
 801338c:	4618      	mov	r0, r3
 801338e:	f7f9 fd2f 	bl	800cdf0 <lwip_htonl>
 8013392:	4604      	mov	r4, r0
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	68db      	ldr	r3, [r3, #12]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	4618      	mov	r0, r3
 801339c:	f7f9 fd28 	bl	800cdf0 <lwip_htonl>
 80133a0:	4603      	mov	r3, r0
 80133a2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	dbe6      	blt.n	8013376 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	68ba      	ldr	r2, [r7, #8]
 80133b4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d103      	bne.n	80133c6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	2200      	movs	r2, #0
 80133c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80133cc:	2bff      	cmp	r3, #255	; 0xff
 80133ce:	d007      	beq.n	80133e0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80133d6:	3301      	adds	r3, #1
 80133d8:	b2da      	uxtb	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2200      	movs	r2, #0
 80133e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80133e6:	2300      	movs	r3, #0
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3714      	adds	r7, #20
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd90      	pop	{r4, r7, pc}
 80133f0:	08020804 	.word	0x08020804
 80133f4:	08020ea4 	.word	0x08020ea4
 80133f8:	08020858 	.word	0x08020858

080133fc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b082      	sub	sp, #8
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d106      	bne.n	8013418 <tcp_rexmit_fast+0x1c>
 801340a:	4b2a      	ldr	r3, [pc, #168]	; (80134b4 <tcp_rexmit_fast+0xb8>)
 801340c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013410:	4929      	ldr	r1, [pc, #164]	; (80134b8 <tcp_rexmit_fast+0xbc>)
 8013412:	482a      	ldr	r0, [pc, #168]	; (80134bc <tcp_rexmit_fast+0xc0>)
 8013414:	f004 fcc8 	bl	8017da8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801341c:	2b00      	cmp	r3, #0
 801341e:	d044      	beq.n	80134aa <tcp_rexmit_fast+0xae>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	8b5b      	ldrh	r3, [r3, #26]
 8013424:	f003 0304 	and.w	r3, r3, #4
 8013428:	2b00      	cmp	r3, #0
 801342a:	d13e      	bne.n	80134aa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7ff ff79 	bl	8013324 <tcp_rexmit>
 8013432:	4603      	mov	r3, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	d138      	bne.n	80134aa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013444:	4293      	cmp	r3, r2
 8013446:	bf28      	it	cs
 8013448:	4613      	movcs	r3, r2
 801344a:	b29b      	uxth	r3, r3
 801344c:	0fda      	lsrs	r2, r3, #31
 801344e:	4413      	add	r3, r2
 8013450:	105b      	asrs	r3, r3, #1
 8013452:	b29a      	uxth	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013460:	461a      	mov	r2, r3
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013466:	005b      	lsls	r3, r3, #1
 8013468:	429a      	cmp	r2, r3
 801346a:	d206      	bcs.n	801347a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013470:	005b      	lsls	r3, r3, #1
 8013472:	b29a      	uxth	r2, r3
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013484:	4619      	mov	r1, r3
 8013486:	0049      	lsls	r1, r1, #1
 8013488:	440b      	add	r3, r1
 801348a:	b29b      	uxth	r3, r3
 801348c:	4413      	add	r3, r2
 801348e:	b29a      	uxth	r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	8b5b      	ldrh	r3, [r3, #26]
 801349a:	f043 0304 	orr.w	r3, r3, #4
 801349e:	b29a      	uxth	r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2200      	movs	r2, #0
 80134a8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80134aa:	bf00      	nop
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	08020804 	.word	0x08020804
 80134b8:	08020ebc 	.word	0x08020ebc
 80134bc:	08020858 	.word	0x08020858

080134c0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b086      	sub	sp, #24
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	60f8      	str	r0, [r7, #12]
 80134c8:	607b      	str	r3, [r7, #4]
 80134ca:	460b      	mov	r3, r1
 80134cc:	817b      	strh	r3, [r7, #10]
 80134ce:	4613      	mov	r3, r2
 80134d0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80134d2:	897a      	ldrh	r2, [r7, #10]
 80134d4:	893b      	ldrh	r3, [r7, #8]
 80134d6:	4413      	add	r3, r2
 80134d8:	b29b      	uxth	r3, r3
 80134da:	3314      	adds	r3, #20
 80134dc:	b29b      	uxth	r3, r3
 80134de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134e2:	4619      	mov	r1, r3
 80134e4:	2022      	movs	r0, #34	; 0x22
 80134e6:	f7fa fc1d 	bl	800dd24 <pbuf_alloc>
 80134ea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d04d      	beq.n	801358e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80134f2:	897b      	ldrh	r3, [r7, #10]
 80134f4:	3313      	adds	r3, #19
 80134f6:	697a      	ldr	r2, [r7, #20]
 80134f8:	8952      	ldrh	r2, [r2, #10]
 80134fa:	4293      	cmp	r3, r2
 80134fc:	db06      	blt.n	801350c <tcp_output_alloc_header_common+0x4c>
 80134fe:	4b26      	ldr	r3, [pc, #152]	; (8013598 <tcp_output_alloc_header_common+0xd8>)
 8013500:	f240 7223 	movw	r2, #1827	; 0x723
 8013504:	4925      	ldr	r1, [pc, #148]	; (801359c <tcp_output_alloc_header_common+0xdc>)
 8013506:	4826      	ldr	r0, [pc, #152]	; (80135a0 <tcp_output_alloc_header_common+0xe0>)
 8013508:	f004 fc4e 	bl	8017da8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013512:	8c3b      	ldrh	r3, [r7, #32]
 8013514:	4618      	mov	r0, r3
 8013516:	f7f9 fc56 	bl	800cdc6 <lwip_htons>
 801351a:	4603      	mov	r3, r0
 801351c:	461a      	mov	r2, r3
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013524:	4618      	mov	r0, r3
 8013526:	f7f9 fc4e 	bl	800cdc6 <lwip_htons>
 801352a:	4603      	mov	r3, r0
 801352c:	461a      	mov	r2, r3
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f7f9 fc59 	bl	800cdf0 <lwip_htonl>
 801353e:	4602      	mov	r2, r0
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013544:	897b      	ldrh	r3, [r7, #10]
 8013546:	089b      	lsrs	r3, r3, #2
 8013548:	b29b      	uxth	r3, r3
 801354a:	3305      	adds	r3, #5
 801354c:	b29b      	uxth	r3, r3
 801354e:	031b      	lsls	r3, r3, #12
 8013550:	b29a      	uxth	r2, r3
 8013552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013556:	b29b      	uxth	r3, r3
 8013558:	4313      	orrs	r3, r2
 801355a:	b29b      	uxth	r3, r3
 801355c:	4618      	mov	r0, r3
 801355e:	f7f9 fc32 	bl	800cdc6 <lwip_htons>
 8013562:	4603      	mov	r3, r0
 8013564:	461a      	mov	r2, r3
 8013566:	693b      	ldr	r3, [r7, #16]
 8013568:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801356a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801356c:	4618      	mov	r0, r3
 801356e:	f7f9 fc2a 	bl	800cdc6 <lwip_htons>
 8013572:	4603      	mov	r3, r0
 8013574:	461a      	mov	r2, r3
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2200      	movs	r2, #0
 801357e:	741a      	strb	r2, [r3, #16]
 8013580:	2200      	movs	r2, #0
 8013582:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	2200      	movs	r2, #0
 8013588:	749a      	strb	r2, [r3, #18]
 801358a:	2200      	movs	r2, #0
 801358c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801358e:	697b      	ldr	r3, [r7, #20]
}
 8013590:	4618      	mov	r0, r3
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}
 8013598:	08020804 	.word	0x08020804
 801359c:	08020edc 	.word	0x08020edc
 80135a0:	08020858 	.word	0x08020858

080135a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80135a4:	b5b0      	push	{r4, r5, r7, lr}
 80135a6:	b08a      	sub	sp, #40	; 0x28
 80135a8:	af04      	add	r7, sp, #16
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	607b      	str	r3, [r7, #4]
 80135ae:	460b      	mov	r3, r1
 80135b0:	817b      	strh	r3, [r7, #10]
 80135b2:	4613      	mov	r3, r2
 80135b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d106      	bne.n	80135ca <tcp_output_alloc_header+0x26>
 80135bc:	4b15      	ldr	r3, [pc, #84]	; (8013614 <tcp_output_alloc_header+0x70>)
 80135be:	f240 7242 	movw	r2, #1858	; 0x742
 80135c2:	4915      	ldr	r1, [pc, #84]	; (8013618 <tcp_output_alloc_header+0x74>)
 80135c4:	4815      	ldr	r0, [pc, #84]	; (801361c <tcp_output_alloc_header+0x78>)
 80135c6:	f004 fbef 	bl	8017da8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	8adb      	ldrh	r3, [r3, #22]
 80135d2:	68fa      	ldr	r2, [r7, #12]
 80135d4:	8b12      	ldrh	r2, [r2, #24]
 80135d6:	68f9      	ldr	r1, [r7, #12]
 80135d8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80135da:	893d      	ldrh	r5, [r7, #8]
 80135dc:	897c      	ldrh	r4, [r7, #10]
 80135de:	9103      	str	r1, [sp, #12]
 80135e0:	2110      	movs	r1, #16
 80135e2:	9102      	str	r1, [sp, #8]
 80135e4:	9201      	str	r2, [sp, #4]
 80135e6:	9300      	str	r3, [sp, #0]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	462a      	mov	r2, r5
 80135ec:	4621      	mov	r1, r4
 80135ee:	f7ff ff67 	bl	80134c0 <tcp_output_alloc_header_common>
 80135f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d006      	beq.n	8013608 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013602:	441a      	add	r2, r3
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013608:	697b      	ldr	r3, [r7, #20]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3718      	adds	r7, #24
 801360e:	46bd      	mov	sp, r7
 8013610:	bdb0      	pop	{r4, r5, r7, pc}
 8013612:	bf00      	nop
 8013614:	08020804 	.word	0x08020804
 8013618:	08020f0c 	.word	0x08020f0c
 801361c:	08020858 	.word	0x08020858

08013620 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b088      	sub	sp, #32
 8013624:	af00      	add	r7, sp, #0
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	4611      	mov	r1, r2
 801362c:	461a      	mov	r2, r3
 801362e:	460b      	mov	r3, r1
 8013630:	71fb      	strb	r3, [r7, #7]
 8013632:	4613      	mov	r3, r2
 8013634:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d106      	bne.n	801364e <tcp_output_fill_options+0x2e>
 8013640:	4b13      	ldr	r3, [pc, #76]	; (8013690 <tcp_output_fill_options+0x70>)
 8013642:	f240 7256 	movw	r2, #1878	; 0x756
 8013646:	4913      	ldr	r1, [pc, #76]	; (8013694 <tcp_output_fill_options+0x74>)
 8013648:	4813      	ldr	r0, [pc, #76]	; (8013698 <tcp_output_fill_options+0x78>)
 801364a:	f004 fbad 	bl	8017da8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	3314      	adds	r3, #20
 8013658:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	f103 0214 	add.w	r2, r3, #20
 8013660:	8bfb      	ldrh	r3, [r7, #30]
 8013662:	009b      	lsls	r3, r3, #2
 8013664:	4619      	mov	r1, r3
 8013666:	79fb      	ldrb	r3, [r7, #7]
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	f003 0304 	and.w	r3, r3, #4
 801366e:	440b      	add	r3, r1
 8013670:	4413      	add	r3, r2
 8013672:	697a      	ldr	r2, [r7, #20]
 8013674:	429a      	cmp	r2, r3
 8013676:	d006      	beq.n	8013686 <tcp_output_fill_options+0x66>
 8013678:	4b05      	ldr	r3, [pc, #20]	; (8013690 <tcp_output_fill_options+0x70>)
 801367a:	f240 7275 	movw	r2, #1909	; 0x775
 801367e:	4907      	ldr	r1, [pc, #28]	; (801369c <tcp_output_fill_options+0x7c>)
 8013680:	4805      	ldr	r0, [pc, #20]	; (8013698 <tcp_output_fill_options+0x78>)
 8013682:	f004 fb91 	bl	8017da8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013686:	bf00      	nop
 8013688:	3720      	adds	r7, #32
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	08020804 	.word	0x08020804
 8013694:	08020f34 	.word	0x08020f34
 8013698:	08020858 	.word	0x08020858
 801369c:	08020e2c 	.word	0x08020e2c

080136a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b08a      	sub	sp, #40	; 0x28
 80136a4:	af04      	add	r7, sp, #16
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
 80136ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d106      	bne.n	80136c2 <tcp_output_control_segment+0x22>
 80136b4:	4b1c      	ldr	r3, [pc, #112]	; (8013728 <tcp_output_control_segment+0x88>)
 80136b6:	f240 7287 	movw	r2, #1927	; 0x787
 80136ba:	491c      	ldr	r1, [pc, #112]	; (801372c <tcp_output_control_segment+0x8c>)
 80136bc:	481c      	ldr	r0, [pc, #112]	; (8013730 <tcp_output_control_segment+0x90>)
 80136be:	f004 fb73 	bl	8017da8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80136c2:	683a      	ldr	r2, [r7, #0]
 80136c4:	6879      	ldr	r1, [r7, #4]
 80136c6:	68f8      	ldr	r0, [r7, #12]
 80136c8:	f7fe ff40 	bl	801254c <tcp_route>
 80136cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d102      	bne.n	80136da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80136d4:	23fc      	movs	r3, #252	; 0xfc
 80136d6:	75fb      	strb	r3, [r7, #23]
 80136d8:	e01c      	b.n	8013714 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d006      	beq.n	80136ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	7adb      	ldrb	r3, [r3, #11]
 80136e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	7a9b      	ldrb	r3, [r3, #10]
 80136ea:	757b      	strb	r3, [r7, #21]
 80136ec:	e003      	b.n	80136f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80136ee:	23ff      	movs	r3, #255	; 0xff
 80136f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80136f2:	2300      	movs	r3, #0
 80136f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80136f6:	7dba      	ldrb	r2, [r7, #22]
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	9302      	str	r3, [sp, #8]
 80136fc:	2306      	movs	r3, #6
 80136fe:	9301      	str	r3, [sp, #4]
 8013700:	7d7b      	ldrb	r3, [r7, #21]
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	4613      	mov	r3, r2
 8013706:	683a      	ldr	r2, [r7, #0]
 8013708:	6879      	ldr	r1, [r7, #4]
 801370a:	68b8      	ldr	r0, [r7, #8]
 801370c:	f001 ff2e 	bl	801556c <ip4_output_if>
 8013710:	4603      	mov	r3, r0
 8013712:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013714:	68b8      	ldr	r0, [r7, #8]
 8013716:	f7fa fde9 	bl	800e2ec <pbuf_free>
  return err;
 801371a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801371e:	4618      	mov	r0, r3
 8013720:	3718      	adds	r7, #24
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	08020804 	.word	0x08020804
 801372c:	08020f5c 	.word	0x08020f5c
 8013730:	08020858 	.word	0x08020858

08013734 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013734:	b590      	push	{r4, r7, lr}
 8013736:	b08b      	sub	sp, #44	; 0x2c
 8013738:	af04      	add	r7, sp, #16
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d106      	bne.n	8013756 <tcp_rst+0x22>
 8013748:	4b1f      	ldr	r3, [pc, #124]	; (80137c8 <tcp_rst+0x94>)
 801374a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801374e:	491f      	ldr	r1, [pc, #124]	; (80137cc <tcp_rst+0x98>)
 8013750:	481f      	ldr	r0, [pc, #124]	; (80137d0 <tcp_rst+0x9c>)
 8013752:	f004 fb29 	bl	8017da8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013758:	2b00      	cmp	r3, #0
 801375a:	d106      	bne.n	801376a <tcp_rst+0x36>
 801375c:	4b1a      	ldr	r3, [pc, #104]	; (80137c8 <tcp_rst+0x94>)
 801375e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013762:	491c      	ldr	r1, [pc, #112]	; (80137d4 <tcp_rst+0xa0>)
 8013764:	481a      	ldr	r0, [pc, #104]	; (80137d0 <tcp_rst+0x9c>)
 8013766:	f004 fb1f 	bl	8017da8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801376a:	2300      	movs	r3, #0
 801376c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801376e:	f246 0308 	movw	r3, #24584	; 0x6008
 8013772:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013774:	7dfb      	ldrb	r3, [r7, #23]
 8013776:	b29c      	uxth	r4, r3
 8013778:	68b8      	ldr	r0, [r7, #8]
 801377a:	f7f9 fb39 	bl	800cdf0 <lwip_htonl>
 801377e:	4602      	mov	r2, r0
 8013780:	8abb      	ldrh	r3, [r7, #20]
 8013782:	9303      	str	r3, [sp, #12]
 8013784:	2314      	movs	r3, #20
 8013786:	9302      	str	r3, [sp, #8]
 8013788:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801378a:	9301      	str	r3, [sp, #4]
 801378c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801378e:	9300      	str	r3, [sp, #0]
 8013790:	4613      	mov	r3, r2
 8013792:	2200      	movs	r2, #0
 8013794:	4621      	mov	r1, r4
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7ff fe92 	bl	80134c0 <tcp_output_alloc_header_common>
 801379c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801379e:	693b      	ldr	r3, [r7, #16]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d00c      	beq.n	80137be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137a4:	7dfb      	ldrb	r3, [r7, #23]
 80137a6:	2200      	movs	r2, #0
 80137a8:	6939      	ldr	r1, [r7, #16]
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	f7ff ff38 	bl	8013620 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80137b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b2:	683a      	ldr	r2, [r7, #0]
 80137b4:	6939      	ldr	r1, [r7, #16]
 80137b6:	68f8      	ldr	r0, [r7, #12]
 80137b8:	f7ff ff72 	bl	80136a0 <tcp_output_control_segment>
 80137bc:	e000      	b.n	80137c0 <tcp_rst+0x8c>
    return;
 80137be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80137c0:	371c      	adds	r7, #28
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd90      	pop	{r4, r7, pc}
 80137c6:	bf00      	nop
 80137c8:	08020804 	.word	0x08020804
 80137cc:	08020f88 	.word	0x08020f88
 80137d0:	08020858 	.word	0x08020858
 80137d4:	08020fa4 	.word	0x08020fa4

080137d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80137d8:	b590      	push	{r4, r7, lr}
 80137da:	b087      	sub	sp, #28
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80137e0:	2300      	movs	r3, #0
 80137e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80137e4:	2300      	movs	r3, #0
 80137e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d106      	bne.n	80137fc <tcp_send_empty_ack+0x24>
 80137ee:	4b28      	ldr	r3, [pc, #160]	; (8013890 <tcp_send_empty_ack+0xb8>)
 80137f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80137f4:	4927      	ldr	r1, [pc, #156]	; (8013894 <tcp_send_empty_ack+0xbc>)
 80137f6:	4828      	ldr	r0, [pc, #160]	; (8013898 <tcp_send_empty_ack+0xc0>)
 80137f8:	f004 fad6 	bl	8017da8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80137fc:	7dfb      	ldrb	r3, [r7, #23]
 80137fe:	009b      	lsls	r3, r3, #2
 8013800:	b2db      	uxtb	r3, r3
 8013802:	f003 0304 	and.w	r3, r3, #4
 8013806:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013808:	7d7b      	ldrb	r3, [r7, #21]
 801380a:	b29c      	uxth	r4, r3
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013810:	4618      	mov	r0, r3
 8013812:	f7f9 faed 	bl	800cdf0 <lwip_htonl>
 8013816:	4603      	mov	r3, r0
 8013818:	2200      	movs	r2, #0
 801381a:	4621      	mov	r1, r4
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f7ff fec1 	bl	80135a4 <tcp_output_alloc_header>
 8013822:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d109      	bne.n	801383e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	8b5b      	ldrh	r3, [r3, #26]
 801382e:	f043 0303 	orr.w	r3, r3, #3
 8013832:	b29a      	uxth	r2, r3
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013838:	f06f 0301 	mvn.w	r3, #1
 801383c:	e023      	b.n	8013886 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801383e:	7dbb      	ldrb	r3, [r7, #22]
 8013840:	7dfa      	ldrb	r2, [r7, #23]
 8013842:	6939      	ldr	r1, [r7, #16]
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f7ff feeb 	bl	8013620 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801384a:	687a      	ldr	r2, [r7, #4]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	3304      	adds	r3, #4
 8013850:	6939      	ldr	r1, [r7, #16]
 8013852:	6878      	ldr	r0, [r7, #4]
 8013854:	f7ff ff24 	bl	80136a0 <tcp_output_control_segment>
 8013858:	4603      	mov	r3, r0
 801385a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801385c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d007      	beq.n	8013874 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	8b5b      	ldrh	r3, [r3, #26]
 8013868:	f043 0303 	orr.w	r3, r3, #3
 801386c:	b29a      	uxth	r2, r3
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	835a      	strh	r2, [r3, #26]
 8013872:	e006      	b.n	8013882 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	8b5b      	ldrh	r3, [r3, #26]
 8013878:	f023 0303 	bic.w	r3, r3, #3
 801387c:	b29a      	uxth	r2, r3
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013886:	4618      	mov	r0, r3
 8013888:	371c      	adds	r7, #28
 801388a:	46bd      	mov	sp, r7
 801388c:	bd90      	pop	{r4, r7, pc}
 801388e:	bf00      	nop
 8013890:	08020804 	.word	0x08020804
 8013894:	08020fc0 	.word	0x08020fc0
 8013898:	08020858 	.word	0x08020858

0801389c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801389c:	b590      	push	{r4, r7, lr}
 801389e:	b087      	sub	sp, #28
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80138a4:	2300      	movs	r3, #0
 80138a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d106      	bne.n	80138bc <tcp_keepalive+0x20>
 80138ae:	4b18      	ldr	r3, [pc, #96]	; (8013910 <tcp_keepalive+0x74>)
 80138b0:	f640 0224 	movw	r2, #2084	; 0x824
 80138b4:	4917      	ldr	r1, [pc, #92]	; (8013914 <tcp_keepalive+0x78>)
 80138b6:	4818      	ldr	r0, [pc, #96]	; (8013918 <tcp_keepalive+0x7c>)
 80138b8:	f004 fa76 	bl	8017da8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80138bc:	7dfb      	ldrb	r3, [r7, #23]
 80138be:	b29c      	uxth	r4, r3
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138c4:	3b01      	subs	r3, #1
 80138c6:	4618      	mov	r0, r3
 80138c8:	f7f9 fa92 	bl	800cdf0 <lwip_htonl>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2200      	movs	r2, #0
 80138d0:	4621      	mov	r1, r4
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f7ff fe66 	bl	80135a4 <tcp_output_alloc_header>
 80138d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d102      	bne.n	80138e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80138e0:	f04f 33ff 	mov.w	r3, #4294967295
 80138e4:	e010      	b.n	8013908 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80138e6:	7dfb      	ldrb	r3, [r7, #23]
 80138e8:	2200      	movs	r2, #0
 80138ea:	6939      	ldr	r1, [r7, #16]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f7ff fe97 	bl	8013620 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80138f2:	687a      	ldr	r2, [r7, #4]
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	3304      	adds	r3, #4
 80138f8:	6939      	ldr	r1, [r7, #16]
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f7ff fed0 	bl	80136a0 <tcp_output_control_segment>
 8013900:	4603      	mov	r3, r0
 8013902:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013904:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013908:	4618      	mov	r0, r3
 801390a:	371c      	adds	r7, #28
 801390c:	46bd      	mov	sp, r7
 801390e:	bd90      	pop	{r4, r7, pc}
 8013910:	08020804 	.word	0x08020804
 8013914:	08020fe0 	.word	0x08020fe0
 8013918:	08020858 	.word	0x08020858

0801391c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801391c:	b590      	push	{r4, r7, lr}
 801391e:	b08b      	sub	sp, #44	; 0x2c
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013924:	2300      	movs	r3, #0
 8013926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d106      	bne.n	801393e <tcp_zero_window_probe+0x22>
 8013930:	4b4c      	ldr	r3, [pc, #304]	; (8013a64 <tcp_zero_window_probe+0x148>)
 8013932:	f640 024f 	movw	r2, #2127	; 0x84f
 8013936:	494c      	ldr	r1, [pc, #304]	; (8013a68 <tcp_zero_window_probe+0x14c>)
 8013938:	484c      	ldr	r0, [pc, #304]	; (8013a6c <tcp_zero_window_probe+0x150>)
 801393a:	f004 fa35 	bl	8017da8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013942:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013944:	6a3b      	ldr	r3, [r7, #32]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d101      	bne.n	801394e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801394a:	2300      	movs	r3, #0
 801394c:	e086      	b.n	8013a5c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013954:	2bff      	cmp	r3, #255	; 0xff
 8013956:	d007      	beq.n	8013968 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801395e:	3301      	adds	r3, #1
 8013960:	b2da      	uxtb	r2, r3
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013968:	6a3b      	ldr	r3, [r7, #32]
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	899b      	ldrh	r3, [r3, #12]
 801396e:	b29b      	uxth	r3, r3
 8013970:	4618      	mov	r0, r3
 8013972:	f7f9 fa28 	bl	800cdc6 <lwip_htons>
 8013976:	4603      	mov	r3, r0
 8013978:	b2db      	uxtb	r3, r3
 801397a:	f003 0301 	and.w	r3, r3, #1
 801397e:	2b00      	cmp	r3, #0
 8013980:	d005      	beq.n	801398e <tcp_zero_window_probe+0x72>
 8013982:	6a3b      	ldr	r3, [r7, #32]
 8013984:	891b      	ldrh	r3, [r3, #8]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d101      	bne.n	801398e <tcp_zero_window_probe+0x72>
 801398a:	2301      	movs	r3, #1
 801398c:	e000      	b.n	8013990 <tcp_zero_window_probe+0x74>
 801398e:	2300      	movs	r3, #0
 8013990:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013992:	7ffb      	ldrb	r3, [r7, #31]
 8013994:	2b00      	cmp	r3, #0
 8013996:	bf0c      	ite	eq
 8013998:	2301      	moveq	r3, #1
 801399a:	2300      	movne	r3, #0
 801399c:	b2db      	uxtb	r3, r3
 801399e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80139a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139a4:	b299      	uxth	r1, r3
 80139a6:	6a3b      	ldr	r3, [r7, #32]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	8bba      	ldrh	r2, [r7, #28]
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7ff fdf8 	bl	80135a4 <tcp_output_alloc_header>
 80139b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d102      	bne.n	80139c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80139bc:	f04f 33ff 	mov.w	r3, #4294967295
 80139c0:	e04c      	b.n	8013a5c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80139c2:	69bb      	ldr	r3, [r7, #24]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80139c8:	7ffb      	ldrb	r3, [r7, #31]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d011      	beq.n	80139f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	899b      	ldrh	r3, [r3, #12]
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	b21b      	sxth	r3, r3
 80139d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80139da:	b21c      	sxth	r4, r3
 80139dc:	2011      	movs	r0, #17
 80139de:	f7f9 f9f2 	bl	800cdc6 <lwip_htons>
 80139e2:	4603      	mov	r3, r0
 80139e4:	b21b      	sxth	r3, r3
 80139e6:	4323      	orrs	r3, r4
 80139e8:	b21b      	sxth	r3, r3
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	819a      	strh	r2, [r3, #12]
 80139f0:	e010      	b.n	8013a14 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	3314      	adds	r3, #20
 80139f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80139fa:	6a3b      	ldr	r3, [r7, #32]
 80139fc:	6858      	ldr	r0, [r3, #4]
 80139fe:	6a3b      	ldr	r3, [r7, #32]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	891a      	ldrh	r2, [r3, #8]
 8013a04:	6a3b      	ldr	r3, [r7, #32]
 8013a06:	891b      	ldrh	r3, [r3, #8]
 8013a08:	1ad3      	subs	r3, r2, r3
 8013a0a:	b29b      	uxth	r3, r3
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	6939      	ldr	r1, [r7, #16]
 8013a10:	f7fa fe56 	bl	800e6c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013a14:	6a3b      	ldr	r3, [r7, #32]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	685b      	ldr	r3, [r3, #4]
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7f9 f9e8 	bl	800cdf0 <lwip_htonl>
 8013a20:	4603      	mov	r3, r0
 8013a22:	3301      	adds	r3, #1
 8013a24:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	1ad3      	subs	r3, r2, r3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	da02      	bge.n	8013a38 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	68fa      	ldr	r2, [r7, #12]
 8013a36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	69b9      	ldr	r1, [r7, #24]
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7ff fded 	bl	8013620 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013a46:	687a      	ldr	r2, [r7, #4]
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	3304      	adds	r3, #4
 8013a4c:	69b9      	ldr	r1, [r7, #24]
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f7ff fe26 	bl	80136a0 <tcp_output_control_segment>
 8013a54:	4603      	mov	r3, r0
 8013a56:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013a58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	372c      	adds	r7, #44	; 0x2c
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd90      	pop	{r4, r7, pc}
 8013a64:	08020804 	.word	0x08020804
 8013a68:	08020ffc 	.word	0x08020ffc
 8013a6c:	08020858 	.word	0x08020858

08013a70 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013a78:	f7fa ff10 	bl	800e89c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013a7c:	4b0a      	ldr	r3, [pc, #40]	; (8013aa8 <tcpip_tcp_timer+0x38>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d103      	bne.n	8013a8c <tcpip_tcp_timer+0x1c>
 8013a84:	4b09      	ldr	r3, [pc, #36]	; (8013aac <tcpip_tcp_timer+0x3c>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d005      	beq.n	8013a98 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	4908      	ldr	r1, [pc, #32]	; (8013ab0 <tcpip_tcp_timer+0x40>)
 8013a90:	20fa      	movs	r0, #250	; 0xfa
 8013a92:	f000 f8f3 	bl	8013c7c <sys_timeout>
 8013a96:	e003      	b.n	8013aa0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013a98:	4b06      	ldr	r3, [pc, #24]	; (8013ab4 <tcpip_tcp_timer+0x44>)
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	601a      	str	r2, [r3, #0]
  }
}
 8013a9e:	bf00      	nop
 8013aa0:	bf00      	nop
 8013aa2:	3708      	adds	r7, #8
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	20007118 	.word	0x20007118
 8013aac:	20007128 	.word	0x20007128
 8013ab0:	08013a71 	.word	0x08013a71
 8013ab4:	20000490 	.word	0x20000490

08013ab8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013abc:	4b0a      	ldr	r3, [pc, #40]	; (8013ae8 <tcp_timer_needed+0x30>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10f      	bne.n	8013ae4 <tcp_timer_needed+0x2c>
 8013ac4:	4b09      	ldr	r3, [pc, #36]	; (8013aec <tcp_timer_needed+0x34>)
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d103      	bne.n	8013ad4 <tcp_timer_needed+0x1c>
 8013acc:	4b08      	ldr	r3, [pc, #32]	; (8013af0 <tcp_timer_needed+0x38>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d007      	beq.n	8013ae4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013ad4:	4b04      	ldr	r3, [pc, #16]	; (8013ae8 <tcp_timer_needed+0x30>)
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013ada:	2200      	movs	r2, #0
 8013adc:	4905      	ldr	r1, [pc, #20]	; (8013af4 <tcp_timer_needed+0x3c>)
 8013ade:	20fa      	movs	r0, #250	; 0xfa
 8013ae0:	f000 f8cc 	bl	8013c7c <sys_timeout>
  }
}
 8013ae4:	bf00      	nop
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	20000490 	.word	0x20000490
 8013aec:	20007118 	.word	0x20007118
 8013af0:	20007128 	.word	0x20007128
 8013af4:	08013a71 	.word	0x08013a71

08013af8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b086      	sub	sp, #24
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	60f8      	str	r0, [r7, #12]
 8013b00:	60b9      	str	r1, [r7, #8]
 8013b02:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013b04:	2006      	movs	r0, #6
 8013b06:	f7f9 fdb3 	bl	800d670 <memp_malloc>
 8013b0a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d109      	bne.n	8013b26 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d151      	bne.n	8013bbc <sys_timeout_abs+0xc4>
 8013b18:	4b2a      	ldr	r3, [pc, #168]	; (8013bc4 <sys_timeout_abs+0xcc>)
 8013b1a:	22be      	movs	r2, #190	; 0xbe
 8013b1c:	492a      	ldr	r1, [pc, #168]	; (8013bc8 <sys_timeout_abs+0xd0>)
 8013b1e:	482b      	ldr	r0, [pc, #172]	; (8013bcc <sys_timeout_abs+0xd4>)
 8013b20:	f004 f942 	bl	8017da8 <iprintf>
    return;
 8013b24:	e04a      	b.n	8013bbc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	2200      	movs	r2, #0
 8013b2a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	68ba      	ldr	r2, [r7, #8]
 8013b30:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	687a      	ldr	r2, [r7, #4]
 8013b36:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	68fa      	ldr	r2, [r7, #12]
 8013b3c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013b3e:	4b24      	ldr	r3, [pc, #144]	; (8013bd0 <sys_timeout_abs+0xd8>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d103      	bne.n	8013b4e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013b46:	4a22      	ldr	r2, [pc, #136]	; (8013bd0 <sys_timeout_abs+0xd8>)
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	6013      	str	r3, [r2, #0]
    return;
 8013b4c:	e037      	b.n	8013bbe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	685a      	ldr	r2, [r3, #4]
 8013b52:	4b1f      	ldr	r3, [pc, #124]	; (8013bd0 <sys_timeout_abs+0xd8>)
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	1ad3      	subs	r3, r2, r3
 8013b5a:	0fdb      	lsrs	r3, r3, #31
 8013b5c:	f003 0301 	and.w	r3, r3, #1
 8013b60:	b2db      	uxtb	r3, r3
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d007      	beq.n	8013b76 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013b66:	4b1a      	ldr	r3, [pc, #104]	; (8013bd0 <sys_timeout_abs+0xd8>)
 8013b68:	681a      	ldr	r2, [r3, #0]
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013b6e:	4a18      	ldr	r2, [pc, #96]	; (8013bd0 <sys_timeout_abs+0xd8>)
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	6013      	str	r3, [r2, #0]
 8013b74:	e023      	b.n	8013bbe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013b76:	4b16      	ldr	r3, [pc, #88]	; (8013bd0 <sys_timeout_abs+0xd8>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	617b      	str	r3, [r7, #20]
 8013b7c:	e01a      	b.n	8013bb4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d00b      	beq.n	8013b9e <sys_timeout_abs+0xa6>
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	685a      	ldr	r2, [r3, #4]
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	1ad3      	subs	r3, r2, r3
 8013b92:	0fdb      	lsrs	r3, r3, #31
 8013b94:	f003 0301 	and.w	r3, r3, #1
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d007      	beq.n	8013bae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013ba6:	697b      	ldr	r3, [r7, #20]
 8013ba8:	693a      	ldr	r2, [r7, #16]
 8013baa:	601a      	str	r2, [r3, #0]
        break;
 8013bac:	e007      	b.n	8013bbe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	617b      	str	r3, [r7, #20]
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1e1      	bne.n	8013b7e <sys_timeout_abs+0x86>
 8013bba:	e000      	b.n	8013bbe <sys_timeout_abs+0xc6>
    return;
 8013bbc:	bf00      	nop
      }
    }
  }
}
 8013bbe:	3718      	adds	r7, #24
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	08021020 	.word	0x08021020
 8013bc8:	08021054 	.word	0x08021054
 8013bcc:	08021094 	.word	0x08021094
 8013bd0:	20000488 	.word	0x20000488

08013bd4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	4798      	blx	r3

  now = sys_now();
 8013be6:	f7f7 fbd1 	bl	800b38c <sys_now>
 8013bea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	681a      	ldr	r2, [r3, #0]
 8013bf0:	4b0f      	ldr	r3, [pc, #60]	; (8013c30 <lwip_cyclic_timer+0x5c>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013bf8:	68fa      	ldr	r2, [r7, #12]
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	1ad3      	subs	r3, r2, r3
 8013bfe:	0fdb      	lsrs	r3, r3, #31
 8013c00:	f003 0301 	and.w	r3, r3, #1
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d009      	beq.n	8013c1e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013c0a:	697b      	ldr	r3, [r7, #20]
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	4413      	add	r3, r2
 8013c12:	687a      	ldr	r2, [r7, #4]
 8013c14:	4907      	ldr	r1, [pc, #28]	; (8013c34 <lwip_cyclic_timer+0x60>)
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7ff ff6e 	bl	8013af8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013c1c:	e004      	b.n	8013c28 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	4904      	ldr	r1, [pc, #16]	; (8013c34 <lwip_cyclic_timer+0x60>)
 8013c22:	68f8      	ldr	r0, [r7, #12]
 8013c24:	f7ff ff68 	bl	8013af8 <sys_timeout_abs>
}
 8013c28:	bf00      	nop
 8013c2a:	3718      	adds	r7, #24
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	2000048c 	.word	0x2000048c
 8013c34:	08013bd5 	.word	0x08013bd5

08013c38 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013c3e:	2301      	movs	r3, #1
 8013c40:	607b      	str	r3, [r7, #4]
 8013c42:	e00e      	b.n	8013c62 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013c44:	4a0b      	ldr	r2, [pc, #44]	; (8013c74 <sys_timeouts_init+0x3c>)
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	00db      	lsls	r3, r3, #3
 8013c50:	4a08      	ldr	r2, [pc, #32]	; (8013c74 <sys_timeouts_init+0x3c>)
 8013c52:	4413      	add	r3, r2
 8013c54:	461a      	mov	r2, r3
 8013c56:	4908      	ldr	r1, [pc, #32]	; (8013c78 <sys_timeouts_init+0x40>)
 8013c58:	f000 f810 	bl	8013c7c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	3301      	adds	r3, #1
 8013c60:	607b      	str	r3, [r7, #4]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2b02      	cmp	r3, #2
 8013c66:	d9ed      	bls.n	8013c44 <sys_timeouts_init+0xc>
  }
}
 8013c68:	bf00      	nop
 8013c6a:	bf00      	nop
 8013c6c:	3708      	adds	r7, #8
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}
 8013c72:	bf00      	nop
 8013c74:	08021c28 	.word	0x08021c28
 8013c78:	08013bd5 	.word	0x08013bd5

08013c7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c8e:	d306      	bcc.n	8013c9e <sys_timeout+0x22>
 8013c90:	4b0a      	ldr	r3, [pc, #40]	; (8013cbc <sys_timeout+0x40>)
 8013c92:	f240 1229 	movw	r2, #297	; 0x129
 8013c96:	490a      	ldr	r1, [pc, #40]	; (8013cc0 <sys_timeout+0x44>)
 8013c98:	480a      	ldr	r0, [pc, #40]	; (8013cc4 <sys_timeout+0x48>)
 8013c9a:	f004 f885 	bl	8017da8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013c9e:	f7f7 fb75 	bl	800b38c <sys_now>
 8013ca2:	4602      	mov	r2, r0
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	4413      	add	r3, r2
 8013ca8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013caa:	687a      	ldr	r2, [r7, #4]
 8013cac:	68b9      	ldr	r1, [r7, #8]
 8013cae:	6978      	ldr	r0, [r7, #20]
 8013cb0:	f7ff ff22 	bl	8013af8 <sys_timeout_abs>
#endif
}
 8013cb4:	bf00      	nop
 8013cb6:	3718      	adds	r7, #24
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}
 8013cbc:	08021020 	.word	0x08021020
 8013cc0:	080210bc 	.word	0x080210bc
 8013cc4:	08021094 	.word	0x08021094

08013cc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013ccc:	f004 f884 	bl	8017dd8 <rand>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013cde:	b29a      	uxth	r2, r3
 8013ce0:	4b01      	ldr	r3, [pc, #4]	; (8013ce8 <udp_init+0x20>)
 8013ce2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013ce4:	bf00      	nop
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	2000012c 	.word	0x2000012c

08013cec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	60f8      	str	r0, [r7, #12]
 8013cf4:	60b9      	str	r1, [r7, #8]
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d105      	bne.n	8013d0c <udp_input_local_match+0x20>
 8013d00:	4b27      	ldr	r3, [pc, #156]	; (8013da0 <udp_input_local_match+0xb4>)
 8013d02:	2287      	movs	r2, #135	; 0x87
 8013d04:	4927      	ldr	r1, [pc, #156]	; (8013da4 <udp_input_local_match+0xb8>)
 8013d06:	4828      	ldr	r0, [pc, #160]	; (8013da8 <udp_input_local_match+0xbc>)
 8013d08:	f004 f84e 	bl	8017da8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d105      	bne.n	8013d1e <udp_input_local_match+0x32>
 8013d12:	4b23      	ldr	r3, [pc, #140]	; (8013da0 <udp_input_local_match+0xb4>)
 8013d14:	2288      	movs	r2, #136	; 0x88
 8013d16:	4925      	ldr	r1, [pc, #148]	; (8013dac <udp_input_local_match+0xc0>)
 8013d18:	4823      	ldr	r0, [pc, #140]	; (8013da8 <udp_input_local_match+0xbc>)
 8013d1a:	f004 f845 	bl	8017da8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	7a1b      	ldrb	r3, [r3, #8]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d00b      	beq.n	8013d3e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	7a1a      	ldrb	r2, [r3, #8]
 8013d2a:	4b21      	ldr	r3, [pc, #132]	; (8013db0 <udp_input_local_match+0xc4>)
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d32:	3301      	adds	r3, #1
 8013d34:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d001      	beq.n	8013d3e <udp_input_local_match+0x52>
    return 0;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	e02b      	b.n	8013d96 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d3e:	79fb      	ldrb	r3, [r7, #7]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d018      	beq.n	8013d76 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d013      	beq.n	8013d72 <udp_input_local_match+0x86>
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d00f      	beq.n	8013d72 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d52:	4b17      	ldr	r3, [pc, #92]	; (8013db0 <udp_input_local_match+0xc4>)
 8013d54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d5a:	d00a      	beq.n	8013d72 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	4b13      	ldr	r3, [pc, #76]	; (8013db0 <udp_input_local_match+0xc4>)
 8013d62:	695b      	ldr	r3, [r3, #20]
 8013d64:	405a      	eors	r2, r3
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	3308      	adds	r3, #8
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d110      	bne.n	8013d94 <udp_input_local_match+0xa8>
          return 1;
 8013d72:	2301      	movs	r3, #1
 8013d74:	e00f      	b.n	8013d96 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d009      	beq.n	8013d90 <udp_input_local_match+0xa4>
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d005      	beq.n	8013d90 <udp_input_local_match+0xa4>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	4b09      	ldr	r3, [pc, #36]	; (8013db0 <udp_input_local_match+0xc4>)
 8013d8a:	695b      	ldr	r3, [r3, #20]
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d101      	bne.n	8013d94 <udp_input_local_match+0xa8>
        return 1;
 8013d90:	2301      	movs	r3, #1
 8013d92:	e000      	b.n	8013d96 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013d94:	2300      	movs	r3, #0
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3710      	adds	r7, #16
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	08021108 	.word	0x08021108
 8013da4:	08021138 	.word	0x08021138
 8013da8:	0802115c 	.word	0x0802115c
 8013dac:	08021184 	.word	0x08021184
 8013db0:	20003bd4 	.word	0x20003bd4

08013db4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013db4:	b590      	push	{r4, r7, lr}
 8013db6:	b08d      	sub	sp, #52	; 0x34
 8013db8:	af02      	add	r7, sp, #8
 8013dba:	6078      	str	r0, [r7, #4]
 8013dbc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d105      	bne.n	8013dd4 <udp_input+0x20>
 8013dc8:	4b7c      	ldr	r3, [pc, #496]	; (8013fbc <udp_input+0x208>)
 8013dca:	22cf      	movs	r2, #207	; 0xcf
 8013dcc:	497c      	ldr	r1, [pc, #496]	; (8013fc0 <udp_input+0x20c>)
 8013dce:	487d      	ldr	r0, [pc, #500]	; (8013fc4 <udp_input+0x210>)
 8013dd0:	f003 ffea 	bl	8017da8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d105      	bne.n	8013de6 <udp_input+0x32>
 8013dda:	4b78      	ldr	r3, [pc, #480]	; (8013fbc <udp_input+0x208>)
 8013ddc:	22d0      	movs	r2, #208	; 0xd0
 8013dde:	497a      	ldr	r1, [pc, #488]	; (8013fc8 <udp_input+0x214>)
 8013de0:	4878      	ldr	r0, [pc, #480]	; (8013fc4 <udp_input+0x210>)
 8013de2:	f003 ffe1 	bl	8017da8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	895b      	ldrh	r3, [r3, #10]
 8013dea:	2b07      	cmp	r3, #7
 8013dec:	d803      	bhi.n	8013df6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f7fa fa7c 	bl	800e2ec <pbuf_free>
    goto end;
 8013df4:	e0de      	b.n	8013fb4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	685b      	ldr	r3, [r3, #4]
 8013dfa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013dfc:	4b73      	ldr	r3, [pc, #460]	; (8013fcc <udp_input+0x218>)
 8013dfe:	695b      	ldr	r3, [r3, #20]
 8013e00:	4a72      	ldr	r2, [pc, #456]	; (8013fcc <udp_input+0x218>)
 8013e02:	6812      	ldr	r2, [r2, #0]
 8013e04:	4611      	mov	r1, r2
 8013e06:	4618      	mov	r0, r3
 8013e08:	f001 fc88 	bl	801571c <ip4_addr_isbroadcast_u32>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	881b      	ldrh	r3, [r3, #0]
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7f8 ffd5 	bl	800cdc6 <lwip_htons>
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	885b      	ldrh	r3, [r3, #2]
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7f8 ffcd 	bl	800cdc6 <lwip_htons>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e30:	2300      	movs	r3, #0
 8013e32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e34:	2300      	movs	r3, #0
 8013e36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e3c:	4b64      	ldr	r3, [pc, #400]	; (8013fd0 <udp_input+0x21c>)
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	627b      	str	r3, [r7, #36]	; 0x24
 8013e42:	e054      	b.n	8013eee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	8a5b      	ldrh	r3, [r3, #18]
 8013e48:	89fa      	ldrh	r2, [r7, #14]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d14a      	bne.n	8013ee4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e4e:	7cfb      	ldrb	r3, [r7, #19]
 8013e50:	461a      	mov	r2, r3
 8013e52:	6839      	ldr	r1, [r7, #0]
 8013e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e56:	f7ff ff49 	bl	8013cec <udp_input_local_match>
 8013e5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d041      	beq.n	8013ee4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	7c1b      	ldrb	r3, [r3, #16]
 8013e64:	f003 0304 	and.w	r3, r3, #4
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d11d      	bne.n	8013ea8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d102      	bne.n	8013e78 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e74:	61fb      	str	r3, [r7, #28]
 8013e76:	e017      	b.n	8013ea8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e78:	7cfb      	ldrb	r3, [r7, #19]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d014      	beq.n	8013ea8 <udp_input+0xf4>
 8013e7e:	4b53      	ldr	r3, [pc, #332]	; (8013fcc <udp_input+0x218>)
 8013e80:	695b      	ldr	r3, [r3, #20]
 8013e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e86:	d10f      	bne.n	8013ea8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	681a      	ldr	r2, [r3, #0]
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	3304      	adds	r3, #4
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d008      	beq.n	8013ea8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	3304      	adds	r3, #4
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d101      	bne.n	8013ea8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eaa:	8a9b      	ldrh	r3, [r3, #20]
 8013eac:	8a3a      	ldrh	r2, [r7, #16]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d118      	bne.n	8013ee4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d005      	beq.n	8013ec6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebc:	685a      	ldr	r2, [r3, #4]
 8013ebe:	4b43      	ldr	r3, [pc, #268]	; (8013fcc <udp_input+0x218>)
 8013ec0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d10e      	bne.n	8013ee4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013ec6:	6a3b      	ldr	r3, [r7, #32]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d014      	beq.n	8013ef6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ece:	68da      	ldr	r2, [r3, #12]
 8013ed0:	6a3b      	ldr	r3, [r7, #32]
 8013ed2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ed4:	4b3e      	ldr	r3, [pc, #248]	; (8013fd0 <udp_input+0x21c>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013edc:	4a3c      	ldr	r2, [pc, #240]	; (8013fd0 <udp_input+0x21c>)
 8013ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ee2:	e008      	b.n	8013ef6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	627b      	str	r3, [r7, #36]	; 0x24
 8013eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d1a7      	bne.n	8013e44 <udp_input+0x90>
 8013ef4:	e000      	b.n	8013ef8 <udp_input+0x144>
        break;
 8013ef6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d101      	bne.n	8013f02 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d002      	beq.n	8013f0e <udp_input+0x15a>
    for_us = 1;
 8013f08:	2301      	movs	r3, #1
 8013f0a:	76fb      	strb	r3, [r7, #27]
 8013f0c:	e00a      	b.n	8013f24 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	3304      	adds	r3, #4
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	4b2d      	ldr	r3, [pc, #180]	; (8013fcc <udp_input+0x218>)
 8013f16:	695b      	ldr	r3, [r3, #20]
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	bf0c      	ite	eq
 8013f1c:	2301      	moveq	r3, #1
 8013f1e:	2300      	movne	r3, #0
 8013f20:	b2db      	uxtb	r3, r3
 8013f22:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f24:	7efb      	ldrb	r3, [r7, #27]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d041      	beq.n	8013fae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f2a:	2108      	movs	r1, #8
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7fa f957 	bl	800e1e0 <pbuf_remove_header>
 8013f32:	4603      	mov	r3, r0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d00a      	beq.n	8013f4e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f38:	4b20      	ldr	r3, [pc, #128]	; (8013fbc <udp_input+0x208>)
 8013f3a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f3e:	4925      	ldr	r1, [pc, #148]	; (8013fd4 <udp_input+0x220>)
 8013f40:	4820      	ldr	r0, [pc, #128]	; (8013fc4 <udp_input+0x210>)
 8013f42:	f003 ff31 	bl	8017da8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f7fa f9d0 	bl	800e2ec <pbuf_free>
      goto end;
 8013f4c:	e032      	b.n	8013fb4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d012      	beq.n	8013f7a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f56:	699b      	ldr	r3, [r3, #24]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d00a      	beq.n	8013f72 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5e:	699c      	ldr	r4, [r3, #24]
 8013f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f62:	69d8      	ldr	r0, [r3, #28]
 8013f64:	8a3b      	ldrh	r3, [r7, #16]
 8013f66:	9300      	str	r3, [sp, #0]
 8013f68:	4b1b      	ldr	r3, [pc, #108]	; (8013fd8 <udp_input+0x224>)
 8013f6a:	687a      	ldr	r2, [r7, #4]
 8013f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f6e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f70:	e021      	b.n	8013fb6 <udp_input+0x202>
        pbuf_free(p);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f7fa f9ba 	bl	800e2ec <pbuf_free>
        goto end;
 8013f78:	e01c      	b.n	8013fb4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f7a:	7cfb      	ldrb	r3, [r7, #19]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d112      	bne.n	8013fa6 <udp_input+0x1f2>
 8013f80:	4b12      	ldr	r3, [pc, #72]	; (8013fcc <udp_input+0x218>)
 8013f82:	695b      	ldr	r3, [r3, #20]
 8013f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f88:	2be0      	cmp	r3, #224	; 0xe0
 8013f8a:	d00c      	beq.n	8013fa6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013f8c:	4b0f      	ldr	r3, [pc, #60]	; (8013fcc <udp_input+0x218>)
 8013f8e:	899b      	ldrh	r3, [r3, #12]
 8013f90:	3308      	adds	r3, #8
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	b21b      	sxth	r3, r3
 8013f96:	4619      	mov	r1, r3
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f7fa f994 	bl	800e2c6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013f9e:	2103      	movs	r1, #3
 8013fa0:	6878      	ldr	r0, [r7, #4]
 8013fa2:	f001 f89b 	bl	80150dc <icmp_dest_unreach>
      pbuf_free(p);
 8013fa6:	6878      	ldr	r0, [r7, #4]
 8013fa8:	f7fa f9a0 	bl	800e2ec <pbuf_free>
  return;
 8013fac:	e003      	b.n	8013fb6 <udp_input+0x202>
    pbuf_free(p);
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f7fa f99c 	bl	800e2ec <pbuf_free>
  return;
 8013fb4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013fb6:	372c      	adds	r7, #44	; 0x2c
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd90      	pop	{r4, r7, pc}
 8013fbc:	08021108 	.word	0x08021108
 8013fc0:	080211ac 	.word	0x080211ac
 8013fc4:	0802115c 	.word	0x0802115c
 8013fc8:	080211c4 	.word	0x080211c4
 8013fcc:	20003bd4 	.word	0x20003bd4
 8013fd0:	20007130 	.word	0x20007130
 8013fd4:	080211e0 	.word	0x080211e0
 8013fd8:	20003be4 	.word	0x20003be4

08013fdc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013fdc:	b480      	push	{r7}
 8013fde:	b085      	sub	sp, #20
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d01e      	beq.n	801402a <udp_netif_ip_addr_changed+0x4e>
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d01a      	beq.n	801402a <udp_netif_ip_addr_changed+0x4e>
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d017      	beq.n	801402a <udp_netif_ip_addr_changed+0x4e>
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d013      	beq.n	801402a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014002:	4b0d      	ldr	r3, [pc, #52]	; (8014038 <udp_netif_ip_addr_changed+0x5c>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	60fb      	str	r3, [r7, #12]
 8014008:	e00c      	b.n	8014024 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	681a      	ldr	r2, [r3, #0]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	429a      	cmp	r2, r3
 8014014:	d103      	bne.n	801401e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	681a      	ldr	r2, [r3, #0]
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	68db      	ldr	r3, [r3, #12]
 8014022:	60fb      	str	r3, [r7, #12]
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d1ef      	bne.n	801400a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801402a:	bf00      	nop
 801402c:	3714      	adds	r7, #20
 801402e:	46bd      	mov	sp, r7
 8014030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014034:	4770      	bx	lr
 8014036:	bf00      	nop
 8014038:	20007130 	.word	0x20007130

0801403c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014044:	4915      	ldr	r1, [pc, #84]	; (801409c <etharp_free_entry+0x60>)
 8014046:	687a      	ldr	r2, [r7, #4]
 8014048:	4613      	mov	r3, r2
 801404a:	005b      	lsls	r3, r3, #1
 801404c:	4413      	add	r3, r2
 801404e:	00db      	lsls	r3, r3, #3
 8014050:	440b      	add	r3, r1
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d013      	beq.n	8014080 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014058:	4910      	ldr	r1, [pc, #64]	; (801409c <etharp_free_entry+0x60>)
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	4613      	mov	r3, r2
 801405e:	005b      	lsls	r3, r3, #1
 8014060:	4413      	add	r3, r2
 8014062:	00db      	lsls	r3, r3, #3
 8014064:	440b      	add	r3, r1
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4618      	mov	r0, r3
 801406a:	f7fa f93f 	bl	800e2ec <pbuf_free>
    arp_table[i].q = NULL;
 801406e:	490b      	ldr	r1, [pc, #44]	; (801409c <etharp_free_entry+0x60>)
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	4613      	mov	r3, r2
 8014074:	005b      	lsls	r3, r3, #1
 8014076:	4413      	add	r3, r2
 8014078:	00db      	lsls	r3, r3, #3
 801407a:	440b      	add	r3, r1
 801407c:	2200      	movs	r2, #0
 801407e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014080:	4906      	ldr	r1, [pc, #24]	; (801409c <etharp_free_entry+0x60>)
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	4613      	mov	r3, r2
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	4413      	add	r3, r2
 801408a:	00db      	lsls	r3, r3, #3
 801408c:	440b      	add	r3, r1
 801408e:	3314      	adds	r3, #20
 8014090:	2200      	movs	r2, #0
 8014092:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014094:	bf00      	nop
 8014096:	3708      	adds	r7, #8
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	20000494 	.word	0x20000494

080140a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b082      	sub	sp, #8
 80140a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140a6:	2300      	movs	r3, #0
 80140a8:	607b      	str	r3, [r7, #4]
 80140aa:	e096      	b.n	80141da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80140ac:	494f      	ldr	r1, [pc, #316]	; (80141ec <etharp_tmr+0x14c>)
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	4613      	mov	r3, r2
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	4413      	add	r3, r2
 80140b6:	00db      	lsls	r3, r3, #3
 80140b8:	440b      	add	r3, r1
 80140ba:	3314      	adds	r3, #20
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80140c0:	78fb      	ldrb	r3, [r7, #3]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	f000 8086 	beq.w	80141d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80140c8:	4948      	ldr	r1, [pc, #288]	; (80141ec <etharp_tmr+0x14c>)
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	4613      	mov	r3, r2
 80140ce:	005b      	lsls	r3, r3, #1
 80140d0:	4413      	add	r3, r2
 80140d2:	00db      	lsls	r3, r3, #3
 80140d4:	440b      	add	r3, r1
 80140d6:	3312      	adds	r3, #18
 80140d8:	881b      	ldrh	r3, [r3, #0]
 80140da:	3301      	adds	r3, #1
 80140dc:	b298      	uxth	r0, r3
 80140de:	4943      	ldr	r1, [pc, #268]	; (80141ec <etharp_tmr+0x14c>)
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	4613      	mov	r3, r2
 80140e4:	005b      	lsls	r3, r3, #1
 80140e6:	4413      	add	r3, r2
 80140e8:	00db      	lsls	r3, r3, #3
 80140ea:	440b      	add	r3, r1
 80140ec:	3312      	adds	r3, #18
 80140ee:	4602      	mov	r2, r0
 80140f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80140f2:	493e      	ldr	r1, [pc, #248]	; (80141ec <etharp_tmr+0x14c>)
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	4613      	mov	r3, r2
 80140f8:	005b      	lsls	r3, r3, #1
 80140fa:	4413      	add	r3, r2
 80140fc:	00db      	lsls	r3, r3, #3
 80140fe:	440b      	add	r3, r1
 8014100:	3312      	adds	r3, #18
 8014102:	881b      	ldrh	r3, [r3, #0]
 8014104:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014108:	d215      	bcs.n	8014136 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801410a:	4938      	ldr	r1, [pc, #224]	; (80141ec <etharp_tmr+0x14c>)
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	4613      	mov	r3, r2
 8014110:	005b      	lsls	r3, r3, #1
 8014112:	4413      	add	r3, r2
 8014114:	00db      	lsls	r3, r3, #3
 8014116:	440b      	add	r3, r1
 8014118:	3314      	adds	r3, #20
 801411a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801411c:	2b01      	cmp	r3, #1
 801411e:	d10e      	bne.n	801413e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014120:	4932      	ldr	r1, [pc, #200]	; (80141ec <etharp_tmr+0x14c>)
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	4613      	mov	r3, r2
 8014126:	005b      	lsls	r3, r3, #1
 8014128:	4413      	add	r3, r2
 801412a:	00db      	lsls	r3, r3, #3
 801412c:	440b      	add	r3, r1
 801412e:	3312      	adds	r3, #18
 8014130:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014132:	2b04      	cmp	r3, #4
 8014134:	d903      	bls.n	801413e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f7ff ff80 	bl	801403c <etharp_free_entry>
 801413c:	e04a      	b.n	80141d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801413e:	492b      	ldr	r1, [pc, #172]	; (80141ec <etharp_tmr+0x14c>)
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	4613      	mov	r3, r2
 8014144:	005b      	lsls	r3, r3, #1
 8014146:	4413      	add	r3, r2
 8014148:	00db      	lsls	r3, r3, #3
 801414a:	440b      	add	r3, r1
 801414c:	3314      	adds	r3, #20
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	2b03      	cmp	r3, #3
 8014152:	d10a      	bne.n	801416a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014154:	4925      	ldr	r1, [pc, #148]	; (80141ec <etharp_tmr+0x14c>)
 8014156:	687a      	ldr	r2, [r7, #4]
 8014158:	4613      	mov	r3, r2
 801415a:	005b      	lsls	r3, r3, #1
 801415c:	4413      	add	r3, r2
 801415e:	00db      	lsls	r3, r3, #3
 8014160:	440b      	add	r3, r1
 8014162:	3314      	adds	r3, #20
 8014164:	2204      	movs	r2, #4
 8014166:	701a      	strb	r2, [r3, #0]
 8014168:	e034      	b.n	80141d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801416a:	4920      	ldr	r1, [pc, #128]	; (80141ec <etharp_tmr+0x14c>)
 801416c:	687a      	ldr	r2, [r7, #4]
 801416e:	4613      	mov	r3, r2
 8014170:	005b      	lsls	r3, r3, #1
 8014172:	4413      	add	r3, r2
 8014174:	00db      	lsls	r3, r3, #3
 8014176:	440b      	add	r3, r1
 8014178:	3314      	adds	r3, #20
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	2b04      	cmp	r3, #4
 801417e:	d10a      	bne.n	8014196 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014180:	491a      	ldr	r1, [pc, #104]	; (80141ec <etharp_tmr+0x14c>)
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	4613      	mov	r3, r2
 8014186:	005b      	lsls	r3, r3, #1
 8014188:	4413      	add	r3, r2
 801418a:	00db      	lsls	r3, r3, #3
 801418c:	440b      	add	r3, r1
 801418e:	3314      	adds	r3, #20
 8014190:	2202      	movs	r2, #2
 8014192:	701a      	strb	r2, [r3, #0]
 8014194:	e01e      	b.n	80141d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014196:	4915      	ldr	r1, [pc, #84]	; (80141ec <etharp_tmr+0x14c>)
 8014198:	687a      	ldr	r2, [r7, #4]
 801419a:	4613      	mov	r3, r2
 801419c:	005b      	lsls	r3, r3, #1
 801419e:	4413      	add	r3, r2
 80141a0:	00db      	lsls	r3, r3, #3
 80141a2:	440b      	add	r3, r1
 80141a4:	3314      	adds	r3, #20
 80141a6:	781b      	ldrb	r3, [r3, #0]
 80141a8:	2b01      	cmp	r3, #1
 80141aa:	d113      	bne.n	80141d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80141ac:	490f      	ldr	r1, [pc, #60]	; (80141ec <etharp_tmr+0x14c>)
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	4613      	mov	r3, r2
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	4413      	add	r3, r2
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	440b      	add	r3, r1
 80141ba:	3308      	adds	r3, #8
 80141bc:	6818      	ldr	r0, [r3, #0]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	4613      	mov	r3, r2
 80141c2:	005b      	lsls	r3, r3, #1
 80141c4:	4413      	add	r3, r2
 80141c6:	00db      	lsls	r3, r3, #3
 80141c8:	4a08      	ldr	r2, [pc, #32]	; (80141ec <etharp_tmr+0x14c>)
 80141ca:	4413      	add	r3, r2
 80141cc:	3304      	adds	r3, #4
 80141ce:	4619      	mov	r1, r3
 80141d0:	f000 fe6e 	bl	8014eb0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	3301      	adds	r3, #1
 80141d8:	607b      	str	r3, [r7, #4]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2b09      	cmp	r3, #9
 80141de:	f77f af65 	ble.w	80140ac <etharp_tmr+0xc>
      }
    }
  }
}
 80141e2:	bf00      	nop
 80141e4:	bf00      	nop
 80141e6:	3708      	adds	r7, #8
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}
 80141ec:	20000494 	.word	0x20000494

080141f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b08a      	sub	sp, #40	; 0x28
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	60f8      	str	r0, [r7, #12]
 80141f8:	460b      	mov	r3, r1
 80141fa:	607a      	str	r2, [r7, #4]
 80141fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80141fe:	230a      	movs	r3, #10
 8014200:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014202:	230a      	movs	r3, #10
 8014204:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014206:	230a      	movs	r3, #10
 8014208:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801420a:	2300      	movs	r3, #0
 801420c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801420e:	230a      	movs	r3, #10
 8014210:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014212:	2300      	movs	r3, #0
 8014214:	83bb      	strh	r3, [r7, #28]
 8014216:	2300      	movs	r3, #0
 8014218:	837b      	strh	r3, [r7, #26]
 801421a:	2300      	movs	r3, #0
 801421c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801421e:	2300      	movs	r3, #0
 8014220:	843b      	strh	r3, [r7, #32]
 8014222:	e0ae      	b.n	8014382 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014228:	49a6      	ldr	r1, [pc, #664]	; (80144c4 <etharp_find_entry+0x2d4>)
 801422a:	4613      	mov	r3, r2
 801422c:	005b      	lsls	r3, r3, #1
 801422e:	4413      	add	r3, r2
 8014230:	00db      	lsls	r3, r3, #3
 8014232:	440b      	add	r3, r1
 8014234:	3314      	adds	r3, #20
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801423a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801423e:	2b0a      	cmp	r3, #10
 8014240:	d105      	bne.n	801424e <etharp_find_entry+0x5e>
 8014242:	7dfb      	ldrb	r3, [r7, #23]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d102      	bne.n	801424e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014248:	8c3b      	ldrh	r3, [r7, #32]
 801424a:	847b      	strh	r3, [r7, #34]	; 0x22
 801424c:	e095      	b.n	801437a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801424e:	7dfb      	ldrb	r3, [r7, #23]
 8014250:	2b00      	cmp	r3, #0
 8014252:	f000 8092 	beq.w	801437a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014256:	7dfb      	ldrb	r3, [r7, #23]
 8014258:	2b01      	cmp	r3, #1
 801425a:	d009      	beq.n	8014270 <etharp_find_entry+0x80>
 801425c:	7dfb      	ldrb	r3, [r7, #23]
 801425e:	2b01      	cmp	r3, #1
 8014260:	d806      	bhi.n	8014270 <etharp_find_entry+0x80>
 8014262:	4b99      	ldr	r3, [pc, #612]	; (80144c8 <etharp_find_entry+0x2d8>)
 8014264:	f240 1223 	movw	r2, #291	; 0x123
 8014268:	4998      	ldr	r1, [pc, #608]	; (80144cc <etharp_find_entry+0x2dc>)
 801426a:	4899      	ldr	r0, [pc, #612]	; (80144d0 <etharp_find_entry+0x2e0>)
 801426c:	f003 fd9c 	bl	8017da8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d020      	beq.n	80142b8 <etharp_find_entry+0xc8>
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	6819      	ldr	r1, [r3, #0]
 801427a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427e:	4891      	ldr	r0, [pc, #580]	; (80144c4 <etharp_find_entry+0x2d4>)
 8014280:	4613      	mov	r3, r2
 8014282:	005b      	lsls	r3, r3, #1
 8014284:	4413      	add	r3, r2
 8014286:	00db      	lsls	r3, r3, #3
 8014288:	4403      	add	r3, r0
 801428a:	3304      	adds	r3, #4
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	4299      	cmp	r1, r3
 8014290:	d112      	bne.n	80142b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d00c      	beq.n	80142b2 <etharp_find_entry+0xc2>
 8014298:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801429c:	4989      	ldr	r1, [pc, #548]	; (80144c4 <etharp_find_entry+0x2d4>)
 801429e:	4613      	mov	r3, r2
 80142a0:	005b      	lsls	r3, r3, #1
 80142a2:	4413      	add	r3, r2
 80142a4:	00db      	lsls	r3, r3, #3
 80142a6:	440b      	add	r3, r1
 80142a8:	3308      	adds	r3, #8
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d102      	bne.n	80142b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80142b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142b6:	e100      	b.n	80144ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80142b8:	7dfb      	ldrb	r3, [r7, #23]
 80142ba:	2b01      	cmp	r3, #1
 80142bc:	d140      	bne.n	8014340 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80142be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142c2:	4980      	ldr	r1, [pc, #512]	; (80144c4 <etharp_find_entry+0x2d4>)
 80142c4:	4613      	mov	r3, r2
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	4413      	add	r3, r2
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	440b      	add	r3, r1
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d01a      	beq.n	801430a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80142d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142d8:	497a      	ldr	r1, [pc, #488]	; (80144c4 <etharp_find_entry+0x2d4>)
 80142da:	4613      	mov	r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	4413      	add	r3, r2
 80142e0:	00db      	lsls	r3, r3, #3
 80142e2:	440b      	add	r3, r1
 80142e4:	3312      	adds	r3, #18
 80142e6:	881b      	ldrh	r3, [r3, #0]
 80142e8:	8bba      	ldrh	r2, [r7, #28]
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d845      	bhi.n	801437a <etharp_find_entry+0x18a>
            old_queue = i;
 80142ee:	8c3b      	ldrh	r3, [r7, #32]
 80142f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80142f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142f6:	4973      	ldr	r1, [pc, #460]	; (80144c4 <etharp_find_entry+0x2d4>)
 80142f8:	4613      	mov	r3, r2
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	4413      	add	r3, r2
 80142fe:	00db      	lsls	r3, r3, #3
 8014300:	440b      	add	r3, r1
 8014302:	3312      	adds	r3, #18
 8014304:	881b      	ldrh	r3, [r3, #0]
 8014306:	83bb      	strh	r3, [r7, #28]
 8014308:	e037      	b.n	801437a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801430a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801430e:	496d      	ldr	r1, [pc, #436]	; (80144c4 <etharp_find_entry+0x2d4>)
 8014310:	4613      	mov	r3, r2
 8014312:	005b      	lsls	r3, r3, #1
 8014314:	4413      	add	r3, r2
 8014316:	00db      	lsls	r3, r3, #3
 8014318:	440b      	add	r3, r1
 801431a:	3312      	adds	r3, #18
 801431c:	881b      	ldrh	r3, [r3, #0]
 801431e:	8b7a      	ldrh	r2, [r7, #26]
 8014320:	429a      	cmp	r2, r3
 8014322:	d82a      	bhi.n	801437a <etharp_find_entry+0x18a>
            old_pending = i;
 8014324:	8c3b      	ldrh	r3, [r7, #32]
 8014326:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014328:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801432c:	4965      	ldr	r1, [pc, #404]	; (80144c4 <etharp_find_entry+0x2d4>)
 801432e:	4613      	mov	r3, r2
 8014330:	005b      	lsls	r3, r3, #1
 8014332:	4413      	add	r3, r2
 8014334:	00db      	lsls	r3, r3, #3
 8014336:	440b      	add	r3, r1
 8014338:	3312      	adds	r3, #18
 801433a:	881b      	ldrh	r3, [r3, #0]
 801433c:	837b      	strh	r3, [r7, #26]
 801433e:	e01c      	b.n	801437a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014340:	7dfb      	ldrb	r3, [r7, #23]
 8014342:	2b01      	cmp	r3, #1
 8014344:	d919      	bls.n	801437a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801434a:	495e      	ldr	r1, [pc, #376]	; (80144c4 <etharp_find_entry+0x2d4>)
 801434c:	4613      	mov	r3, r2
 801434e:	005b      	lsls	r3, r3, #1
 8014350:	4413      	add	r3, r2
 8014352:	00db      	lsls	r3, r3, #3
 8014354:	440b      	add	r3, r1
 8014356:	3312      	adds	r3, #18
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	8b3a      	ldrh	r2, [r7, #24]
 801435c:	429a      	cmp	r2, r3
 801435e:	d80c      	bhi.n	801437a <etharp_find_entry+0x18a>
            old_stable = i;
 8014360:	8c3b      	ldrh	r3, [r7, #32]
 8014362:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014368:	4956      	ldr	r1, [pc, #344]	; (80144c4 <etharp_find_entry+0x2d4>)
 801436a:	4613      	mov	r3, r2
 801436c:	005b      	lsls	r3, r3, #1
 801436e:	4413      	add	r3, r2
 8014370:	00db      	lsls	r3, r3, #3
 8014372:	440b      	add	r3, r1
 8014374:	3312      	adds	r3, #18
 8014376:	881b      	ldrh	r3, [r3, #0]
 8014378:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801437a:	8c3b      	ldrh	r3, [r7, #32]
 801437c:	3301      	adds	r3, #1
 801437e:	b29b      	uxth	r3, r3
 8014380:	843b      	strh	r3, [r7, #32]
 8014382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014386:	2b09      	cmp	r3, #9
 8014388:	f77f af4c 	ble.w	8014224 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801438c:	7afb      	ldrb	r3, [r7, #11]
 801438e:	f003 0302 	and.w	r3, r3, #2
 8014392:	2b00      	cmp	r3, #0
 8014394:	d108      	bne.n	80143a8 <etharp_find_entry+0x1b8>
 8014396:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801439a:	2b0a      	cmp	r3, #10
 801439c:	d107      	bne.n	80143ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801439e:	7afb      	ldrb	r3, [r7, #11]
 80143a0:	f003 0301 	and.w	r3, r3, #1
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d102      	bne.n	80143ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80143a8:	f04f 33ff 	mov.w	r3, #4294967295
 80143ac:	e085      	b.n	80144ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80143ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80143b2:	2b09      	cmp	r3, #9
 80143b4:	dc02      	bgt.n	80143bc <etharp_find_entry+0x1cc>
    i = empty;
 80143b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143b8:	843b      	strh	r3, [r7, #32]
 80143ba:	e039      	b.n	8014430 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80143bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80143c0:	2b09      	cmp	r3, #9
 80143c2:	dc14      	bgt.n	80143ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80143c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80143c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143cc:	493d      	ldr	r1, [pc, #244]	; (80144c4 <etharp_find_entry+0x2d4>)
 80143ce:	4613      	mov	r3, r2
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	4413      	add	r3, r2
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	440b      	add	r3, r1
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d018      	beq.n	8014410 <etharp_find_entry+0x220>
 80143de:	4b3a      	ldr	r3, [pc, #232]	; (80144c8 <etharp_find_entry+0x2d8>)
 80143e0:	f240 126d 	movw	r2, #365	; 0x16d
 80143e4:	493b      	ldr	r1, [pc, #236]	; (80144d4 <etharp_find_entry+0x2e4>)
 80143e6:	483a      	ldr	r0, [pc, #232]	; (80144d0 <etharp_find_entry+0x2e0>)
 80143e8:	f003 fcde 	bl	8017da8 <iprintf>
 80143ec:	e010      	b.n	8014410 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80143ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80143f2:	2b09      	cmp	r3, #9
 80143f4:	dc02      	bgt.n	80143fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80143f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143f8:	843b      	strh	r3, [r7, #32]
 80143fa:	e009      	b.n	8014410 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80143fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014400:	2b09      	cmp	r3, #9
 8014402:	dc02      	bgt.n	801440a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014404:	8bfb      	ldrh	r3, [r7, #30]
 8014406:	843b      	strh	r3, [r7, #32]
 8014408:	e002      	b.n	8014410 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801440a:	f04f 33ff 	mov.w	r3, #4294967295
 801440e:	e054      	b.n	80144ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014410:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014414:	2b09      	cmp	r3, #9
 8014416:	dd06      	ble.n	8014426 <etharp_find_entry+0x236>
 8014418:	4b2b      	ldr	r3, [pc, #172]	; (80144c8 <etharp_find_entry+0x2d8>)
 801441a:	f240 127f 	movw	r2, #383	; 0x17f
 801441e:	492e      	ldr	r1, [pc, #184]	; (80144d8 <etharp_find_entry+0x2e8>)
 8014420:	482b      	ldr	r0, [pc, #172]	; (80144d0 <etharp_find_entry+0x2e0>)
 8014422:	f003 fcc1 	bl	8017da8 <iprintf>
    etharp_free_entry(i);
 8014426:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801442a:	4618      	mov	r0, r3
 801442c:	f7ff fe06 	bl	801403c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014430:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014434:	2b09      	cmp	r3, #9
 8014436:	dd06      	ble.n	8014446 <etharp_find_entry+0x256>
 8014438:	4b23      	ldr	r3, [pc, #140]	; (80144c8 <etharp_find_entry+0x2d8>)
 801443a:	f240 1283 	movw	r2, #387	; 0x183
 801443e:	4926      	ldr	r1, [pc, #152]	; (80144d8 <etharp_find_entry+0x2e8>)
 8014440:	4823      	ldr	r0, [pc, #140]	; (80144d0 <etharp_find_entry+0x2e0>)
 8014442:	f003 fcb1 	bl	8017da8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801444a:	491e      	ldr	r1, [pc, #120]	; (80144c4 <etharp_find_entry+0x2d4>)
 801444c:	4613      	mov	r3, r2
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	4413      	add	r3, r2
 8014452:	00db      	lsls	r3, r3, #3
 8014454:	440b      	add	r3, r1
 8014456:	3314      	adds	r3, #20
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d006      	beq.n	801446c <etharp_find_entry+0x27c>
 801445e:	4b1a      	ldr	r3, [pc, #104]	; (80144c8 <etharp_find_entry+0x2d8>)
 8014460:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014464:	491d      	ldr	r1, [pc, #116]	; (80144dc <etharp_find_entry+0x2ec>)
 8014466:	481a      	ldr	r0, [pc, #104]	; (80144d0 <etharp_find_entry+0x2e0>)
 8014468:	f003 fc9e 	bl	8017da8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d00b      	beq.n	801448a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	6819      	ldr	r1, [r3, #0]
 801447a:	4812      	ldr	r0, [pc, #72]	; (80144c4 <etharp_find_entry+0x2d4>)
 801447c:	4613      	mov	r3, r2
 801447e:	005b      	lsls	r3, r3, #1
 8014480:	4413      	add	r3, r2
 8014482:	00db      	lsls	r3, r3, #3
 8014484:	4403      	add	r3, r0
 8014486:	3304      	adds	r3, #4
 8014488:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801448a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801448e:	490d      	ldr	r1, [pc, #52]	; (80144c4 <etharp_find_entry+0x2d4>)
 8014490:	4613      	mov	r3, r2
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	4413      	add	r3, r2
 8014496:	00db      	lsls	r3, r3, #3
 8014498:	440b      	add	r3, r1
 801449a:	3312      	adds	r3, #18
 801449c:	2200      	movs	r2, #0
 801449e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80144a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144a4:	4907      	ldr	r1, [pc, #28]	; (80144c4 <etharp_find_entry+0x2d4>)
 80144a6:	4613      	mov	r3, r2
 80144a8:	005b      	lsls	r3, r3, #1
 80144aa:	4413      	add	r3, r2
 80144ac:	00db      	lsls	r3, r3, #3
 80144ae:	440b      	add	r3, r1
 80144b0:	3308      	adds	r3, #8
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80144b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3728      	adds	r7, #40	; 0x28
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	20000494 	.word	0x20000494
 80144c8:	0802146c 	.word	0x0802146c
 80144cc:	080214a4 	.word	0x080214a4
 80144d0:	080214e4 	.word	0x080214e4
 80144d4:	0802150c 	.word	0x0802150c
 80144d8:	08021524 	.word	0x08021524
 80144dc:	08021538 	.word	0x08021538

080144e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b088      	sub	sp, #32
 80144e4:	af02      	add	r7, sp, #8
 80144e6:	60f8      	str	r0, [r7, #12]
 80144e8:	60b9      	str	r1, [r7, #8]
 80144ea:	607a      	str	r2, [r7, #4]
 80144ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80144f4:	2b06      	cmp	r3, #6
 80144f6:	d006      	beq.n	8014506 <etharp_update_arp_entry+0x26>
 80144f8:	4b48      	ldr	r3, [pc, #288]	; (801461c <etharp_update_arp_entry+0x13c>)
 80144fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80144fe:	4948      	ldr	r1, [pc, #288]	; (8014620 <etharp_update_arp_entry+0x140>)
 8014500:	4848      	ldr	r0, [pc, #288]	; (8014624 <etharp_update_arp_entry+0x144>)
 8014502:	f003 fc51 	bl	8017da8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d012      	beq.n	8014532 <etharp_update_arp_entry+0x52>
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d00e      	beq.n	8014532 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	68f9      	ldr	r1, [r7, #12]
 801451a:	4618      	mov	r0, r3
 801451c:	f001 f8fe 	bl	801571c <ip4_addr_isbroadcast_u32>
 8014520:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014522:	2b00      	cmp	r3, #0
 8014524:	d105      	bne.n	8014532 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801452e:	2be0      	cmp	r3, #224	; 0xe0
 8014530:	d102      	bne.n	8014538 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014532:	f06f 030f 	mvn.w	r3, #15
 8014536:	e06c      	b.n	8014612 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014538:	78fb      	ldrb	r3, [r7, #3]
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	4619      	mov	r1, r3
 801453e:	68b8      	ldr	r0, [r7, #8]
 8014540:	f7ff fe56 	bl	80141f0 <etharp_find_entry>
 8014544:	4603      	mov	r3, r0
 8014546:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014548:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801454c:	2b00      	cmp	r3, #0
 801454e:	da02      	bge.n	8014556 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014550:	8afb      	ldrh	r3, [r7, #22]
 8014552:	b25b      	sxtb	r3, r3
 8014554:	e05d      	b.n	8014612 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801455a:	4933      	ldr	r1, [pc, #204]	; (8014628 <etharp_update_arp_entry+0x148>)
 801455c:	4613      	mov	r3, r2
 801455e:	005b      	lsls	r3, r3, #1
 8014560:	4413      	add	r3, r2
 8014562:	00db      	lsls	r3, r3, #3
 8014564:	440b      	add	r3, r1
 8014566:	3314      	adds	r3, #20
 8014568:	2202      	movs	r2, #2
 801456a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801456c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014570:	492d      	ldr	r1, [pc, #180]	; (8014628 <etharp_update_arp_entry+0x148>)
 8014572:	4613      	mov	r3, r2
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	4413      	add	r3, r2
 8014578:	00db      	lsls	r3, r3, #3
 801457a:	440b      	add	r3, r1
 801457c:	3308      	adds	r3, #8
 801457e:	68fa      	ldr	r2, [r7, #12]
 8014580:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014582:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014586:	4613      	mov	r3, r2
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	4413      	add	r3, r2
 801458c:	00db      	lsls	r3, r3, #3
 801458e:	3308      	adds	r3, #8
 8014590:	4a25      	ldr	r2, [pc, #148]	; (8014628 <etharp_update_arp_entry+0x148>)
 8014592:	4413      	add	r3, r2
 8014594:	3304      	adds	r3, #4
 8014596:	2206      	movs	r2, #6
 8014598:	6879      	ldr	r1, [r7, #4]
 801459a:	4618      	mov	r0, r3
 801459c:	f002 fd5a 	bl	8017054 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80145a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145a4:	4920      	ldr	r1, [pc, #128]	; (8014628 <etharp_update_arp_entry+0x148>)
 80145a6:	4613      	mov	r3, r2
 80145a8:	005b      	lsls	r3, r3, #1
 80145aa:	4413      	add	r3, r2
 80145ac:	00db      	lsls	r3, r3, #3
 80145ae:	440b      	add	r3, r1
 80145b0:	3312      	adds	r3, #18
 80145b2:	2200      	movs	r2, #0
 80145b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80145b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145ba:	491b      	ldr	r1, [pc, #108]	; (8014628 <etharp_update_arp_entry+0x148>)
 80145bc:	4613      	mov	r3, r2
 80145be:	005b      	lsls	r3, r3, #1
 80145c0:	4413      	add	r3, r2
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	440b      	add	r3, r1
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d021      	beq.n	8014610 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80145cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145d0:	4915      	ldr	r1, [pc, #84]	; (8014628 <etharp_update_arp_entry+0x148>)
 80145d2:	4613      	mov	r3, r2
 80145d4:	005b      	lsls	r3, r3, #1
 80145d6:	4413      	add	r3, r2
 80145d8:	00db      	lsls	r3, r3, #3
 80145da:	440b      	add	r3, r1
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80145e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145e4:	4910      	ldr	r1, [pc, #64]	; (8014628 <etharp_update_arp_entry+0x148>)
 80145e6:	4613      	mov	r3, r2
 80145e8:	005b      	lsls	r3, r3, #1
 80145ea:	4413      	add	r3, r2
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	440b      	add	r3, r1
 80145f0:	2200      	movs	r2, #0
 80145f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80145fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80145fe:	9300      	str	r3, [sp, #0]
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6939      	ldr	r1, [r7, #16]
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f001 ff91 	bl	801652c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801460a:	6938      	ldr	r0, [r7, #16]
 801460c:	f7f9 fe6e 	bl	800e2ec <pbuf_free>
  }
  return ERR_OK;
 8014610:	2300      	movs	r3, #0
}
 8014612:	4618      	mov	r0, r3
 8014614:	3718      	adds	r7, #24
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}
 801461a:	bf00      	nop
 801461c:	0802146c 	.word	0x0802146c
 8014620:	08021564 	.word	0x08021564
 8014624:	080214e4 	.word	0x080214e4
 8014628:	20000494 	.word	0x20000494

0801462c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014634:	2300      	movs	r3, #0
 8014636:	60fb      	str	r3, [r7, #12]
 8014638:	e01e      	b.n	8014678 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801463a:	4913      	ldr	r1, [pc, #76]	; (8014688 <etharp_cleanup_netif+0x5c>)
 801463c:	68fa      	ldr	r2, [r7, #12]
 801463e:	4613      	mov	r3, r2
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	4413      	add	r3, r2
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	440b      	add	r3, r1
 8014648:	3314      	adds	r3, #20
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801464e:	7afb      	ldrb	r3, [r7, #11]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d00e      	beq.n	8014672 <etharp_cleanup_netif+0x46>
 8014654:	490c      	ldr	r1, [pc, #48]	; (8014688 <etharp_cleanup_netif+0x5c>)
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	4613      	mov	r3, r2
 801465a:	005b      	lsls	r3, r3, #1
 801465c:	4413      	add	r3, r2
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	440b      	add	r3, r1
 8014662:	3308      	adds	r3, #8
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	429a      	cmp	r2, r3
 801466a:	d102      	bne.n	8014672 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801466c:	68f8      	ldr	r0, [r7, #12]
 801466e:	f7ff fce5 	bl	801403c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	3301      	adds	r3, #1
 8014676:	60fb      	str	r3, [r7, #12]
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	2b09      	cmp	r3, #9
 801467c:	dddd      	ble.n	801463a <etharp_cleanup_netif+0xe>
    }
  }
}
 801467e:	bf00      	nop
 8014680:	bf00      	nop
 8014682:	3710      	adds	r7, #16
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	20000494 	.word	0x20000494

0801468c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801468c:	b5b0      	push	{r4, r5, r7, lr}
 801468e:	b08a      	sub	sp, #40	; 0x28
 8014690:	af04      	add	r7, sp, #16
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d107      	bne.n	80146ac <etharp_input+0x20>
 801469c:	4b3d      	ldr	r3, [pc, #244]	; (8014794 <etharp_input+0x108>)
 801469e:	f240 228a 	movw	r2, #650	; 0x28a
 80146a2:	493d      	ldr	r1, [pc, #244]	; (8014798 <etharp_input+0x10c>)
 80146a4:	483d      	ldr	r0, [pc, #244]	; (801479c <etharp_input+0x110>)
 80146a6:	f003 fb7f 	bl	8017da8 <iprintf>
 80146aa:	e06f      	b.n	801478c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80146b2:	693b      	ldr	r3, [r7, #16]
 80146b4:	881b      	ldrh	r3, [r3, #0]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146bc:	d10c      	bne.n	80146d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80146c2:	2b06      	cmp	r3, #6
 80146c4:	d108      	bne.n	80146d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80146ca:	2b04      	cmp	r3, #4
 80146cc:	d104      	bne.n	80146d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80146ce:	693b      	ldr	r3, [r7, #16]
 80146d0:	885b      	ldrh	r3, [r3, #2]
 80146d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80146d4:	2b08      	cmp	r3, #8
 80146d6:	d003      	beq.n	80146e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7f9 fe07 	bl	800e2ec <pbuf_free>
    return;
 80146de:	e055      	b.n	801478c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80146e0:	693b      	ldr	r3, [r7, #16]
 80146e2:	330e      	adds	r3, #14
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	3318      	adds	r3, #24
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	3304      	adds	r3, #4
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d102      	bne.n	8014700 <etharp_input+0x74>
    for_us = 0;
 80146fa:	2300      	movs	r3, #0
 80146fc:	75fb      	strb	r3, [r7, #23]
 80146fe:	e009      	b.n	8014714 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014700:	68ba      	ldr	r2, [r7, #8]
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	3304      	adds	r3, #4
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	429a      	cmp	r2, r3
 801470a:	bf0c      	ite	eq
 801470c:	2301      	moveq	r3, #1
 801470e:	2300      	movne	r3, #0
 8014710:	b2db      	uxtb	r3, r3
 8014712:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	f103 0208 	add.w	r2, r3, #8
 801471a:	7dfb      	ldrb	r3, [r7, #23]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d001      	beq.n	8014724 <etharp_input+0x98>
 8014720:	2301      	movs	r3, #1
 8014722:	e000      	b.n	8014726 <etharp_input+0x9a>
 8014724:	2302      	movs	r3, #2
 8014726:	f107 010c 	add.w	r1, r7, #12
 801472a:	6838      	ldr	r0, [r7, #0]
 801472c:	f7ff fed8 	bl	80144e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	88db      	ldrh	r3, [r3, #6]
 8014734:	b29b      	uxth	r3, r3
 8014736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801473a:	d003      	beq.n	8014744 <etharp_input+0xb8>
 801473c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014740:	d01e      	beq.n	8014780 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014742:	e020      	b.n	8014786 <etharp_input+0xfa>
      if (for_us) {
 8014744:	7dfb      	ldrb	r3, [r7, #23]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d01c      	beq.n	8014784 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014750:	693b      	ldr	r3, [r7, #16]
 8014752:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014760:	693a      	ldr	r2, [r7, #16]
 8014762:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014764:	2102      	movs	r1, #2
 8014766:	9103      	str	r1, [sp, #12]
 8014768:	f107 010c 	add.w	r1, r7, #12
 801476c:	9102      	str	r1, [sp, #8]
 801476e:	9201      	str	r2, [sp, #4]
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	462b      	mov	r3, r5
 8014774:	4622      	mov	r2, r4
 8014776:	4601      	mov	r1, r0
 8014778:	6838      	ldr	r0, [r7, #0]
 801477a:	f000 faeb 	bl	8014d54 <etharp_raw>
      break;
 801477e:	e001      	b.n	8014784 <etharp_input+0xf8>
      break;
 8014780:	bf00      	nop
 8014782:	e000      	b.n	8014786 <etharp_input+0xfa>
      break;
 8014784:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f7f9 fdb0 	bl	800e2ec <pbuf_free>
}
 801478c:	3718      	adds	r7, #24
 801478e:	46bd      	mov	sp, r7
 8014790:	bdb0      	pop	{r4, r5, r7, pc}
 8014792:	bf00      	nop
 8014794:	0802146c 	.word	0x0802146c
 8014798:	080215bc 	.word	0x080215bc
 801479c:	080214e4 	.word	0x080214e4

080147a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b086      	sub	sp, #24
 80147a4:	af02      	add	r7, sp, #8
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	60b9      	str	r1, [r7, #8]
 80147aa:	4613      	mov	r3, r2
 80147ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80147ae:	79fa      	ldrb	r2, [r7, #7]
 80147b0:	4944      	ldr	r1, [pc, #272]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 80147b2:	4613      	mov	r3, r2
 80147b4:	005b      	lsls	r3, r3, #1
 80147b6:	4413      	add	r3, r2
 80147b8:	00db      	lsls	r3, r3, #3
 80147ba:	440b      	add	r3, r1
 80147bc:	3314      	adds	r3, #20
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d806      	bhi.n	80147d2 <etharp_output_to_arp_index+0x32>
 80147c4:	4b40      	ldr	r3, [pc, #256]	; (80148c8 <etharp_output_to_arp_index+0x128>)
 80147c6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80147ca:	4940      	ldr	r1, [pc, #256]	; (80148cc <etharp_output_to_arp_index+0x12c>)
 80147cc:	4840      	ldr	r0, [pc, #256]	; (80148d0 <etharp_output_to_arp_index+0x130>)
 80147ce:	f003 faeb 	bl	8017da8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80147d2:	79fa      	ldrb	r2, [r7, #7]
 80147d4:	493b      	ldr	r1, [pc, #236]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 80147d6:	4613      	mov	r3, r2
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	4413      	add	r3, r2
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	440b      	add	r3, r1
 80147e0:	3314      	adds	r3, #20
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	2b02      	cmp	r3, #2
 80147e6:	d153      	bne.n	8014890 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80147e8:	79fa      	ldrb	r2, [r7, #7]
 80147ea:	4936      	ldr	r1, [pc, #216]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 80147ec:	4613      	mov	r3, r2
 80147ee:	005b      	lsls	r3, r3, #1
 80147f0:	4413      	add	r3, r2
 80147f2:	00db      	lsls	r3, r3, #3
 80147f4:	440b      	add	r3, r1
 80147f6:	3312      	adds	r3, #18
 80147f8:	881b      	ldrh	r3, [r3, #0]
 80147fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80147fe:	d919      	bls.n	8014834 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014800:	79fa      	ldrb	r2, [r7, #7]
 8014802:	4613      	mov	r3, r2
 8014804:	005b      	lsls	r3, r3, #1
 8014806:	4413      	add	r3, r2
 8014808:	00db      	lsls	r3, r3, #3
 801480a:	4a2e      	ldr	r2, [pc, #184]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 801480c:	4413      	add	r3, r2
 801480e:	3304      	adds	r3, #4
 8014810:	4619      	mov	r1, r3
 8014812:	68f8      	ldr	r0, [r7, #12]
 8014814:	f000 fb4c 	bl	8014eb0 <etharp_request>
 8014818:	4603      	mov	r3, r0
 801481a:	2b00      	cmp	r3, #0
 801481c:	d138      	bne.n	8014890 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801481e:	79fa      	ldrb	r2, [r7, #7]
 8014820:	4928      	ldr	r1, [pc, #160]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 8014822:	4613      	mov	r3, r2
 8014824:	005b      	lsls	r3, r3, #1
 8014826:	4413      	add	r3, r2
 8014828:	00db      	lsls	r3, r3, #3
 801482a:	440b      	add	r3, r1
 801482c:	3314      	adds	r3, #20
 801482e:	2203      	movs	r2, #3
 8014830:	701a      	strb	r2, [r3, #0]
 8014832:	e02d      	b.n	8014890 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014834:	79fa      	ldrb	r2, [r7, #7]
 8014836:	4923      	ldr	r1, [pc, #140]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 8014838:	4613      	mov	r3, r2
 801483a:	005b      	lsls	r3, r3, #1
 801483c:	4413      	add	r3, r2
 801483e:	00db      	lsls	r3, r3, #3
 8014840:	440b      	add	r3, r1
 8014842:	3312      	adds	r3, #18
 8014844:	881b      	ldrh	r3, [r3, #0]
 8014846:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801484a:	d321      	bcc.n	8014890 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801484c:	79fa      	ldrb	r2, [r7, #7]
 801484e:	4613      	mov	r3, r2
 8014850:	005b      	lsls	r3, r3, #1
 8014852:	4413      	add	r3, r2
 8014854:	00db      	lsls	r3, r3, #3
 8014856:	4a1b      	ldr	r2, [pc, #108]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 8014858:	4413      	add	r3, r2
 801485a:	1d19      	adds	r1, r3, #4
 801485c:	79fa      	ldrb	r2, [r7, #7]
 801485e:	4613      	mov	r3, r2
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	4413      	add	r3, r2
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	3308      	adds	r3, #8
 8014868:	4a16      	ldr	r2, [pc, #88]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 801486a:	4413      	add	r3, r2
 801486c:	3304      	adds	r3, #4
 801486e:	461a      	mov	r2, r3
 8014870:	68f8      	ldr	r0, [r7, #12]
 8014872:	f000 fafb 	bl	8014e6c <etharp_request_dst>
 8014876:	4603      	mov	r3, r0
 8014878:	2b00      	cmp	r3, #0
 801487a:	d109      	bne.n	8014890 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801487c:	79fa      	ldrb	r2, [r7, #7]
 801487e:	4911      	ldr	r1, [pc, #68]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 8014880:	4613      	mov	r3, r2
 8014882:	005b      	lsls	r3, r3, #1
 8014884:	4413      	add	r3, r2
 8014886:	00db      	lsls	r3, r3, #3
 8014888:	440b      	add	r3, r1
 801488a:	3314      	adds	r3, #20
 801488c:	2203      	movs	r2, #3
 801488e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014896:	79fa      	ldrb	r2, [r7, #7]
 8014898:	4613      	mov	r3, r2
 801489a:	005b      	lsls	r3, r3, #1
 801489c:	4413      	add	r3, r2
 801489e:	00db      	lsls	r3, r3, #3
 80148a0:	3308      	adds	r3, #8
 80148a2:	4a08      	ldr	r2, [pc, #32]	; (80148c4 <etharp_output_to_arp_index+0x124>)
 80148a4:	4413      	add	r3, r2
 80148a6:	3304      	adds	r3, #4
 80148a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80148ac:	9200      	str	r2, [sp, #0]
 80148ae:	460a      	mov	r2, r1
 80148b0:	68b9      	ldr	r1, [r7, #8]
 80148b2:	68f8      	ldr	r0, [r7, #12]
 80148b4:	f001 fe3a 	bl	801652c <ethernet_output>
 80148b8:	4603      	mov	r3, r0
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	3710      	adds	r7, #16
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
 80148c2:	bf00      	nop
 80148c4:	20000494 	.word	0x20000494
 80148c8:	0802146c 	.word	0x0802146c
 80148cc:	080215dc 	.word	0x080215dc
 80148d0:	080214e4 	.word	0x080214e4

080148d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b08a      	sub	sp, #40	; 0x28
 80148d8:	af02      	add	r7, sp, #8
 80148da:	60f8      	str	r0, [r7, #12]
 80148dc:	60b9      	str	r1, [r7, #8]
 80148de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d106      	bne.n	80148f8 <etharp_output+0x24>
 80148ea:	4b73      	ldr	r3, [pc, #460]	; (8014ab8 <etharp_output+0x1e4>)
 80148ec:	f240 321e 	movw	r2, #798	; 0x31e
 80148f0:	4972      	ldr	r1, [pc, #456]	; (8014abc <etharp_output+0x1e8>)
 80148f2:	4873      	ldr	r0, [pc, #460]	; (8014ac0 <etharp_output+0x1ec>)
 80148f4:	f003 fa58 	bl	8017da8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d106      	bne.n	801490c <etharp_output+0x38>
 80148fe:	4b6e      	ldr	r3, [pc, #440]	; (8014ab8 <etharp_output+0x1e4>)
 8014900:	f240 321f 	movw	r2, #799	; 0x31f
 8014904:	496f      	ldr	r1, [pc, #444]	; (8014ac4 <etharp_output+0x1f0>)
 8014906:	486e      	ldr	r0, [pc, #440]	; (8014ac0 <etharp_output+0x1ec>)
 8014908:	f003 fa4e 	bl	8017da8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d106      	bne.n	8014920 <etharp_output+0x4c>
 8014912:	4b69      	ldr	r3, [pc, #420]	; (8014ab8 <etharp_output+0x1e4>)
 8014914:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014918:	496b      	ldr	r1, [pc, #428]	; (8014ac8 <etharp_output+0x1f4>)
 801491a:	4869      	ldr	r0, [pc, #420]	; (8014ac0 <etharp_output+0x1ec>)
 801491c:	f003 fa44 	bl	8017da8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	68f9      	ldr	r1, [r7, #12]
 8014926:	4618      	mov	r0, r3
 8014928:	f000 fef8 	bl	801571c <ip4_addr_isbroadcast_u32>
 801492c:	4603      	mov	r3, r0
 801492e:	2b00      	cmp	r3, #0
 8014930:	d002      	beq.n	8014938 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014932:	4b66      	ldr	r3, [pc, #408]	; (8014acc <etharp_output+0x1f8>)
 8014934:	61fb      	str	r3, [r7, #28]
 8014936:	e0af      	b.n	8014a98 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014940:	2be0      	cmp	r3, #224	; 0xe0
 8014942:	d118      	bne.n	8014976 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014944:	2301      	movs	r3, #1
 8014946:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014948:	2300      	movs	r3, #0
 801494a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801494c:	235e      	movs	r3, #94	; 0x5e
 801494e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	3301      	adds	r3, #1
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801495a:	b2db      	uxtb	r3, r3
 801495c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	3302      	adds	r3, #2
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	3303      	adds	r3, #3
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801496e:	f107 0310 	add.w	r3, r7, #16
 8014972:	61fb      	str	r3, [r7, #28]
 8014974:	e090      	b.n	8014a98 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	3304      	adds	r3, #4
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	405a      	eors	r2, r3
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	3308      	adds	r3, #8
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4013      	ands	r3, r2
 801498a:	2b00      	cmp	r3, #0
 801498c:	d012      	beq.n	80149b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014994:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014998:	4293      	cmp	r3, r2
 801499a:	d00b      	beq.n	80149b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	330c      	adds	r3, #12
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d003      	beq.n	80149ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	330c      	adds	r3, #12
 80149aa:	61bb      	str	r3, [r7, #24]
 80149ac:	e002      	b.n	80149b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80149ae:	f06f 0303 	mvn.w	r3, #3
 80149b2:	e07d      	b.n	8014ab0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80149b4:	4b46      	ldr	r3, [pc, #280]	; (8014ad0 <etharp_output+0x1fc>)
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	4619      	mov	r1, r3
 80149ba:	4a46      	ldr	r2, [pc, #280]	; (8014ad4 <etharp_output+0x200>)
 80149bc:	460b      	mov	r3, r1
 80149be:	005b      	lsls	r3, r3, #1
 80149c0:	440b      	add	r3, r1
 80149c2:	00db      	lsls	r3, r3, #3
 80149c4:	4413      	add	r3, r2
 80149c6:	3314      	adds	r3, #20
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d925      	bls.n	8014a1a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80149ce:	4b40      	ldr	r3, [pc, #256]	; (8014ad0 <etharp_output+0x1fc>)
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	4619      	mov	r1, r3
 80149d4:	4a3f      	ldr	r2, [pc, #252]	; (8014ad4 <etharp_output+0x200>)
 80149d6:	460b      	mov	r3, r1
 80149d8:	005b      	lsls	r3, r3, #1
 80149da:	440b      	add	r3, r1
 80149dc:	00db      	lsls	r3, r3, #3
 80149de:	4413      	add	r3, r2
 80149e0:	3308      	adds	r3, #8
 80149e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80149e4:	68fa      	ldr	r2, [r7, #12]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d117      	bne.n	8014a1a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	4b38      	ldr	r3, [pc, #224]	; (8014ad0 <etharp_output+0x1fc>)
 80149f0:	781b      	ldrb	r3, [r3, #0]
 80149f2:	4618      	mov	r0, r3
 80149f4:	4937      	ldr	r1, [pc, #220]	; (8014ad4 <etharp_output+0x200>)
 80149f6:	4603      	mov	r3, r0
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	4403      	add	r3, r0
 80149fc:	00db      	lsls	r3, r3, #3
 80149fe:	440b      	add	r3, r1
 8014a00:	3304      	adds	r3, #4
 8014a02:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d108      	bne.n	8014a1a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014a08:	4b31      	ldr	r3, [pc, #196]	; (8014ad0 <etharp_output+0x1fc>)
 8014a0a:	781b      	ldrb	r3, [r3, #0]
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	68b9      	ldr	r1, [r7, #8]
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	f7ff fec5 	bl	80147a0 <etharp_output_to_arp_index>
 8014a16:	4603      	mov	r3, r0
 8014a18:	e04a      	b.n	8014ab0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	75fb      	strb	r3, [r7, #23]
 8014a1e:	e031      	b.n	8014a84 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a20:	7dfa      	ldrb	r2, [r7, #23]
 8014a22:	492c      	ldr	r1, [pc, #176]	; (8014ad4 <etharp_output+0x200>)
 8014a24:	4613      	mov	r3, r2
 8014a26:	005b      	lsls	r3, r3, #1
 8014a28:	4413      	add	r3, r2
 8014a2a:	00db      	lsls	r3, r3, #3
 8014a2c:	440b      	add	r3, r1
 8014a2e:	3314      	adds	r3, #20
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d923      	bls.n	8014a7e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014a36:	7dfa      	ldrb	r2, [r7, #23]
 8014a38:	4926      	ldr	r1, [pc, #152]	; (8014ad4 <etharp_output+0x200>)
 8014a3a:	4613      	mov	r3, r2
 8014a3c:	005b      	lsls	r3, r3, #1
 8014a3e:	4413      	add	r3, r2
 8014a40:	00db      	lsls	r3, r3, #3
 8014a42:	440b      	add	r3, r1
 8014a44:	3308      	adds	r3, #8
 8014a46:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a48:	68fa      	ldr	r2, [r7, #12]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d117      	bne.n	8014a7e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014a4e:	69bb      	ldr	r3, [r7, #24]
 8014a50:	6819      	ldr	r1, [r3, #0]
 8014a52:	7dfa      	ldrb	r2, [r7, #23]
 8014a54:	481f      	ldr	r0, [pc, #124]	; (8014ad4 <etharp_output+0x200>)
 8014a56:	4613      	mov	r3, r2
 8014a58:	005b      	lsls	r3, r3, #1
 8014a5a:	4413      	add	r3, r2
 8014a5c:	00db      	lsls	r3, r3, #3
 8014a5e:	4403      	add	r3, r0
 8014a60:	3304      	adds	r3, #4
 8014a62:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014a64:	4299      	cmp	r1, r3
 8014a66:	d10a      	bne.n	8014a7e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014a68:	4a19      	ldr	r2, [pc, #100]	; (8014ad0 <etharp_output+0x1fc>)
 8014a6a:	7dfb      	ldrb	r3, [r7, #23]
 8014a6c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014a6e:	7dfb      	ldrb	r3, [r7, #23]
 8014a70:	461a      	mov	r2, r3
 8014a72:	68b9      	ldr	r1, [r7, #8]
 8014a74:	68f8      	ldr	r0, [r7, #12]
 8014a76:	f7ff fe93 	bl	80147a0 <etharp_output_to_arp_index>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	e018      	b.n	8014ab0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a7e:	7dfb      	ldrb	r3, [r7, #23]
 8014a80:	3301      	adds	r3, #1
 8014a82:	75fb      	strb	r3, [r7, #23]
 8014a84:	7dfb      	ldrb	r3, [r7, #23]
 8014a86:	2b09      	cmp	r3, #9
 8014a88:	d9ca      	bls.n	8014a20 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014a8a:	68ba      	ldr	r2, [r7, #8]
 8014a8c:	69b9      	ldr	r1, [r7, #24]
 8014a8e:	68f8      	ldr	r0, [r7, #12]
 8014a90:	f000 f822 	bl	8014ad8 <etharp_query>
 8014a94:	4603      	mov	r3, r0
 8014a96:	e00b      	b.n	8014ab0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014a9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014aa2:	9300      	str	r3, [sp, #0]
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	68b9      	ldr	r1, [r7, #8]
 8014aa8:	68f8      	ldr	r0, [r7, #12]
 8014aaa:	f001 fd3f 	bl	801652c <ethernet_output>
 8014aae:	4603      	mov	r3, r0
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3720      	adds	r7, #32
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	0802146c 	.word	0x0802146c
 8014abc:	080215bc 	.word	0x080215bc
 8014ac0:	080214e4 	.word	0x080214e4
 8014ac4:	0802160c 	.word	0x0802160c
 8014ac8:	080215ac 	.word	0x080215ac
 8014acc:	08021c44 	.word	0x08021c44
 8014ad0:	20000584 	.word	0x20000584
 8014ad4:	20000494 	.word	0x20000494

08014ad8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b08c      	sub	sp, #48	; 0x30
 8014adc:	af02      	add	r7, sp, #8
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	3326      	adds	r3, #38	; 0x26
 8014ae8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014aea:	23ff      	movs	r3, #255	; 0xff
 8014aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014af0:	2300      	movs	r3, #0
 8014af2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	68f9      	ldr	r1, [r7, #12]
 8014afa:	4618      	mov	r0, r3
 8014afc:	f000 fe0e 	bl	801571c <ip4_addr_isbroadcast_u32>
 8014b00:	4603      	mov	r3, r0
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d10c      	bne.n	8014b20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b0e:	2be0      	cmp	r3, #224	; 0xe0
 8014b10:	d006      	beq.n	8014b20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d003      	beq.n	8014b20 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d102      	bne.n	8014b26 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b20:	f06f 030f 	mvn.w	r3, #15
 8014b24:	e101      	b.n	8014d2a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	2101      	movs	r1, #1
 8014b2a:	68b8      	ldr	r0, [r7, #8]
 8014b2c:	f7ff fb60 	bl	80141f0 <etharp_find_entry>
 8014b30:	4603      	mov	r3, r0
 8014b32:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014b34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	da02      	bge.n	8014b42 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014b3c:	8a7b      	ldrh	r3, [r7, #18]
 8014b3e:	b25b      	sxtb	r3, r3
 8014b40:	e0f3      	b.n	8014d2a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014b42:	8a7b      	ldrh	r3, [r7, #18]
 8014b44:	2b7e      	cmp	r3, #126	; 0x7e
 8014b46:	d906      	bls.n	8014b56 <etharp_query+0x7e>
 8014b48:	4b7a      	ldr	r3, [pc, #488]	; (8014d34 <etharp_query+0x25c>)
 8014b4a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014b4e:	497a      	ldr	r1, [pc, #488]	; (8014d38 <etharp_query+0x260>)
 8014b50:	487a      	ldr	r0, [pc, #488]	; (8014d3c <etharp_query+0x264>)
 8014b52:	f003 f929 	bl	8017da8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014b56:	8a7b      	ldrh	r3, [r7, #18]
 8014b58:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014b5a:	7c7a      	ldrb	r2, [r7, #17]
 8014b5c:	4978      	ldr	r1, [pc, #480]	; (8014d40 <etharp_query+0x268>)
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	440b      	add	r3, r1
 8014b68:	3314      	adds	r3, #20
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d115      	bne.n	8014b9c <etharp_query+0xc4>
    is_new_entry = 1;
 8014b70:	2301      	movs	r3, #1
 8014b72:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014b74:	7c7a      	ldrb	r2, [r7, #17]
 8014b76:	4972      	ldr	r1, [pc, #456]	; (8014d40 <etharp_query+0x268>)
 8014b78:	4613      	mov	r3, r2
 8014b7a:	005b      	lsls	r3, r3, #1
 8014b7c:	4413      	add	r3, r2
 8014b7e:	00db      	lsls	r3, r3, #3
 8014b80:	440b      	add	r3, r1
 8014b82:	3314      	adds	r3, #20
 8014b84:	2201      	movs	r2, #1
 8014b86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014b88:	7c7a      	ldrb	r2, [r7, #17]
 8014b8a:	496d      	ldr	r1, [pc, #436]	; (8014d40 <etharp_query+0x268>)
 8014b8c:	4613      	mov	r3, r2
 8014b8e:	005b      	lsls	r3, r3, #1
 8014b90:	4413      	add	r3, r2
 8014b92:	00db      	lsls	r3, r3, #3
 8014b94:	440b      	add	r3, r1
 8014b96:	3308      	adds	r3, #8
 8014b98:	68fa      	ldr	r2, [r7, #12]
 8014b9a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014b9c:	7c7a      	ldrb	r2, [r7, #17]
 8014b9e:	4968      	ldr	r1, [pc, #416]	; (8014d40 <etharp_query+0x268>)
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	4413      	add	r3, r2
 8014ba6:	00db      	lsls	r3, r3, #3
 8014ba8:	440b      	add	r3, r1
 8014baa:	3314      	adds	r3, #20
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	d011      	beq.n	8014bd6 <etharp_query+0xfe>
 8014bb2:	7c7a      	ldrb	r2, [r7, #17]
 8014bb4:	4962      	ldr	r1, [pc, #392]	; (8014d40 <etharp_query+0x268>)
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	005b      	lsls	r3, r3, #1
 8014bba:	4413      	add	r3, r2
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	440b      	add	r3, r1
 8014bc0:	3314      	adds	r3, #20
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d806      	bhi.n	8014bd6 <etharp_query+0xfe>
 8014bc8:	4b5a      	ldr	r3, [pc, #360]	; (8014d34 <etharp_query+0x25c>)
 8014bca:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014bce:	495d      	ldr	r1, [pc, #372]	; (8014d44 <etharp_query+0x26c>)
 8014bd0:	485a      	ldr	r0, [pc, #360]	; (8014d3c <etharp_query+0x264>)
 8014bd2:	f003 f8e9 	bl	8017da8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014bd6:	6a3b      	ldr	r3, [r7, #32]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d102      	bne.n	8014be2 <etharp_query+0x10a>
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d10c      	bne.n	8014bfc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014be2:	68b9      	ldr	r1, [r7, #8]
 8014be4:	68f8      	ldr	r0, [r7, #12]
 8014be6:	f000 f963 	bl	8014eb0 <etharp_request>
 8014bea:	4603      	mov	r3, r0
 8014bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d102      	bne.n	8014bfc <etharp_query+0x124>
      return result;
 8014bf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014bfa:	e096      	b.n	8014d2a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d106      	bne.n	8014c10 <etharp_query+0x138>
 8014c02:	4b4c      	ldr	r3, [pc, #304]	; (8014d34 <etharp_query+0x25c>)
 8014c04:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014c08:	494f      	ldr	r1, [pc, #316]	; (8014d48 <etharp_query+0x270>)
 8014c0a:	484c      	ldr	r0, [pc, #304]	; (8014d3c <etharp_query+0x264>)
 8014c0c:	f003 f8cc 	bl	8017da8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014c10:	7c7a      	ldrb	r2, [r7, #17]
 8014c12:	494b      	ldr	r1, [pc, #300]	; (8014d40 <etharp_query+0x268>)
 8014c14:	4613      	mov	r3, r2
 8014c16:	005b      	lsls	r3, r3, #1
 8014c18:	4413      	add	r3, r2
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	440b      	add	r3, r1
 8014c1e:	3314      	adds	r3, #20
 8014c20:	781b      	ldrb	r3, [r3, #0]
 8014c22:	2b01      	cmp	r3, #1
 8014c24:	d917      	bls.n	8014c56 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014c26:	4a49      	ldr	r2, [pc, #292]	; (8014d4c <etharp_query+0x274>)
 8014c28:	7c7b      	ldrb	r3, [r7, #17]
 8014c2a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014c2c:	7c7a      	ldrb	r2, [r7, #17]
 8014c2e:	4613      	mov	r3, r2
 8014c30:	005b      	lsls	r3, r3, #1
 8014c32:	4413      	add	r3, r2
 8014c34:	00db      	lsls	r3, r3, #3
 8014c36:	3308      	adds	r3, #8
 8014c38:	4a41      	ldr	r2, [pc, #260]	; (8014d40 <etharp_query+0x268>)
 8014c3a:	4413      	add	r3, r2
 8014c3c:	3304      	adds	r3, #4
 8014c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c42:	9200      	str	r2, [sp, #0]
 8014c44:	697a      	ldr	r2, [r7, #20]
 8014c46:	6879      	ldr	r1, [r7, #4]
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f001 fc6f 	bl	801652c <ethernet_output>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c54:	e067      	b.n	8014d26 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c56:	7c7a      	ldrb	r2, [r7, #17]
 8014c58:	4939      	ldr	r1, [pc, #228]	; (8014d40 <etharp_query+0x268>)
 8014c5a:	4613      	mov	r3, r2
 8014c5c:	005b      	lsls	r3, r3, #1
 8014c5e:	4413      	add	r3, r2
 8014c60:	00db      	lsls	r3, r3, #3
 8014c62:	440b      	add	r3, r1
 8014c64:	3314      	adds	r3, #20
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	2b01      	cmp	r3, #1
 8014c6a:	d15c      	bne.n	8014d26 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014c74:	e01c      	b.n	8014cb0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014c76:	69fb      	ldr	r3, [r7, #28]
 8014c78:	895a      	ldrh	r2, [r3, #10]
 8014c7a:	69fb      	ldr	r3, [r7, #28]
 8014c7c:	891b      	ldrh	r3, [r3, #8]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d10a      	bne.n	8014c98 <etharp_query+0x1c0>
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d006      	beq.n	8014c98 <etharp_query+0x1c0>
 8014c8a:	4b2a      	ldr	r3, [pc, #168]	; (8014d34 <etharp_query+0x25c>)
 8014c8c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014c90:	492f      	ldr	r1, [pc, #188]	; (8014d50 <etharp_query+0x278>)
 8014c92:	482a      	ldr	r0, [pc, #168]	; (8014d3c <etharp_query+0x264>)
 8014c94:	f003 f888 	bl	8017da8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	7b1b      	ldrb	r3, [r3, #12]
 8014c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d002      	beq.n	8014caa <etharp_query+0x1d2>
        copy_needed = 1;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	61bb      	str	r3, [r7, #24]
        break;
 8014ca8:	e005      	b.n	8014cb6 <etharp_query+0x1de>
      }
      p = p->next;
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014cb0:	69fb      	ldr	r3, [r7, #28]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d1df      	bne.n	8014c76 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014cb6:	69bb      	ldr	r3, [r7, #24]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d007      	beq.n	8014ccc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014cbc:	687a      	ldr	r2, [r7, #4]
 8014cbe:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014cc2:	200e      	movs	r0, #14
 8014cc4:	f7f9 fd6e 	bl	800e7a4 <pbuf_clone>
 8014cc8:	61f8      	str	r0, [r7, #28]
 8014cca:	e004      	b.n	8014cd6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014cd0:	69f8      	ldr	r0, [r7, #28]
 8014cd2:	f7f9 fbab 	bl	800e42c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d021      	beq.n	8014d20 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014cdc:	7c7a      	ldrb	r2, [r7, #17]
 8014cde:	4918      	ldr	r1, [pc, #96]	; (8014d40 <etharp_query+0x268>)
 8014ce0:	4613      	mov	r3, r2
 8014ce2:	005b      	lsls	r3, r3, #1
 8014ce4:	4413      	add	r3, r2
 8014ce6:	00db      	lsls	r3, r3, #3
 8014ce8:	440b      	add	r3, r1
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d00a      	beq.n	8014d06 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014cf0:	7c7a      	ldrb	r2, [r7, #17]
 8014cf2:	4913      	ldr	r1, [pc, #76]	; (8014d40 <etharp_query+0x268>)
 8014cf4:	4613      	mov	r3, r2
 8014cf6:	005b      	lsls	r3, r3, #1
 8014cf8:	4413      	add	r3, r2
 8014cfa:	00db      	lsls	r3, r3, #3
 8014cfc:	440b      	add	r3, r1
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f9 faf3 	bl	800e2ec <pbuf_free>
      }
      arp_table[i].q = p;
 8014d06:	7c7a      	ldrb	r2, [r7, #17]
 8014d08:	490d      	ldr	r1, [pc, #52]	; (8014d40 <etharp_query+0x268>)
 8014d0a:	4613      	mov	r3, r2
 8014d0c:	005b      	lsls	r3, r3, #1
 8014d0e:	4413      	add	r3, r2
 8014d10:	00db      	lsls	r3, r3, #3
 8014d12:	440b      	add	r3, r1
 8014d14:	69fa      	ldr	r2, [r7, #28]
 8014d16:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d1e:	e002      	b.n	8014d26 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014d20:	23ff      	movs	r3, #255	; 0xff
 8014d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014d26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3728      	adds	r7, #40	; 0x28
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}
 8014d32:	bf00      	nop
 8014d34:	0802146c 	.word	0x0802146c
 8014d38:	08021618 	.word	0x08021618
 8014d3c:	080214e4 	.word	0x080214e4
 8014d40:	20000494 	.word	0x20000494
 8014d44:	08021628 	.word	0x08021628
 8014d48:	0802160c 	.word	0x0802160c
 8014d4c:	20000584 	.word	0x20000584
 8014d50:	08021650 	.word	0x08021650

08014d54 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b08a      	sub	sp, #40	; 0x28
 8014d58:	af02      	add	r7, sp, #8
 8014d5a:	60f8      	str	r0, [r7, #12]
 8014d5c:	60b9      	str	r1, [r7, #8]
 8014d5e:	607a      	str	r2, [r7, #4]
 8014d60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014d62:	2300      	movs	r3, #0
 8014d64:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d106      	bne.n	8014d7a <etharp_raw+0x26>
 8014d6c:	4b3a      	ldr	r3, [pc, #232]	; (8014e58 <etharp_raw+0x104>)
 8014d6e:	f240 4257 	movw	r2, #1111	; 0x457
 8014d72:	493a      	ldr	r1, [pc, #232]	; (8014e5c <etharp_raw+0x108>)
 8014d74:	483a      	ldr	r0, [pc, #232]	; (8014e60 <etharp_raw+0x10c>)
 8014d76:	f003 f817 	bl	8017da8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014d7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d7e:	211c      	movs	r1, #28
 8014d80:	200e      	movs	r0, #14
 8014d82:	f7f8 ffcf 	bl	800dd24 <pbuf_alloc>
 8014d86:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d102      	bne.n	8014d94 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014d92:	e05d      	b.n	8014e50 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014d94:	69bb      	ldr	r3, [r7, #24]
 8014d96:	895b      	ldrh	r3, [r3, #10]
 8014d98:	2b1b      	cmp	r3, #27
 8014d9a:	d806      	bhi.n	8014daa <etharp_raw+0x56>
 8014d9c:	4b2e      	ldr	r3, [pc, #184]	; (8014e58 <etharp_raw+0x104>)
 8014d9e:	f240 4262 	movw	r2, #1122	; 0x462
 8014da2:	4930      	ldr	r1, [pc, #192]	; (8014e64 <etharp_raw+0x110>)
 8014da4:	482e      	ldr	r0, [pc, #184]	; (8014e60 <etharp_raw+0x10c>)
 8014da6:	f002 ffff 	bl	8017da8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014daa:	69bb      	ldr	r3, [r7, #24]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014db0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7f8 f807 	bl	800cdc6 <lwip_htons>
 8014db8:	4603      	mov	r3, r0
 8014dba:	461a      	mov	r2, r3
 8014dbc:	697b      	ldr	r3, [r7, #20]
 8014dbe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014dc6:	2b06      	cmp	r3, #6
 8014dc8:	d006      	beq.n	8014dd8 <etharp_raw+0x84>
 8014dca:	4b23      	ldr	r3, [pc, #140]	; (8014e58 <etharp_raw+0x104>)
 8014dcc:	f240 4269 	movw	r2, #1129	; 0x469
 8014dd0:	4925      	ldr	r1, [pc, #148]	; (8014e68 <etharp_raw+0x114>)
 8014dd2:	4823      	ldr	r0, [pc, #140]	; (8014e60 <etharp_raw+0x10c>)
 8014dd4:	f002 ffe8 	bl	8017da8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	3308      	adds	r3, #8
 8014ddc:	2206      	movs	r2, #6
 8014dde:	6839      	ldr	r1, [r7, #0]
 8014de0:	4618      	mov	r0, r3
 8014de2:	f002 f937 	bl	8017054 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	3312      	adds	r3, #18
 8014dea:	2206      	movs	r2, #6
 8014dec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014dee:	4618      	mov	r0, r3
 8014df0:	f002 f930 	bl	8017054 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014df4:	697b      	ldr	r3, [r7, #20]
 8014df6:	330e      	adds	r3, #14
 8014df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dfa:	6812      	ldr	r2, [r2, #0]
 8014dfc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	3318      	adds	r3, #24
 8014e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e04:	6812      	ldr	r2, [r2, #0]
 8014e06:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	701a      	strb	r2, [r3, #0]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	f042 0201 	orr.w	r2, r2, #1
 8014e14:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	f042 0208 	orr.w	r2, r2, #8
 8014e1e:	709a      	strb	r2, [r3, #2]
 8014e20:	2200      	movs	r2, #0
 8014e22:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	2206      	movs	r2, #6
 8014e28:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014e2a:	697b      	ldr	r3, [r7, #20]
 8014e2c:	2204      	movs	r2, #4
 8014e2e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014e30:	f640 0306 	movw	r3, #2054	; 0x806
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	68ba      	ldr	r2, [r7, #8]
 8014e3a:	69b9      	ldr	r1, [r7, #24]
 8014e3c:	68f8      	ldr	r0, [r7, #12]
 8014e3e:	f001 fb75 	bl	801652c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014e42:	69b8      	ldr	r0, [r7, #24]
 8014e44:	f7f9 fa52 	bl	800e2ec <pbuf_free>
  p = NULL;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014e4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3720      	adds	r7, #32
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	0802146c 	.word	0x0802146c
 8014e5c:	080215bc 	.word	0x080215bc
 8014e60:	080214e4 	.word	0x080214e4
 8014e64:	0802166c 	.word	0x0802166c
 8014e68:	080216a0 	.word	0x080216a0

08014e6c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b088      	sub	sp, #32
 8014e70:	af04      	add	r7, sp, #16
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	60b9      	str	r1, [r7, #8]
 8014e76:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e88:	2201      	movs	r2, #1
 8014e8a:	9203      	str	r2, [sp, #12]
 8014e8c:	68ba      	ldr	r2, [r7, #8]
 8014e8e:	9202      	str	r2, [sp, #8]
 8014e90:	4a06      	ldr	r2, [pc, #24]	; (8014eac <etharp_request_dst+0x40>)
 8014e92:	9201      	str	r2, [sp, #4]
 8014e94:	9300      	str	r3, [sp, #0]
 8014e96:	4603      	mov	r3, r0
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	68f8      	ldr	r0, [r7, #12]
 8014e9c:	f7ff ff5a 	bl	8014d54 <etharp_raw>
 8014ea0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3710      	adds	r7, #16
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
 8014eaa:	bf00      	nop
 8014eac:	08021c4c 	.word	0x08021c4c

08014eb0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014eba:	4a05      	ldr	r2, [pc, #20]	; (8014ed0 <etharp_request+0x20>)
 8014ebc:	6839      	ldr	r1, [r7, #0]
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f7ff ffd4 	bl	8014e6c <etharp_request_dst>
 8014ec4:	4603      	mov	r3, r0
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3708      	adds	r7, #8
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	08021c44 	.word	0x08021c44

08014ed4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b08e      	sub	sp, #56	; 0x38
 8014ed8:	af04      	add	r7, sp, #16
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014ede:	4b79      	ldr	r3, [pc, #484]	; (80150c4 <icmp_input+0x1f0>)
 8014ee0:	689b      	ldr	r3, [r3, #8]
 8014ee2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	f003 030f 	and.w	r3, r3, #15
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	009b      	lsls	r3, r3, #2
 8014ef0:	b2db      	uxtb	r3, r3
 8014ef2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ef6:	2b13      	cmp	r3, #19
 8014ef8:	f240 80cd 	bls.w	8015096 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	895b      	ldrh	r3, [r3, #10]
 8014f00:	2b03      	cmp	r3, #3
 8014f02:	f240 80ca 	bls.w	801509a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014f10:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	f000 80b7 	beq.w	8015088 <icmp_input+0x1b4>
 8014f1a:	2b08      	cmp	r3, #8
 8014f1c:	f040 80b7 	bne.w	801508e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014f20:	4b69      	ldr	r3, [pc, #420]	; (80150c8 <icmp_input+0x1f4>)
 8014f22:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f24:	4b67      	ldr	r3, [pc, #412]	; (80150c4 <icmp_input+0x1f0>)
 8014f26:	695b      	ldr	r3, [r3, #20]
 8014f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f2c:	2be0      	cmp	r3, #224	; 0xe0
 8014f2e:	f000 80bb 	beq.w	80150a8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014f32:	4b64      	ldr	r3, [pc, #400]	; (80150c4 <icmp_input+0x1f0>)
 8014f34:	695b      	ldr	r3, [r3, #20]
 8014f36:	4a63      	ldr	r2, [pc, #396]	; (80150c4 <icmp_input+0x1f0>)
 8014f38:	6812      	ldr	r2, [r2, #0]
 8014f3a:	4611      	mov	r1, r2
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f000 fbed 	bl	801571c <ip4_addr_isbroadcast_u32>
 8014f42:	4603      	mov	r3, r0
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	f040 80b1 	bne.w	80150ac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	891b      	ldrh	r3, [r3, #8]
 8014f4e:	2b07      	cmp	r3, #7
 8014f50:	f240 80a5 	bls.w	801509e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f56:	330e      	adds	r3, #14
 8014f58:	4619      	mov	r1, r3
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f7f9 f930 	bl	800e1c0 <pbuf_add_header>
 8014f60:	4603      	mov	r3, r0
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d04b      	beq.n	8014ffe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	891a      	ldrh	r2, [r3, #8]
 8014f6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f6c:	4413      	add	r3, r2
 8014f6e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	891b      	ldrh	r3, [r3, #8]
 8014f74:	8b7a      	ldrh	r2, [r7, #26]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	f0c0 809a 	bcc.w	80150b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014f7c:	8b7b      	ldrh	r3, [r7, #26]
 8014f7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f82:	4619      	mov	r1, r3
 8014f84:	200e      	movs	r0, #14
 8014f86:	f7f8 fecd 	bl	800dd24 <pbuf_alloc>
 8014f8a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	f000 8090 	beq.w	80150b4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014f94:	697b      	ldr	r3, [r7, #20]
 8014f96:	895b      	ldrh	r3, [r3, #10]
 8014f98:	461a      	mov	r2, r3
 8014f9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f9c:	3308      	adds	r3, #8
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d203      	bcs.n	8014faa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014fa2:	6978      	ldr	r0, [r7, #20]
 8014fa4:	f7f9 f9a2 	bl	800e2ec <pbuf_free>
          goto icmperr;
 8014fa8:	e085      	b.n	80150b6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f002 f84e 	bl	8017054 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fba:	4619      	mov	r1, r3
 8014fbc:	6978      	ldr	r0, [r7, #20]
 8014fbe:	f7f9 f90f 	bl	800e1e0 <pbuf_remove_header>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d009      	beq.n	8014fdc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014fc8:	4b40      	ldr	r3, [pc, #256]	; (80150cc <icmp_input+0x1f8>)
 8014fca:	22b6      	movs	r2, #182	; 0xb6
 8014fcc:	4940      	ldr	r1, [pc, #256]	; (80150d0 <icmp_input+0x1fc>)
 8014fce:	4841      	ldr	r0, [pc, #260]	; (80150d4 <icmp_input+0x200>)
 8014fd0:	f002 feea 	bl	8017da8 <iprintf>
          pbuf_free(r);
 8014fd4:	6978      	ldr	r0, [r7, #20]
 8014fd6:	f7f9 f989 	bl	800e2ec <pbuf_free>
          goto icmperr;
 8014fda:	e06c      	b.n	80150b6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014fdc:	6879      	ldr	r1, [r7, #4]
 8014fde:	6978      	ldr	r0, [r7, #20]
 8014fe0:	f7f9 fa9c 	bl	800e51c <pbuf_copy>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d003      	beq.n	8014ff2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014fea:	6978      	ldr	r0, [r7, #20]
 8014fec:	f7f9 f97e 	bl	800e2ec <pbuf_free>
          goto icmperr;
 8014ff0:	e061      	b.n	80150b6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f7f9 f97a 	bl	800e2ec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	607b      	str	r3, [r7, #4]
 8014ffc:	e00f      	b.n	801501e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ffe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015000:	330e      	adds	r3, #14
 8015002:	4619      	mov	r1, r3
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f7f9 f8eb 	bl	800e1e0 <pbuf_remove_header>
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	d006      	beq.n	801501e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015010:	4b2e      	ldr	r3, [pc, #184]	; (80150cc <icmp_input+0x1f8>)
 8015012:	22c7      	movs	r2, #199	; 0xc7
 8015014:	4930      	ldr	r1, [pc, #192]	; (80150d8 <icmp_input+0x204>)
 8015016:	482f      	ldr	r0, [pc, #188]	; (80150d4 <icmp_input+0x200>)
 8015018:	f002 fec6 	bl	8017da8 <iprintf>
          goto icmperr;
 801501c:	e04b      	b.n	80150b6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015026:	4619      	mov	r1, r3
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f7f9 f8c9 	bl	800e1c0 <pbuf_add_header>
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	d12b      	bne.n	801508c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801503a:	69fb      	ldr	r3, [r7, #28]
 801503c:	681a      	ldr	r2, [r3, #0]
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015042:	4b20      	ldr	r3, [pc, #128]	; (80150c4 <icmp_input+0x1f0>)
 8015044:	691a      	ldr	r2, [r3, #16]
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801504a:	693b      	ldr	r3, [r7, #16]
 801504c:	2200      	movs	r2, #0
 801504e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015050:	693b      	ldr	r3, [r7, #16]
 8015052:	2200      	movs	r2, #0
 8015054:	709a      	strb	r2, [r3, #2]
 8015056:	2200      	movs	r2, #0
 8015058:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	22ff      	movs	r2, #255	; 0xff
 801505e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	2200      	movs	r2, #0
 8015064:	729a      	strb	r2, [r3, #10]
 8015066:	2200      	movs	r2, #0
 8015068:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	9302      	str	r3, [sp, #8]
 801506e:	2301      	movs	r3, #1
 8015070:	9301      	str	r3, [sp, #4]
 8015072:	2300      	movs	r3, #0
 8015074:	9300      	str	r3, [sp, #0]
 8015076:	23ff      	movs	r3, #255	; 0xff
 8015078:	2200      	movs	r2, #0
 801507a:	69f9      	ldr	r1, [r7, #28]
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f000 fa75 	bl	801556c <ip4_output_if>
 8015082:	4603      	mov	r3, r0
 8015084:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015086:	e001      	b.n	801508c <icmp_input+0x1b8>
      break;
 8015088:	bf00      	nop
 801508a:	e000      	b.n	801508e <icmp_input+0x1ba>
      break;
 801508c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7f9 f92c 	bl	800e2ec <pbuf_free>
  return;
 8015094:	e013      	b.n	80150be <icmp_input+0x1ea>
    goto lenerr;
 8015096:	bf00      	nop
 8015098:	e002      	b.n	80150a0 <icmp_input+0x1cc>
    goto lenerr;
 801509a:	bf00      	nop
 801509c:	e000      	b.n	80150a0 <icmp_input+0x1cc>
        goto lenerr;
 801509e:	bf00      	nop
lenerr:
  pbuf_free(p);
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f7f9 f923 	bl	800e2ec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150a6:	e00a      	b.n	80150be <icmp_input+0x1ea>
        goto icmperr;
 80150a8:	bf00      	nop
 80150aa:	e004      	b.n	80150b6 <icmp_input+0x1e2>
        goto icmperr;
 80150ac:	bf00      	nop
 80150ae:	e002      	b.n	80150b6 <icmp_input+0x1e2>
          goto icmperr;
 80150b0:	bf00      	nop
 80150b2:	e000      	b.n	80150b6 <icmp_input+0x1e2>
          goto icmperr;
 80150b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7f9 f918 	bl	800e2ec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80150be:	3728      	adds	r7, #40	; 0x28
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	20003bd4 	.word	0x20003bd4
 80150c8:	20003be8 	.word	0x20003be8
 80150cc:	080216e4 	.word	0x080216e4
 80150d0:	0802171c 	.word	0x0802171c
 80150d4:	08021754 	.word	0x08021754
 80150d8:	0802177c 	.word	0x0802177c

080150dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	460b      	mov	r3, r1
 80150e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80150e8:	78fb      	ldrb	r3, [r7, #3]
 80150ea:	461a      	mov	r2, r3
 80150ec:	2103      	movs	r1, #3
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f000 f814 	bl	801511c <icmp_send_response>
}
 80150f4:	bf00      	nop
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
 8015104:	460b      	mov	r3, r1
 8015106:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015108:	78fb      	ldrb	r3, [r7, #3]
 801510a:	461a      	mov	r2, r3
 801510c:	210b      	movs	r1, #11
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f000 f804 	bl	801511c <icmp_send_response>
}
 8015114:	bf00      	nop
 8015116:	3708      	adds	r7, #8
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b08c      	sub	sp, #48	; 0x30
 8015120:	af04      	add	r7, sp, #16
 8015122:	6078      	str	r0, [r7, #4]
 8015124:	460b      	mov	r3, r1
 8015126:	70fb      	strb	r3, [r7, #3]
 8015128:	4613      	mov	r3, r2
 801512a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801512c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015130:	2124      	movs	r1, #36	; 0x24
 8015132:	2022      	movs	r0, #34	; 0x22
 8015134:	f7f8 fdf6 	bl	800dd24 <pbuf_alloc>
 8015138:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801513a:	69fb      	ldr	r3, [r7, #28]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d04c      	beq.n	80151da <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015140:	69fb      	ldr	r3, [r7, #28]
 8015142:	895b      	ldrh	r3, [r3, #10]
 8015144:	2b23      	cmp	r3, #35	; 0x23
 8015146:	d806      	bhi.n	8015156 <icmp_send_response+0x3a>
 8015148:	4b26      	ldr	r3, [pc, #152]	; (80151e4 <icmp_send_response+0xc8>)
 801514a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801514e:	4926      	ldr	r1, [pc, #152]	; (80151e8 <icmp_send_response+0xcc>)
 8015150:	4826      	ldr	r0, [pc, #152]	; (80151ec <icmp_send_response+0xd0>)
 8015152:	f002 fe29 	bl	8017da8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801515c:	69fb      	ldr	r3, [r7, #28]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	78fa      	ldrb	r2, [r7, #3]
 8015166:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015168:	697b      	ldr	r3, [r7, #20]
 801516a:	78ba      	ldrb	r2, [r7, #2]
 801516c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801516e:	697b      	ldr	r3, [r7, #20]
 8015170:	2200      	movs	r2, #0
 8015172:	711a      	strb	r2, [r3, #4]
 8015174:	2200      	movs	r2, #0
 8015176:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015178:	697b      	ldr	r3, [r7, #20]
 801517a:	2200      	movs	r2, #0
 801517c:	719a      	strb	r2, [r3, #6]
 801517e:	2200      	movs	r2, #0
 8015180:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015182:	69fb      	ldr	r3, [r7, #28]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	f103 0008 	add.w	r0, r3, #8
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	221c      	movs	r2, #28
 8015190:	4619      	mov	r1, r3
 8015192:	f001 ff5f 	bl	8017054 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015196:	69bb      	ldr	r3, [r7, #24]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801519c:	f107 030c 	add.w	r3, r7, #12
 80151a0:	4618      	mov	r0, r3
 80151a2:	f000 f825 	bl	80151f0 <ip4_route>
 80151a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d011      	beq.n	80151d2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	2200      	movs	r2, #0
 80151b2:	709a      	strb	r2, [r3, #2]
 80151b4:	2200      	movs	r2, #0
 80151b6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80151b8:	f107 020c 	add.w	r2, r7, #12
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	9302      	str	r3, [sp, #8]
 80151c0:	2301      	movs	r3, #1
 80151c2:	9301      	str	r3, [sp, #4]
 80151c4:	2300      	movs	r3, #0
 80151c6:	9300      	str	r3, [sp, #0]
 80151c8:	23ff      	movs	r3, #255	; 0xff
 80151ca:	2100      	movs	r1, #0
 80151cc:	69f8      	ldr	r0, [r7, #28]
 80151ce:	f000 f9cd 	bl	801556c <ip4_output_if>
  }
  pbuf_free(q);
 80151d2:	69f8      	ldr	r0, [r7, #28]
 80151d4:	f7f9 f88a 	bl	800e2ec <pbuf_free>
 80151d8:	e000      	b.n	80151dc <icmp_send_response+0xc0>
    return;
 80151da:	bf00      	nop
}
 80151dc:	3720      	adds	r7, #32
 80151de:	46bd      	mov	sp, r7
 80151e0:	bd80      	pop	{r7, pc}
 80151e2:	bf00      	nop
 80151e4:	080216e4 	.word	0x080216e4
 80151e8:	080217b0 	.word	0x080217b0
 80151ec:	08021754 	.word	0x08021754

080151f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80151f0:	b480      	push	{r7}
 80151f2:	b085      	sub	sp, #20
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80151f8:	4b33      	ldr	r3, [pc, #204]	; (80152c8 <ip4_route+0xd8>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	60fb      	str	r3, [r7, #12]
 80151fe:	e036      	b.n	801526e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015206:	f003 0301 	and.w	r3, r3, #1
 801520a:	b2db      	uxtb	r3, r3
 801520c:	2b00      	cmp	r3, #0
 801520e:	d02b      	beq.n	8015268 <ip4_route+0x78>
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015216:	089b      	lsrs	r3, r3, #2
 8015218:	f003 0301 	and.w	r3, r3, #1
 801521c:	b2db      	uxtb	r3, r3
 801521e:	2b00      	cmp	r3, #0
 8015220:	d022      	beq.n	8015268 <ip4_route+0x78>
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	3304      	adds	r3, #4
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d01d      	beq.n	8015268 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	3304      	adds	r3, #4
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	405a      	eors	r2, r3
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	3308      	adds	r3, #8
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	4013      	ands	r3, r2
 8015240:	2b00      	cmp	r3, #0
 8015242:	d101      	bne.n	8015248 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	e038      	b.n	80152ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801524e:	f003 0302 	and.w	r3, r3, #2
 8015252:	2b00      	cmp	r3, #0
 8015254:	d108      	bne.n	8015268 <ip4_route+0x78>
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681a      	ldr	r2, [r3, #0]
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	330c      	adds	r3, #12
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	429a      	cmp	r2, r3
 8015262:	d101      	bne.n	8015268 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	e028      	b.n	80152ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	60fb      	str	r3, [r7, #12]
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d1c5      	bne.n	8015200 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015274:	4b15      	ldr	r3, [pc, #84]	; (80152cc <ip4_route+0xdc>)
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d01a      	beq.n	80152b2 <ip4_route+0xc2>
 801527c:	4b13      	ldr	r3, [pc, #76]	; (80152cc <ip4_route+0xdc>)
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015284:	f003 0301 	and.w	r3, r3, #1
 8015288:	2b00      	cmp	r3, #0
 801528a:	d012      	beq.n	80152b2 <ip4_route+0xc2>
 801528c:	4b0f      	ldr	r3, [pc, #60]	; (80152cc <ip4_route+0xdc>)
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015294:	f003 0304 	and.w	r3, r3, #4
 8015298:	2b00      	cmp	r3, #0
 801529a:	d00a      	beq.n	80152b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801529c:	4b0b      	ldr	r3, [pc, #44]	; (80152cc <ip4_route+0xdc>)
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	3304      	adds	r3, #4
 80152a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d004      	beq.n	80152b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	2b7f      	cmp	r3, #127	; 0x7f
 80152b0:	d101      	bne.n	80152b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80152b2:	2300      	movs	r3, #0
 80152b4:	e001      	b.n	80152ba <ip4_route+0xca>
  }

  return netif_default;
 80152b6:	4b05      	ldr	r3, [pc, #20]	; (80152cc <ip4_route+0xdc>)
 80152b8:	681b      	ldr	r3, [r3, #0]
}
 80152ba:	4618      	mov	r0, r3
 80152bc:	3714      	adds	r7, #20
 80152be:	46bd      	mov	sp, r7
 80152c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c4:	4770      	bx	lr
 80152c6:	bf00      	nop
 80152c8:	20007108 	.word	0x20007108
 80152cc:	2000710c 	.word	0x2000710c

080152d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152de:	f003 0301 	and.w	r3, r3, #1
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d016      	beq.n	8015316 <ip4_input_accept+0x46>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	3304      	adds	r3, #4
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d011      	beq.n	8015316 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152f2:	4b0b      	ldr	r3, [pc, #44]	; (8015320 <ip4_input_accept+0x50>)
 80152f4:	695a      	ldr	r2, [r3, #20]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	3304      	adds	r3, #4
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d008      	beq.n	8015312 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015300:	4b07      	ldr	r3, [pc, #28]	; (8015320 <ip4_input_accept+0x50>)
 8015302:	695b      	ldr	r3, [r3, #20]
 8015304:	6879      	ldr	r1, [r7, #4]
 8015306:	4618      	mov	r0, r3
 8015308:	f000 fa08 	bl	801571c <ip4_addr_isbroadcast_u32>
 801530c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801530e:	2b00      	cmp	r3, #0
 8015310:	d001      	beq.n	8015316 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015312:	2301      	movs	r3, #1
 8015314:	e000      	b.n	8015318 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015316:	2300      	movs	r3, #0
}
 8015318:	4618      	mov	r0, r3
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	20003bd4 	.word	0x20003bd4

08015324 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b086      	sub	sp, #24
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	685b      	ldr	r3, [r3, #4]
 8015332:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	091b      	lsrs	r3, r3, #4
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b04      	cmp	r3, #4
 801533e:	d004      	beq.n	801534a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f7f8 ffd3 	bl	800e2ec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015346:	2300      	movs	r3, #0
 8015348:	e107      	b.n	801555a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	781b      	ldrb	r3, [r3, #0]
 801534e:	f003 030f 	and.w	r3, r3, #15
 8015352:	b2db      	uxtb	r3, r3
 8015354:	009b      	lsls	r3, r3, #2
 8015356:	b2db      	uxtb	r3, r3
 8015358:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	885b      	ldrh	r3, [r3, #2]
 801535e:	b29b      	uxth	r3, r3
 8015360:	4618      	mov	r0, r3
 8015362:	f7f7 fd30 	bl	800cdc6 <lwip_htons>
 8015366:	4603      	mov	r3, r0
 8015368:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	891b      	ldrh	r3, [r3, #8]
 801536e:	89ba      	ldrh	r2, [r7, #12]
 8015370:	429a      	cmp	r2, r3
 8015372:	d204      	bcs.n	801537e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015374:	89bb      	ldrh	r3, [r7, #12]
 8015376:	4619      	mov	r1, r3
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f7f8 fe31 	bl	800dfe0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	895b      	ldrh	r3, [r3, #10]
 8015382:	89fa      	ldrh	r2, [r7, #14]
 8015384:	429a      	cmp	r2, r3
 8015386:	d807      	bhi.n	8015398 <ip4_input+0x74>
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	891b      	ldrh	r3, [r3, #8]
 801538c:	89ba      	ldrh	r2, [r7, #12]
 801538e:	429a      	cmp	r2, r3
 8015390:	d802      	bhi.n	8015398 <ip4_input+0x74>
 8015392:	89fb      	ldrh	r3, [r7, #14]
 8015394:	2b13      	cmp	r3, #19
 8015396:	d804      	bhi.n	80153a2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015398:	6878      	ldr	r0, [r7, #4]
 801539a:	f7f8 ffa7 	bl	800e2ec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801539e:	2300      	movs	r3, #0
 80153a0:	e0db      	b.n	801555a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80153a2:	697b      	ldr	r3, [r7, #20]
 80153a4:	691b      	ldr	r3, [r3, #16]
 80153a6:	4a6f      	ldr	r2, [pc, #444]	; (8015564 <ip4_input+0x240>)
 80153a8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	4a6d      	ldr	r2, [pc, #436]	; (8015564 <ip4_input+0x240>)
 80153b0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153b2:	4b6c      	ldr	r3, [pc, #432]	; (8015564 <ip4_input+0x240>)
 80153b4:	695b      	ldr	r3, [r3, #20]
 80153b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153ba:	2be0      	cmp	r3, #224	; 0xe0
 80153bc:	d112      	bne.n	80153e4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80153be:	683b      	ldr	r3, [r7, #0]
 80153c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153c4:	f003 0301 	and.w	r3, r3, #1
 80153c8:	b2db      	uxtb	r3, r3
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d007      	beq.n	80153de <ip4_input+0xba>
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	3304      	adds	r3, #4
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d002      	beq.n	80153de <ip4_input+0xba>
      netif = inp;
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	613b      	str	r3, [r7, #16]
 80153dc:	e02a      	b.n	8015434 <ip4_input+0x110>
    } else {
      netif = NULL;
 80153de:	2300      	movs	r3, #0
 80153e0:	613b      	str	r3, [r7, #16]
 80153e2:	e027      	b.n	8015434 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80153e4:	6838      	ldr	r0, [r7, #0]
 80153e6:	f7ff ff73 	bl	80152d0 <ip4_input_accept>
 80153ea:	4603      	mov	r3, r0
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d002      	beq.n	80153f6 <ip4_input+0xd2>
      netif = inp;
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	613b      	str	r3, [r7, #16]
 80153f4:	e01e      	b.n	8015434 <ip4_input+0x110>
    } else {
      netif = NULL;
 80153f6:	2300      	movs	r3, #0
 80153f8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80153fa:	4b5a      	ldr	r3, [pc, #360]	; (8015564 <ip4_input+0x240>)
 80153fc:	695b      	ldr	r3, [r3, #20]
 80153fe:	b2db      	uxtb	r3, r3
 8015400:	2b7f      	cmp	r3, #127	; 0x7f
 8015402:	d017      	beq.n	8015434 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015404:	4b58      	ldr	r3, [pc, #352]	; (8015568 <ip4_input+0x244>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	613b      	str	r3, [r7, #16]
 801540a:	e00e      	b.n	801542a <ip4_input+0x106>
          if (netif == inp) {
 801540c:	693a      	ldr	r2, [r7, #16]
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	429a      	cmp	r2, r3
 8015412:	d006      	beq.n	8015422 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015414:	6938      	ldr	r0, [r7, #16]
 8015416:	f7ff ff5b 	bl	80152d0 <ip4_input_accept>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	d108      	bne.n	8015432 <ip4_input+0x10e>
 8015420:	e000      	b.n	8015424 <ip4_input+0x100>
            continue;
 8015422:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	613b      	str	r3, [r7, #16]
 801542a:	693b      	ldr	r3, [r7, #16]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d1ed      	bne.n	801540c <ip4_input+0xe8>
 8015430:	e000      	b.n	8015434 <ip4_input+0x110>
            break;
 8015432:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015434:	4b4b      	ldr	r3, [pc, #300]	; (8015564 <ip4_input+0x240>)
 8015436:	691b      	ldr	r3, [r3, #16]
 8015438:	6839      	ldr	r1, [r7, #0]
 801543a:	4618      	mov	r0, r3
 801543c:	f000 f96e 	bl	801571c <ip4_addr_isbroadcast_u32>
 8015440:	4603      	mov	r3, r0
 8015442:	2b00      	cmp	r3, #0
 8015444:	d105      	bne.n	8015452 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015446:	4b47      	ldr	r3, [pc, #284]	; (8015564 <ip4_input+0x240>)
 8015448:	691b      	ldr	r3, [r3, #16]
 801544a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801544e:	2be0      	cmp	r3, #224	; 0xe0
 8015450:	d104      	bne.n	801545c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f7f8 ff4a 	bl	800e2ec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015458:	2300      	movs	r3, #0
 801545a:	e07e      	b.n	801555a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d104      	bne.n	801546c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f7f8 ff42 	bl	800e2ec <pbuf_free>
    return ERR_OK;
 8015468:	2300      	movs	r3, #0
 801546a:	e076      	b.n	801555a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	88db      	ldrh	r3, [r3, #6]
 8015470:	b29b      	uxth	r3, r3
 8015472:	461a      	mov	r2, r3
 8015474:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015478:	4013      	ands	r3, r2
 801547a:	2b00      	cmp	r3, #0
 801547c:	d00b      	beq.n	8015496 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f000 fc92 	bl	8015da8 <ip4_reass>
 8015484:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d101      	bne.n	8015490 <ip4_input+0x16c>
      return ERR_OK;
 801548c:	2300      	movs	r3, #0
 801548e:	e064      	b.n	801555a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015496:	4a33      	ldr	r2, [pc, #204]	; (8015564 <ip4_input+0x240>)
 8015498:	693b      	ldr	r3, [r7, #16]
 801549a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801549c:	4a31      	ldr	r2, [pc, #196]	; (8015564 <ip4_input+0x240>)
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80154a2:	4a30      	ldr	r2, [pc, #192]	; (8015564 <ip4_input+0x240>)
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	f003 030f 	and.w	r3, r3, #15
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	009b      	lsls	r3, r3, #2
 80154b4:	b2db      	uxtb	r3, r3
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	4b2a      	ldr	r3, [pc, #168]	; (8015564 <ip4_input+0x240>)
 80154ba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80154bc:	89fb      	ldrh	r3, [r7, #14]
 80154be:	4619      	mov	r1, r3
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f7f8 fe8d 	bl	800e1e0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	7a5b      	ldrb	r3, [r3, #9]
 80154ca:	2b11      	cmp	r3, #17
 80154cc:	d006      	beq.n	80154dc <ip4_input+0x1b8>
 80154ce:	2b11      	cmp	r3, #17
 80154d0:	dc13      	bgt.n	80154fa <ip4_input+0x1d6>
 80154d2:	2b01      	cmp	r3, #1
 80154d4:	d00c      	beq.n	80154f0 <ip4_input+0x1cc>
 80154d6:	2b06      	cmp	r3, #6
 80154d8:	d005      	beq.n	80154e6 <ip4_input+0x1c2>
 80154da:	e00e      	b.n	80154fa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80154dc:	6839      	ldr	r1, [r7, #0]
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f7fe fc68 	bl	8013db4 <udp_input>
        break;
 80154e4:	e026      	b.n	8015534 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f7fa fd27 	bl	800ff3c <tcp_input>
        break;
 80154ee:	e021      	b.n	8015534 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80154f0:	6839      	ldr	r1, [r7, #0]
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7ff fcee 	bl	8014ed4 <icmp_input>
        break;
 80154f8:	e01c      	b.n	8015534 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80154fa:	4b1a      	ldr	r3, [pc, #104]	; (8015564 <ip4_input+0x240>)
 80154fc:	695b      	ldr	r3, [r3, #20]
 80154fe:	6939      	ldr	r1, [r7, #16]
 8015500:	4618      	mov	r0, r3
 8015502:	f000 f90b 	bl	801571c <ip4_addr_isbroadcast_u32>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d10f      	bne.n	801552c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801550c:	4b15      	ldr	r3, [pc, #84]	; (8015564 <ip4_input+0x240>)
 801550e:	695b      	ldr	r3, [r3, #20]
 8015510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015514:	2be0      	cmp	r3, #224	; 0xe0
 8015516:	d009      	beq.n	801552c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801551c:	4619      	mov	r1, r3
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7f8 fed1 	bl	800e2c6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015524:	2102      	movs	r1, #2
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f7ff fdd8 	bl	80150dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	f7f8 fedd 	bl	800e2ec <pbuf_free>
        break;
 8015532:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015534:	4b0b      	ldr	r3, [pc, #44]	; (8015564 <ip4_input+0x240>)
 8015536:	2200      	movs	r2, #0
 8015538:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801553a:	4b0a      	ldr	r3, [pc, #40]	; (8015564 <ip4_input+0x240>)
 801553c:	2200      	movs	r2, #0
 801553e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015540:	4b08      	ldr	r3, [pc, #32]	; (8015564 <ip4_input+0x240>)
 8015542:	2200      	movs	r2, #0
 8015544:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015546:	4b07      	ldr	r3, [pc, #28]	; (8015564 <ip4_input+0x240>)
 8015548:	2200      	movs	r2, #0
 801554a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801554c:	4b05      	ldr	r3, [pc, #20]	; (8015564 <ip4_input+0x240>)
 801554e:	2200      	movs	r2, #0
 8015550:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015552:	4b04      	ldr	r3, [pc, #16]	; (8015564 <ip4_input+0x240>)
 8015554:	2200      	movs	r2, #0
 8015556:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015558:	2300      	movs	r3, #0
}
 801555a:	4618      	mov	r0, r3
 801555c:	3718      	adds	r7, #24
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	20003bd4 	.word	0x20003bd4
 8015568:	20007108 	.word	0x20007108

0801556c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b08a      	sub	sp, #40	; 0x28
 8015570:	af04      	add	r7, sp, #16
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	607a      	str	r2, [r7, #4]
 8015578:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d009      	beq.n	8015598 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d003      	beq.n	8015592 <ip4_output_if+0x26>
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d102      	bne.n	8015598 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015594:	3304      	adds	r3, #4
 8015596:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015598:	78fa      	ldrb	r2, [r7, #3]
 801559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559c:	9302      	str	r3, [sp, #8]
 801559e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80155a2:	9301      	str	r3, [sp, #4]
 80155a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80155a8:	9300      	str	r3, [sp, #0]
 80155aa:	4613      	mov	r3, r2
 80155ac:	687a      	ldr	r2, [r7, #4]
 80155ae:	6979      	ldr	r1, [r7, #20]
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f000 f805 	bl	80155c0 <ip4_output_if_src>
 80155b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3718      	adds	r7, #24
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b088      	sub	sp, #32
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	60b9      	str	r1, [r7, #8]
 80155ca:	607a      	str	r2, [r7, #4]
 80155cc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	7b9b      	ldrb	r3, [r3, #14]
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	d006      	beq.n	80155e4 <ip4_output_if_src+0x24>
 80155d6:	4b4b      	ldr	r3, [pc, #300]	; (8015704 <ip4_output_if_src+0x144>)
 80155d8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80155dc:	494a      	ldr	r1, [pc, #296]	; (8015708 <ip4_output_if_src+0x148>)
 80155de:	484b      	ldr	r0, [pc, #300]	; (801570c <ip4_output_if_src+0x14c>)
 80155e0:	f002 fbe2 	bl	8017da8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d060      	beq.n	80156ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80155ea:	2314      	movs	r3, #20
 80155ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80155ee:	2114      	movs	r1, #20
 80155f0:	68f8      	ldr	r0, [r7, #12]
 80155f2:	f7f8 fde5 	bl	800e1c0 <pbuf_add_header>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d002      	beq.n	8015602 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80155fc:	f06f 0301 	mvn.w	r3, #1
 8015600:	e07c      	b.n	80156fc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	685b      	ldr	r3, [r3, #4]
 8015606:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	895b      	ldrh	r3, [r3, #10]
 801560c:	2b13      	cmp	r3, #19
 801560e:	d806      	bhi.n	801561e <ip4_output_if_src+0x5e>
 8015610:	4b3c      	ldr	r3, [pc, #240]	; (8015704 <ip4_output_if_src+0x144>)
 8015612:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015616:	493e      	ldr	r1, [pc, #248]	; (8015710 <ip4_output_if_src+0x150>)
 8015618:	483c      	ldr	r0, [pc, #240]	; (801570c <ip4_output_if_src+0x14c>)
 801561a:	f002 fbc5 	bl	8017da8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801561e:	69fb      	ldr	r3, [r7, #28]
 8015620:	78fa      	ldrb	r2, [r7, #3]
 8015622:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801562a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	681a      	ldr	r2, [r3, #0]
 8015630:	69fb      	ldr	r3, [r7, #28]
 8015632:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015634:	8b7b      	ldrh	r3, [r7, #26]
 8015636:	089b      	lsrs	r3, r3, #2
 8015638:	b29b      	uxth	r3, r3
 801563a:	b2db      	uxtb	r3, r3
 801563c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015640:	b2da      	uxtb	r2, r3
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015646:	69fb      	ldr	r3, [r7, #28]
 8015648:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801564c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	891b      	ldrh	r3, [r3, #8]
 8015652:	4618      	mov	r0, r3
 8015654:	f7f7 fbb7 	bl	800cdc6 <lwip_htons>
 8015658:	4603      	mov	r3, r0
 801565a:	461a      	mov	r2, r3
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015660:	69fb      	ldr	r3, [r7, #28]
 8015662:	2200      	movs	r2, #0
 8015664:	719a      	strb	r2, [r3, #6]
 8015666:	2200      	movs	r2, #0
 8015668:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801566a:	4b2a      	ldr	r3, [pc, #168]	; (8015714 <ip4_output_if_src+0x154>)
 801566c:	881b      	ldrh	r3, [r3, #0]
 801566e:	4618      	mov	r0, r3
 8015670:	f7f7 fba9 	bl	800cdc6 <lwip_htons>
 8015674:	4603      	mov	r3, r0
 8015676:	461a      	mov	r2, r3
 8015678:	69fb      	ldr	r3, [r7, #28]
 801567a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801567c:	4b25      	ldr	r3, [pc, #148]	; (8015714 <ip4_output_if_src+0x154>)
 801567e:	881b      	ldrh	r3, [r3, #0]
 8015680:	3301      	adds	r3, #1
 8015682:	b29a      	uxth	r2, r3
 8015684:	4b23      	ldr	r3, [pc, #140]	; (8015714 <ip4_output_if_src+0x154>)
 8015686:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d104      	bne.n	8015698 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801568e:	4b22      	ldr	r3, [pc, #136]	; (8015718 <ip4_output_if_src+0x158>)
 8015690:	681a      	ldr	r2, [r3, #0]
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	60da      	str	r2, [r3, #12]
 8015696:	e003      	b.n	80156a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	69fb      	ldr	r3, [r7, #28]
 801569e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80156a0:	69fb      	ldr	r3, [r7, #28]
 80156a2:	2200      	movs	r2, #0
 80156a4:	729a      	strb	r2, [r3, #10]
 80156a6:	2200      	movs	r2, #0
 80156a8:	72da      	strb	r2, [r3, #11]
 80156aa:	e00f      	b.n	80156cc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	895b      	ldrh	r3, [r3, #10]
 80156b0:	2b13      	cmp	r3, #19
 80156b2:	d802      	bhi.n	80156ba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80156b4:	f06f 0301 	mvn.w	r3, #1
 80156b8:	e020      	b.n	80156fc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	691b      	ldr	r3, [r3, #16]
 80156c4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80156c6:	f107 0314 	add.w	r3, r7, #20
 80156ca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80156cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d00c      	beq.n	80156ee <ip4_output_if_src+0x12e>
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	891a      	ldrh	r2, [r3, #8]
 80156d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80156dc:	429a      	cmp	r2, r3
 80156de:	d906      	bls.n	80156ee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80156e0:	687a      	ldr	r2, [r7, #4]
 80156e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80156e4:	68f8      	ldr	r0, [r7, #12]
 80156e6:	f000 fd4d 	bl	8016184 <ip4_frag>
 80156ea:	4603      	mov	r3, r0
 80156ec:	e006      	b.n	80156fc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80156ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156f0:	695b      	ldr	r3, [r3, #20]
 80156f2:	687a      	ldr	r2, [r7, #4]
 80156f4:	68f9      	ldr	r1, [r7, #12]
 80156f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156f8:	4798      	blx	r3
 80156fa:	4603      	mov	r3, r0
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3720      	adds	r7, #32
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	080217dc 	.word	0x080217dc
 8015708:	08021810 	.word	0x08021810
 801570c:	0802181c 	.word	0x0802181c
 8015710:	08021844 	.word	0x08021844
 8015714:	20000586 	.word	0x20000586
 8015718:	08021c40 	.word	0x08021c40

0801571c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801571c:	b480      	push	{r7}
 801571e:	b085      	sub	sp, #20
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015730:	d002      	beq.n	8015738 <ip4_addr_isbroadcast_u32+0x1c>
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d101      	bne.n	801573c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015738:	2301      	movs	r3, #1
 801573a:	e02a      	b.n	8015792 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015742:	f003 0302 	and.w	r3, r3, #2
 8015746:	2b00      	cmp	r3, #0
 8015748:	d101      	bne.n	801574e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801574a:	2300      	movs	r3, #0
 801574c:	e021      	b.n	8015792 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801574e:	683b      	ldr	r3, [r7, #0]
 8015750:	3304      	adds	r3, #4
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	687a      	ldr	r2, [r7, #4]
 8015756:	429a      	cmp	r2, r3
 8015758:	d101      	bne.n	801575e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801575a:	2300      	movs	r3, #0
 801575c:	e019      	b.n	8015792 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801575e:	68fa      	ldr	r2, [r7, #12]
 8015760:	683b      	ldr	r3, [r7, #0]
 8015762:	3304      	adds	r3, #4
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	405a      	eors	r2, r3
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	3308      	adds	r3, #8
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	4013      	ands	r3, r2
 8015770:	2b00      	cmp	r3, #0
 8015772:	d10d      	bne.n	8015790 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	3308      	adds	r3, #8
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	43da      	mvns	r2, r3
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	3308      	adds	r3, #8
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015788:	429a      	cmp	r2, r3
 801578a:	d101      	bne.n	8015790 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801578c:	2301      	movs	r3, #1
 801578e:	e000      	b.n	8015792 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015790:	2300      	movs	r3, #0
  }
}
 8015792:	4618      	mov	r0, r3
 8015794:	3714      	adds	r7, #20
 8015796:	46bd      	mov	sp, r7
 8015798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579c:	4770      	bx	lr
	...

080157a0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b084      	sub	sp, #16
 80157a4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80157a6:	2300      	movs	r3, #0
 80157a8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80157aa:	4b12      	ldr	r3, [pc, #72]	; (80157f4 <ip_reass_tmr+0x54>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80157b0:	e018      	b.n	80157e4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	7fdb      	ldrb	r3, [r3, #31]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d00b      	beq.n	80157d2 <ip_reass_tmr+0x32>
      r->timer--;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	7fdb      	ldrb	r3, [r3, #31]
 80157be:	3b01      	subs	r3, #1
 80157c0:	b2da      	uxtb	r2, r3
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	60fb      	str	r3, [r7, #12]
 80157d0:	e008      	b.n	80157e4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80157dc:	68b9      	ldr	r1, [r7, #8]
 80157de:	6878      	ldr	r0, [r7, #4]
 80157e0:	f000 f80a 	bl	80157f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d1e3      	bne.n	80157b2 <ip_reass_tmr+0x12>
    }
  }
}
 80157ea:	bf00      	nop
 80157ec:	bf00      	nop
 80157ee:	3710      	adds	r7, #16
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}
 80157f4:	20000588 	.word	0x20000588

080157f8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	b088      	sub	sp, #32
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
 8015800:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015802:	2300      	movs	r3, #0
 8015804:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015806:	683a      	ldr	r2, [r7, #0]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	429a      	cmp	r2, r3
 801580c:	d105      	bne.n	801581a <ip_reass_free_complete_datagram+0x22>
 801580e:	4b45      	ldr	r3, [pc, #276]	; (8015924 <ip_reass_free_complete_datagram+0x12c>)
 8015810:	22ab      	movs	r2, #171	; 0xab
 8015812:	4945      	ldr	r1, [pc, #276]	; (8015928 <ip_reass_free_complete_datagram+0x130>)
 8015814:	4845      	ldr	r0, [pc, #276]	; (801592c <ip_reass_free_complete_datagram+0x134>)
 8015816:	f002 fac7 	bl	8017da8 <iprintf>
  if (prev != NULL) {
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d00a      	beq.n	8015836 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	687a      	ldr	r2, [r7, #4]
 8015826:	429a      	cmp	r2, r3
 8015828:	d005      	beq.n	8015836 <ip_reass_free_complete_datagram+0x3e>
 801582a:	4b3e      	ldr	r3, [pc, #248]	; (8015924 <ip_reass_free_complete_datagram+0x12c>)
 801582c:	22ad      	movs	r2, #173	; 0xad
 801582e:	4940      	ldr	r1, [pc, #256]	; (8015930 <ip_reass_free_complete_datagram+0x138>)
 8015830:	483e      	ldr	r0, [pc, #248]	; (801592c <ip_reass_free_complete_datagram+0x134>)
 8015832:	f002 fab9 	bl	8017da8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	685b      	ldr	r3, [r3, #4]
 801583c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	889b      	ldrh	r3, [r3, #4]
 8015842:	b29b      	uxth	r3, r3
 8015844:	2b00      	cmp	r3, #0
 8015846:	d12a      	bne.n	801589e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015856:	69bb      	ldr	r3, [r7, #24]
 8015858:	6858      	ldr	r0, [r3, #4]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	3308      	adds	r3, #8
 801585e:	2214      	movs	r2, #20
 8015860:	4619      	mov	r1, r3
 8015862:	f001 fbf7 	bl	8017054 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015866:	2101      	movs	r1, #1
 8015868:	69b8      	ldr	r0, [r7, #24]
 801586a:	f7ff fc47 	bl	80150fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801586e:	69b8      	ldr	r0, [r7, #24]
 8015870:	f7f8 fdc4 	bl	800e3fc <pbuf_clen>
 8015874:	4603      	mov	r3, r0
 8015876:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015878:	8bfa      	ldrh	r2, [r7, #30]
 801587a:	8a7b      	ldrh	r3, [r7, #18]
 801587c:	4413      	add	r3, r2
 801587e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015882:	db05      	blt.n	8015890 <ip_reass_free_complete_datagram+0x98>
 8015884:	4b27      	ldr	r3, [pc, #156]	; (8015924 <ip_reass_free_complete_datagram+0x12c>)
 8015886:	22bc      	movs	r2, #188	; 0xbc
 8015888:	492a      	ldr	r1, [pc, #168]	; (8015934 <ip_reass_free_complete_datagram+0x13c>)
 801588a:	4828      	ldr	r0, [pc, #160]	; (801592c <ip_reass_free_complete_datagram+0x134>)
 801588c:	f002 fa8c 	bl	8017da8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015890:	8bfa      	ldrh	r2, [r7, #30]
 8015892:	8a7b      	ldrh	r3, [r7, #18]
 8015894:	4413      	add	r3, r2
 8015896:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015898:	69b8      	ldr	r0, [r7, #24]
 801589a:	f7f8 fd27 	bl	800e2ec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80158a4:	e01f      	b.n	80158e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80158a6:	69bb      	ldr	r3, [r7, #24]
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80158ac:	69bb      	ldr	r3, [r7, #24]
 80158ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80158b6:	68f8      	ldr	r0, [r7, #12]
 80158b8:	f7f8 fda0 	bl	800e3fc <pbuf_clen>
 80158bc:	4603      	mov	r3, r0
 80158be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80158c0:	8bfa      	ldrh	r2, [r7, #30]
 80158c2:	8a7b      	ldrh	r3, [r7, #18]
 80158c4:	4413      	add	r3, r2
 80158c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80158ca:	db05      	blt.n	80158d8 <ip_reass_free_complete_datagram+0xe0>
 80158cc:	4b15      	ldr	r3, [pc, #84]	; (8015924 <ip_reass_free_complete_datagram+0x12c>)
 80158ce:	22cc      	movs	r2, #204	; 0xcc
 80158d0:	4918      	ldr	r1, [pc, #96]	; (8015934 <ip_reass_free_complete_datagram+0x13c>)
 80158d2:	4816      	ldr	r0, [pc, #88]	; (801592c <ip_reass_free_complete_datagram+0x134>)
 80158d4:	f002 fa68 	bl	8017da8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80158d8:	8bfa      	ldrh	r2, [r7, #30]
 80158da:	8a7b      	ldrh	r3, [r7, #18]
 80158dc:	4413      	add	r3, r2
 80158de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80158e0:	68f8      	ldr	r0, [r7, #12]
 80158e2:	f7f8 fd03 	bl	800e2ec <pbuf_free>
  while (p != NULL) {
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d1dc      	bne.n	80158a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80158ec:	6839      	ldr	r1, [r7, #0]
 80158ee:	6878      	ldr	r0, [r7, #4]
 80158f0:	f000 f8c2 	bl	8015a78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80158f4:	4b10      	ldr	r3, [pc, #64]	; (8015938 <ip_reass_free_complete_datagram+0x140>)
 80158f6:	881b      	ldrh	r3, [r3, #0]
 80158f8:	8bfa      	ldrh	r2, [r7, #30]
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d905      	bls.n	801590a <ip_reass_free_complete_datagram+0x112>
 80158fe:	4b09      	ldr	r3, [pc, #36]	; (8015924 <ip_reass_free_complete_datagram+0x12c>)
 8015900:	22d2      	movs	r2, #210	; 0xd2
 8015902:	490e      	ldr	r1, [pc, #56]	; (801593c <ip_reass_free_complete_datagram+0x144>)
 8015904:	4809      	ldr	r0, [pc, #36]	; (801592c <ip_reass_free_complete_datagram+0x134>)
 8015906:	f002 fa4f 	bl	8017da8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801590a:	4b0b      	ldr	r3, [pc, #44]	; (8015938 <ip_reass_free_complete_datagram+0x140>)
 801590c:	881a      	ldrh	r2, [r3, #0]
 801590e:	8bfb      	ldrh	r3, [r7, #30]
 8015910:	1ad3      	subs	r3, r2, r3
 8015912:	b29a      	uxth	r2, r3
 8015914:	4b08      	ldr	r3, [pc, #32]	; (8015938 <ip_reass_free_complete_datagram+0x140>)
 8015916:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015918:	8bfb      	ldrh	r3, [r7, #30]
}
 801591a:	4618      	mov	r0, r3
 801591c:	3720      	adds	r7, #32
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	08021874 	.word	0x08021874
 8015928:	080218b0 	.word	0x080218b0
 801592c:	080218bc 	.word	0x080218bc
 8015930:	080218e4 	.word	0x080218e4
 8015934:	080218f8 	.word	0x080218f8
 8015938:	2000058c 	.word	0x2000058c
 801593c:	08021918 	.word	0x08021918

08015940 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b08a      	sub	sp, #40	; 0x28
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
 8015948:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801594a:	2300      	movs	r3, #0
 801594c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801594e:	2300      	movs	r3, #0
 8015950:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015952:	2300      	movs	r3, #0
 8015954:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015956:	2300      	movs	r3, #0
 8015958:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801595a:	2300      	movs	r3, #0
 801595c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801595e:	4b28      	ldr	r3, [pc, #160]	; (8015a00 <ip_reass_remove_oldest_datagram+0xc0>)
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015964:	e030      	b.n	80159c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015968:	695a      	ldr	r2, [r3, #20]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	68db      	ldr	r3, [r3, #12]
 801596e:	429a      	cmp	r2, r3
 8015970:	d10c      	bne.n	801598c <ip_reass_remove_oldest_datagram+0x4c>
 8015972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015974:	699a      	ldr	r2, [r3, #24]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	691b      	ldr	r3, [r3, #16]
 801597a:	429a      	cmp	r2, r3
 801597c:	d106      	bne.n	801598c <ip_reass_remove_oldest_datagram+0x4c>
 801597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015980:	899a      	ldrh	r2, [r3, #12]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	889b      	ldrh	r3, [r3, #4]
 8015986:	b29b      	uxth	r3, r3
 8015988:	429a      	cmp	r2, r3
 801598a:	d014      	beq.n	80159b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	3301      	adds	r3, #1
 8015990:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015992:	6a3b      	ldr	r3, [r7, #32]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d104      	bne.n	80159a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801599a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	61bb      	str	r3, [r7, #24]
 80159a0:	e009      	b.n	80159b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80159a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a4:	7fda      	ldrb	r2, [r3, #31]
 80159a6:	6a3b      	ldr	r3, [r7, #32]
 80159a8:	7fdb      	ldrb	r3, [r3, #31]
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d803      	bhi.n	80159b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80159ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80159b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d001      	beq.n	80159c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80159be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80159c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80159c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d1cb      	bne.n	8015966 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80159ce:	6a3b      	ldr	r3, [r7, #32]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d008      	beq.n	80159e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80159d4:	69b9      	ldr	r1, [r7, #24]
 80159d6:	6a38      	ldr	r0, [r7, #32]
 80159d8:	f7ff ff0e 	bl	80157f8 <ip_reass_free_complete_datagram>
 80159dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80159de:	697a      	ldr	r2, [r7, #20]
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	4413      	add	r3, r2
 80159e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80159e6:	697a      	ldr	r2, [r7, #20]
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	429a      	cmp	r2, r3
 80159ec:	da02      	bge.n	80159f4 <ip_reass_remove_oldest_datagram+0xb4>
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	2b01      	cmp	r3, #1
 80159f2:	dcac      	bgt.n	801594e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80159f4:	697b      	ldr	r3, [r7, #20]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3728      	adds	r7, #40	; 0x28
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	20000588 	.word	0x20000588

08015a04 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b084      	sub	sp, #16
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a0e:	2004      	movs	r0, #4
 8015a10:	f7f7 fe2e 	bl	800d670 <memp_malloc>
 8015a14:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d110      	bne.n	8015a3e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015a1c:	6839      	ldr	r1, [r7, #0]
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f7ff ff8e 	bl	8015940 <ip_reass_remove_oldest_datagram>
 8015a24:	4602      	mov	r2, r0
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	dc03      	bgt.n	8015a34 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a2c:	2004      	movs	r0, #4
 8015a2e:	f7f7 fe1f 	bl	800d670 <memp_malloc>
 8015a32:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d101      	bne.n	8015a3e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	e016      	b.n	8015a6c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015a3e:	2220      	movs	r2, #32
 8015a40:	2100      	movs	r1, #0
 8015a42:	68f8      	ldr	r0, [r7, #12]
 8015a44:	f001 fb2e 	bl	80170a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	220f      	movs	r2, #15
 8015a4c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015a4e:	4b09      	ldr	r3, [pc, #36]	; (8015a74 <ip_reass_enqueue_new_datagram+0x70>)
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015a56:	4a07      	ldr	r2, [pc, #28]	; (8015a74 <ip_reass_enqueue_new_datagram+0x70>)
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	3308      	adds	r3, #8
 8015a60:	2214      	movs	r2, #20
 8015a62:	6879      	ldr	r1, [r7, #4]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f001 faf5 	bl	8017054 <memcpy>
  return ipr;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3710      	adds	r7, #16
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	20000588 	.word	0x20000588

08015a78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
 8015a80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015a82:	4b10      	ldr	r3, [pc, #64]	; (8015ac4 <ip_reass_dequeue_datagram+0x4c>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	d104      	bne.n	8015a96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	4a0c      	ldr	r2, [pc, #48]	; (8015ac4 <ip_reass_dequeue_datagram+0x4c>)
 8015a92:	6013      	str	r3, [r2, #0]
 8015a94:	e00d      	b.n	8015ab2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d106      	bne.n	8015aaa <ip_reass_dequeue_datagram+0x32>
 8015a9c:	4b0a      	ldr	r3, [pc, #40]	; (8015ac8 <ip_reass_dequeue_datagram+0x50>)
 8015a9e:	f240 1245 	movw	r2, #325	; 0x145
 8015aa2:	490a      	ldr	r1, [pc, #40]	; (8015acc <ip_reass_dequeue_datagram+0x54>)
 8015aa4:	480a      	ldr	r0, [pc, #40]	; (8015ad0 <ip_reass_dequeue_datagram+0x58>)
 8015aa6:	f002 f97f 	bl	8017da8 <iprintf>
    prev->next = ipr->next;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681a      	ldr	r2, [r3, #0]
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015ab2:	6879      	ldr	r1, [r7, #4]
 8015ab4:	2004      	movs	r0, #4
 8015ab6:	f7f7 fe27 	bl	800d708 <memp_free>
}
 8015aba:	bf00      	nop
 8015abc:	3708      	adds	r7, #8
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}
 8015ac2:	bf00      	nop
 8015ac4:	20000588 	.word	0x20000588
 8015ac8:	08021874 	.word	0x08021874
 8015acc:	0802193c 	.word	0x0802193c
 8015ad0:	080218bc 	.word	0x080218bc

08015ad4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b08c      	sub	sp, #48	; 0x30
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015aee:	69fb      	ldr	r3, [r7, #28]
 8015af0:	885b      	ldrh	r3, [r3, #2]
 8015af2:	b29b      	uxth	r3, r3
 8015af4:	4618      	mov	r0, r3
 8015af6:	f7f7 f966 	bl	800cdc6 <lwip_htons>
 8015afa:	4603      	mov	r3, r0
 8015afc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	781b      	ldrb	r3, [r3, #0]
 8015b02:	f003 030f 	and.w	r3, r3, #15
 8015b06:	b2db      	uxtb	r3, r3
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015b0c:	7e7b      	ldrb	r3, [r7, #25]
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	8b7a      	ldrh	r2, [r7, #26]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d202      	bcs.n	8015b1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b16:	f04f 33ff 	mov.w	r3, #4294967295
 8015b1a:	e135      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015b1c:	7e7b      	ldrb	r3, [r7, #25]
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	8b7a      	ldrh	r2, [r7, #26]
 8015b22:	1ad3      	subs	r3, r2, r3
 8015b24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015b26:	69fb      	ldr	r3, [r7, #28]
 8015b28:	88db      	ldrh	r3, [r3, #6]
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7f7 f94a 	bl	800cdc6 <lwip_htons>
 8015b32:	4603      	mov	r3, r0
 8015b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	00db      	lsls	r3, r3, #3
 8015b3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015b3e:	68bb      	ldr	r3, [r7, #8]
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b46:	2200      	movs	r2, #0
 8015b48:	701a      	strb	r2, [r3, #0]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	705a      	strb	r2, [r3, #1]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	709a      	strb	r2, [r3, #2]
 8015b52:	2200      	movs	r2, #0
 8015b54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b58:	8afa      	ldrh	r2, [r7, #22]
 8015b5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015b5c:	8afa      	ldrh	r2, [r7, #22]
 8015b5e:	8b7b      	ldrh	r3, [r7, #26]
 8015b60:	4413      	add	r3, r2
 8015b62:	b29a      	uxth	r2, r3
 8015b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6a:	88db      	ldrh	r3, [r3, #6]
 8015b6c:	b29b      	uxth	r3, r3
 8015b6e:	8afa      	ldrh	r2, [r7, #22]
 8015b70:	429a      	cmp	r2, r3
 8015b72:	d902      	bls.n	8015b7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b74:	f04f 33ff 	mov.w	r3, #4294967295
 8015b78:	e106      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	685b      	ldr	r3, [r3, #4]
 8015b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8015b80:	e068      	b.n	8015c54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b84:	685b      	ldr	r3, [r3, #4]
 8015b86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8a:	889b      	ldrh	r3, [r3, #4]
 8015b8c:	b29a      	uxth	r2, r3
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	889b      	ldrh	r3, [r3, #4]
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d235      	bcs.n	8015c04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d020      	beq.n	8015be6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba6:	889b      	ldrh	r3, [r3, #4]
 8015ba8:	b29a      	uxth	r2, r3
 8015baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bac:	88db      	ldrh	r3, [r3, #6]
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d307      	bcc.n	8015bc4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb6:	88db      	ldrh	r3, [r3, #6]
 8015bb8:	b29a      	uxth	r2, r3
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	889b      	ldrh	r3, [r3, #4]
 8015bbe:	b29b      	uxth	r3, r3
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d902      	bls.n	8015bca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc8:	e0de      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bcc:	68ba      	ldr	r2, [r7, #8]
 8015bce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bd2:	88db      	ldrh	r3, [r3, #6]
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd8:	889b      	ldrh	r3, [r3, #4]
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d03d      	beq.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015be0:	2300      	movs	r3, #0
 8015be2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015be4:	e03a      	b.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be8:	88db      	ldrh	r3, [r3, #6]
 8015bea:	b29a      	uxth	r2, r3
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	889b      	ldrh	r3, [r3, #4]
 8015bf0:	b29b      	uxth	r3, r3
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d902      	bls.n	8015bfc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8015bfa:	e0c5      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	68ba      	ldr	r2, [r7, #8]
 8015c00:	605a      	str	r2, [r3, #4]
      break;
 8015c02:	e02b      	b.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c06:	889b      	ldrh	r3, [r3, #4]
 8015c08:	b29a      	uxth	r2, r3
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	889b      	ldrh	r3, [r3, #4]
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d102      	bne.n	8015c1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c14:	f04f 33ff 	mov.w	r3, #4294967295
 8015c18:	e0b6      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1c:	889b      	ldrh	r3, [r3, #4]
 8015c1e:	b29a      	uxth	r2, r3
 8015c20:	693b      	ldr	r3, [r7, #16]
 8015c22:	88db      	ldrh	r3, [r3, #6]
 8015c24:	b29b      	uxth	r3, r3
 8015c26:	429a      	cmp	r2, r3
 8015c28:	d202      	bcs.n	8015c30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c2e:	e0ab      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d009      	beq.n	8015c4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c38:	88db      	ldrh	r3, [r3, #6]
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	889b      	ldrh	r3, [r3, #4]
 8015c40:	b29b      	uxth	r3, r3
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d001      	beq.n	8015c4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015c46:	2300      	movs	r3, #0
 8015c48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d193      	bne.n	8015b82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015c5a:	e000      	b.n	8015c5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015c5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d12d      	bne.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d01c      	beq.n	8015ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c6c:	88db      	ldrh	r3, [r3, #6]
 8015c6e:	b29a      	uxth	r2, r3
 8015c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c72:	889b      	ldrh	r3, [r3, #4]
 8015c74:	b29b      	uxth	r3, r3
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d906      	bls.n	8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015c7a:	4b45      	ldr	r3, [pc, #276]	; (8015d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c7c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015c80:	4944      	ldr	r1, [pc, #272]	; (8015d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015c82:	4845      	ldr	r0, [pc, #276]	; (8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c84:	f002 f890 	bl	8017da8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8a:	68ba      	ldr	r2, [r7, #8]
 8015c8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c90:	88db      	ldrh	r3, [r3, #6]
 8015c92:	b29a      	uxth	r2, r3
 8015c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c96:	889b      	ldrh	r3, [r3, #4]
 8015c98:	b29b      	uxth	r3, r3
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	d010      	beq.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	623b      	str	r3, [r7, #32]
 8015ca2:	e00d      	b.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d006      	beq.n	8015cba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015cac:	4b38      	ldr	r3, [pc, #224]	; (8015d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015cb2:	493a      	ldr	r1, [pc, #232]	; (8015d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015cb4:	4838      	ldr	r0, [pc, #224]	; (8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cb6:	f002 f877 	bl	8017da8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	68ba      	ldr	r2, [r7, #8]
 8015cbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d105      	bne.n	8015cd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	7f9b      	ldrb	r3, [r3, #30]
 8015cca:	f003 0301 	and.w	r3, r3, #1
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d059      	beq.n	8015d86 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015cd2:	6a3b      	ldr	r3, [r7, #32]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d04f      	beq.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d006      	beq.n	8015cee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	685b      	ldr	r3, [r3, #4]
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	889b      	ldrh	r3, [r3, #4]
 8015ce8:	b29b      	uxth	r3, r3
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d002      	beq.n	8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	623b      	str	r3, [r7, #32]
 8015cf2:	e041      	b.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015cfe:	e012      	b.n	8015d26 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d08:	88db      	ldrh	r3, [r3, #6]
 8015d0a:	b29a      	uxth	r2, r3
 8015d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0e:	889b      	ldrh	r3, [r3, #4]
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	429a      	cmp	r2, r3
 8015d14:	d002      	beq.n	8015d1c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015d16:	2300      	movs	r3, #0
 8015d18:	623b      	str	r3, [r7, #32]
            break;
 8015d1a:	e007      	b.n	8015d2c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d1e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d1e9      	bne.n	8015d00 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015d2c:	6a3b      	ldr	r3, [r7, #32]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d022      	beq.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d106      	bne.n	8015d48 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015d3a:	4b15      	ldr	r3, [pc, #84]	; (8015d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d3c:	f240 12df 	movw	r2, #479	; 0x1df
 8015d40:	4917      	ldr	r1, [pc, #92]	; (8015da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015d42:	4815      	ldr	r0, [pc, #84]	; (8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d44:	f002 f830 	bl	8017da8 <iprintf>
          LWIP_ASSERT("sanity check",
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d50:	429a      	cmp	r2, r3
 8015d52:	d106      	bne.n	8015d62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015d54:	4b0e      	ldr	r3, [pc, #56]	; (8015d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015d5a:	4911      	ldr	r1, [pc, #68]	; (8015da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015d5c:	480e      	ldr	r0, [pc, #56]	; (8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d5e:	f002 f823 	bl	8017da8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d006      	beq.n	8015d78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015d6a:	4b09      	ldr	r3, [pc, #36]	; (8015d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d6c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015d70:	490c      	ldr	r1, [pc, #48]	; (8015da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015d72:	4809      	ldr	r0, [pc, #36]	; (8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d74:	f002 f818 	bl	8017da8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015d78:	6a3b      	ldr	r3, [r7, #32]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	bf14      	ite	ne
 8015d7e:	2301      	movne	r3, #1
 8015d80:	2300      	moveq	r3, #0
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	e000      	b.n	8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015d86:	2300      	movs	r3, #0
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3730      	adds	r7, #48	; 0x30
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}
 8015d90:	08021874 	.word	0x08021874
 8015d94:	08021958 	.word	0x08021958
 8015d98:	080218bc 	.word	0x080218bc
 8015d9c:	08021978 	.word	0x08021978
 8015da0:	080219b0 	.word	0x080219b0
 8015da4:	080219c0 	.word	0x080219c0

08015da8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b08e      	sub	sp, #56	; 0x38
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db8:	781b      	ldrb	r3, [r3, #0]
 8015dba:	f003 030f 	and.w	r3, r3, #15
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	009b      	lsls	r3, r3, #2
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	2b14      	cmp	r3, #20
 8015dc6:	f040 8167 	bne.w	8016098 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dcc:	88db      	ldrh	r3, [r3, #6]
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7f6 fff8 	bl	800cdc6 <lwip_htons>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	00db      	lsls	r3, r3, #3
 8015de0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de4:	885b      	ldrh	r3, [r3, #2]
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7f6 ffec 	bl	800cdc6 <lwip_htons>
 8015dee:	4603      	mov	r3, r0
 8015df0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	f003 030f 	and.w	r3, r3, #15
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	009b      	lsls	r3, r3, #2
 8015dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e06:	b29b      	uxth	r3, r3
 8015e08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e0a:	429a      	cmp	r2, r3
 8015e0c:	f0c0 8146 	bcc.w	801609c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015e10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7f8 faed 	bl	800e3fc <pbuf_clen>
 8015e22:	4603      	mov	r3, r0
 8015e24:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015e26:	4b9f      	ldr	r3, [pc, #636]	; (80160a4 <ip4_reass+0x2fc>)
 8015e28:	881b      	ldrh	r3, [r3, #0]
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	8c3b      	ldrh	r3, [r7, #32]
 8015e2e:	4413      	add	r3, r2
 8015e30:	2b0a      	cmp	r3, #10
 8015e32:	dd10      	ble.n	8015e56 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015e34:	8c3b      	ldrh	r3, [r7, #32]
 8015e36:	4619      	mov	r1, r3
 8015e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e3a:	f7ff fd81 	bl	8015940 <ip_reass_remove_oldest_datagram>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	f000 812d 	beq.w	80160a0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015e46:	4b97      	ldr	r3, [pc, #604]	; (80160a4 <ip4_reass+0x2fc>)
 8015e48:	881b      	ldrh	r3, [r3, #0]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	8c3b      	ldrh	r3, [r7, #32]
 8015e4e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015e50:	2b0a      	cmp	r3, #10
 8015e52:	f300 8125 	bgt.w	80160a0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015e56:	4b94      	ldr	r3, [pc, #592]	; (80160a8 <ip4_reass+0x300>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8015e5c:	e015      	b.n	8015e8a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e60:	695a      	ldr	r2, [r3, #20]
 8015e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e64:	68db      	ldr	r3, [r3, #12]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d10c      	bne.n	8015e84 <ip4_reass+0xdc>
 8015e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6c:	699a      	ldr	r2, [r3, #24]
 8015e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e70:	691b      	ldr	r3, [r3, #16]
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d106      	bne.n	8015e84 <ip4_reass+0xdc>
 8015e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e78:	899a      	ldrh	r2, [r3, #12]
 8015e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e7c:	889b      	ldrh	r3, [r3, #4]
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d006      	beq.n	8015e92 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	633b      	str	r3, [r7, #48]	; 0x30
 8015e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d1e6      	bne.n	8015e5e <ip4_reass+0xb6>
 8015e90:	e000      	b.n	8015e94 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015e92:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d109      	bne.n	8015eae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015e9a:	8c3b      	ldrh	r3, [r7, #32]
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ea0:	f7ff fdb0 	bl	8015a04 <ip_reass_enqueue_new_datagram>
 8015ea4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d11c      	bne.n	8015ee6 <ip4_reass+0x13e>
      goto nullreturn;
 8015eac:	e109      	b.n	80160c2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb0:	88db      	ldrh	r3, [r3, #6]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7f6 ff86 	bl	800cdc6 <lwip_htons>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d110      	bne.n	8015ee6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec6:	89db      	ldrh	r3, [r3, #14]
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7f6 ff7c 	bl	800cdc6 <lwip_htons>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d006      	beq.n	8015ee6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eda:	3308      	adds	r3, #8
 8015edc:	2214      	movs	r2, #20
 8015ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f001 f8b7 	bl	8017054 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee8:	88db      	ldrh	r3, [r3, #6]
 8015eea:	b29b      	uxth	r3, r3
 8015eec:	f003 0320 	and.w	r3, r3, #32
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	bf0c      	ite	eq
 8015ef4:	2301      	moveq	r3, #1
 8015ef6:	2300      	movne	r3, #0
 8015ef8:	b2db      	uxtb	r3, r3
 8015efa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015efc:	69fb      	ldr	r3, [r7, #28]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d00e      	beq.n	8015f20 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f06:	4413      	add	r3, r2
 8015f08:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015f0a:	8b7a      	ldrh	r2, [r7, #26]
 8015f0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	f0c0 80a0 	bcc.w	8016054 <ip4_reass+0x2ac>
 8015f14:	8b7b      	ldrh	r3, [r7, #26]
 8015f16:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015f1a:	4293      	cmp	r3, r2
 8015f1c:	f200 809a 	bhi.w	8016054 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015f20:	69fa      	ldr	r2, [r7, #28]
 8015f22:	6879      	ldr	r1, [r7, #4]
 8015f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f26:	f7ff fdd5 	bl	8015ad4 <ip_reass_chain_frag_into_datagram_and_validate>
 8015f2a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f32:	f000 8091 	beq.w	8016058 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015f36:	4b5b      	ldr	r3, [pc, #364]	; (80160a4 <ip4_reass+0x2fc>)
 8015f38:	881a      	ldrh	r2, [r3, #0]
 8015f3a:	8c3b      	ldrh	r3, [r7, #32]
 8015f3c:	4413      	add	r3, r2
 8015f3e:	b29a      	uxth	r2, r3
 8015f40:	4b58      	ldr	r3, [pc, #352]	; (80160a4 <ip4_reass+0x2fc>)
 8015f42:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015f44:	69fb      	ldr	r3, [r7, #28]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d00d      	beq.n	8015f66 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f4e:	4413      	add	r3, r2
 8015f50:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f54:	8a7a      	ldrh	r2, [r7, #18]
 8015f56:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f5a:	7f9b      	ldrb	r3, [r3, #30]
 8015f5c:	f043 0301 	orr.w	r3, r3, #1
 8015f60:	b2da      	uxtb	r2, r3
 8015f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f64:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	2b01      	cmp	r3, #1
 8015f6a:	d171      	bne.n	8016050 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f6e:	8b9b      	ldrh	r3, [r3, #28]
 8015f70:	3314      	adds	r3, #20
 8015f72:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	685b      	ldr	r3, [r3, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f88:	3308      	adds	r3, #8
 8015f8a:	2214      	movs	r2, #20
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f90:	f001 f860 	bl	8017054 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015f94:	8a3b      	ldrh	r3, [r7, #16]
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7f6 ff15 	bl	800cdc6 <lwip_htons>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	719a      	strb	r2, [r3, #6]
 8015faa:	2200      	movs	r2, #0
 8015fac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	729a      	strb	r2, [r3, #10]
 8015fb4:	2200      	movs	r2, #0
 8015fb6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fba:	685b      	ldr	r3, [r3, #4]
 8015fbc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015fbe:	e00d      	b.n	8015fdc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015fc6:	2114      	movs	r1, #20
 8015fc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015fca:	f7f8 f909 	bl	800e1e0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015fce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7f8 fa4d 	bl	800e470 <pbuf_cat>
      r = iprh->next_pbuf;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d1ee      	bne.n	8015fc0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015fe2:	4b31      	ldr	r3, [pc, #196]	; (80160a8 <ip4_reass+0x300>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fe8:	429a      	cmp	r2, r3
 8015fea:	d102      	bne.n	8015ff2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015fec:	2300      	movs	r3, #0
 8015fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ff0:	e010      	b.n	8016014 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ff2:	4b2d      	ldr	r3, [pc, #180]	; (80160a8 <ip4_reass+0x300>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ff8:	e007      	b.n	801600a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016000:	429a      	cmp	r2, r3
 8016002:	d006      	beq.n	8016012 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	62fb      	str	r3, [r7, #44]	; 0x2c
 801600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801600c:	2b00      	cmp	r3, #0
 801600e:	d1f4      	bne.n	8015ffa <ip4_reass+0x252>
 8016010:	e000      	b.n	8016014 <ip4_reass+0x26c>
          break;
 8016012:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016016:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016018:	f7ff fd2e 	bl	8015a78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f7f8 f9ed 	bl	800e3fc <pbuf_clen>
 8016022:	4603      	mov	r3, r0
 8016024:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016026:	4b1f      	ldr	r3, [pc, #124]	; (80160a4 <ip4_reass+0x2fc>)
 8016028:	881b      	ldrh	r3, [r3, #0]
 801602a:	8c3a      	ldrh	r2, [r7, #32]
 801602c:	429a      	cmp	r2, r3
 801602e:	d906      	bls.n	801603e <ip4_reass+0x296>
 8016030:	4b1e      	ldr	r3, [pc, #120]	; (80160ac <ip4_reass+0x304>)
 8016032:	f240 229b 	movw	r2, #667	; 0x29b
 8016036:	491e      	ldr	r1, [pc, #120]	; (80160b0 <ip4_reass+0x308>)
 8016038:	481e      	ldr	r0, [pc, #120]	; (80160b4 <ip4_reass+0x30c>)
 801603a:	f001 feb5 	bl	8017da8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801603e:	4b19      	ldr	r3, [pc, #100]	; (80160a4 <ip4_reass+0x2fc>)
 8016040:	881a      	ldrh	r2, [r3, #0]
 8016042:	8c3b      	ldrh	r3, [r7, #32]
 8016044:	1ad3      	subs	r3, r2, r3
 8016046:	b29a      	uxth	r2, r3
 8016048:	4b16      	ldr	r3, [pc, #88]	; (80160a4 <ip4_reass+0x2fc>)
 801604a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	e03c      	b.n	80160ca <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016050:	2300      	movs	r3, #0
 8016052:	e03a      	b.n	80160ca <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016054:	bf00      	nop
 8016056:	e000      	b.n	801605a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016058:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605c:	2b00      	cmp	r3, #0
 801605e:	d106      	bne.n	801606e <ip4_reass+0x2c6>
 8016060:	4b12      	ldr	r3, [pc, #72]	; (80160ac <ip4_reass+0x304>)
 8016062:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016066:	4914      	ldr	r1, [pc, #80]	; (80160b8 <ip4_reass+0x310>)
 8016068:	4812      	ldr	r0, [pc, #72]	; (80160b4 <ip4_reass+0x30c>)
 801606a:	f001 fe9d 	bl	8017da8 <iprintf>
  if (ipr->p == NULL) {
 801606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d124      	bne.n	80160c0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016076:	4b0c      	ldr	r3, [pc, #48]	; (80160a8 <ip4_reass+0x300>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801607c:	429a      	cmp	r2, r3
 801607e:	d006      	beq.n	801608e <ip4_reass+0x2e6>
 8016080:	4b0a      	ldr	r3, [pc, #40]	; (80160ac <ip4_reass+0x304>)
 8016082:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016086:	490d      	ldr	r1, [pc, #52]	; (80160bc <ip4_reass+0x314>)
 8016088:	480a      	ldr	r0, [pc, #40]	; (80160b4 <ip4_reass+0x30c>)
 801608a:	f001 fe8d 	bl	8017da8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801608e:	2100      	movs	r1, #0
 8016090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016092:	f7ff fcf1 	bl	8015a78 <ip_reass_dequeue_datagram>
 8016096:	e014      	b.n	80160c2 <ip4_reass+0x31a>
    goto nullreturn;
 8016098:	bf00      	nop
 801609a:	e012      	b.n	80160c2 <ip4_reass+0x31a>
    goto nullreturn;
 801609c:	bf00      	nop
 801609e:	e010      	b.n	80160c2 <ip4_reass+0x31a>
      goto nullreturn;
 80160a0:	bf00      	nop
 80160a2:	e00e      	b.n	80160c2 <ip4_reass+0x31a>
 80160a4:	2000058c 	.word	0x2000058c
 80160a8:	20000588 	.word	0x20000588
 80160ac:	08021874 	.word	0x08021874
 80160b0:	080219e4 	.word	0x080219e4
 80160b4:	080218bc 	.word	0x080218bc
 80160b8:	08021a00 	.word	0x08021a00
 80160bc:	08021a0c 	.word	0x08021a0c
  }

nullreturn:
 80160c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f7f8 f912 	bl	800e2ec <pbuf_free>
  return NULL;
 80160c8:	2300      	movs	r3, #0
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	3738      	adds	r7, #56	; 0x38
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	bf00      	nop

080160d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80160d8:	2005      	movs	r0, #5
 80160da:	f7f7 fac9 	bl	800d670 <memp_malloc>
 80160de:	4603      	mov	r3, r0
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	bd80      	pop	{r7, pc}

080160e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d106      	bne.n	8016100 <ip_frag_free_pbuf_custom_ref+0x1c>
 80160f2:	4b07      	ldr	r3, [pc, #28]	; (8016110 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80160f4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80160f8:	4906      	ldr	r1, [pc, #24]	; (8016114 <ip_frag_free_pbuf_custom_ref+0x30>)
 80160fa:	4807      	ldr	r0, [pc, #28]	; (8016118 <ip_frag_free_pbuf_custom_ref+0x34>)
 80160fc:	f001 fe54 	bl	8017da8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016100:	6879      	ldr	r1, [r7, #4]
 8016102:	2005      	movs	r0, #5
 8016104:	f7f7 fb00 	bl	800d708 <memp_free>
}
 8016108:	bf00      	nop
 801610a:	3708      	adds	r7, #8
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}
 8016110:	08021874 	.word	0x08021874
 8016114:	08021a2c 	.word	0x08021a2c
 8016118:	080218bc 	.word	0x080218bc

0801611c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b084      	sub	sp, #16
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d106      	bne.n	801613c <ipfrag_free_pbuf_custom+0x20>
 801612e:	4b11      	ldr	r3, [pc, #68]	; (8016174 <ipfrag_free_pbuf_custom+0x58>)
 8016130:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016134:	4910      	ldr	r1, [pc, #64]	; (8016178 <ipfrag_free_pbuf_custom+0x5c>)
 8016136:	4811      	ldr	r0, [pc, #68]	; (801617c <ipfrag_free_pbuf_custom+0x60>)
 8016138:	f001 fe36 	bl	8017da8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801613c:	68fa      	ldr	r2, [r7, #12]
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	429a      	cmp	r2, r3
 8016142:	d006      	beq.n	8016152 <ipfrag_free_pbuf_custom+0x36>
 8016144:	4b0b      	ldr	r3, [pc, #44]	; (8016174 <ipfrag_free_pbuf_custom+0x58>)
 8016146:	f240 22cf 	movw	r2, #719	; 0x2cf
 801614a:	490d      	ldr	r1, [pc, #52]	; (8016180 <ipfrag_free_pbuf_custom+0x64>)
 801614c:	480b      	ldr	r0, [pc, #44]	; (801617c <ipfrag_free_pbuf_custom+0x60>)
 801614e:	f001 fe2b 	bl	8017da8 <iprintf>
  if (pcr->original != NULL) {
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	695b      	ldr	r3, [r3, #20]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d004      	beq.n	8016164 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	695b      	ldr	r3, [r3, #20]
 801615e:	4618      	mov	r0, r3
 8016160:	f7f8 f8c4 	bl	800e2ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016164:	68f8      	ldr	r0, [r7, #12]
 8016166:	f7ff ffbd 	bl	80160e4 <ip_frag_free_pbuf_custom_ref>
}
 801616a:	bf00      	nop
 801616c:	3710      	adds	r7, #16
 801616e:	46bd      	mov	sp, r7
 8016170:	bd80      	pop	{r7, pc}
 8016172:	bf00      	nop
 8016174:	08021874 	.word	0x08021874
 8016178:	08021a38 	.word	0x08021a38
 801617c:	080218bc 	.word	0x080218bc
 8016180:	08021a44 	.word	0x08021a44

08016184 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b094      	sub	sp, #80	; 0x50
 8016188:	af02      	add	r7, sp, #8
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016190:	2300      	movs	r3, #0
 8016192:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016196:	68bb      	ldr	r3, [r7, #8]
 8016198:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801619a:	3b14      	subs	r3, #20
 801619c:	2b00      	cmp	r3, #0
 801619e:	da00      	bge.n	80161a2 <ip4_frag+0x1e>
 80161a0:	3307      	adds	r3, #7
 80161a2:	10db      	asrs	r3, r3, #3
 80161a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80161a6:	2314      	movs	r3, #20
 80161a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	685b      	ldr	r3, [r3, #4]
 80161ae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80161b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80161b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	f003 030f 	and.w	r3, r3, #15
 80161bc:	b2db      	uxtb	r3, r3
 80161be:	009b      	lsls	r3, r3, #2
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	2b14      	cmp	r3, #20
 80161c4:	d002      	beq.n	80161cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80161c6:	f06f 0305 	mvn.w	r3, #5
 80161ca:	e110      	b.n	80163ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	895b      	ldrh	r3, [r3, #10]
 80161d0:	2b13      	cmp	r3, #19
 80161d2:	d809      	bhi.n	80161e8 <ip4_frag+0x64>
 80161d4:	4b88      	ldr	r3, [pc, #544]	; (80163f8 <ip4_frag+0x274>)
 80161d6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80161da:	4988      	ldr	r1, [pc, #544]	; (80163fc <ip4_frag+0x278>)
 80161dc:	4888      	ldr	r0, [pc, #544]	; (8016400 <ip4_frag+0x27c>)
 80161de:	f001 fde3 	bl	8017da8 <iprintf>
 80161e2:	f06f 0305 	mvn.w	r3, #5
 80161e6:	e102      	b.n	80163ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80161e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ea:	88db      	ldrh	r3, [r3, #6]
 80161ec:	b29b      	uxth	r3, r3
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7f6 fde9 	bl	800cdc6 <lwip_htons>
 80161f4:	4603      	mov	r3, r0
 80161f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80161f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016202:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016208:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	891b      	ldrh	r3, [r3, #8]
 801620e:	3b14      	subs	r3, #20
 8016210:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016214:	e0e1      	b.n	80163da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016216:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016218:	00db      	lsls	r3, r3, #3
 801621a:	b29b      	uxth	r3, r3
 801621c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016220:	4293      	cmp	r3, r2
 8016222:	bf28      	it	cs
 8016224:	4613      	movcs	r3, r2
 8016226:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016228:	f44f 7220 	mov.w	r2, #640	; 0x280
 801622c:	2114      	movs	r1, #20
 801622e:	200e      	movs	r0, #14
 8016230:	f7f7 fd78 	bl	800dd24 <pbuf_alloc>
 8016234:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016238:	2b00      	cmp	r3, #0
 801623a:	f000 80d5 	beq.w	80163e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016240:	895b      	ldrh	r3, [r3, #10]
 8016242:	2b13      	cmp	r3, #19
 8016244:	d806      	bhi.n	8016254 <ip4_frag+0xd0>
 8016246:	4b6c      	ldr	r3, [pc, #432]	; (80163f8 <ip4_frag+0x274>)
 8016248:	f44f 7249 	mov.w	r2, #804	; 0x324
 801624c:	496d      	ldr	r1, [pc, #436]	; (8016404 <ip4_frag+0x280>)
 801624e:	486c      	ldr	r0, [pc, #432]	; (8016400 <ip4_frag+0x27c>)
 8016250:	f001 fdaa 	bl	8017da8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016256:	685b      	ldr	r3, [r3, #4]
 8016258:	2214      	movs	r2, #20
 801625a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801625c:	4618      	mov	r0, r3
 801625e:	f000 fef9 	bl	8017054 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016268:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801626a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801626e:	e064      	b.n	801633a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	895a      	ldrh	r2, [r3, #10]
 8016274:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016276:	1ad3      	subs	r3, r2, r3
 8016278:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	895b      	ldrh	r3, [r3, #10]
 801627e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016280:	429a      	cmp	r2, r3
 8016282:	d906      	bls.n	8016292 <ip4_frag+0x10e>
 8016284:	4b5c      	ldr	r3, [pc, #368]	; (80163f8 <ip4_frag+0x274>)
 8016286:	f240 322d 	movw	r2, #813	; 0x32d
 801628a:	495f      	ldr	r1, [pc, #380]	; (8016408 <ip4_frag+0x284>)
 801628c:	485c      	ldr	r0, [pc, #368]	; (8016400 <ip4_frag+0x27c>)
 801628e:	f001 fd8b 	bl	8017da8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016292:	8bfa      	ldrh	r2, [r7, #30]
 8016294:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016298:	4293      	cmp	r3, r2
 801629a:	bf28      	it	cs
 801629c:	4613      	movcs	r3, r2
 801629e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80162a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d105      	bne.n	80162b6 <ip4_frag+0x132>
        poff = 0;
 80162aa:	2300      	movs	r3, #0
 80162ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	60fb      	str	r3, [r7, #12]
        continue;
 80162b4:	e041      	b.n	801633a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80162b6:	f7ff ff0d 	bl	80160d4 <ip_frag_alloc_pbuf_custom_ref>
 80162ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d103      	bne.n	80162ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 80162c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162c4:	f7f8 f812 	bl	800e2ec <pbuf_free>
        goto memerr;
 80162c8:	e08f      	b.n	80163ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80162ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80162d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162d2:	4413      	add	r3, r2
 80162d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80162d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80162dc:	9201      	str	r2, [sp, #4]
 80162de:	9300      	str	r3, [sp, #0]
 80162e0:	4603      	mov	r3, r0
 80162e2:	2241      	movs	r2, #65	; 0x41
 80162e4:	2000      	movs	r0, #0
 80162e6:	f7f7 fe47 	bl	800df78 <pbuf_alloced_custom>
 80162ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d106      	bne.n	8016300 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80162f2:	69b8      	ldr	r0, [r7, #24]
 80162f4:	f7ff fef6 	bl	80160e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80162f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162fa:	f7f7 fff7 	bl	800e2ec <pbuf_free>
        goto memerr;
 80162fe:	e074      	b.n	80163ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	f7f8 f893 	bl	800e42c <pbuf_ref>
      pcr->original = p;
 8016306:	69bb      	ldr	r3, [r7, #24]
 8016308:	68fa      	ldr	r2, [r7, #12]
 801630a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	4a3f      	ldr	r2, [pc, #252]	; (801640c <ip4_frag+0x288>)
 8016310:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016312:	6979      	ldr	r1, [r7, #20]
 8016314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016316:	f7f8 f8ab 	bl	800e470 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801631a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801631e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016322:	1ad3      	subs	r3, r2, r3
 8016324:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016328:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801632c:	2b00      	cmp	r3, #0
 801632e:	d004      	beq.n	801633a <ip4_frag+0x1b6>
        poff = 0;
 8016330:	2300      	movs	r3, #0
 8016332:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801633a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801633e:	2b00      	cmp	r3, #0
 8016340:	d196      	bne.n	8016270 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016342:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016344:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016348:	4413      	add	r3, r2
 801634a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016350:	f1a3 0213 	sub.w	r2, r3, #19
 8016354:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016358:	429a      	cmp	r2, r3
 801635a:	bfcc      	ite	gt
 801635c:	2301      	movgt	r3, #1
 801635e:	2300      	movle	r3, #0
 8016360:	b2db      	uxtb	r3, r3
 8016362:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016364:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801636c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801636e:	6a3b      	ldr	r3, [r7, #32]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d002      	beq.n	801637a <ip4_frag+0x1f6>
 8016374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016376:	2b00      	cmp	r3, #0
 8016378:	d003      	beq.n	8016382 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801637a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801637c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016380:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016382:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016384:	4618      	mov	r0, r3
 8016386:	f7f6 fd1e 	bl	800cdc6 <lwip_htons>
 801638a:	4603      	mov	r3, r0
 801638c:	461a      	mov	r2, r3
 801638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016390:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016392:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016394:	3314      	adds	r3, #20
 8016396:	b29b      	uxth	r3, r3
 8016398:	4618      	mov	r0, r3
 801639a:	f7f6 fd14 	bl	800cdc6 <lwip_htons>
 801639e:	4603      	mov	r3, r0
 80163a0:	461a      	mov	r2, r3
 80163a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80163a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a8:	2200      	movs	r2, #0
 80163aa:	729a      	strb	r2, [r3, #10]
 80163ac:	2200      	movs	r2, #0
 80163ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80163b0:	68bb      	ldr	r3, [r7, #8]
 80163b2:	695b      	ldr	r3, [r3, #20]
 80163b4:	687a      	ldr	r2, [r7, #4]
 80163b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163b8:	68b8      	ldr	r0, [r7, #8]
 80163ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80163bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163be:	f7f7 ff95 	bl	800e2ec <pbuf_free>
    left = (u16_t)(left - fragsize);
 80163c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80163c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163c8:	1ad3      	subs	r3, r2, r3
 80163ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80163ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80163d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163d4:	4413      	add	r3, r2
 80163d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80163da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163de:	2b00      	cmp	r3, #0
 80163e0:	f47f af19 	bne.w	8016216 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80163e4:	2300      	movs	r3, #0
 80163e6:	e002      	b.n	80163ee <ip4_frag+0x26a>
      goto memerr;
 80163e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80163ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3748      	adds	r7, #72	; 0x48
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd80      	pop	{r7, pc}
 80163f6:	bf00      	nop
 80163f8:	08021874 	.word	0x08021874
 80163fc:	08021a50 	.word	0x08021a50
 8016400:	080218bc 	.word	0x080218bc
 8016404:	08021a6c 	.word	0x08021a6c
 8016408:	08021a8c 	.word	0x08021a8c
 801640c:	0801611d 	.word	0x0801611d

08016410 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b086      	sub	sp, #24
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
 8016418:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801641a:	230e      	movs	r3, #14
 801641c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	895b      	ldrh	r3, [r3, #10]
 8016422:	2b0e      	cmp	r3, #14
 8016424:	d96e      	bls.n	8016504 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	7bdb      	ldrb	r3, [r3, #15]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d106      	bne.n	801643c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801642e:	683b      	ldr	r3, [r7, #0]
 8016430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016434:	3301      	adds	r3, #1
 8016436:	b2da      	uxtb	r2, r3
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	7b1a      	ldrb	r2, [r3, #12]
 8016446:	7b5b      	ldrb	r3, [r3, #13]
 8016448:	021b      	lsls	r3, r3, #8
 801644a:	4313      	orrs	r3, r2
 801644c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801644e:	693b      	ldr	r3, [r7, #16]
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	f003 0301 	and.w	r3, r3, #1
 8016456:	2b00      	cmp	r3, #0
 8016458:	d023      	beq.n	80164a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801645a:	693b      	ldr	r3, [r7, #16]
 801645c:	781b      	ldrb	r3, [r3, #0]
 801645e:	2b01      	cmp	r3, #1
 8016460:	d10f      	bne.n	8016482 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016462:	693b      	ldr	r3, [r7, #16]
 8016464:	785b      	ldrb	r3, [r3, #1]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d11b      	bne.n	80164a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801646e:	2b5e      	cmp	r3, #94	; 0x5e
 8016470:	d117      	bne.n	80164a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	7b5b      	ldrb	r3, [r3, #13]
 8016476:	f043 0310 	orr.w	r3, r3, #16
 801647a:	b2da      	uxtb	r2, r3
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	735a      	strb	r2, [r3, #13]
 8016480:	e00f      	b.n	80164a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	2206      	movs	r2, #6
 8016486:	4928      	ldr	r1, [pc, #160]	; (8016528 <ethernet_input+0x118>)
 8016488:	4618      	mov	r0, r3
 801648a:	f000 fdd5 	bl	8017038 <memcmp>
 801648e:	4603      	mov	r3, r0
 8016490:	2b00      	cmp	r3, #0
 8016492:	d106      	bne.n	80164a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	7b5b      	ldrb	r3, [r3, #13]
 8016498:	f043 0308 	orr.w	r3, r3, #8
 801649c:	b2da      	uxtb	r2, r3
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80164a2:	89fb      	ldrh	r3, [r7, #14]
 80164a4:	2b08      	cmp	r3, #8
 80164a6:	d003      	beq.n	80164b0 <ethernet_input+0xa0>
 80164a8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80164ac:	d014      	beq.n	80164d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80164ae:	e032      	b.n	8016516 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164b6:	f003 0308 	and.w	r3, r3, #8
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d024      	beq.n	8016508 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80164be:	8afb      	ldrh	r3, [r7, #22]
 80164c0:	4619      	mov	r1, r3
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f7f7 fe8c 	bl	800e1e0 <pbuf_remove_header>
 80164c8:	4603      	mov	r3, r0
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d11e      	bne.n	801650c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80164ce:	6839      	ldr	r1, [r7, #0]
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7fe ff27 	bl	8015324 <ip4_input>
      break;
 80164d6:	e013      	b.n	8016500 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164de:	f003 0308 	and.w	r3, r3, #8
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d014      	beq.n	8016510 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80164e6:	8afb      	ldrh	r3, [r7, #22]
 80164e8:	4619      	mov	r1, r3
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f7f7 fe78 	bl	800e1e0 <pbuf_remove_header>
 80164f0:	4603      	mov	r3, r0
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d10e      	bne.n	8016514 <ethernet_input+0x104>
        etharp_input(p, netif);
 80164f6:	6839      	ldr	r1, [r7, #0]
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f7fe f8c7 	bl	801468c <etharp_input>
      break;
 80164fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016500:	2300      	movs	r3, #0
 8016502:	e00c      	b.n	801651e <ethernet_input+0x10e>
    goto free_and_return;
 8016504:	bf00      	nop
 8016506:	e006      	b.n	8016516 <ethernet_input+0x106>
        goto free_and_return;
 8016508:	bf00      	nop
 801650a:	e004      	b.n	8016516 <ethernet_input+0x106>
        goto free_and_return;
 801650c:	bf00      	nop
 801650e:	e002      	b.n	8016516 <ethernet_input+0x106>
        goto free_and_return;
 8016510:	bf00      	nop
 8016512:	e000      	b.n	8016516 <ethernet_input+0x106>
        goto free_and_return;
 8016514:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016516:	6878      	ldr	r0, [r7, #4]
 8016518:	f7f7 fee8 	bl	800e2ec <pbuf_free>
  return ERR_OK;
 801651c:	2300      	movs	r3, #0
}
 801651e:	4618      	mov	r0, r3
 8016520:	3718      	adds	r7, #24
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}
 8016526:	bf00      	nop
 8016528:	08021c44 	.word	0x08021c44

0801652c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801652c:	b580      	push	{r7, lr}
 801652e:	b086      	sub	sp, #24
 8016530:	af00      	add	r7, sp, #0
 8016532:	60f8      	str	r0, [r7, #12]
 8016534:	60b9      	str	r1, [r7, #8]
 8016536:	607a      	str	r2, [r7, #4]
 8016538:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801653a:	8c3b      	ldrh	r3, [r7, #32]
 801653c:	4618      	mov	r0, r3
 801653e:	f7f6 fc42 	bl	800cdc6 <lwip_htons>
 8016542:	4603      	mov	r3, r0
 8016544:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016546:	210e      	movs	r1, #14
 8016548:	68b8      	ldr	r0, [r7, #8]
 801654a:	f7f7 fe39 	bl	800e1c0 <pbuf_add_header>
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d125      	bne.n	80165a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801655a:	693b      	ldr	r3, [r7, #16]
 801655c:	8afa      	ldrh	r2, [r7, #22]
 801655e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	2206      	movs	r2, #6
 8016564:	6839      	ldr	r1, [r7, #0]
 8016566:	4618      	mov	r0, r3
 8016568:	f000 fd74 	bl	8017054 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801656c:	693b      	ldr	r3, [r7, #16]
 801656e:	3306      	adds	r3, #6
 8016570:	2206      	movs	r2, #6
 8016572:	6879      	ldr	r1, [r7, #4]
 8016574:	4618      	mov	r0, r3
 8016576:	f000 fd6d 	bl	8017054 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016580:	2b06      	cmp	r3, #6
 8016582:	d006      	beq.n	8016592 <ethernet_output+0x66>
 8016584:	4b0a      	ldr	r3, [pc, #40]	; (80165b0 <ethernet_output+0x84>)
 8016586:	f44f 7299 	mov.w	r2, #306	; 0x132
 801658a:	490a      	ldr	r1, [pc, #40]	; (80165b4 <ethernet_output+0x88>)
 801658c:	480a      	ldr	r0, [pc, #40]	; (80165b8 <ethernet_output+0x8c>)
 801658e:	f001 fc0b 	bl	8017da8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	699b      	ldr	r3, [r3, #24]
 8016596:	68b9      	ldr	r1, [r7, #8]
 8016598:	68f8      	ldr	r0, [r7, #12]
 801659a:	4798      	blx	r3
 801659c:	4603      	mov	r3, r0
 801659e:	e002      	b.n	80165a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80165a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80165a2:	f06f 0301 	mvn.w	r3, #1
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3718      	adds	r7, #24
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	08021a9c 	.word	0x08021a9c
 80165b4:	08021ad4 	.word	0x08021ad4
 80165b8:	08021b08 	.word	0x08021b08

080165bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80165c0:	2200      	movs	r2, #0
 80165c2:	4912      	ldr	r1, [pc, #72]	; (801660c <MX_USB_DEVICE_Init+0x50>)
 80165c4:	4812      	ldr	r0, [pc, #72]	; (8016610 <MX_USB_DEVICE_Init+0x54>)
 80165c6:	f7f5 fa95 	bl	800baf4 <USBD_Init>
 80165ca:	4603      	mov	r3, r0
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d001      	beq.n	80165d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80165d0:	f7eb f99e 	bl	8001910 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80165d4:	490f      	ldr	r1, [pc, #60]	; (8016614 <MX_USB_DEVICE_Init+0x58>)
 80165d6:	480e      	ldr	r0, [pc, #56]	; (8016610 <MX_USB_DEVICE_Init+0x54>)
 80165d8:	f7f5 fabc 	bl	800bb54 <USBD_RegisterClass>
 80165dc:	4603      	mov	r3, r0
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d001      	beq.n	80165e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80165e2:	f7eb f995 	bl	8001910 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80165e6:	490c      	ldr	r1, [pc, #48]	; (8016618 <MX_USB_DEVICE_Init+0x5c>)
 80165e8:	4809      	ldr	r0, [pc, #36]	; (8016610 <MX_USB_DEVICE_Init+0x54>)
 80165ea:	f7f5 f9dd 	bl	800b9a8 <USBD_CDC_RegisterInterface>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d001      	beq.n	80165f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80165f4:	f7eb f98c 	bl	8001910 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80165f8:	4805      	ldr	r0, [pc, #20]	; (8016610 <MX_USB_DEVICE_Init+0x54>)
 80165fa:	f7f5 fad2 	bl	800bba2 <USBD_Start>
 80165fe:	4603      	mov	r3, r0
 8016600:	2b00      	cmp	r3, #0
 8016602:	d001      	beq.n	8016608 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016604:	f7eb f984 	bl	8001910 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016608:	bf00      	nop
 801660a:	bd80      	pop	{r7, pc}
 801660c:	20000144 	.word	0x20000144
 8016610:	20007134 	.word	0x20007134
 8016614:	20000020 	.word	0x20000020
 8016618:	20000130 	.word	0x20000130

0801661c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801661c:	b580      	push	{r7, lr}
 801661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016620:	2200      	movs	r2, #0
 8016622:	4905      	ldr	r1, [pc, #20]	; (8016638 <CDC_Init_FS+0x1c>)
 8016624:	4805      	ldr	r0, [pc, #20]	; (801663c <CDC_Init_FS+0x20>)
 8016626:	f7f5 f9d4 	bl	800b9d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801662a:	4905      	ldr	r1, [pc, #20]	; (8016640 <CDC_Init_FS+0x24>)
 801662c:	4803      	ldr	r0, [pc, #12]	; (801663c <CDC_Init_FS+0x20>)
 801662e:	f7f5 f9ee 	bl	800ba0e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016632:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016634:	4618      	mov	r0, r3
 8016636:	bd80      	pop	{r7, pc}
 8016638:	20007c04 	.word	0x20007c04
 801663c:	20007134 	.word	0x20007134
 8016640:	20007404 	.word	0x20007404

08016644 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016644:	b480      	push	{r7}
 8016646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016648:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801664a:	4618      	mov	r0, r3
 801664c:	46bd      	mov	sp, r7
 801664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016652:	4770      	bx	lr

08016654 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016654:	b480      	push	{r7}
 8016656:	b083      	sub	sp, #12
 8016658:	af00      	add	r7, sp, #0
 801665a:	4603      	mov	r3, r0
 801665c:	6039      	str	r1, [r7, #0]
 801665e:	71fb      	strb	r3, [r7, #7]
 8016660:	4613      	mov	r3, r2
 8016662:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016664:	79fb      	ldrb	r3, [r7, #7]
 8016666:	2b23      	cmp	r3, #35	; 0x23
 8016668:	d84a      	bhi.n	8016700 <CDC_Control_FS+0xac>
 801666a:	a201      	add	r2, pc, #4	; (adr r2, 8016670 <CDC_Control_FS+0x1c>)
 801666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016670:	08016701 	.word	0x08016701
 8016674:	08016701 	.word	0x08016701
 8016678:	08016701 	.word	0x08016701
 801667c:	08016701 	.word	0x08016701
 8016680:	08016701 	.word	0x08016701
 8016684:	08016701 	.word	0x08016701
 8016688:	08016701 	.word	0x08016701
 801668c:	08016701 	.word	0x08016701
 8016690:	08016701 	.word	0x08016701
 8016694:	08016701 	.word	0x08016701
 8016698:	08016701 	.word	0x08016701
 801669c:	08016701 	.word	0x08016701
 80166a0:	08016701 	.word	0x08016701
 80166a4:	08016701 	.word	0x08016701
 80166a8:	08016701 	.word	0x08016701
 80166ac:	08016701 	.word	0x08016701
 80166b0:	08016701 	.word	0x08016701
 80166b4:	08016701 	.word	0x08016701
 80166b8:	08016701 	.word	0x08016701
 80166bc:	08016701 	.word	0x08016701
 80166c0:	08016701 	.word	0x08016701
 80166c4:	08016701 	.word	0x08016701
 80166c8:	08016701 	.word	0x08016701
 80166cc:	08016701 	.word	0x08016701
 80166d0:	08016701 	.word	0x08016701
 80166d4:	08016701 	.word	0x08016701
 80166d8:	08016701 	.word	0x08016701
 80166dc:	08016701 	.word	0x08016701
 80166e0:	08016701 	.word	0x08016701
 80166e4:	08016701 	.word	0x08016701
 80166e8:	08016701 	.word	0x08016701
 80166ec:	08016701 	.word	0x08016701
 80166f0:	08016701 	.word	0x08016701
 80166f4:	08016701 	.word	0x08016701
 80166f8:	08016701 	.word	0x08016701
 80166fc:	08016701 	.word	0x08016701
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016700:	bf00      	nop
  }

  return (USBD_OK);
 8016702:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016704:	4618      	mov	r0, r3
 8016706:	370c      	adds	r7, #12
 8016708:	46bd      	mov	sp, r7
 801670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670e:	4770      	bx	lr

08016710 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b082      	sub	sp, #8
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801671a:	6879      	ldr	r1, [r7, #4]
 801671c:	4805      	ldr	r0, [pc, #20]	; (8016734 <CDC_Receive_FS+0x24>)
 801671e:	f7f5 f976 	bl	800ba0e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016722:	4804      	ldr	r0, [pc, #16]	; (8016734 <CDC_Receive_FS+0x24>)
 8016724:	f7f5 f9bc 	bl	800baa0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016728:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801672a:	4618      	mov	r0, r3
 801672c:	3708      	adds	r7, #8
 801672e:	46bd      	mov	sp, r7
 8016730:	bd80      	pop	{r7, pc}
 8016732:	bf00      	nop
 8016734:	20007134 	.word	0x20007134

08016738 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	460b      	mov	r3, r1
 8016742:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016744:	2300      	movs	r3, #0
 8016746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016748:	4b0d      	ldr	r3, [pc, #52]	; (8016780 <CDC_Transmit_FS+0x48>)
 801674a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801674e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016756:	2b00      	cmp	r3, #0
 8016758:	d001      	beq.n	801675e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801675a:	2301      	movs	r3, #1
 801675c:	e00b      	b.n	8016776 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801675e:	887b      	ldrh	r3, [r7, #2]
 8016760:	461a      	mov	r2, r3
 8016762:	6879      	ldr	r1, [r7, #4]
 8016764:	4806      	ldr	r0, [pc, #24]	; (8016780 <CDC_Transmit_FS+0x48>)
 8016766:	f7f5 f934 	bl	800b9d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801676a:	4805      	ldr	r0, [pc, #20]	; (8016780 <CDC_Transmit_FS+0x48>)
 801676c:	f7f5 f968 	bl	800ba40 <USBD_CDC_TransmitPacket>
 8016770:	4603      	mov	r3, r0
 8016772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016774:	7bfb      	ldrb	r3, [r7, #15]
}
 8016776:	4618      	mov	r0, r3
 8016778:	3710      	adds	r7, #16
 801677a:	46bd      	mov	sp, r7
 801677c:	bd80      	pop	{r7, pc}
 801677e:	bf00      	nop
 8016780:	20007134 	.word	0x20007134

08016784 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016784:	b480      	push	{r7}
 8016786:	b087      	sub	sp, #28
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	4613      	mov	r3, r2
 8016790:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016792:	2300      	movs	r3, #0
 8016794:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801679a:	4618      	mov	r0, r3
 801679c:	371c      	adds	r7, #28
 801679e:	46bd      	mov	sp, r7
 80167a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a4:	4770      	bx	lr
	...

080167a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167a8:	b480      	push	{r7}
 80167aa:	b083      	sub	sp, #12
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	4603      	mov	r3, r0
 80167b0:	6039      	str	r1, [r7, #0]
 80167b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	2212      	movs	r2, #18
 80167b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80167ba:	4b03      	ldr	r3, [pc, #12]	; (80167c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80167bc:	4618      	mov	r0, r3
 80167be:	370c      	adds	r7, #12
 80167c0:	46bd      	mov	sp, r7
 80167c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c6:	4770      	bx	lr
 80167c8:	20000160 	.word	0x20000160

080167cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167cc:	b480      	push	{r7}
 80167ce:	b083      	sub	sp, #12
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	4603      	mov	r3, r0
 80167d4:	6039      	str	r1, [r7, #0]
 80167d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80167d8:	683b      	ldr	r3, [r7, #0]
 80167da:	2204      	movs	r2, #4
 80167dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80167de:	4b03      	ldr	r3, [pc, #12]	; (80167ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	370c      	adds	r7, #12
 80167e4:	46bd      	mov	sp, r7
 80167e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ea:	4770      	bx	lr
 80167ec:	20000174 	.word	0x20000174

080167f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b082      	sub	sp, #8
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	4603      	mov	r3, r0
 80167f8:	6039      	str	r1, [r7, #0]
 80167fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80167fc:	79fb      	ldrb	r3, [r7, #7]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d105      	bne.n	801680e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016802:	683a      	ldr	r2, [r7, #0]
 8016804:	4907      	ldr	r1, [pc, #28]	; (8016824 <USBD_FS_ProductStrDescriptor+0x34>)
 8016806:	4808      	ldr	r0, [pc, #32]	; (8016828 <USBD_FS_ProductStrDescriptor+0x38>)
 8016808:	f7f6 f9fd 	bl	800cc06 <USBD_GetString>
 801680c:	e004      	b.n	8016818 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801680e:	683a      	ldr	r2, [r7, #0]
 8016810:	4904      	ldr	r1, [pc, #16]	; (8016824 <USBD_FS_ProductStrDescriptor+0x34>)
 8016812:	4805      	ldr	r0, [pc, #20]	; (8016828 <USBD_FS_ProductStrDescriptor+0x38>)
 8016814:	f7f6 f9f7 	bl	800cc06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016818:	4b02      	ldr	r3, [pc, #8]	; (8016824 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801681a:	4618      	mov	r0, r3
 801681c:	3708      	adds	r7, #8
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	20008404 	.word	0x20008404
 8016828:	08021b30 	.word	0x08021b30

0801682c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b082      	sub	sp, #8
 8016830:	af00      	add	r7, sp, #0
 8016832:	4603      	mov	r3, r0
 8016834:	6039      	str	r1, [r7, #0]
 8016836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016838:	683a      	ldr	r2, [r7, #0]
 801683a:	4904      	ldr	r1, [pc, #16]	; (801684c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801683c:	4804      	ldr	r0, [pc, #16]	; (8016850 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801683e:	f7f6 f9e2 	bl	800cc06 <USBD_GetString>
  return USBD_StrDesc;
 8016842:	4b02      	ldr	r3, [pc, #8]	; (801684c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016844:	4618      	mov	r0, r3
 8016846:	3708      	adds	r7, #8
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}
 801684c:	20008404 	.word	0x20008404
 8016850:	08021b38 	.word	0x08021b38

08016854 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b082      	sub	sp, #8
 8016858:	af00      	add	r7, sp, #0
 801685a:	4603      	mov	r3, r0
 801685c:	6039      	str	r1, [r7, #0]
 801685e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	221a      	movs	r2, #26
 8016864:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016866:	f000 f843 	bl	80168f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801686a:	4b02      	ldr	r3, [pc, #8]	; (8016874 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801686c:	4618      	mov	r0, r3
 801686e:	3708      	adds	r7, #8
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}
 8016874:	20000178 	.word	0x20000178

08016878 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	4603      	mov	r3, r0
 8016880:	6039      	str	r1, [r7, #0]
 8016882:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016884:	79fb      	ldrb	r3, [r7, #7]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d105      	bne.n	8016896 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801688a:	683a      	ldr	r2, [r7, #0]
 801688c:	4907      	ldr	r1, [pc, #28]	; (80168ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801688e:	4808      	ldr	r0, [pc, #32]	; (80168b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016890:	f7f6 f9b9 	bl	800cc06 <USBD_GetString>
 8016894:	e004      	b.n	80168a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016896:	683a      	ldr	r2, [r7, #0]
 8016898:	4904      	ldr	r1, [pc, #16]	; (80168ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801689a:	4805      	ldr	r0, [pc, #20]	; (80168b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801689c:	f7f6 f9b3 	bl	800cc06 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168a0:	4b02      	ldr	r3, [pc, #8]	; (80168ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80168a2:	4618      	mov	r0, r3
 80168a4:	3708      	adds	r7, #8
 80168a6:	46bd      	mov	sp, r7
 80168a8:	bd80      	pop	{r7, pc}
 80168aa:	bf00      	nop
 80168ac:	20008404 	.word	0x20008404
 80168b0:	08021b3c 	.word	0x08021b3c

080168b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b082      	sub	sp, #8
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	4603      	mov	r3, r0
 80168bc:	6039      	str	r1, [r7, #0]
 80168be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168c0:	79fb      	ldrb	r3, [r7, #7]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d105      	bne.n	80168d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80168c6:	683a      	ldr	r2, [r7, #0]
 80168c8:	4907      	ldr	r1, [pc, #28]	; (80168e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80168ca:	4808      	ldr	r0, [pc, #32]	; (80168ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80168cc:	f7f6 f99b 	bl	800cc06 <USBD_GetString>
 80168d0:	e004      	b.n	80168dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80168d2:	683a      	ldr	r2, [r7, #0]
 80168d4:	4904      	ldr	r1, [pc, #16]	; (80168e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80168d6:	4805      	ldr	r0, [pc, #20]	; (80168ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80168d8:	f7f6 f995 	bl	800cc06 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168dc:	4b02      	ldr	r3, [pc, #8]	; (80168e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3708      	adds	r7, #8
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	20008404 	.word	0x20008404
 80168ec:	08021b48 	.word	0x08021b48

080168f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b084      	sub	sp, #16
 80168f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80168f6:	4b0f      	ldr	r3, [pc, #60]	; (8016934 <Get_SerialNum+0x44>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80168fc:	4b0e      	ldr	r3, [pc, #56]	; (8016938 <Get_SerialNum+0x48>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016902:	4b0e      	ldr	r3, [pc, #56]	; (801693c <Get_SerialNum+0x4c>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016908:	68fa      	ldr	r2, [r7, #12]
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	4413      	add	r3, r2
 801690e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	2b00      	cmp	r3, #0
 8016914:	d009      	beq.n	801692a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016916:	2208      	movs	r2, #8
 8016918:	4909      	ldr	r1, [pc, #36]	; (8016940 <Get_SerialNum+0x50>)
 801691a:	68f8      	ldr	r0, [r7, #12]
 801691c:	f000 f814 	bl	8016948 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016920:	2204      	movs	r2, #4
 8016922:	4908      	ldr	r1, [pc, #32]	; (8016944 <Get_SerialNum+0x54>)
 8016924:	68b8      	ldr	r0, [r7, #8]
 8016926:	f000 f80f 	bl	8016948 <IntToUnicode>
  }
}
 801692a:	bf00      	nop
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	1fff7a10 	.word	0x1fff7a10
 8016938:	1fff7a14 	.word	0x1fff7a14
 801693c:	1fff7a18 	.word	0x1fff7a18
 8016940:	2000017a 	.word	0x2000017a
 8016944:	2000018a 	.word	0x2000018a

08016948 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016948:	b480      	push	{r7}
 801694a:	b087      	sub	sp, #28
 801694c:	af00      	add	r7, sp, #0
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	4613      	mov	r3, r2
 8016954:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016956:	2300      	movs	r3, #0
 8016958:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801695a:	2300      	movs	r3, #0
 801695c:	75fb      	strb	r3, [r7, #23]
 801695e:	e027      	b.n	80169b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	0f1b      	lsrs	r3, r3, #28
 8016964:	2b09      	cmp	r3, #9
 8016966:	d80b      	bhi.n	8016980 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	0f1b      	lsrs	r3, r3, #28
 801696c:	b2da      	uxtb	r2, r3
 801696e:	7dfb      	ldrb	r3, [r7, #23]
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4619      	mov	r1, r3
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	440b      	add	r3, r1
 8016978:	3230      	adds	r2, #48	; 0x30
 801697a:	b2d2      	uxtb	r2, r2
 801697c:	701a      	strb	r2, [r3, #0]
 801697e:	e00a      	b.n	8016996 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	0f1b      	lsrs	r3, r3, #28
 8016984:	b2da      	uxtb	r2, r3
 8016986:	7dfb      	ldrb	r3, [r7, #23]
 8016988:	005b      	lsls	r3, r3, #1
 801698a:	4619      	mov	r1, r3
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	440b      	add	r3, r1
 8016990:	3237      	adds	r2, #55	; 0x37
 8016992:	b2d2      	uxtb	r2, r2
 8016994:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	011b      	lsls	r3, r3, #4
 801699a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801699c:	7dfb      	ldrb	r3, [r7, #23]
 801699e:	005b      	lsls	r3, r3, #1
 80169a0:	3301      	adds	r3, #1
 80169a2:	68ba      	ldr	r2, [r7, #8]
 80169a4:	4413      	add	r3, r2
 80169a6:	2200      	movs	r2, #0
 80169a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80169aa:	7dfb      	ldrb	r3, [r7, #23]
 80169ac:	3301      	adds	r3, #1
 80169ae:	75fb      	strb	r3, [r7, #23]
 80169b0:	7dfa      	ldrb	r2, [r7, #23]
 80169b2:	79fb      	ldrb	r3, [r7, #7]
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d3d3      	bcc.n	8016960 <IntToUnicode+0x18>
  }
}
 80169b8:	bf00      	nop
 80169ba:	bf00      	nop
 80169bc:	371c      	adds	r7, #28
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr
	...

080169c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b08a      	sub	sp, #40	; 0x28
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80169d0:	f107 0314 	add.w	r3, r7, #20
 80169d4:	2200      	movs	r2, #0
 80169d6:	601a      	str	r2, [r3, #0]
 80169d8:	605a      	str	r2, [r3, #4]
 80169da:	609a      	str	r2, [r3, #8]
 80169dc:	60da      	str	r2, [r3, #12]
 80169de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80169e8:	d13a      	bne.n	8016a60 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80169ea:	2300      	movs	r3, #0
 80169ec:	613b      	str	r3, [r7, #16]
 80169ee:	4b1e      	ldr	r3, [pc, #120]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 80169f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169f2:	4a1d      	ldr	r2, [pc, #116]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 80169f4:	f043 0301 	orr.w	r3, r3, #1
 80169f8:	6313      	str	r3, [r2, #48]	; 0x30
 80169fa:	4b1b      	ldr	r3, [pc, #108]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 80169fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80169fe:	f003 0301 	and.w	r3, r3, #1
 8016a02:	613b      	str	r3, [r7, #16]
 8016a04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016a06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a0c:	2302      	movs	r3, #2
 8016a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a10:	2300      	movs	r3, #0
 8016a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016a14:	2303      	movs	r3, #3
 8016a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016a18:	230a      	movs	r3, #10
 8016a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016a1c:	f107 0314 	add.w	r3, r7, #20
 8016a20:	4619      	mov	r1, r3
 8016a22:	4812      	ldr	r0, [pc, #72]	; (8016a6c <HAL_PCD_MspInit+0xa4>)
 8016a24:	f7ec fe88 	bl	8003738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016a28:	4b0f      	ldr	r3, [pc, #60]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 8016a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a2c:	4a0e      	ldr	r2, [pc, #56]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 8016a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a32:	6353      	str	r3, [r2, #52]	; 0x34
 8016a34:	2300      	movs	r3, #0
 8016a36:	60fb      	str	r3, [r7, #12]
 8016a38:	4b0b      	ldr	r3, [pc, #44]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 8016a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a3c:	4a0a      	ldr	r2, [pc, #40]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 8016a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016a42:	6453      	str	r3, [r2, #68]	; 0x44
 8016a44:	4b08      	ldr	r3, [pc, #32]	; (8016a68 <HAL_PCD_MspInit+0xa0>)
 8016a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016a4c:	60fb      	str	r3, [r7, #12]
 8016a4e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016a50:	2200      	movs	r2, #0
 8016a52:	2100      	movs	r1, #0
 8016a54:	2043      	movs	r0, #67	; 0x43
 8016a56:	f7eb fc7e 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016a5a:	2043      	movs	r0, #67	; 0x43
 8016a5c:	f7eb fc97 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016a60:	bf00      	nop
 8016a62:	3728      	adds	r7, #40	; 0x28
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	40023800 	.word	0x40023800
 8016a6c:	40020000 	.word	0x40020000

08016a70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016a84:	4619      	mov	r1, r3
 8016a86:	4610      	mov	r0, r2
 8016a88:	f7f5 f8d6 	bl	800bc38 <USBD_LL_SetupStage>
}
 8016a8c:	bf00      	nop
 8016a8e:	3708      	adds	r7, #8
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016aa6:	78fa      	ldrb	r2, [r7, #3]
 8016aa8:	6879      	ldr	r1, [r7, #4]
 8016aaa:	4613      	mov	r3, r2
 8016aac:	00db      	lsls	r3, r3, #3
 8016aae:	1a9b      	subs	r3, r3, r2
 8016ab0:	009b      	lsls	r3, r3, #2
 8016ab2:	440b      	add	r3, r1
 8016ab4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016ab8:	681a      	ldr	r2, [r3, #0]
 8016aba:	78fb      	ldrb	r3, [r7, #3]
 8016abc:	4619      	mov	r1, r3
 8016abe:	f7f5 f910 	bl	800bce2 <USBD_LL_DataOutStage>
}
 8016ac2:	bf00      	nop
 8016ac4:	3708      	adds	r7, #8
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}

08016aca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016aca:	b580      	push	{r7, lr}
 8016acc:	b082      	sub	sp, #8
 8016ace:	af00      	add	r7, sp, #0
 8016ad0:	6078      	str	r0, [r7, #4]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016adc:	78fa      	ldrb	r2, [r7, #3]
 8016ade:	6879      	ldr	r1, [r7, #4]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	1a9b      	subs	r3, r3, r2
 8016ae6:	009b      	lsls	r3, r3, #2
 8016ae8:	440b      	add	r3, r1
 8016aea:	3348      	adds	r3, #72	; 0x48
 8016aec:	681a      	ldr	r2, [r3, #0]
 8016aee:	78fb      	ldrb	r3, [r7, #3]
 8016af0:	4619      	mov	r1, r3
 8016af2:	f7f5 f959 	bl	800bda8 <USBD_LL_DataInStage>
}
 8016af6:	bf00      	nop
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b082      	sub	sp, #8
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f7f5 fa6d 	bl	800bfec <USBD_LL_SOF>
}
 8016b12:	bf00      	nop
 8016b14:	3708      	adds	r7, #8
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}

08016b1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b1a:	b580      	push	{r7, lr}
 8016b1c:	b084      	sub	sp, #16
 8016b1e:	af00      	add	r7, sp, #0
 8016b20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b22:	2301      	movs	r3, #1
 8016b24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	68db      	ldr	r3, [r3, #12]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d102      	bne.n	8016b34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	73fb      	strb	r3, [r7, #15]
 8016b32:	e008      	b.n	8016b46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	68db      	ldr	r3, [r3, #12]
 8016b38:	2b02      	cmp	r3, #2
 8016b3a:	d102      	bne.n	8016b42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	73fb      	strb	r3, [r7, #15]
 8016b40:	e001      	b.n	8016b46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016b42:	f7ea fee5 	bl	8001910 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b4c:	7bfa      	ldrb	r2, [r7, #15]
 8016b4e:	4611      	mov	r1, r2
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7f5 fa0d 	bl	800bf70 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7f5 f9b9 	bl	800bed4 <USBD_LL_Reset>
}
 8016b62:	bf00      	nop
 8016b64:	3710      	adds	r7, #16
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
	...

08016b6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b082      	sub	sp, #8
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	f7f5 fa08 	bl	800bf90 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	687a      	ldr	r2, [r7, #4]
 8016b8c:	6812      	ldr	r2, [r2, #0]
 8016b8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b92:	f043 0301 	orr.w	r3, r3, #1
 8016b96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	6a1b      	ldr	r3, [r3, #32]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d005      	beq.n	8016bac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016ba0:	4b04      	ldr	r3, [pc, #16]	; (8016bb4 <HAL_PCD_SuspendCallback+0x48>)
 8016ba2:	691b      	ldr	r3, [r3, #16]
 8016ba4:	4a03      	ldr	r2, [pc, #12]	; (8016bb4 <HAL_PCD_SuspendCallback+0x48>)
 8016ba6:	f043 0306 	orr.w	r3, r3, #6
 8016baa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016bac:	bf00      	nop
 8016bae:	3708      	adds	r7, #8
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	e000ed00 	.word	0xe000ed00

08016bb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7f5 f9f8 	bl	800bfbc <USBD_LL_Resume>
}
 8016bcc:	bf00      	nop
 8016bce:	3708      	adds	r7, #8
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}

08016bd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	460b      	mov	r3, r1
 8016bde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016be6:	78fa      	ldrb	r2, [r7, #3]
 8016be8:	4611      	mov	r1, r2
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7f5 fa46 	bl	800c07c <USBD_LL_IsoOUTIncomplete>
}
 8016bf0:	bf00      	nop
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}

08016bf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
 8016c00:	460b      	mov	r3, r1
 8016c02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016c0a:	78fa      	ldrb	r2, [r7, #3]
 8016c0c:	4611      	mov	r1, r2
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7f5 fa0e 	bl	800c030 <USBD_LL_IsoINIncomplete>
}
 8016c14:	bf00      	nop
 8016c16:	3708      	adds	r7, #8
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	f7f5 fa4c 	bl	800c0c8 <USBD_LL_DevConnected>
}
 8016c30:	bf00      	nop
 8016c32:	3708      	adds	r7, #8
 8016c34:	46bd      	mov	sp, r7
 8016c36:	bd80      	pop	{r7, pc}

08016c38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7f5 fa49 	bl	800c0de <USBD_LL_DevDisconnected>
}
 8016c4c:	bf00      	nop
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}

08016c54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d13c      	bne.n	8016cde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016c64:	4a20      	ldr	r2, [pc, #128]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	4a1e      	ldr	r2, [pc, #120]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016c74:	4b1c      	ldr	r3, [pc, #112]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016c7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016c7c:	4b1a      	ldr	r3, [pc, #104]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c7e:	2204      	movs	r2, #4
 8016c80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016c82:	4b19      	ldr	r3, [pc, #100]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c84:	2202      	movs	r2, #2
 8016c86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016c88:	4b17      	ldr	r3, [pc, #92]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016c8e:	4b16      	ldr	r3, [pc, #88]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c90:	2202      	movs	r2, #2
 8016c92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016c94:	4b14      	ldr	r3, [pc, #80]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c96:	2200      	movs	r2, #0
 8016c98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016c9a:	4b13      	ldr	r3, [pc, #76]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016ca0:	4b11      	ldr	r3, [pc, #68]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016ca6:	4b10      	ldr	r3, [pc, #64]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016ca8:	2200      	movs	r2, #0
 8016caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016cac:	4b0e      	ldr	r3, [pc, #56]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016cae:	2200      	movs	r2, #0
 8016cb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016cb2:	480d      	ldr	r0, [pc, #52]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016cb4:	f7ed ff40 	bl	8004b38 <HAL_PCD_Init>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d001      	beq.n	8016cc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016cbe:	f7ea fe27 	bl	8001910 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016cc2:	2180      	movs	r1, #128	; 0x80
 8016cc4:	4808      	ldr	r0, [pc, #32]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016cc6:	f7ef f89e 	bl	8005e06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016cca:	2240      	movs	r2, #64	; 0x40
 8016ccc:	2100      	movs	r1, #0
 8016cce:	4806      	ldr	r0, [pc, #24]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016cd0:	f7ef f852 	bl	8005d78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016cd4:	2280      	movs	r2, #128	; 0x80
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	4803      	ldr	r0, [pc, #12]	; (8016ce8 <USBD_LL_Init+0x94>)
 8016cda:	f7ef f84d 	bl	8005d78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016cde:	2300      	movs	r3, #0
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3708      	adds	r7, #8
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	20008604 	.word	0x20008604

08016cec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b084      	sub	sp, #16
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d02:	4618      	mov	r0, r3
 8016d04:	f7ee f835 	bl	8004d72 <HAL_PCD_Start>
 8016d08:	4603      	mov	r3, r0
 8016d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d0c:	7bfb      	ldrb	r3, [r7, #15]
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f000 f942 	bl	8016f98 <USBD_Get_USB_Status>
 8016d14:	4603      	mov	r3, r0
 8016d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3710      	adds	r7, #16
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}

08016d22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016d22:	b580      	push	{r7, lr}
 8016d24:	b084      	sub	sp, #16
 8016d26:	af00      	add	r7, sp, #0
 8016d28:	6078      	str	r0, [r7, #4]
 8016d2a:	4608      	mov	r0, r1
 8016d2c:	4611      	mov	r1, r2
 8016d2e:	461a      	mov	r2, r3
 8016d30:	4603      	mov	r3, r0
 8016d32:	70fb      	strb	r3, [r7, #3]
 8016d34:	460b      	mov	r3, r1
 8016d36:	70bb      	strb	r3, [r7, #2]
 8016d38:	4613      	mov	r3, r2
 8016d3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d40:	2300      	movs	r3, #0
 8016d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016d4a:	78bb      	ldrb	r3, [r7, #2]
 8016d4c:	883a      	ldrh	r2, [r7, #0]
 8016d4e:	78f9      	ldrb	r1, [r7, #3]
 8016d50:	f7ee fc19 	bl	8005586 <HAL_PCD_EP_Open>
 8016d54:	4603      	mov	r3, r0
 8016d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d58:	7bfb      	ldrb	r3, [r7, #15]
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f000 f91c 	bl	8016f98 <USBD_Get_USB_Status>
 8016d60:	4603      	mov	r3, r0
 8016d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3710      	adds	r7, #16
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}

08016d6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d6e:	b580      	push	{r7, lr}
 8016d70:	b084      	sub	sp, #16
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	6078      	str	r0, [r7, #4]
 8016d76:	460b      	mov	r3, r1
 8016d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d7e:	2300      	movs	r3, #0
 8016d80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d88:	78fa      	ldrb	r2, [r7, #3]
 8016d8a:	4611      	mov	r1, r2
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f7ee fc62 	bl	8005656 <HAL_PCD_EP_Close>
 8016d92:	4603      	mov	r3, r0
 8016d94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d96:	7bfb      	ldrb	r3, [r7, #15]
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f000 f8fd 	bl	8016f98 <USBD_Get_USB_Status>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3710      	adds	r7, #16
 8016da8:	46bd      	mov	sp, r7
 8016daa:	bd80      	pop	{r7, pc}

08016dac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b084      	sub	sp, #16
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
 8016db4:	460b      	mov	r3, r1
 8016db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016db8:	2300      	movs	r3, #0
 8016dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016dc6:	78fa      	ldrb	r2, [r7, #3]
 8016dc8:	4611      	mov	r1, r2
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7ee fd3a 	bl	8005844 <HAL_PCD_EP_SetStall>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dd4:	7bfb      	ldrb	r3, [r7, #15]
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f000 f8de 	bl	8016f98 <USBD_Get_USB_Status>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3710      	adds	r7, #16
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}

08016dea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dea:	b580      	push	{r7, lr}
 8016dec:	b084      	sub	sp, #16
 8016dee:	af00      	add	r7, sp, #0
 8016df0:	6078      	str	r0, [r7, #4]
 8016df2:	460b      	mov	r3, r1
 8016df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016df6:	2300      	movs	r3, #0
 8016df8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e04:	78fa      	ldrb	r2, [r7, #3]
 8016e06:	4611      	mov	r1, r2
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f7ee fd7f 	bl	800590c <HAL_PCD_EP_ClrStall>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e12:	7bfb      	ldrb	r3, [r7, #15]
 8016e14:	4618      	mov	r0, r3
 8016e16:	f000 f8bf 	bl	8016f98 <USBD_Get_USB_Status>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e20:	4618      	mov	r0, r3
 8016e22:	3710      	adds	r7, #16
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}

08016e28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b085      	sub	sp, #20
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	460b      	mov	r3, r1
 8016e32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	da0b      	bge.n	8016e5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016e44:	78fb      	ldrb	r3, [r7, #3]
 8016e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e4a:	68f9      	ldr	r1, [r7, #12]
 8016e4c:	4613      	mov	r3, r2
 8016e4e:	00db      	lsls	r3, r3, #3
 8016e50:	1a9b      	subs	r3, r3, r2
 8016e52:	009b      	lsls	r3, r3, #2
 8016e54:	440b      	add	r3, r1
 8016e56:	333e      	adds	r3, #62	; 0x3e
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	e00b      	b.n	8016e74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016e5c:	78fb      	ldrb	r3, [r7, #3]
 8016e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016e62:	68f9      	ldr	r1, [r7, #12]
 8016e64:	4613      	mov	r3, r2
 8016e66:	00db      	lsls	r3, r3, #3
 8016e68:	1a9b      	subs	r3, r3, r2
 8016e6a:	009b      	lsls	r3, r3, #2
 8016e6c:	440b      	add	r3, r1
 8016e6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3714      	adds	r7, #20
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr

08016e80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
 8016e88:	460b      	mov	r3, r1
 8016e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e90:	2300      	movs	r3, #0
 8016e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016e9a:	78fa      	ldrb	r2, [r7, #3]
 8016e9c:	4611      	mov	r1, r2
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7ee fb4c 	bl	800553c <HAL_PCD_SetAddress>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ea8:	7bfb      	ldrb	r3, [r7, #15]
 8016eaa:	4618      	mov	r0, r3
 8016eac:	f000 f874 	bl	8016f98 <USBD_Get_USB_Status>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	3710      	adds	r7, #16
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}

08016ebe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016ebe:	b580      	push	{r7, lr}
 8016ec0:	b086      	sub	sp, #24
 8016ec2:	af00      	add	r7, sp, #0
 8016ec4:	60f8      	str	r0, [r7, #12]
 8016ec6:	607a      	str	r2, [r7, #4]
 8016ec8:	603b      	str	r3, [r7, #0]
 8016eca:	460b      	mov	r3, r1
 8016ecc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ece:	2300      	movs	r3, #0
 8016ed0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016edc:	7af9      	ldrb	r1, [r7, #11]
 8016ede:	683b      	ldr	r3, [r7, #0]
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	f7ee fc65 	bl	80057b0 <HAL_PCD_EP_Transmit>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016eea:	7dfb      	ldrb	r3, [r7, #23]
 8016eec:	4618      	mov	r0, r3
 8016eee:	f000 f853 	bl	8016f98 <USBD_Get_USB_Status>
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016ef6:	7dbb      	ldrb	r3, [r7, #22]
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	3718      	adds	r7, #24
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd80      	pop	{r7, pc}

08016f00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b086      	sub	sp, #24
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	607a      	str	r2, [r7, #4]
 8016f0a:	603b      	str	r3, [r7, #0]
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f10:	2300      	movs	r3, #0
 8016f12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f14:	2300      	movs	r3, #0
 8016f16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016f1e:	7af9      	ldrb	r1, [r7, #11]
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	687a      	ldr	r2, [r7, #4]
 8016f24:	f7ee fbe1 	bl	80056ea <HAL_PCD_EP_Receive>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f2c:	7dfb      	ldrb	r3, [r7, #23]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f000 f832 	bl	8016f98 <USBD_Get_USB_Status>
 8016f34:	4603      	mov	r3, r0
 8016f36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f38:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3718      	adds	r7, #24
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}

08016f42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016f42:	b580      	push	{r7, lr}
 8016f44:	b082      	sub	sp, #8
 8016f46:	af00      	add	r7, sp, #0
 8016f48:	6078      	str	r0, [r7, #4]
 8016f4a:	460b      	mov	r3, r1
 8016f4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016f54:	78fa      	ldrb	r2, [r7, #3]
 8016f56:	4611      	mov	r1, r2
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7ee fc11 	bl	8005780 <HAL_PCD_EP_GetRxCount>
 8016f5e:	4603      	mov	r3, r0
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3708      	adds	r7, #8
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016f68:	b480      	push	{r7}
 8016f6a:	b083      	sub	sp, #12
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016f70:	4b03      	ldr	r3, [pc, #12]	; (8016f80 <USBD_static_malloc+0x18>)
}
 8016f72:	4618      	mov	r0, r3
 8016f74:	370c      	adds	r7, #12
 8016f76:	46bd      	mov	sp, r7
 8016f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7c:	4770      	bx	lr
 8016f7e:	bf00      	nop
 8016f80:	20000590 	.word	0x20000590

08016f84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b083      	sub	sp, #12
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]

}
 8016f8c:	bf00      	nop
 8016f8e:	370c      	adds	r7, #12
 8016f90:	46bd      	mov	sp, r7
 8016f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f96:	4770      	bx	lr

08016f98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016f98:	b480      	push	{r7}
 8016f9a:	b085      	sub	sp, #20
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fa2:	2300      	movs	r3, #0
 8016fa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016fa6:	79fb      	ldrb	r3, [r7, #7]
 8016fa8:	2b03      	cmp	r3, #3
 8016faa:	d817      	bhi.n	8016fdc <USBD_Get_USB_Status+0x44>
 8016fac:	a201      	add	r2, pc, #4	; (adr r2, 8016fb4 <USBD_Get_USB_Status+0x1c>)
 8016fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016fb2:	bf00      	nop
 8016fb4:	08016fc5 	.word	0x08016fc5
 8016fb8:	08016fcb 	.word	0x08016fcb
 8016fbc:	08016fd1 	.word	0x08016fd1
 8016fc0:	08016fd7 	.word	0x08016fd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8016fc8:	e00b      	b.n	8016fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016fca:	2303      	movs	r3, #3
 8016fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8016fce:	e008      	b.n	8016fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8016fd4:	e005      	b.n	8016fe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016fd6:	2303      	movs	r3, #3
 8016fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8016fda:	e002      	b.n	8016fe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016fdc:	2303      	movs	r3, #3
 8016fde:	73fb      	strb	r3, [r7, #15]
    break;
 8016fe0:	bf00      	nop
  }
  return usb_status;
 8016fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	3714      	adds	r7, #20
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fee:	4770      	bx	lr

08016ff0 <__libc_init_array>:
 8016ff0:	b570      	push	{r4, r5, r6, lr}
 8016ff2:	4d0d      	ldr	r5, [pc, #52]	; (8017028 <__libc_init_array+0x38>)
 8016ff4:	4c0d      	ldr	r4, [pc, #52]	; (801702c <__libc_init_array+0x3c>)
 8016ff6:	1b64      	subs	r4, r4, r5
 8016ff8:	10a4      	asrs	r4, r4, #2
 8016ffa:	2600      	movs	r6, #0
 8016ffc:	42a6      	cmp	r6, r4
 8016ffe:	d109      	bne.n	8017014 <__libc_init_array+0x24>
 8017000:	4d0b      	ldr	r5, [pc, #44]	; (8017030 <__libc_init_array+0x40>)
 8017002:	4c0c      	ldr	r4, [pc, #48]	; (8017034 <__libc_init_array+0x44>)
 8017004:	f008 f87a 	bl	801f0fc <_init>
 8017008:	1b64      	subs	r4, r4, r5
 801700a:	10a4      	asrs	r4, r4, #2
 801700c:	2600      	movs	r6, #0
 801700e:	42a6      	cmp	r6, r4
 8017010:	d105      	bne.n	801701e <__libc_init_array+0x2e>
 8017012:	bd70      	pop	{r4, r5, r6, pc}
 8017014:	f855 3b04 	ldr.w	r3, [r5], #4
 8017018:	4798      	blx	r3
 801701a:	3601      	adds	r6, #1
 801701c:	e7ee      	b.n	8016ffc <__libc_init_array+0xc>
 801701e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017022:	4798      	blx	r3
 8017024:	3601      	adds	r6, #1
 8017026:	e7f2      	b.n	801700e <__libc_init_array+0x1e>
 8017028:	080227e8 	.word	0x080227e8
 801702c:	080227e8 	.word	0x080227e8
 8017030:	080227e8 	.word	0x080227e8
 8017034:	080227ec 	.word	0x080227ec

08017038 <memcmp>:
 8017038:	b530      	push	{r4, r5, lr}
 801703a:	3901      	subs	r1, #1
 801703c:	2400      	movs	r4, #0
 801703e:	42a2      	cmp	r2, r4
 8017040:	d101      	bne.n	8017046 <memcmp+0xe>
 8017042:	2000      	movs	r0, #0
 8017044:	e005      	b.n	8017052 <memcmp+0x1a>
 8017046:	5d03      	ldrb	r3, [r0, r4]
 8017048:	3401      	adds	r4, #1
 801704a:	5d0d      	ldrb	r5, [r1, r4]
 801704c:	42ab      	cmp	r3, r5
 801704e:	d0f6      	beq.n	801703e <memcmp+0x6>
 8017050:	1b58      	subs	r0, r3, r5
 8017052:	bd30      	pop	{r4, r5, pc}

08017054 <memcpy>:
 8017054:	440a      	add	r2, r1
 8017056:	4291      	cmp	r1, r2
 8017058:	f100 33ff 	add.w	r3, r0, #4294967295
 801705c:	d100      	bne.n	8017060 <memcpy+0xc>
 801705e:	4770      	bx	lr
 8017060:	b510      	push	{r4, lr}
 8017062:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017066:	f803 4f01 	strb.w	r4, [r3, #1]!
 801706a:	4291      	cmp	r1, r2
 801706c:	d1f9      	bne.n	8017062 <memcpy+0xe>
 801706e:	bd10      	pop	{r4, pc}

08017070 <memmove>:
 8017070:	4288      	cmp	r0, r1
 8017072:	b510      	push	{r4, lr}
 8017074:	eb01 0402 	add.w	r4, r1, r2
 8017078:	d902      	bls.n	8017080 <memmove+0x10>
 801707a:	4284      	cmp	r4, r0
 801707c:	4623      	mov	r3, r4
 801707e:	d807      	bhi.n	8017090 <memmove+0x20>
 8017080:	1e43      	subs	r3, r0, #1
 8017082:	42a1      	cmp	r1, r4
 8017084:	d008      	beq.n	8017098 <memmove+0x28>
 8017086:	f811 2b01 	ldrb.w	r2, [r1], #1
 801708a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801708e:	e7f8      	b.n	8017082 <memmove+0x12>
 8017090:	4402      	add	r2, r0
 8017092:	4601      	mov	r1, r0
 8017094:	428a      	cmp	r2, r1
 8017096:	d100      	bne.n	801709a <memmove+0x2a>
 8017098:	bd10      	pop	{r4, pc}
 801709a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801709e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80170a2:	e7f7      	b.n	8017094 <memmove+0x24>

080170a4 <memset>:
 80170a4:	4402      	add	r2, r0
 80170a6:	4603      	mov	r3, r0
 80170a8:	4293      	cmp	r3, r2
 80170aa:	d100      	bne.n	80170ae <memset+0xa>
 80170ac:	4770      	bx	lr
 80170ae:	f803 1b01 	strb.w	r1, [r3], #1
 80170b2:	e7f9      	b.n	80170a8 <memset+0x4>

080170b4 <__cvt>:
 80170b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170b8:	ec55 4b10 	vmov	r4, r5, d0
 80170bc:	2d00      	cmp	r5, #0
 80170be:	460e      	mov	r6, r1
 80170c0:	4619      	mov	r1, r3
 80170c2:	462b      	mov	r3, r5
 80170c4:	bfbb      	ittet	lt
 80170c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80170ca:	461d      	movlt	r5, r3
 80170cc:	2300      	movge	r3, #0
 80170ce:	232d      	movlt	r3, #45	; 0x2d
 80170d0:	700b      	strb	r3, [r1, #0]
 80170d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80170d8:	4691      	mov	r9, r2
 80170da:	f023 0820 	bic.w	r8, r3, #32
 80170de:	bfbc      	itt	lt
 80170e0:	4622      	movlt	r2, r4
 80170e2:	4614      	movlt	r4, r2
 80170e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80170e8:	d005      	beq.n	80170f6 <__cvt+0x42>
 80170ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80170ee:	d100      	bne.n	80170f2 <__cvt+0x3e>
 80170f0:	3601      	adds	r6, #1
 80170f2:	2102      	movs	r1, #2
 80170f4:	e000      	b.n	80170f8 <__cvt+0x44>
 80170f6:	2103      	movs	r1, #3
 80170f8:	ab03      	add	r3, sp, #12
 80170fa:	9301      	str	r3, [sp, #4]
 80170fc:	ab02      	add	r3, sp, #8
 80170fe:	9300      	str	r3, [sp, #0]
 8017100:	ec45 4b10 	vmov	d0, r4, r5
 8017104:	4653      	mov	r3, sl
 8017106:	4632      	mov	r2, r6
 8017108:	f001 fe3a 	bl	8018d80 <_dtoa_r>
 801710c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017110:	4607      	mov	r7, r0
 8017112:	d102      	bne.n	801711a <__cvt+0x66>
 8017114:	f019 0f01 	tst.w	r9, #1
 8017118:	d022      	beq.n	8017160 <__cvt+0xac>
 801711a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801711e:	eb07 0906 	add.w	r9, r7, r6
 8017122:	d110      	bne.n	8017146 <__cvt+0x92>
 8017124:	783b      	ldrb	r3, [r7, #0]
 8017126:	2b30      	cmp	r3, #48	; 0x30
 8017128:	d10a      	bne.n	8017140 <__cvt+0x8c>
 801712a:	2200      	movs	r2, #0
 801712c:	2300      	movs	r3, #0
 801712e:	4620      	mov	r0, r4
 8017130:	4629      	mov	r1, r5
 8017132:	f7e9 fcd9 	bl	8000ae8 <__aeabi_dcmpeq>
 8017136:	b918      	cbnz	r0, 8017140 <__cvt+0x8c>
 8017138:	f1c6 0601 	rsb	r6, r6, #1
 801713c:	f8ca 6000 	str.w	r6, [sl]
 8017140:	f8da 3000 	ldr.w	r3, [sl]
 8017144:	4499      	add	r9, r3
 8017146:	2200      	movs	r2, #0
 8017148:	2300      	movs	r3, #0
 801714a:	4620      	mov	r0, r4
 801714c:	4629      	mov	r1, r5
 801714e:	f7e9 fccb 	bl	8000ae8 <__aeabi_dcmpeq>
 8017152:	b108      	cbz	r0, 8017158 <__cvt+0xa4>
 8017154:	f8cd 900c 	str.w	r9, [sp, #12]
 8017158:	2230      	movs	r2, #48	; 0x30
 801715a:	9b03      	ldr	r3, [sp, #12]
 801715c:	454b      	cmp	r3, r9
 801715e:	d307      	bcc.n	8017170 <__cvt+0xbc>
 8017160:	9b03      	ldr	r3, [sp, #12]
 8017162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017164:	1bdb      	subs	r3, r3, r7
 8017166:	4638      	mov	r0, r7
 8017168:	6013      	str	r3, [r2, #0]
 801716a:	b004      	add	sp, #16
 801716c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017170:	1c59      	adds	r1, r3, #1
 8017172:	9103      	str	r1, [sp, #12]
 8017174:	701a      	strb	r2, [r3, #0]
 8017176:	e7f0      	b.n	801715a <__cvt+0xa6>

08017178 <__exponent>:
 8017178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801717a:	4603      	mov	r3, r0
 801717c:	2900      	cmp	r1, #0
 801717e:	bfb8      	it	lt
 8017180:	4249      	neglt	r1, r1
 8017182:	f803 2b02 	strb.w	r2, [r3], #2
 8017186:	bfb4      	ite	lt
 8017188:	222d      	movlt	r2, #45	; 0x2d
 801718a:	222b      	movge	r2, #43	; 0x2b
 801718c:	2909      	cmp	r1, #9
 801718e:	7042      	strb	r2, [r0, #1]
 8017190:	dd2a      	ble.n	80171e8 <__exponent+0x70>
 8017192:	f10d 0407 	add.w	r4, sp, #7
 8017196:	46a4      	mov	ip, r4
 8017198:	270a      	movs	r7, #10
 801719a:	46a6      	mov	lr, r4
 801719c:	460a      	mov	r2, r1
 801719e:	fb91 f6f7 	sdiv	r6, r1, r7
 80171a2:	fb07 1516 	mls	r5, r7, r6, r1
 80171a6:	3530      	adds	r5, #48	; 0x30
 80171a8:	2a63      	cmp	r2, #99	; 0x63
 80171aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80171ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80171b2:	4631      	mov	r1, r6
 80171b4:	dcf1      	bgt.n	801719a <__exponent+0x22>
 80171b6:	3130      	adds	r1, #48	; 0x30
 80171b8:	f1ae 0502 	sub.w	r5, lr, #2
 80171bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80171c0:	1c44      	adds	r4, r0, #1
 80171c2:	4629      	mov	r1, r5
 80171c4:	4561      	cmp	r1, ip
 80171c6:	d30a      	bcc.n	80171de <__exponent+0x66>
 80171c8:	f10d 0209 	add.w	r2, sp, #9
 80171cc:	eba2 020e 	sub.w	r2, r2, lr
 80171d0:	4565      	cmp	r5, ip
 80171d2:	bf88      	it	hi
 80171d4:	2200      	movhi	r2, #0
 80171d6:	4413      	add	r3, r2
 80171d8:	1a18      	subs	r0, r3, r0
 80171da:	b003      	add	sp, #12
 80171dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80171e6:	e7ed      	b.n	80171c4 <__exponent+0x4c>
 80171e8:	2330      	movs	r3, #48	; 0x30
 80171ea:	3130      	adds	r1, #48	; 0x30
 80171ec:	7083      	strb	r3, [r0, #2]
 80171ee:	70c1      	strb	r1, [r0, #3]
 80171f0:	1d03      	adds	r3, r0, #4
 80171f2:	e7f1      	b.n	80171d8 <__exponent+0x60>

080171f4 <_printf_float>:
 80171f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f8:	ed2d 8b02 	vpush	{d8}
 80171fc:	b08d      	sub	sp, #52	; 0x34
 80171fe:	460c      	mov	r4, r1
 8017200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017204:	4616      	mov	r6, r2
 8017206:	461f      	mov	r7, r3
 8017208:	4605      	mov	r5, r0
 801720a:	f003 f821 	bl	801a250 <_localeconv_r>
 801720e:	f8d0 a000 	ldr.w	sl, [r0]
 8017212:	4650      	mov	r0, sl
 8017214:	f7e8 ffec 	bl	80001f0 <strlen>
 8017218:	2300      	movs	r3, #0
 801721a:	930a      	str	r3, [sp, #40]	; 0x28
 801721c:	6823      	ldr	r3, [r4, #0]
 801721e:	9305      	str	r3, [sp, #20]
 8017220:	f8d8 3000 	ldr.w	r3, [r8]
 8017224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017228:	3307      	adds	r3, #7
 801722a:	f023 0307 	bic.w	r3, r3, #7
 801722e:	f103 0208 	add.w	r2, r3, #8
 8017232:	f8c8 2000 	str.w	r2, [r8]
 8017236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801723e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017246:	9307      	str	r3, [sp, #28]
 8017248:	f8cd 8018 	str.w	r8, [sp, #24]
 801724c:	ee08 0a10 	vmov	s16, r0
 8017250:	4b9f      	ldr	r3, [pc, #636]	; (80174d0 <_printf_float+0x2dc>)
 8017252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017256:	f04f 32ff 	mov.w	r2, #4294967295
 801725a:	f7e9 fc77 	bl	8000b4c <__aeabi_dcmpun>
 801725e:	bb88      	cbnz	r0, 80172c4 <_printf_float+0xd0>
 8017260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017264:	4b9a      	ldr	r3, [pc, #616]	; (80174d0 <_printf_float+0x2dc>)
 8017266:	f04f 32ff 	mov.w	r2, #4294967295
 801726a:	f7e9 fc51 	bl	8000b10 <__aeabi_dcmple>
 801726e:	bb48      	cbnz	r0, 80172c4 <_printf_float+0xd0>
 8017270:	2200      	movs	r2, #0
 8017272:	2300      	movs	r3, #0
 8017274:	4640      	mov	r0, r8
 8017276:	4649      	mov	r1, r9
 8017278:	f7e9 fc40 	bl	8000afc <__aeabi_dcmplt>
 801727c:	b110      	cbz	r0, 8017284 <_printf_float+0x90>
 801727e:	232d      	movs	r3, #45	; 0x2d
 8017280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017284:	4b93      	ldr	r3, [pc, #588]	; (80174d4 <_printf_float+0x2e0>)
 8017286:	4894      	ldr	r0, [pc, #592]	; (80174d8 <_printf_float+0x2e4>)
 8017288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801728c:	bf94      	ite	ls
 801728e:	4698      	movls	r8, r3
 8017290:	4680      	movhi	r8, r0
 8017292:	2303      	movs	r3, #3
 8017294:	6123      	str	r3, [r4, #16]
 8017296:	9b05      	ldr	r3, [sp, #20]
 8017298:	f023 0204 	bic.w	r2, r3, #4
 801729c:	6022      	str	r2, [r4, #0]
 801729e:	f04f 0900 	mov.w	r9, #0
 80172a2:	9700      	str	r7, [sp, #0]
 80172a4:	4633      	mov	r3, r6
 80172a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80172a8:	4621      	mov	r1, r4
 80172aa:	4628      	mov	r0, r5
 80172ac:	f000 f9d8 	bl	8017660 <_printf_common>
 80172b0:	3001      	adds	r0, #1
 80172b2:	f040 8090 	bne.w	80173d6 <_printf_float+0x1e2>
 80172b6:	f04f 30ff 	mov.w	r0, #4294967295
 80172ba:	b00d      	add	sp, #52	; 0x34
 80172bc:	ecbd 8b02 	vpop	{d8}
 80172c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172c4:	4642      	mov	r2, r8
 80172c6:	464b      	mov	r3, r9
 80172c8:	4640      	mov	r0, r8
 80172ca:	4649      	mov	r1, r9
 80172cc:	f7e9 fc3e 	bl	8000b4c <__aeabi_dcmpun>
 80172d0:	b140      	cbz	r0, 80172e4 <_printf_float+0xf0>
 80172d2:	464b      	mov	r3, r9
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	bfbc      	itt	lt
 80172d8:	232d      	movlt	r3, #45	; 0x2d
 80172da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80172de:	487f      	ldr	r0, [pc, #508]	; (80174dc <_printf_float+0x2e8>)
 80172e0:	4b7f      	ldr	r3, [pc, #508]	; (80174e0 <_printf_float+0x2ec>)
 80172e2:	e7d1      	b.n	8017288 <_printf_float+0x94>
 80172e4:	6863      	ldr	r3, [r4, #4]
 80172e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80172ea:	9206      	str	r2, [sp, #24]
 80172ec:	1c5a      	adds	r2, r3, #1
 80172ee:	d13f      	bne.n	8017370 <_printf_float+0x17c>
 80172f0:	2306      	movs	r3, #6
 80172f2:	6063      	str	r3, [r4, #4]
 80172f4:	9b05      	ldr	r3, [sp, #20]
 80172f6:	6861      	ldr	r1, [r4, #4]
 80172f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80172fc:	2300      	movs	r3, #0
 80172fe:	9303      	str	r3, [sp, #12]
 8017300:	ab0a      	add	r3, sp, #40	; 0x28
 8017302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017306:	ab09      	add	r3, sp, #36	; 0x24
 8017308:	ec49 8b10 	vmov	d0, r8, r9
 801730c:	9300      	str	r3, [sp, #0]
 801730e:	6022      	str	r2, [r4, #0]
 8017310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017314:	4628      	mov	r0, r5
 8017316:	f7ff fecd 	bl	80170b4 <__cvt>
 801731a:	9b06      	ldr	r3, [sp, #24]
 801731c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801731e:	2b47      	cmp	r3, #71	; 0x47
 8017320:	4680      	mov	r8, r0
 8017322:	d108      	bne.n	8017336 <_printf_float+0x142>
 8017324:	1cc8      	adds	r0, r1, #3
 8017326:	db02      	blt.n	801732e <_printf_float+0x13a>
 8017328:	6863      	ldr	r3, [r4, #4]
 801732a:	4299      	cmp	r1, r3
 801732c:	dd41      	ble.n	80173b2 <_printf_float+0x1be>
 801732e:	f1ab 0b02 	sub.w	fp, fp, #2
 8017332:	fa5f fb8b 	uxtb.w	fp, fp
 8017336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801733a:	d820      	bhi.n	801737e <_printf_float+0x18a>
 801733c:	3901      	subs	r1, #1
 801733e:	465a      	mov	r2, fp
 8017340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017344:	9109      	str	r1, [sp, #36]	; 0x24
 8017346:	f7ff ff17 	bl	8017178 <__exponent>
 801734a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801734c:	1813      	adds	r3, r2, r0
 801734e:	2a01      	cmp	r2, #1
 8017350:	4681      	mov	r9, r0
 8017352:	6123      	str	r3, [r4, #16]
 8017354:	dc02      	bgt.n	801735c <_printf_float+0x168>
 8017356:	6822      	ldr	r2, [r4, #0]
 8017358:	07d2      	lsls	r2, r2, #31
 801735a:	d501      	bpl.n	8017360 <_printf_float+0x16c>
 801735c:	3301      	adds	r3, #1
 801735e:	6123      	str	r3, [r4, #16]
 8017360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017364:	2b00      	cmp	r3, #0
 8017366:	d09c      	beq.n	80172a2 <_printf_float+0xae>
 8017368:	232d      	movs	r3, #45	; 0x2d
 801736a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801736e:	e798      	b.n	80172a2 <_printf_float+0xae>
 8017370:	9a06      	ldr	r2, [sp, #24]
 8017372:	2a47      	cmp	r2, #71	; 0x47
 8017374:	d1be      	bne.n	80172f4 <_printf_float+0x100>
 8017376:	2b00      	cmp	r3, #0
 8017378:	d1bc      	bne.n	80172f4 <_printf_float+0x100>
 801737a:	2301      	movs	r3, #1
 801737c:	e7b9      	b.n	80172f2 <_printf_float+0xfe>
 801737e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017382:	d118      	bne.n	80173b6 <_printf_float+0x1c2>
 8017384:	2900      	cmp	r1, #0
 8017386:	6863      	ldr	r3, [r4, #4]
 8017388:	dd0b      	ble.n	80173a2 <_printf_float+0x1ae>
 801738a:	6121      	str	r1, [r4, #16]
 801738c:	b913      	cbnz	r3, 8017394 <_printf_float+0x1a0>
 801738e:	6822      	ldr	r2, [r4, #0]
 8017390:	07d0      	lsls	r0, r2, #31
 8017392:	d502      	bpl.n	801739a <_printf_float+0x1a6>
 8017394:	3301      	adds	r3, #1
 8017396:	440b      	add	r3, r1
 8017398:	6123      	str	r3, [r4, #16]
 801739a:	65a1      	str	r1, [r4, #88]	; 0x58
 801739c:	f04f 0900 	mov.w	r9, #0
 80173a0:	e7de      	b.n	8017360 <_printf_float+0x16c>
 80173a2:	b913      	cbnz	r3, 80173aa <_printf_float+0x1b6>
 80173a4:	6822      	ldr	r2, [r4, #0]
 80173a6:	07d2      	lsls	r2, r2, #31
 80173a8:	d501      	bpl.n	80173ae <_printf_float+0x1ba>
 80173aa:	3302      	adds	r3, #2
 80173ac:	e7f4      	b.n	8017398 <_printf_float+0x1a4>
 80173ae:	2301      	movs	r3, #1
 80173b0:	e7f2      	b.n	8017398 <_printf_float+0x1a4>
 80173b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80173b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173b8:	4299      	cmp	r1, r3
 80173ba:	db05      	blt.n	80173c8 <_printf_float+0x1d4>
 80173bc:	6823      	ldr	r3, [r4, #0]
 80173be:	6121      	str	r1, [r4, #16]
 80173c0:	07d8      	lsls	r0, r3, #31
 80173c2:	d5ea      	bpl.n	801739a <_printf_float+0x1a6>
 80173c4:	1c4b      	adds	r3, r1, #1
 80173c6:	e7e7      	b.n	8017398 <_printf_float+0x1a4>
 80173c8:	2900      	cmp	r1, #0
 80173ca:	bfd4      	ite	le
 80173cc:	f1c1 0202 	rsble	r2, r1, #2
 80173d0:	2201      	movgt	r2, #1
 80173d2:	4413      	add	r3, r2
 80173d4:	e7e0      	b.n	8017398 <_printf_float+0x1a4>
 80173d6:	6823      	ldr	r3, [r4, #0]
 80173d8:	055a      	lsls	r2, r3, #21
 80173da:	d407      	bmi.n	80173ec <_printf_float+0x1f8>
 80173dc:	6923      	ldr	r3, [r4, #16]
 80173de:	4642      	mov	r2, r8
 80173e0:	4631      	mov	r1, r6
 80173e2:	4628      	mov	r0, r5
 80173e4:	47b8      	blx	r7
 80173e6:	3001      	adds	r0, #1
 80173e8:	d12c      	bne.n	8017444 <_printf_float+0x250>
 80173ea:	e764      	b.n	80172b6 <_printf_float+0xc2>
 80173ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80173f0:	f240 80e0 	bls.w	80175b4 <_printf_float+0x3c0>
 80173f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80173f8:	2200      	movs	r2, #0
 80173fa:	2300      	movs	r3, #0
 80173fc:	f7e9 fb74 	bl	8000ae8 <__aeabi_dcmpeq>
 8017400:	2800      	cmp	r0, #0
 8017402:	d034      	beq.n	801746e <_printf_float+0x27a>
 8017404:	4a37      	ldr	r2, [pc, #220]	; (80174e4 <_printf_float+0x2f0>)
 8017406:	2301      	movs	r3, #1
 8017408:	4631      	mov	r1, r6
 801740a:	4628      	mov	r0, r5
 801740c:	47b8      	blx	r7
 801740e:	3001      	adds	r0, #1
 8017410:	f43f af51 	beq.w	80172b6 <_printf_float+0xc2>
 8017414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017418:	429a      	cmp	r2, r3
 801741a:	db02      	blt.n	8017422 <_printf_float+0x22e>
 801741c:	6823      	ldr	r3, [r4, #0]
 801741e:	07d8      	lsls	r0, r3, #31
 8017420:	d510      	bpl.n	8017444 <_printf_float+0x250>
 8017422:	ee18 3a10 	vmov	r3, s16
 8017426:	4652      	mov	r2, sl
 8017428:	4631      	mov	r1, r6
 801742a:	4628      	mov	r0, r5
 801742c:	47b8      	blx	r7
 801742e:	3001      	adds	r0, #1
 8017430:	f43f af41 	beq.w	80172b6 <_printf_float+0xc2>
 8017434:	f04f 0800 	mov.w	r8, #0
 8017438:	f104 091a 	add.w	r9, r4, #26
 801743c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801743e:	3b01      	subs	r3, #1
 8017440:	4543      	cmp	r3, r8
 8017442:	dc09      	bgt.n	8017458 <_printf_float+0x264>
 8017444:	6823      	ldr	r3, [r4, #0]
 8017446:	079b      	lsls	r3, r3, #30
 8017448:	f100 8105 	bmi.w	8017656 <_printf_float+0x462>
 801744c:	68e0      	ldr	r0, [r4, #12]
 801744e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017450:	4298      	cmp	r0, r3
 8017452:	bfb8      	it	lt
 8017454:	4618      	movlt	r0, r3
 8017456:	e730      	b.n	80172ba <_printf_float+0xc6>
 8017458:	2301      	movs	r3, #1
 801745a:	464a      	mov	r2, r9
 801745c:	4631      	mov	r1, r6
 801745e:	4628      	mov	r0, r5
 8017460:	47b8      	blx	r7
 8017462:	3001      	adds	r0, #1
 8017464:	f43f af27 	beq.w	80172b6 <_printf_float+0xc2>
 8017468:	f108 0801 	add.w	r8, r8, #1
 801746c:	e7e6      	b.n	801743c <_printf_float+0x248>
 801746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017470:	2b00      	cmp	r3, #0
 8017472:	dc39      	bgt.n	80174e8 <_printf_float+0x2f4>
 8017474:	4a1b      	ldr	r2, [pc, #108]	; (80174e4 <_printf_float+0x2f0>)
 8017476:	2301      	movs	r3, #1
 8017478:	4631      	mov	r1, r6
 801747a:	4628      	mov	r0, r5
 801747c:	47b8      	blx	r7
 801747e:	3001      	adds	r0, #1
 8017480:	f43f af19 	beq.w	80172b6 <_printf_float+0xc2>
 8017484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017488:	4313      	orrs	r3, r2
 801748a:	d102      	bne.n	8017492 <_printf_float+0x29e>
 801748c:	6823      	ldr	r3, [r4, #0]
 801748e:	07d9      	lsls	r1, r3, #31
 8017490:	d5d8      	bpl.n	8017444 <_printf_float+0x250>
 8017492:	ee18 3a10 	vmov	r3, s16
 8017496:	4652      	mov	r2, sl
 8017498:	4631      	mov	r1, r6
 801749a:	4628      	mov	r0, r5
 801749c:	47b8      	blx	r7
 801749e:	3001      	adds	r0, #1
 80174a0:	f43f af09 	beq.w	80172b6 <_printf_float+0xc2>
 80174a4:	f04f 0900 	mov.w	r9, #0
 80174a8:	f104 0a1a 	add.w	sl, r4, #26
 80174ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174ae:	425b      	negs	r3, r3
 80174b0:	454b      	cmp	r3, r9
 80174b2:	dc01      	bgt.n	80174b8 <_printf_float+0x2c4>
 80174b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174b6:	e792      	b.n	80173de <_printf_float+0x1ea>
 80174b8:	2301      	movs	r3, #1
 80174ba:	4652      	mov	r2, sl
 80174bc:	4631      	mov	r1, r6
 80174be:	4628      	mov	r0, r5
 80174c0:	47b8      	blx	r7
 80174c2:	3001      	adds	r0, #1
 80174c4:	f43f aef7 	beq.w	80172b6 <_printf_float+0xc2>
 80174c8:	f109 0901 	add.w	r9, r9, #1
 80174cc:	e7ee      	b.n	80174ac <_printf_float+0x2b8>
 80174ce:	bf00      	nop
 80174d0:	7fefffff 	.word	0x7fefffff
 80174d4:	08021d58 	.word	0x08021d58
 80174d8:	08021d5c 	.word	0x08021d5c
 80174dc:	08021d64 	.word	0x08021d64
 80174e0:	08021d60 	.word	0x08021d60
 80174e4:	08021d68 	.word	0x08021d68
 80174e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80174ec:	429a      	cmp	r2, r3
 80174ee:	bfa8      	it	ge
 80174f0:	461a      	movge	r2, r3
 80174f2:	2a00      	cmp	r2, #0
 80174f4:	4691      	mov	r9, r2
 80174f6:	dc37      	bgt.n	8017568 <_printf_float+0x374>
 80174f8:	f04f 0b00 	mov.w	fp, #0
 80174fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017500:	f104 021a 	add.w	r2, r4, #26
 8017504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017506:	9305      	str	r3, [sp, #20]
 8017508:	eba3 0309 	sub.w	r3, r3, r9
 801750c:	455b      	cmp	r3, fp
 801750e:	dc33      	bgt.n	8017578 <_printf_float+0x384>
 8017510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017514:	429a      	cmp	r2, r3
 8017516:	db3b      	blt.n	8017590 <_printf_float+0x39c>
 8017518:	6823      	ldr	r3, [r4, #0]
 801751a:	07da      	lsls	r2, r3, #31
 801751c:	d438      	bmi.n	8017590 <_printf_float+0x39c>
 801751e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017520:	9b05      	ldr	r3, [sp, #20]
 8017522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017524:	1ad3      	subs	r3, r2, r3
 8017526:	eba2 0901 	sub.w	r9, r2, r1
 801752a:	4599      	cmp	r9, r3
 801752c:	bfa8      	it	ge
 801752e:	4699      	movge	r9, r3
 8017530:	f1b9 0f00 	cmp.w	r9, #0
 8017534:	dc35      	bgt.n	80175a2 <_printf_float+0x3ae>
 8017536:	f04f 0800 	mov.w	r8, #0
 801753a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801753e:	f104 0a1a 	add.w	sl, r4, #26
 8017542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017546:	1a9b      	subs	r3, r3, r2
 8017548:	eba3 0309 	sub.w	r3, r3, r9
 801754c:	4543      	cmp	r3, r8
 801754e:	f77f af79 	ble.w	8017444 <_printf_float+0x250>
 8017552:	2301      	movs	r3, #1
 8017554:	4652      	mov	r2, sl
 8017556:	4631      	mov	r1, r6
 8017558:	4628      	mov	r0, r5
 801755a:	47b8      	blx	r7
 801755c:	3001      	adds	r0, #1
 801755e:	f43f aeaa 	beq.w	80172b6 <_printf_float+0xc2>
 8017562:	f108 0801 	add.w	r8, r8, #1
 8017566:	e7ec      	b.n	8017542 <_printf_float+0x34e>
 8017568:	4613      	mov	r3, r2
 801756a:	4631      	mov	r1, r6
 801756c:	4642      	mov	r2, r8
 801756e:	4628      	mov	r0, r5
 8017570:	47b8      	blx	r7
 8017572:	3001      	adds	r0, #1
 8017574:	d1c0      	bne.n	80174f8 <_printf_float+0x304>
 8017576:	e69e      	b.n	80172b6 <_printf_float+0xc2>
 8017578:	2301      	movs	r3, #1
 801757a:	4631      	mov	r1, r6
 801757c:	4628      	mov	r0, r5
 801757e:	9205      	str	r2, [sp, #20]
 8017580:	47b8      	blx	r7
 8017582:	3001      	adds	r0, #1
 8017584:	f43f ae97 	beq.w	80172b6 <_printf_float+0xc2>
 8017588:	9a05      	ldr	r2, [sp, #20]
 801758a:	f10b 0b01 	add.w	fp, fp, #1
 801758e:	e7b9      	b.n	8017504 <_printf_float+0x310>
 8017590:	ee18 3a10 	vmov	r3, s16
 8017594:	4652      	mov	r2, sl
 8017596:	4631      	mov	r1, r6
 8017598:	4628      	mov	r0, r5
 801759a:	47b8      	blx	r7
 801759c:	3001      	adds	r0, #1
 801759e:	d1be      	bne.n	801751e <_printf_float+0x32a>
 80175a0:	e689      	b.n	80172b6 <_printf_float+0xc2>
 80175a2:	9a05      	ldr	r2, [sp, #20]
 80175a4:	464b      	mov	r3, r9
 80175a6:	4442      	add	r2, r8
 80175a8:	4631      	mov	r1, r6
 80175aa:	4628      	mov	r0, r5
 80175ac:	47b8      	blx	r7
 80175ae:	3001      	adds	r0, #1
 80175b0:	d1c1      	bne.n	8017536 <_printf_float+0x342>
 80175b2:	e680      	b.n	80172b6 <_printf_float+0xc2>
 80175b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175b6:	2a01      	cmp	r2, #1
 80175b8:	dc01      	bgt.n	80175be <_printf_float+0x3ca>
 80175ba:	07db      	lsls	r3, r3, #31
 80175bc:	d538      	bpl.n	8017630 <_printf_float+0x43c>
 80175be:	2301      	movs	r3, #1
 80175c0:	4642      	mov	r2, r8
 80175c2:	4631      	mov	r1, r6
 80175c4:	4628      	mov	r0, r5
 80175c6:	47b8      	blx	r7
 80175c8:	3001      	adds	r0, #1
 80175ca:	f43f ae74 	beq.w	80172b6 <_printf_float+0xc2>
 80175ce:	ee18 3a10 	vmov	r3, s16
 80175d2:	4652      	mov	r2, sl
 80175d4:	4631      	mov	r1, r6
 80175d6:	4628      	mov	r0, r5
 80175d8:	47b8      	blx	r7
 80175da:	3001      	adds	r0, #1
 80175dc:	f43f ae6b 	beq.w	80172b6 <_printf_float+0xc2>
 80175e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80175e4:	2200      	movs	r2, #0
 80175e6:	2300      	movs	r3, #0
 80175e8:	f7e9 fa7e 	bl	8000ae8 <__aeabi_dcmpeq>
 80175ec:	b9d8      	cbnz	r0, 8017626 <_printf_float+0x432>
 80175ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175f0:	f108 0201 	add.w	r2, r8, #1
 80175f4:	3b01      	subs	r3, #1
 80175f6:	4631      	mov	r1, r6
 80175f8:	4628      	mov	r0, r5
 80175fa:	47b8      	blx	r7
 80175fc:	3001      	adds	r0, #1
 80175fe:	d10e      	bne.n	801761e <_printf_float+0x42a>
 8017600:	e659      	b.n	80172b6 <_printf_float+0xc2>
 8017602:	2301      	movs	r3, #1
 8017604:	4652      	mov	r2, sl
 8017606:	4631      	mov	r1, r6
 8017608:	4628      	mov	r0, r5
 801760a:	47b8      	blx	r7
 801760c:	3001      	adds	r0, #1
 801760e:	f43f ae52 	beq.w	80172b6 <_printf_float+0xc2>
 8017612:	f108 0801 	add.w	r8, r8, #1
 8017616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017618:	3b01      	subs	r3, #1
 801761a:	4543      	cmp	r3, r8
 801761c:	dcf1      	bgt.n	8017602 <_printf_float+0x40e>
 801761e:	464b      	mov	r3, r9
 8017620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017624:	e6dc      	b.n	80173e0 <_printf_float+0x1ec>
 8017626:	f04f 0800 	mov.w	r8, #0
 801762a:	f104 0a1a 	add.w	sl, r4, #26
 801762e:	e7f2      	b.n	8017616 <_printf_float+0x422>
 8017630:	2301      	movs	r3, #1
 8017632:	4642      	mov	r2, r8
 8017634:	e7df      	b.n	80175f6 <_printf_float+0x402>
 8017636:	2301      	movs	r3, #1
 8017638:	464a      	mov	r2, r9
 801763a:	4631      	mov	r1, r6
 801763c:	4628      	mov	r0, r5
 801763e:	47b8      	blx	r7
 8017640:	3001      	adds	r0, #1
 8017642:	f43f ae38 	beq.w	80172b6 <_printf_float+0xc2>
 8017646:	f108 0801 	add.w	r8, r8, #1
 801764a:	68e3      	ldr	r3, [r4, #12]
 801764c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801764e:	1a5b      	subs	r3, r3, r1
 8017650:	4543      	cmp	r3, r8
 8017652:	dcf0      	bgt.n	8017636 <_printf_float+0x442>
 8017654:	e6fa      	b.n	801744c <_printf_float+0x258>
 8017656:	f04f 0800 	mov.w	r8, #0
 801765a:	f104 0919 	add.w	r9, r4, #25
 801765e:	e7f4      	b.n	801764a <_printf_float+0x456>

08017660 <_printf_common>:
 8017660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017664:	4616      	mov	r6, r2
 8017666:	4699      	mov	r9, r3
 8017668:	688a      	ldr	r2, [r1, #8]
 801766a:	690b      	ldr	r3, [r1, #16]
 801766c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017670:	4293      	cmp	r3, r2
 8017672:	bfb8      	it	lt
 8017674:	4613      	movlt	r3, r2
 8017676:	6033      	str	r3, [r6, #0]
 8017678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801767c:	4607      	mov	r7, r0
 801767e:	460c      	mov	r4, r1
 8017680:	b10a      	cbz	r2, 8017686 <_printf_common+0x26>
 8017682:	3301      	adds	r3, #1
 8017684:	6033      	str	r3, [r6, #0]
 8017686:	6823      	ldr	r3, [r4, #0]
 8017688:	0699      	lsls	r1, r3, #26
 801768a:	bf42      	ittt	mi
 801768c:	6833      	ldrmi	r3, [r6, #0]
 801768e:	3302      	addmi	r3, #2
 8017690:	6033      	strmi	r3, [r6, #0]
 8017692:	6825      	ldr	r5, [r4, #0]
 8017694:	f015 0506 	ands.w	r5, r5, #6
 8017698:	d106      	bne.n	80176a8 <_printf_common+0x48>
 801769a:	f104 0a19 	add.w	sl, r4, #25
 801769e:	68e3      	ldr	r3, [r4, #12]
 80176a0:	6832      	ldr	r2, [r6, #0]
 80176a2:	1a9b      	subs	r3, r3, r2
 80176a4:	42ab      	cmp	r3, r5
 80176a6:	dc26      	bgt.n	80176f6 <_printf_common+0x96>
 80176a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80176ac:	1e13      	subs	r3, r2, #0
 80176ae:	6822      	ldr	r2, [r4, #0]
 80176b0:	bf18      	it	ne
 80176b2:	2301      	movne	r3, #1
 80176b4:	0692      	lsls	r2, r2, #26
 80176b6:	d42b      	bmi.n	8017710 <_printf_common+0xb0>
 80176b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80176bc:	4649      	mov	r1, r9
 80176be:	4638      	mov	r0, r7
 80176c0:	47c0      	blx	r8
 80176c2:	3001      	adds	r0, #1
 80176c4:	d01e      	beq.n	8017704 <_printf_common+0xa4>
 80176c6:	6823      	ldr	r3, [r4, #0]
 80176c8:	68e5      	ldr	r5, [r4, #12]
 80176ca:	6832      	ldr	r2, [r6, #0]
 80176cc:	f003 0306 	and.w	r3, r3, #6
 80176d0:	2b04      	cmp	r3, #4
 80176d2:	bf08      	it	eq
 80176d4:	1aad      	subeq	r5, r5, r2
 80176d6:	68a3      	ldr	r3, [r4, #8]
 80176d8:	6922      	ldr	r2, [r4, #16]
 80176da:	bf0c      	ite	eq
 80176dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80176e0:	2500      	movne	r5, #0
 80176e2:	4293      	cmp	r3, r2
 80176e4:	bfc4      	itt	gt
 80176e6:	1a9b      	subgt	r3, r3, r2
 80176e8:	18ed      	addgt	r5, r5, r3
 80176ea:	2600      	movs	r6, #0
 80176ec:	341a      	adds	r4, #26
 80176ee:	42b5      	cmp	r5, r6
 80176f0:	d11a      	bne.n	8017728 <_printf_common+0xc8>
 80176f2:	2000      	movs	r0, #0
 80176f4:	e008      	b.n	8017708 <_printf_common+0xa8>
 80176f6:	2301      	movs	r3, #1
 80176f8:	4652      	mov	r2, sl
 80176fa:	4649      	mov	r1, r9
 80176fc:	4638      	mov	r0, r7
 80176fe:	47c0      	blx	r8
 8017700:	3001      	adds	r0, #1
 8017702:	d103      	bne.n	801770c <_printf_common+0xac>
 8017704:	f04f 30ff 	mov.w	r0, #4294967295
 8017708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801770c:	3501      	adds	r5, #1
 801770e:	e7c6      	b.n	801769e <_printf_common+0x3e>
 8017710:	18e1      	adds	r1, r4, r3
 8017712:	1c5a      	adds	r2, r3, #1
 8017714:	2030      	movs	r0, #48	; 0x30
 8017716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801771a:	4422      	add	r2, r4
 801771c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017724:	3302      	adds	r3, #2
 8017726:	e7c7      	b.n	80176b8 <_printf_common+0x58>
 8017728:	2301      	movs	r3, #1
 801772a:	4622      	mov	r2, r4
 801772c:	4649      	mov	r1, r9
 801772e:	4638      	mov	r0, r7
 8017730:	47c0      	blx	r8
 8017732:	3001      	adds	r0, #1
 8017734:	d0e6      	beq.n	8017704 <_printf_common+0xa4>
 8017736:	3601      	adds	r6, #1
 8017738:	e7d9      	b.n	80176ee <_printf_common+0x8e>
	...

0801773c <_printf_i>:
 801773c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017740:	460c      	mov	r4, r1
 8017742:	4691      	mov	r9, r2
 8017744:	7e27      	ldrb	r7, [r4, #24]
 8017746:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017748:	2f78      	cmp	r7, #120	; 0x78
 801774a:	4680      	mov	r8, r0
 801774c:	469a      	mov	sl, r3
 801774e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017752:	d807      	bhi.n	8017764 <_printf_i+0x28>
 8017754:	2f62      	cmp	r7, #98	; 0x62
 8017756:	d80a      	bhi.n	801776e <_printf_i+0x32>
 8017758:	2f00      	cmp	r7, #0
 801775a:	f000 80d8 	beq.w	801790e <_printf_i+0x1d2>
 801775e:	2f58      	cmp	r7, #88	; 0x58
 8017760:	f000 80a3 	beq.w	80178aa <_printf_i+0x16e>
 8017764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801776c:	e03a      	b.n	80177e4 <_printf_i+0xa8>
 801776e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017772:	2b15      	cmp	r3, #21
 8017774:	d8f6      	bhi.n	8017764 <_printf_i+0x28>
 8017776:	a001      	add	r0, pc, #4	; (adr r0, 801777c <_printf_i+0x40>)
 8017778:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801777c:	080177d5 	.word	0x080177d5
 8017780:	080177e9 	.word	0x080177e9
 8017784:	08017765 	.word	0x08017765
 8017788:	08017765 	.word	0x08017765
 801778c:	08017765 	.word	0x08017765
 8017790:	08017765 	.word	0x08017765
 8017794:	080177e9 	.word	0x080177e9
 8017798:	08017765 	.word	0x08017765
 801779c:	08017765 	.word	0x08017765
 80177a0:	08017765 	.word	0x08017765
 80177a4:	08017765 	.word	0x08017765
 80177a8:	080178f5 	.word	0x080178f5
 80177ac:	08017819 	.word	0x08017819
 80177b0:	080178d7 	.word	0x080178d7
 80177b4:	08017765 	.word	0x08017765
 80177b8:	08017765 	.word	0x08017765
 80177bc:	08017917 	.word	0x08017917
 80177c0:	08017765 	.word	0x08017765
 80177c4:	08017819 	.word	0x08017819
 80177c8:	08017765 	.word	0x08017765
 80177cc:	08017765 	.word	0x08017765
 80177d0:	080178df 	.word	0x080178df
 80177d4:	680b      	ldr	r3, [r1, #0]
 80177d6:	1d1a      	adds	r2, r3, #4
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	600a      	str	r2, [r1, #0]
 80177dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80177e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80177e4:	2301      	movs	r3, #1
 80177e6:	e0a3      	b.n	8017930 <_printf_i+0x1f4>
 80177e8:	6825      	ldr	r5, [r4, #0]
 80177ea:	6808      	ldr	r0, [r1, #0]
 80177ec:	062e      	lsls	r6, r5, #24
 80177ee:	f100 0304 	add.w	r3, r0, #4
 80177f2:	d50a      	bpl.n	801780a <_printf_i+0xce>
 80177f4:	6805      	ldr	r5, [r0, #0]
 80177f6:	600b      	str	r3, [r1, #0]
 80177f8:	2d00      	cmp	r5, #0
 80177fa:	da03      	bge.n	8017804 <_printf_i+0xc8>
 80177fc:	232d      	movs	r3, #45	; 0x2d
 80177fe:	426d      	negs	r5, r5
 8017800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017804:	485e      	ldr	r0, [pc, #376]	; (8017980 <_printf_i+0x244>)
 8017806:	230a      	movs	r3, #10
 8017808:	e019      	b.n	801783e <_printf_i+0x102>
 801780a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801780e:	6805      	ldr	r5, [r0, #0]
 8017810:	600b      	str	r3, [r1, #0]
 8017812:	bf18      	it	ne
 8017814:	b22d      	sxthne	r5, r5
 8017816:	e7ef      	b.n	80177f8 <_printf_i+0xbc>
 8017818:	680b      	ldr	r3, [r1, #0]
 801781a:	6825      	ldr	r5, [r4, #0]
 801781c:	1d18      	adds	r0, r3, #4
 801781e:	6008      	str	r0, [r1, #0]
 8017820:	0628      	lsls	r0, r5, #24
 8017822:	d501      	bpl.n	8017828 <_printf_i+0xec>
 8017824:	681d      	ldr	r5, [r3, #0]
 8017826:	e002      	b.n	801782e <_printf_i+0xf2>
 8017828:	0669      	lsls	r1, r5, #25
 801782a:	d5fb      	bpl.n	8017824 <_printf_i+0xe8>
 801782c:	881d      	ldrh	r5, [r3, #0]
 801782e:	4854      	ldr	r0, [pc, #336]	; (8017980 <_printf_i+0x244>)
 8017830:	2f6f      	cmp	r7, #111	; 0x6f
 8017832:	bf0c      	ite	eq
 8017834:	2308      	moveq	r3, #8
 8017836:	230a      	movne	r3, #10
 8017838:	2100      	movs	r1, #0
 801783a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801783e:	6866      	ldr	r6, [r4, #4]
 8017840:	60a6      	str	r6, [r4, #8]
 8017842:	2e00      	cmp	r6, #0
 8017844:	bfa2      	ittt	ge
 8017846:	6821      	ldrge	r1, [r4, #0]
 8017848:	f021 0104 	bicge.w	r1, r1, #4
 801784c:	6021      	strge	r1, [r4, #0]
 801784e:	b90d      	cbnz	r5, 8017854 <_printf_i+0x118>
 8017850:	2e00      	cmp	r6, #0
 8017852:	d04d      	beq.n	80178f0 <_printf_i+0x1b4>
 8017854:	4616      	mov	r6, r2
 8017856:	fbb5 f1f3 	udiv	r1, r5, r3
 801785a:	fb03 5711 	mls	r7, r3, r1, r5
 801785e:	5dc7      	ldrb	r7, [r0, r7]
 8017860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017864:	462f      	mov	r7, r5
 8017866:	42bb      	cmp	r3, r7
 8017868:	460d      	mov	r5, r1
 801786a:	d9f4      	bls.n	8017856 <_printf_i+0x11a>
 801786c:	2b08      	cmp	r3, #8
 801786e:	d10b      	bne.n	8017888 <_printf_i+0x14c>
 8017870:	6823      	ldr	r3, [r4, #0]
 8017872:	07df      	lsls	r7, r3, #31
 8017874:	d508      	bpl.n	8017888 <_printf_i+0x14c>
 8017876:	6923      	ldr	r3, [r4, #16]
 8017878:	6861      	ldr	r1, [r4, #4]
 801787a:	4299      	cmp	r1, r3
 801787c:	bfde      	ittt	le
 801787e:	2330      	movle	r3, #48	; 0x30
 8017880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017888:	1b92      	subs	r2, r2, r6
 801788a:	6122      	str	r2, [r4, #16]
 801788c:	f8cd a000 	str.w	sl, [sp]
 8017890:	464b      	mov	r3, r9
 8017892:	aa03      	add	r2, sp, #12
 8017894:	4621      	mov	r1, r4
 8017896:	4640      	mov	r0, r8
 8017898:	f7ff fee2 	bl	8017660 <_printf_common>
 801789c:	3001      	adds	r0, #1
 801789e:	d14c      	bne.n	801793a <_printf_i+0x1fe>
 80178a0:	f04f 30ff 	mov.w	r0, #4294967295
 80178a4:	b004      	add	sp, #16
 80178a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178aa:	4835      	ldr	r0, [pc, #212]	; (8017980 <_printf_i+0x244>)
 80178ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	680e      	ldr	r6, [r1, #0]
 80178b4:	061f      	lsls	r7, r3, #24
 80178b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80178ba:	600e      	str	r6, [r1, #0]
 80178bc:	d514      	bpl.n	80178e8 <_printf_i+0x1ac>
 80178be:	07d9      	lsls	r1, r3, #31
 80178c0:	bf44      	itt	mi
 80178c2:	f043 0320 	orrmi.w	r3, r3, #32
 80178c6:	6023      	strmi	r3, [r4, #0]
 80178c8:	b91d      	cbnz	r5, 80178d2 <_printf_i+0x196>
 80178ca:	6823      	ldr	r3, [r4, #0]
 80178cc:	f023 0320 	bic.w	r3, r3, #32
 80178d0:	6023      	str	r3, [r4, #0]
 80178d2:	2310      	movs	r3, #16
 80178d4:	e7b0      	b.n	8017838 <_printf_i+0xfc>
 80178d6:	6823      	ldr	r3, [r4, #0]
 80178d8:	f043 0320 	orr.w	r3, r3, #32
 80178dc:	6023      	str	r3, [r4, #0]
 80178de:	2378      	movs	r3, #120	; 0x78
 80178e0:	4828      	ldr	r0, [pc, #160]	; (8017984 <_printf_i+0x248>)
 80178e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80178e6:	e7e3      	b.n	80178b0 <_printf_i+0x174>
 80178e8:	065e      	lsls	r6, r3, #25
 80178ea:	bf48      	it	mi
 80178ec:	b2ad      	uxthmi	r5, r5
 80178ee:	e7e6      	b.n	80178be <_printf_i+0x182>
 80178f0:	4616      	mov	r6, r2
 80178f2:	e7bb      	b.n	801786c <_printf_i+0x130>
 80178f4:	680b      	ldr	r3, [r1, #0]
 80178f6:	6826      	ldr	r6, [r4, #0]
 80178f8:	6960      	ldr	r0, [r4, #20]
 80178fa:	1d1d      	adds	r5, r3, #4
 80178fc:	600d      	str	r5, [r1, #0]
 80178fe:	0635      	lsls	r5, r6, #24
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	d501      	bpl.n	8017908 <_printf_i+0x1cc>
 8017904:	6018      	str	r0, [r3, #0]
 8017906:	e002      	b.n	801790e <_printf_i+0x1d2>
 8017908:	0671      	lsls	r1, r6, #25
 801790a:	d5fb      	bpl.n	8017904 <_printf_i+0x1c8>
 801790c:	8018      	strh	r0, [r3, #0]
 801790e:	2300      	movs	r3, #0
 8017910:	6123      	str	r3, [r4, #16]
 8017912:	4616      	mov	r6, r2
 8017914:	e7ba      	b.n	801788c <_printf_i+0x150>
 8017916:	680b      	ldr	r3, [r1, #0]
 8017918:	1d1a      	adds	r2, r3, #4
 801791a:	600a      	str	r2, [r1, #0]
 801791c:	681e      	ldr	r6, [r3, #0]
 801791e:	6862      	ldr	r2, [r4, #4]
 8017920:	2100      	movs	r1, #0
 8017922:	4630      	mov	r0, r6
 8017924:	f7e8 fc6c 	bl	8000200 <memchr>
 8017928:	b108      	cbz	r0, 801792e <_printf_i+0x1f2>
 801792a:	1b80      	subs	r0, r0, r6
 801792c:	6060      	str	r0, [r4, #4]
 801792e:	6863      	ldr	r3, [r4, #4]
 8017930:	6123      	str	r3, [r4, #16]
 8017932:	2300      	movs	r3, #0
 8017934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017938:	e7a8      	b.n	801788c <_printf_i+0x150>
 801793a:	6923      	ldr	r3, [r4, #16]
 801793c:	4632      	mov	r2, r6
 801793e:	4649      	mov	r1, r9
 8017940:	4640      	mov	r0, r8
 8017942:	47d0      	blx	sl
 8017944:	3001      	adds	r0, #1
 8017946:	d0ab      	beq.n	80178a0 <_printf_i+0x164>
 8017948:	6823      	ldr	r3, [r4, #0]
 801794a:	079b      	lsls	r3, r3, #30
 801794c:	d413      	bmi.n	8017976 <_printf_i+0x23a>
 801794e:	68e0      	ldr	r0, [r4, #12]
 8017950:	9b03      	ldr	r3, [sp, #12]
 8017952:	4298      	cmp	r0, r3
 8017954:	bfb8      	it	lt
 8017956:	4618      	movlt	r0, r3
 8017958:	e7a4      	b.n	80178a4 <_printf_i+0x168>
 801795a:	2301      	movs	r3, #1
 801795c:	4632      	mov	r2, r6
 801795e:	4649      	mov	r1, r9
 8017960:	4640      	mov	r0, r8
 8017962:	47d0      	blx	sl
 8017964:	3001      	adds	r0, #1
 8017966:	d09b      	beq.n	80178a0 <_printf_i+0x164>
 8017968:	3501      	adds	r5, #1
 801796a:	68e3      	ldr	r3, [r4, #12]
 801796c:	9903      	ldr	r1, [sp, #12]
 801796e:	1a5b      	subs	r3, r3, r1
 8017970:	42ab      	cmp	r3, r5
 8017972:	dcf2      	bgt.n	801795a <_printf_i+0x21e>
 8017974:	e7eb      	b.n	801794e <_printf_i+0x212>
 8017976:	2500      	movs	r5, #0
 8017978:	f104 0619 	add.w	r6, r4, #25
 801797c:	e7f5      	b.n	801796a <_printf_i+0x22e>
 801797e:	bf00      	nop
 8017980:	08021d6a 	.word	0x08021d6a
 8017984:	08021d7b 	.word	0x08021d7b

08017988 <_scanf_float>:
 8017988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801798c:	b087      	sub	sp, #28
 801798e:	4617      	mov	r7, r2
 8017990:	9303      	str	r3, [sp, #12]
 8017992:	688b      	ldr	r3, [r1, #8]
 8017994:	1e5a      	subs	r2, r3, #1
 8017996:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801799a:	bf83      	ittte	hi
 801799c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80179a0:	195b      	addhi	r3, r3, r5
 80179a2:	9302      	strhi	r3, [sp, #8]
 80179a4:	2300      	movls	r3, #0
 80179a6:	bf86      	itte	hi
 80179a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80179ac:	608b      	strhi	r3, [r1, #8]
 80179ae:	9302      	strls	r3, [sp, #8]
 80179b0:	680b      	ldr	r3, [r1, #0]
 80179b2:	468b      	mov	fp, r1
 80179b4:	2500      	movs	r5, #0
 80179b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80179ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80179be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80179c2:	4680      	mov	r8, r0
 80179c4:	460c      	mov	r4, r1
 80179c6:	465e      	mov	r6, fp
 80179c8:	46aa      	mov	sl, r5
 80179ca:	46a9      	mov	r9, r5
 80179cc:	9501      	str	r5, [sp, #4]
 80179ce:	68a2      	ldr	r2, [r4, #8]
 80179d0:	b152      	cbz	r2, 80179e8 <_scanf_float+0x60>
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	781b      	ldrb	r3, [r3, #0]
 80179d6:	2b4e      	cmp	r3, #78	; 0x4e
 80179d8:	d864      	bhi.n	8017aa4 <_scanf_float+0x11c>
 80179da:	2b40      	cmp	r3, #64	; 0x40
 80179dc:	d83c      	bhi.n	8017a58 <_scanf_float+0xd0>
 80179de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80179e2:	b2c8      	uxtb	r0, r1
 80179e4:	280e      	cmp	r0, #14
 80179e6:	d93a      	bls.n	8017a5e <_scanf_float+0xd6>
 80179e8:	f1b9 0f00 	cmp.w	r9, #0
 80179ec:	d003      	beq.n	80179f6 <_scanf_float+0x6e>
 80179ee:	6823      	ldr	r3, [r4, #0]
 80179f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80179f4:	6023      	str	r3, [r4, #0]
 80179f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80179fa:	f1ba 0f01 	cmp.w	sl, #1
 80179fe:	f200 8113 	bhi.w	8017c28 <_scanf_float+0x2a0>
 8017a02:	455e      	cmp	r6, fp
 8017a04:	f200 8105 	bhi.w	8017c12 <_scanf_float+0x28a>
 8017a08:	2501      	movs	r5, #1
 8017a0a:	4628      	mov	r0, r5
 8017a0c:	b007      	add	sp, #28
 8017a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017a16:	2a0d      	cmp	r2, #13
 8017a18:	d8e6      	bhi.n	80179e8 <_scanf_float+0x60>
 8017a1a:	a101      	add	r1, pc, #4	; (adr r1, 8017a20 <_scanf_float+0x98>)
 8017a1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017a20:	08017b5f 	.word	0x08017b5f
 8017a24:	080179e9 	.word	0x080179e9
 8017a28:	080179e9 	.word	0x080179e9
 8017a2c:	080179e9 	.word	0x080179e9
 8017a30:	08017bbf 	.word	0x08017bbf
 8017a34:	08017b97 	.word	0x08017b97
 8017a38:	080179e9 	.word	0x080179e9
 8017a3c:	080179e9 	.word	0x080179e9
 8017a40:	08017b6d 	.word	0x08017b6d
 8017a44:	080179e9 	.word	0x080179e9
 8017a48:	080179e9 	.word	0x080179e9
 8017a4c:	080179e9 	.word	0x080179e9
 8017a50:	080179e9 	.word	0x080179e9
 8017a54:	08017b25 	.word	0x08017b25
 8017a58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017a5c:	e7db      	b.n	8017a16 <_scanf_float+0x8e>
 8017a5e:	290e      	cmp	r1, #14
 8017a60:	d8c2      	bhi.n	80179e8 <_scanf_float+0x60>
 8017a62:	a001      	add	r0, pc, #4	; (adr r0, 8017a68 <_scanf_float+0xe0>)
 8017a64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017a68:	08017b17 	.word	0x08017b17
 8017a6c:	080179e9 	.word	0x080179e9
 8017a70:	08017b17 	.word	0x08017b17
 8017a74:	08017bab 	.word	0x08017bab
 8017a78:	080179e9 	.word	0x080179e9
 8017a7c:	08017ac5 	.word	0x08017ac5
 8017a80:	08017b01 	.word	0x08017b01
 8017a84:	08017b01 	.word	0x08017b01
 8017a88:	08017b01 	.word	0x08017b01
 8017a8c:	08017b01 	.word	0x08017b01
 8017a90:	08017b01 	.word	0x08017b01
 8017a94:	08017b01 	.word	0x08017b01
 8017a98:	08017b01 	.word	0x08017b01
 8017a9c:	08017b01 	.word	0x08017b01
 8017aa0:	08017b01 	.word	0x08017b01
 8017aa4:	2b6e      	cmp	r3, #110	; 0x6e
 8017aa6:	d809      	bhi.n	8017abc <_scanf_float+0x134>
 8017aa8:	2b60      	cmp	r3, #96	; 0x60
 8017aaa:	d8b2      	bhi.n	8017a12 <_scanf_float+0x8a>
 8017aac:	2b54      	cmp	r3, #84	; 0x54
 8017aae:	d077      	beq.n	8017ba0 <_scanf_float+0x218>
 8017ab0:	2b59      	cmp	r3, #89	; 0x59
 8017ab2:	d199      	bne.n	80179e8 <_scanf_float+0x60>
 8017ab4:	2d07      	cmp	r5, #7
 8017ab6:	d197      	bne.n	80179e8 <_scanf_float+0x60>
 8017ab8:	2508      	movs	r5, #8
 8017aba:	e029      	b.n	8017b10 <_scanf_float+0x188>
 8017abc:	2b74      	cmp	r3, #116	; 0x74
 8017abe:	d06f      	beq.n	8017ba0 <_scanf_float+0x218>
 8017ac0:	2b79      	cmp	r3, #121	; 0x79
 8017ac2:	e7f6      	b.n	8017ab2 <_scanf_float+0x12a>
 8017ac4:	6821      	ldr	r1, [r4, #0]
 8017ac6:	05c8      	lsls	r0, r1, #23
 8017ac8:	d51a      	bpl.n	8017b00 <_scanf_float+0x178>
 8017aca:	9b02      	ldr	r3, [sp, #8]
 8017acc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017ad0:	6021      	str	r1, [r4, #0]
 8017ad2:	f109 0901 	add.w	r9, r9, #1
 8017ad6:	b11b      	cbz	r3, 8017ae0 <_scanf_float+0x158>
 8017ad8:	3b01      	subs	r3, #1
 8017ada:	3201      	adds	r2, #1
 8017adc:	9302      	str	r3, [sp, #8]
 8017ade:	60a2      	str	r2, [r4, #8]
 8017ae0:	68a3      	ldr	r3, [r4, #8]
 8017ae2:	3b01      	subs	r3, #1
 8017ae4:	60a3      	str	r3, [r4, #8]
 8017ae6:	6923      	ldr	r3, [r4, #16]
 8017ae8:	3301      	adds	r3, #1
 8017aea:	6123      	str	r3, [r4, #16]
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	3b01      	subs	r3, #1
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	607b      	str	r3, [r7, #4]
 8017af4:	f340 8084 	ble.w	8017c00 <_scanf_float+0x278>
 8017af8:	683b      	ldr	r3, [r7, #0]
 8017afa:	3301      	adds	r3, #1
 8017afc:	603b      	str	r3, [r7, #0]
 8017afe:	e766      	b.n	80179ce <_scanf_float+0x46>
 8017b00:	eb1a 0f05 	cmn.w	sl, r5
 8017b04:	f47f af70 	bne.w	80179e8 <_scanf_float+0x60>
 8017b08:	6822      	ldr	r2, [r4, #0]
 8017b0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017b0e:	6022      	str	r2, [r4, #0]
 8017b10:	f806 3b01 	strb.w	r3, [r6], #1
 8017b14:	e7e4      	b.n	8017ae0 <_scanf_float+0x158>
 8017b16:	6822      	ldr	r2, [r4, #0]
 8017b18:	0610      	lsls	r0, r2, #24
 8017b1a:	f57f af65 	bpl.w	80179e8 <_scanf_float+0x60>
 8017b1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017b22:	e7f4      	b.n	8017b0e <_scanf_float+0x186>
 8017b24:	f1ba 0f00 	cmp.w	sl, #0
 8017b28:	d10e      	bne.n	8017b48 <_scanf_float+0x1c0>
 8017b2a:	f1b9 0f00 	cmp.w	r9, #0
 8017b2e:	d10e      	bne.n	8017b4e <_scanf_float+0x1c6>
 8017b30:	6822      	ldr	r2, [r4, #0]
 8017b32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017b36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017b3a:	d108      	bne.n	8017b4e <_scanf_float+0x1c6>
 8017b3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017b40:	6022      	str	r2, [r4, #0]
 8017b42:	f04f 0a01 	mov.w	sl, #1
 8017b46:	e7e3      	b.n	8017b10 <_scanf_float+0x188>
 8017b48:	f1ba 0f02 	cmp.w	sl, #2
 8017b4c:	d055      	beq.n	8017bfa <_scanf_float+0x272>
 8017b4e:	2d01      	cmp	r5, #1
 8017b50:	d002      	beq.n	8017b58 <_scanf_float+0x1d0>
 8017b52:	2d04      	cmp	r5, #4
 8017b54:	f47f af48 	bne.w	80179e8 <_scanf_float+0x60>
 8017b58:	3501      	adds	r5, #1
 8017b5a:	b2ed      	uxtb	r5, r5
 8017b5c:	e7d8      	b.n	8017b10 <_scanf_float+0x188>
 8017b5e:	f1ba 0f01 	cmp.w	sl, #1
 8017b62:	f47f af41 	bne.w	80179e8 <_scanf_float+0x60>
 8017b66:	f04f 0a02 	mov.w	sl, #2
 8017b6a:	e7d1      	b.n	8017b10 <_scanf_float+0x188>
 8017b6c:	b97d      	cbnz	r5, 8017b8e <_scanf_float+0x206>
 8017b6e:	f1b9 0f00 	cmp.w	r9, #0
 8017b72:	f47f af3c 	bne.w	80179ee <_scanf_float+0x66>
 8017b76:	6822      	ldr	r2, [r4, #0]
 8017b78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017b7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017b80:	f47f af39 	bne.w	80179f6 <_scanf_float+0x6e>
 8017b84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017b88:	6022      	str	r2, [r4, #0]
 8017b8a:	2501      	movs	r5, #1
 8017b8c:	e7c0      	b.n	8017b10 <_scanf_float+0x188>
 8017b8e:	2d03      	cmp	r5, #3
 8017b90:	d0e2      	beq.n	8017b58 <_scanf_float+0x1d0>
 8017b92:	2d05      	cmp	r5, #5
 8017b94:	e7de      	b.n	8017b54 <_scanf_float+0x1cc>
 8017b96:	2d02      	cmp	r5, #2
 8017b98:	f47f af26 	bne.w	80179e8 <_scanf_float+0x60>
 8017b9c:	2503      	movs	r5, #3
 8017b9e:	e7b7      	b.n	8017b10 <_scanf_float+0x188>
 8017ba0:	2d06      	cmp	r5, #6
 8017ba2:	f47f af21 	bne.w	80179e8 <_scanf_float+0x60>
 8017ba6:	2507      	movs	r5, #7
 8017ba8:	e7b2      	b.n	8017b10 <_scanf_float+0x188>
 8017baa:	6822      	ldr	r2, [r4, #0]
 8017bac:	0591      	lsls	r1, r2, #22
 8017bae:	f57f af1b 	bpl.w	80179e8 <_scanf_float+0x60>
 8017bb2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017bb6:	6022      	str	r2, [r4, #0]
 8017bb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8017bbc:	e7a8      	b.n	8017b10 <_scanf_float+0x188>
 8017bbe:	6822      	ldr	r2, [r4, #0]
 8017bc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017bc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017bc8:	d006      	beq.n	8017bd8 <_scanf_float+0x250>
 8017bca:	0550      	lsls	r0, r2, #21
 8017bcc:	f57f af0c 	bpl.w	80179e8 <_scanf_float+0x60>
 8017bd0:	f1b9 0f00 	cmp.w	r9, #0
 8017bd4:	f43f af0f 	beq.w	80179f6 <_scanf_float+0x6e>
 8017bd8:	0591      	lsls	r1, r2, #22
 8017bda:	bf58      	it	pl
 8017bdc:	9901      	ldrpl	r1, [sp, #4]
 8017bde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017be2:	bf58      	it	pl
 8017be4:	eba9 0101 	subpl.w	r1, r9, r1
 8017be8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017bec:	bf58      	it	pl
 8017bee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017bf2:	6022      	str	r2, [r4, #0]
 8017bf4:	f04f 0900 	mov.w	r9, #0
 8017bf8:	e78a      	b.n	8017b10 <_scanf_float+0x188>
 8017bfa:	f04f 0a03 	mov.w	sl, #3
 8017bfe:	e787      	b.n	8017b10 <_scanf_float+0x188>
 8017c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017c04:	4639      	mov	r1, r7
 8017c06:	4640      	mov	r0, r8
 8017c08:	4798      	blx	r3
 8017c0a:	2800      	cmp	r0, #0
 8017c0c:	f43f aedf 	beq.w	80179ce <_scanf_float+0x46>
 8017c10:	e6ea      	b.n	80179e8 <_scanf_float+0x60>
 8017c12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017c1a:	463a      	mov	r2, r7
 8017c1c:	4640      	mov	r0, r8
 8017c1e:	4798      	blx	r3
 8017c20:	6923      	ldr	r3, [r4, #16]
 8017c22:	3b01      	subs	r3, #1
 8017c24:	6123      	str	r3, [r4, #16]
 8017c26:	e6ec      	b.n	8017a02 <_scanf_float+0x7a>
 8017c28:	1e6b      	subs	r3, r5, #1
 8017c2a:	2b06      	cmp	r3, #6
 8017c2c:	d825      	bhi.n	8017c7a <_scanf_float+0x2f2>
 8017c2e:	2d02      	cmp	r5, #2
 8017c30:	d836      	bhi.n	8017ca0 <_scanf_float+0x318>
 8017c32:	455e      	cmp	r6, fp
 8017c34:	f67f aee8 	bls.w	8017a08 <_scanf_float+0x80>
 8017c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017c40:	463a      	mov	r2, r7
 8017c42:	4640      	mov	r0, r8
 8017c44:	4798      	blx	r3
 8017c46:	6923      	ldr	r3, [r4, #16]
 8017c48:	3b01      	subs	r3, #1
 8017c4a:	6123      	str	r3, [r4, #16]
 8017c4c:	e7f1      	b.n	8017c32 <_scanf_float+0x2aa>
 8017c4e:	9802      	ldr	r0, [sp, #8]
 8017c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017c58:	9002      	str	r0, [sp, #8]
 8017c5a:	463a      	mov	r2, r7
 8017c5c:	4640      	mov	r0, r8
 8017c5e:	4798      	blx	r3
 8017c60:	6923      	ldr	r3, [r4, #16]
 8017c62:	3b01      	subs	r3, #1
 8017c64:	6123      	str	r3, [r4, #16]
 8017c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c6a:	fa5f fa8a 	uxtb.w	sl, sl
 8017c6e:	f1ba 0f02 	cmp.w	sl, #2
 8017c72:	d1ec      	bne.n	8017c4e <_scanf_float+0x2c6>
 8017c74:	3d03      	subs	r5, #3
 8017c76:	b2ed      	uxtb	r5, r5
 8017c78:	1b76      	subs	r6, r6, r5
 8017c7a:	6823      	ldr	r3, [r4, #0]
 8017c7c:	05da      	lsls	r2, r3, #23
 8017c7e:	d52f      	bpl.n	8017ce0 <_scanf_float+0x358>
 8017c80:	055b      	lsls	r3, r3, #21
 8017c82:	d510      	bpl.n	8017ca6 <_scanf_float+0x31e>
 8017c84:	455e      	cmp	r6, fp
 8017c86:	f67f aebf 	bls.w	8017a08 <_scanf_float+0x80>
 8017c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017c8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017c92:	463a      	mov	r2, r7
 8017c94:	4640      	mov	r0, r8
 8017c96:	4798      	blx	r3
 8017c98:	6923      	ldr	r3, [r4, #16]
 8017c9a:	3b01      	subs	r3, #1
 8017c9c:	6123      	str	r3, [r4, #16]
 8017c9e:	e7f1      	b.n	8017c84 <_scanf_float+0x2fc>
 8017ca0:	46aa      	mov	sl, r5
 8017ca2:	9602      	str	r6, [sp, #8]
 8017ca4:	e7df      	b.n	8017c66 <_scanf_float+0x2de>
 8017ca6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017caa:	6923      	ldr	r3, [r4, #16]
 8017cac:	2965      	cmp	r1, #101	; 0x65
 8017cae:	f103 33ff 	add.w	r3, r3, #4294967295
 8017cb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8017cb6:	6123      	str	r3, [r4, #16]
 8017cb8:	d00c      	beq.n	8017cd4 <_scanf_float+0x34c>
 8017cba:	2945      	cmp	r1, #69	; 0x45
 8017cbc:	d00a      	beq.n	8017cd4 <_scanf_float+0x34c>
 8017cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017cc2:	463a      	mov	r2, r7
 8017cc4:	4640      	mov	r0, r8
 8017cc6:	4798      	blx	r3
 8017cc8:	6923      	ldr	r3, [r4, #16]
 8017cca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017cce:	3b01      	subs	r3, #1
 8017cd0:	1eb5      	subs	r5, r6, #2
 8017cd2:	6123      	str	r3, [r4, #16]
 8017cd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017cd8:	463a      	mov	r2, r7
 8017cda:	4640      	mov	r0, r8
 8017cdc:	4798      	blx	r3
 8017cde:	462e      	mov	r6, r5
 8017ce0:	6825      	ldr	r5, [r4, #0]
 8017ce2:	f015 0510 	ands.w	r5, r5, #16
 8017ce6:	d158      	bne.n	8017d9a <_scanf_float+0x412>
 8017ce8:	7035      	strb	r5, [r6, #0]
 8017cea:	6823      	ldr	r3, [r4, #0]
 8017cec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017cf4:	d11c      	bne.n	8017d30 <_scanf_float+0x3a8>
 8017cf6:	9b01      	ldr	r3, [sp, #4]
 8017cf8:	454b      	cmp	r3, r9
 8017cfa:	eba3 0209 	sub.w	r2, r3, r9
 8017cfe:	d124      	bne.n	8017d4a <_scanf_float+0x3c2>
 8017d00:	2200      	movs	r2, #0
 8017d02:	4659      	mov	r1, fp
 8017d04:	4640      	mov	r0, r8
 8017d06:	f000 ff05 	bl	8018b14 <_strtod_r>
 8017d0a:	9b03      	ldr	r3, [sp, #12]
 8017d0c:	6821      	ldr	r1, [r4, #0]
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	f011 0f02 	tst.w	r1, #2
 8017d14:	ec57 6b10 	vmov	r6, r7, d0
 8017d18:	f103 0204 	add.w	r2, r3, #4
 8017d1c:	d020      	beq.n	8017d60 <_scanf_float+0x3d8>
 8017d1e:	9903      	ldr	r1, [sp, #12]
 8017d20:	600a      	str	r2, [r1, #0]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	e9c3 6700 	strd	r6, r7, [r3]
 8017d28:	68e3      	ldr	r3, [r4, #12]
 8017d2a:	3301      	adds	r3, #1
 8017d2c:	60e3      	str	r3, [r4, #12]
 8017d2e:	e66c      	b.n	8017a0a <_scanf_float+0x82>
 8017d30:	9b04      	ldr	r3, [sp, #16]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d0e4      	beq.n	8017d00 <_scanf_float+0x378>
 8017d36:	9905      	ldr	r1, [sp, #20]
 8017d38:	230a      	movs	r3, #10
 8017d3a:	462a      	mov	r2, r5
 8017d3c:	3101      	adds	r1, #1
 8017d3e:	4640      	mov	r0, r8
 8017d40:	f000 ff72 	bl	8018c28 <_strtol_r>
 8017d44:	9b04      	ldr	r3, [sp, #16]
 8017d46:	9e05      	ldr	r6, [sp, #20]
 8017d48:	1ac2      	subs	r2, r0, r3
 8017d4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017d4e:	429e      	cmp	r6, r3
 8017d50:	bf28      	it	cs
 8017d52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017d56:	4912      	ldr	r1, [pc, #72]	; (8017da0 <_scanf_float+0x418>)
 8017d58:	4630      	mov	r0, r6
 8017d5a:	f000 f883 	bl	8017e64 <siprintf>
 8017d5e:	e7cf      	b.n	8017d00 <_scanf_float+0x378>
 8017d60:	f011 0f04 	tst.w	r1, #4
 8017d64:	9903      	ldr	r1, [sp, #12]
 8017d66:	600a      	str	r2, [r1, #0]
 8017d68:	d1db      	bne.n	8017d22 <_scanf_float+0x39a>
 8017d6a:	f8d3 8000 	ldr.w	r8, [r3]
 8017d6e:	ee10 2a10 	vmov	r2, s0
 8017d72:	ee10 0a10 	vmov	r0, s0
 8017d76:	463b      	mov	r3, r7
 8017d78:	4639      	mov	r1, r7
 8017d7a:	f7e8 fee7 	bl	8000b4c <__aeabi_dcmpun>
 8017d7e:	b128      	cbz	r0, 8017d8c <_scanf_float+0x404>
 8017d80:	4808      	ldr	r0, [pc, #32]	; (8017da4 <_scanf_float+0x41c>)
 8017d82:	f000 f869 	bl	8017e58 <nanf>
 8017d86:	ed88 0a00 	vstr	s0, [r8]
 8017d8a:	e7cd      	b.n	8017d28 <_scanf_float+0x3a0>
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	4639      	mov	r1, r7
 8017d90:	f7e8 ff3a 	bl	8000c08 <__aeabi_d2f>
 8017d94:	f8c8 0000 	str.w	r0, [r8]
 8017d98:	e7c6      	b.n	8017d28 <_scanf_float+0x3a0>
 8017d9a:	2500      	movs	r5, #0
 8017d9c:	e635      	b.n	8017a0a <_scanf_float+0x82>
 8017d9e:	bf00      	nop
 8017da0:	08021d8c 	.word	0x08021d8c
 8017da4:	08021e93 	.word	0x08021e93

08017da8 <iprintf>:
 8017da8:	b40f      	push	{r0, r1, r2, r3}
 8017daa:	4b0a      	ldr	r3, [pc, #40]	; (8017dd4 <iprintf+0x2c>)
 8017dac:	b513      	push	{r0, r1, r4, lr}
 8017dae:	681c      	ldr	r4, [r3, #0]
 8017db0:	b124      	cbz	r4, 8017dbc <iprintf+0x14>
 8017db2:	69a3      	ldr	r3, [r4, #24]
 8017db4:	b913      	cbnz	r3, 8017dbc <iprintf+0x14>
 8017db6:	4620      	mov	r0, r4
 8017db8:	f001 fe2c 	bl	8019a14 <__sinit>
 8017dbc:	ab05      	add	r3, sp, #20
 8017dbe:	9a04      	ldr	r2, [sp, #16]
 8017dc0:	68a1      	ldr	r1, [r4, #8]
 8017dc2:	9301      	str	r3, [sp, #4]
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f003 f95f 	bl	801b088 <_vfiprintf_r>
 8017dca:	b002      	add	sp, #8
 8017dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dd0:	b004      	add	sp, #16
 8017dd2:	4770      	bx	lr
 8017dd4:	20000194 	.word	0x20000194

08017dd8 <rand>:
 8017dd8:	4b17      	ldr	r3, [pc, #92]	; (8017e38 <rand+0x60>)
 8017dda:	b510      	push	{r4, lr}
 8017ddc:	681c      	ldr	r4, [r3, #0]
 8017dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017de0:	b9b3      	cbnz	r3, 8017e10 <rand+0x38>
 8017de2:	2018      	movs	r0, #24
 8017de4:	f002 fa3c 	bl	801a260 <malloc>
 8017de8:	63a0      	str	r0, [r4, #56]	; 0x38
 8017dea:	b928      	cbnz	r0, 8017df8 <rand+0x20>
 8017dec:	4602      	mov	r2, r0
 8017dee:	4b13      	ldr	r3, [pc, #76]	; (8017e3c <rand+0x64>)
 8017df0:	4813      	ldr	r0, [pc, #76]	; (8017e40 <rand+0x68>)
 8017df2:	214e      	movs	r1, #78	; 0x4e
 8017df4:	f000 ff1a 	bl	8018c2c <__assert_func>
 8017df8:	4a12      	ldr	r2, [pc, #72]	; (8017e44 <rand+0x6c>)
 8017dfa:	4b13      	ldr	r3, [pc, #76]	; (8017e48 <rand+0x70>)
 8017dfc:	e9c0 2300 	strd	r2, r3, [r0]
 8017e00:	4b12      	ldr	r3, [pc, #72]	; (8017e4c <rand+0x74>)
 8017e02:	6083      	str	r3, [r0, #8]
 8017e04:	230b      	movs	r3, #11
 8017e06:	8183      	strh	r3, [r0, #12]
 8017e08:	2201      	movs	r2, #1
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017e10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017e12:	480f      	ldr	r0, [pc, #60]	; (8017e50 <rand+0x78>)
 8017e14:	690a      	ldr	r2, [r1, #16]
 8017e16:	694b      	ldr	r3, [r1, #20]
 8017e18:	4c0e      	ldr	r4, [pc, #56]	; (8017e54 <rand+0x7c>)
 8017e1a:	4350      	muls	r0, r2
 8017e1c:	fb04 0003 	mla	r0, r4, r3, r0
 8017e20:	fba2 3404 	umull	r3, r4, r2, r4
 8017e24:	1c5a      	adds	r2, r3, #1
 8017e26:	4404      	add	r4, r0
 8017e28:	f144 0000 	adc.w	r0, r4, #0
 8017e2c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017e30:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017e34:	bd10      	pop	{r4, pc}
 8017e36:	bf00      	nop
 8017e38:	20000194 	.word	0x20000194
 8017e3c:	08021d91 	.word	0x08021d91
 8017e40:	08021da8 	.word	0x08021da8
 8017e44:	abcd330e 	.word	0xabcd330e
 8017e48:	e66d1234 	.word	0xe66d1234
 8017e4c:	0005deec 	.word	0x0005deec
 8017e50:	5851f42d 	.word	0x5851f42d
 8017e54:	4c957f2d 	.word	0x4c957f2d

08017e58 <nanf>:
 8017e58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017e60 <nanf+0x8>
 8017e5c:	4770      	bx	lr
 8017e5e:	bf00      	nop
 8017e60:	7fc00000 	.word	0x7fc00000

08017e64 <siprintf>:
 8017e64:	b40e      	push	{r1, r2, r3}
 8017e66:	b500      	push	{lr}
 8017e68:	b09c      	sub	sp, #112	; 0x70
 8017e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8017e6c:	9002      	str	r0, [sp, #8]
 8017e6e:	9006      	str	r0, [sp, #24]
 8017e70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017e74:	4809      	ldr	r0, [pc, #36]	; (8017e9c <siprintf+0x38>)
 8017e76:	9107      	str	r1, [sp, #28]
 8017e78:	9104      	str	r1, [sp, #16]
 8017e7a:	4909      	ldr	r1, [pc, #36]	; (8017ea0 <siprintf+0x3c>)
 8017e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e80:	9105      	str	r1, [sp, #20]
 8017e82:	6800      	ldr	r0, [r0, #0]
 8017e84:	9301      	str	r3, [sp, #4]
 8017e86:	a902      	add	r1, sp, #8
 8017e88:	f002 ffd4 	bl	801ae34 <_svfiprintf_r>
 8017e8c:	9b02      	ldr	r3, [sp, #8]
 8017e8e:	2200      	movs	r2, #0
 8017e90:	701a      	strb	r2, [r3, #0]
 8017e92:	b01c      	add	sp, #112	; 0x70
 8017e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e98:	b003      	add	sp, #12
 8017e9a:	4770      	bx	lr
 8017e9c:	20000194 	.word	0x20000194
 8017ea0:	ffff0208 	.word	0xffff0208

08017ea4 <strncmp>:
 8017ea4:	b510      	push	{r4, lr}
 8017ea6:	b16a      	cbz	r2, 8017ec4 <strncmp+0x20>
 8017ea8:	3901      	subs	r1, #1
 8017eaa:	1884      	adds	r4, r0, r2
 8017eac:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017eb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	d103      	bne.n	8017ec0 <strncmp+0x1c>
 8017eb8:	42a0      	cmp	r0, r4
 8017eba:	d001      	beq.n	8017ec0 <strncmp+0x1c>
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d1f5      	bne.n	8017eac <strncmp+0x8>
 8017ec0:	1a98      	subs	r0, r3, r2
 8017ec2:	bd10      	pop	{r4, pc}
 8017ec4:	4610      	mov	r0, r2
 8017ec6:	e7fc      	b.n	8017ec2 <strncmp+0x1e>

08017ec8 <sulp>:
 8017ec8:	b570      	push	{r4, r5, r6, lr}
 8017eca:	4604      	mov	r4, r0
 8017ecc:	460d      	mov	r5, r1
 8017ece:	ec45 4b10 	vmov	d0, r4, r5
 8017ed2:	4616      	mov	r6, r2
 8017ed4:	f002 fd4a 	bl	801a96c <__ulp>
 8017ed8:	ec51 0b10 	vmov	r0, r1, d0
 8017edc:	b17e      	cbz	r6, 8017efe <sulp+0x36>
 8017ede:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8017ee2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	dd09      	ble.n	8017efe <sulp+0x36>
 8017eea:	051b      	lsls	r3, r3, #20
 8017eec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8017ef0:	2400      	movs	r4, #0
 8017ef2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8017ef6:	4622      	mov	r2, r4
 8017ef8:	462b      	mov	r3, r5
 8017efa:	f7e8 fb8d 	bl	8000618 <__aeabi_dmul>
 8017efe:	bd70      	pop	{r4, r5, r6, pc}

08017f00 <_strtod_l>:
 8017f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f04:	b0a3      	sub	sp, #140	; 0x8c
 8017f06:	461f      	mov	r7, r3
 8017f08:	2300      	movs	r3, #0
 8017f0a:	931e      	str	r3, [sp, #120]	; 0x78
 8017f0c:	4ba4      	ldr	r3, [pc, #656]	; (80181a0 <_strtod_l+0x2a0>)
 8017f0e:	9219      	str	r2, [sp, #100]	; 0x64
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	9307      	str	r3, [sp, #28]
 8017f14:	4604      	mov	r4, r0
 8017f16:	4618      	mov	r0, r3
 8017f18:	4688      	mov	r8, r1
 8017f1a:	f7e8 f969 	bl	80001f0 <strlen>
 8017f1e:	f04f 0a00 	mov.w	sl, #0
 8017f22:	4605      	mov	r5, r0
 8017f24:	f04f 0b00 	mov.w	fp, #0
 8017f28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017f2e:	781a      	ldrb	r2, [r3, #0]
 8017f30:	2a2b      	cmp	r2, #43	; 0x2b
 8017f32:	d04c      	beq.n	8017fce <_strtod_l+0xce>
 8017f34:	d839      	bhi.n	8017faa <_strtod_l+0xaa>
 8017f36:	2a0d      	cmp	r2, #13
 8017f38:	d832      	bhi.n	8017fa0 <_strtod_l+0xa0>
 8017f3a:	2a08      	cmp	r2, #8
 8017f3c:	d832      	bhi.n	8017fa4 <_strtod_l+0xa4>
 8017f3e:	2a00      	cmp	r2, #0
 8017f40:	d03c      	beq.n	8017fbc <_strtod_l+0xbc>
 8017f42:	2300      	movs	r3, #0
 8017f44:	930e      	str	r3, [sp, #56]	; 0x38
 8017f46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017f48:	7833      	ldrb	r3, [r6, #0]
 8017f4a:	2b30      	cmp	r3, #48	; 0x30
 8017f4c:	f040 80b4 	bne.w	80180b8 <_strtod_l+0x1b8>
 8017f50:	7873      	ldrb	r3, [r6, #1]
 8017f52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017f56:	2b58      	cmp	r3, #88	; 0x58
 8017f58:	d16c      	bne.n	8018034 <_strtod_l+0x134>
 8017f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f5c:	9301      	str	r3, [sp, #4]
 8017f5e:	ab1e      	add	r3, sp, #120	; 0x78
 8017f60:	9702      	str	r7, [sp, #8]
 8017f62:	9300      	str	r3, [sp, #0]
 8017f64:	4a8f      	ldr	r2, [pc, #572]	; (80181a4 <_strtod_l+0x2a4>)
 8017f66:	ab1f      	add	r3, sp, #124	; 0x7c
 8017f68:	a91d      	add	r1, sp, #116	; 0x74
 8017f6a:	4620      	mov	r0, r4
 8017f6c:	f001 fe68 	bl	8019c40 <__gethex>
 8017f70:	f010 0707 	ands.w	r7, r0, #7
 8017f74:	4605      	mov	r5, r0
 8017f76:	d005      	beq.n	8017f84 <_strtod_l+0x84>
 8017f78:	2f06      	cmp	r7, #6
 8017f7a:	d12a      	bne.n	8017fd2 <_strtod_l+0xd2>
 8017f7c:	3601      	adds	r6, #1
 8017f7e:	2300      	movs	r3, #0
 8017f80:	961d      	str	r6, [sp, #116]	; 0x74
 8017f82:	930e      	str	r3, [sp, #56]	; 0x38
 8017f84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	f040 8596 	bne.w	8018ab8 <_strtod_l+0xbb8>
 8017f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f8e:	b1db      	cbz	r3, 8017fc8 <_strtod_l+0xc8>
 8017f90:	4652      	mov	r2, sl
 8017f92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017f96:	ec43 2b10 	vmov	d0, r2, r3
 8017f9a:	b023      	add	sp, #140	; 0x8c
 8017f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa0:	2a20      	cmp	r2, #32
 8017fa2:	d1ce      	bne.n	8017f42 <_strtod_l+0x42>
 8017fa4:	3301      	adds	r3, #1
 8017fa6:	931d      	str	r3, [sp, #116]	; 0x74
 8017fa8:	e7c0      	b.n	8017f2c <_strtod_l+0x2c>
 8017faa:	2a2d      	cmp	r2, #45	; 0x2d
 8017fac:	d1c9      	bne.n	8017f42 <_strtod_l+0x42>
 8017fae:	2201      	movs	r2, #1
 8017fb0:	920e      	str	r2, [sp, #56]	; 0x38
 8017fb2:	1c5a      	adds	r2, r3, #1
 8017fb4:	921d      	str	r2, [sp, #116]	; 0x74
 8017fb6:	785b      	ldrb	r3, [r3, #1]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d1c4      	bne.n	8017f46 <_strtod_l+0x46>
 8017fbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017fbe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	f040 8576 	bne.w	8018ab4 <_strtod_l+0xbb4>
 8017fc8:	4652      	mov	r2, sl
 8017fca:	465b      	mov	r3, fp
 8017fcc:	e7e3      	b.n	8017f96 <_strtod_l+0x96>
 8017fce:	2200      	movs	r2, #0
 8017fd0:	e7ee      	b.n	8017fb0 <_strtod_l+0xb0>
 8017fd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017fd4:	b13a      	cbz	r2, 8017fe6 <_strtod_l+0xe6>
 8017fd6:	2135      	movs	r1, #53	; 0x35
 8017fd8:	a820      	add	r0, sp, #128	; 0x80
 8017fda:	f002 fdd2 	bl	801ab82 <__copybits>
 8017fde:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	f002 f997 	bl	801a314 <_Bfree>
 8017fe6:	3f01      	subs	r7, #1
 8017fe8:	2f05      	cmp	r7, #5
 8017fea:	d807      	bhi.n	8017ffc <_strtod_l+0xfc>
 8017fec:	e8df f007 	tbb	[pc, r7]
 8017ff0:	1d180b0e 	.word	0x1d180b0e
 8017ff4:	030e      	.short	0x030e
 8017ff6:	f04f 0b00 	mov.w	fp, #0
 8017ffa:	46da      	mov	sl, fp
 8017ffc:	0728      	lsls	r0, r5, #28
 8017ffe:	d5c1      	bpl.n	8017f84 <_strtod_l+0x84>
 8018000:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8018004:	e7be      	b.n	8017f84 <_strtod_l+0x84>
 8018006:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801800a:	e7f7      	b.n	8017ffc <_strtod_l+0xfc>
 801800c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8018010:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018012:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8018016:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801801a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801801e:	e7ed      	b.n	8017ffc <_strtod_l+0xfc>
 8018020:	f8df b184 	ldr.w	fp, [pc, #388]	; 80181a8 <_strtod_l+0x2a8>
 8018024:	f04f 0a00 	mov.w	sl, #0
 8018028:	e7e8      	b.n	8017ffc <_strtod_l+0xfc>
 801802a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801802e:	f04f 3aff 	mov.w	sl, #4294967295
 8018032:	e7e3      	b.n	8017ffc <_strtod_l+0xfc>
 8018034:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018036:	1c5a      	adds	r2, r3, #1
 8018038:	921d      	str	r2, [sp, #116]	; 0x74
 801803a:	785b      	ldrb	r3, [r3, #1]
 801803c:	2b30      	cmp	r3, #48	; 0x30
 801803e:	d0f9      	beq.n	8018034 <_strtod_l+0x134>
 8018040:	2b00      	cmp	r3, #0
 8018042:	d09f      	beq.n	8017f84 <_strtod_l+0x84>
 8018044:	2301      	movs	r3, #1
 8018046:	f04f 0900 	mov.w	r9, #0
 801804a:	9304      	str	r3, [sp, #16]
 801804c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801804e:	930a      	str	r3, [sp, #40]	; 0x28
 8018050:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018054:	464f      	mov	r7, r9
 8018056:	220a      	movs	r2, #10
 8018058:	981d      	ldr	r0, [sp, #116]	; 0x74
 801805a:	7806      	ldrb	r6, [r0, #0]
 801805c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8018060:	b2d9      	uxtb	r1, r3
 8018062:	2909      	cmp	r1, #9
 8018064:	d92a      	bls.n	80180bc <_strtod_l+0x1bc>
 8018066:	9907      	ldr	r1, [sp, #28]
 8018068:	462a      	mov	r2, r5
 801806a:	f7ff ff1b 	bl	8017ea4 <strncmp>
 801806e:	b398      	cbz	r0, 80180d8 <_strtod_l+0x1d8>
 8018070:	2000      	movs	r0, #0
 8018072:	4633      	mov	r3, r6
 8018074:	463d      	mov	r5, r7
 8018076:	9007      	str	r0, [sp, #28]
 8018078:	4602      	mov	r2, r0
 801807a:	2b65      	cmp	r3, #101	; 0x65
 801807c:	d001      	beq.n	8018082 <_strtod_l+0x182>
 801807e:	2b45      	cmp	r3, #69	; 0x45
 8018080:	d118      	bne.n	80180b4 <_strtod_l+0x1b4>
 8018082:	b91d      	cbnz	r5, 801808c <_strtod_l+0x18c>
 8018084:	9b04      	ldr	r3, [sp, #16]
 8018086:	4303      	orrs	r3, r0
 8018088:	d098      	beq.n	8017fbc <_strtod_l+0xbc>
 801808a:	2500      	movs	r5, #0
 801808c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8018090:	f108 0301 	add.w	r3, r8, #1
 8018094:	931d      	str	r3, [sp, #116]	; 0x74
 8018096:	f898 3001 	ldrb.w	r3, [r8, #1]
 801809a:	2b2b      	cmp	r3, #43	; 0x2b
 801809c:	d075      	beq.n	801818a <_strtod_l+0x28a>
 801809e:	2b2d      	cmp	r3, #45	; 0x2d
 80180a0:	d07b      	beq.n	801819a <_strtod_l+0x29a>
 80180a2:	f04f 0c00 	mov.w	ip, #0
 80180a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80180aa:	2909      	cmp	r1, #9
 80180ac:	f240 8082 	bls.w	80181b4 <_strtod_l+0x2b4>
 80180b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80180b4:	2600      	movs	r6, #0
 80180b6:	e09d      	b.n	80181f4 <_strtod_l+0x2f4>
 80180b8:	2300      	movs	r3, #0
 80180ba:	e7c4      	b.n	8018046 <_strtod_l+0x146>
 80180bc:	2f08      	cmp	r7, #8
 80180be:	bfd8      	it	le
 80180c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80180c2:	f100 0001 	add.w	r0, r0, #1
 80180c6:	bfda      	itte	le
 80180c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80180cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80180ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80180d2:	3701      	adds	r7, #1
 80180d4:	901d      	str	r0, [sp, #116]	; 0x74
 80180d6:	e7bf      	b.n	8018058 <_strtod_l+0x158>
 80180d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80180da:	195a      	adds	r2, r3, r5
 80180dc:	921d      	str	r2, [sp, #116]	; 0x74
 80180de:	5d5b      	ldrb	r3, [r3, r5]
 80180e0:	2f00      	cmp	r7, #0
 80180e2:	d037      	beq.n	8018154 <_strtod_l+0x254>
 80180e4:	9007      	str	r0, [sp, #28]
 80180e6:	463d      	mov	r5, r7
 80180e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80180ec:	2a09      	cmp	r2, #9
 80180ee:	d912      	bls.n	8018116 <_strtod_l+0x216>
 80180f0:	2201      	movs	r2, #1
 80180f2:	e7c2      	b.n	801807a <_strtod_l+0x17a>
 80180f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80180f6:	1c5a      	adds	r2, r3, #1
 80180f8:	921d      	str	r2, [sp, #116]	; 0x74
 80180fa:	785b      	ldrb	r3, [r3, #1]
 80180fc:	3001      	adds	r0, #1
 80180fe:	2b30      	cmp	r3, #48	; 0x30
 8018100:	d0f8      	beq.n	80180f4 <_strtod_l+0x1f4>
 8018102:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8018106:	2a08      	cmp	r2, #8
 8018108:	f200 84db 	bhi.w	8018ac2 <_strtod_l+0xbc2>
 801810c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801810e:	9007      	str	r0, [sp, #28]
 8018110:	2000      	movs	r0, #0
 8018112:	920a      	str	r2, [sp, #40]	; 0x28
 8018114:	4605      	mov	r5, r0
 8018116:	3b30      	subs	r3, #48	; 0x30
 8018118:	f100 0201 	add.w	r2, r0, #1
 801811c:	d014      	beq.n	8018148 <_strtod_l+0x248>
 801811e:	9907      	ldr	r1, [sp, #28]
 8018120:	4411      	add	r1, r2
 8018122:	9107      	str	r1, [sp, #28]
 8018124:	462a      	mov	r2, r5
 8018126:	eb00 0e05 	add.w	lr, r0, r5
 801812a:	210a      	movs	r1, #10
 801812c:	4572      	cmp	r2, lr
 801812e:	d113      	bne.n	8018158 <_strtod_l+0x258>
 8018130:	182a      	adds	r2, r5, r0
 8018132:	2a08      	cmp	r2, #8
 8018134:	f105 0501 	add.w	r5, r5, #1
 8018138:	4405      	add	r5, r0
 801813a:	dc1c      	bgt.n	8018176 <_strtod_l+0x276>
 801813c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801813e:	220a      	movs	r2, #10
 8018140:	fb02 3301 	mla	r3, r2, r1, r3
 8018144:	9309      	str	r3, [sp, #36]	; 0x24
 8018146:	2200      	movs	r2, #0
 8018148:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801814a:	1c59      	adds	r1, r3, #1
 801814c:	911d      	str	r1, [sp, #116]	; 0x74
 801814e:	785b      	ldrb	r3, [r3, #1]
 8018150:	4610      	mov	r0, r2
 8018152:	e7c9      	b.n	80180e8 <_strtod_l+0x1e8>
 8018154:	4638      	mov	r0, r7
 8018156:	e7d2      	b.n	80180fe <_strtod_l+0x1fe>
 8018158:	2a08      	cmp	r2, #8
 801815a:	dc04      	bgt.n	8018166 <_strtod_l+0x266>
 801815c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801815e:	434e      	muls	r6, r1
 8018160:	9609      	str	r6, [sp, #36]	; 0x24
 8018162:	3201      	adds	r2, #1
 8018164:	e7e2      	b.n	801812c <_strtod_l+0x22c>
 8018166:	f102 0c01 	add.w	ip, r2, #1
 801816a:	f1bc 0f10 	cmp.w	ip, #16
 801816e:	bfd8      	it	le
 8018170:	fb01 f909 	mulle.w	r9, r1, r9
 8018174:	e7f5      	b.n	8018162 <_strtod_l+0x262>
 8018176:	2d10      	cmp	r5, #16
 8018178:	bfdc      	itt	le
 801817a:	220a      	movle	r2, #10
 801817c:	fb02 3909 	mlale	r9, r2, r9, r3
 8018180:	e7e1      	b.n	8018146 <_strtod_l+0x246>
 8018182:	2300      	movs	r3, #0
 8018184:	9307      	str	r3, [sp, #28]
 8018186:	2201      	movs	r2, #1
 8018188:	e77c      	b.n	8018084 <_strtod_l+0x184>
 801818a:	f04f 0c00 	mov.w	ip, #0
 801818e:	f108 0302 	add.w	r3, r8, #2
 8018192:	931d      	str	r3, [sp, #116]	; 0x74
 8018194:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018198:	e785      	b.n	80180a6 <_strtod_l+0x1a6>
 801819a:	f04f 0c01 	mov.w	ip, #1
 801819e:	e7f6      	b.n	801818e <_strtod_l+0x28e>
 80181a0:	08021fe0 	.word	0x08021fe0
 80181a4:	08021e08 	.word	0x08021e08
 80181a8:	7ff00000 	.word	0x7ff00000
 80181ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80181ae:	1c59      	adds	r1, r3, #1
 80181b0:	911d      	str	r1, [sp, #116]	; 0x74
 80181b2:	785b      	ldrb	r3, [r3, #1]
 80181b4:	2b30      	cmp	r3, #48	; 0x30
 80181b6:	d0f9      	beq.n	80181ac <_strtod_l+0x2ac>
 80181b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80181bc:	2908      	cmp	r1, #8
 80181be:	f63f af79 	bhi.w	80180b4 <_strtod_l+0x1b4>
 80181c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80181c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80181c8:	9308      	str	r3, [sp, #32]
 80181ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80181cc:	1c59      	adds	r1, r3, #1
 80181ce:	911d      	str	r1, [sp, #116]	; 0x74
 80181d0:	785b      	ldrb	r3, [r3, #1]
 80181d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80181d6:	2e09      	cmp	r6, #9
 80181d8:	d937      	bls.n	801824a <_strtod_l+0x34a>
 80181da:	9e08      	ldr	r6, [sp, #32]
 80181dc:	1b89      	subs	r1, r1, r6
 80181de:	2908      	cmp	r1, #8
 80181e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80181e4:	dc02      	bgt.n	80181ec <_strtod_l+0x2ec>
 80181e6:	4576      	cmp	r6, lr
 80181e8:	bfa8      	it	ge
 80181ea:	4676      	movge	r6, lr
 80181ec:	f1bc 0f00 	cmp.w	ip, #0
 80181f0:	d000      	beq.n	80181f4 <_strtod_l+0x2f4>
 80181f2:	4276      	negs	r6, r6
 80181f4:	2d00      	cmp	r5, #0
 80181f6:	d14f      	bne.n	8018298 <_strtod_l+0x398>
 80181f8:	9904      	ldr	r1, [sp, #16]
 80181fa:	4301      	orrs	r1, r0
 80181fc:	f47f aec2 	bne.w	8017f84 <_strtod_l+0x84>
 8018200:	2a00      	cmp	r2, #0
 8018202:	f47f aedb 	bne.w	8017fbc <_strtod_l+0xbc>
 8018206:	2b69      	cmp	r3, #105	; 0x69
 8018208:	d027      	beq.n	801825a <_strtod_l+0x35a>
 801820a:	dc24      	bgt.n	8018256 <_strtod_l+0x356>
 801820c:	2b49      	cmp	r3, #73	; 0x49
 801820e:	d024      	beq.n	801825a <_strtod_l+0x35a>
 8018210:	2b4e      	cmp	r3, #78	; 0x4e
 8018212:	f47f aed3 	bne.w	8017fbc <_strtod_l+0xbc>
 8018216:	499e      	ldr	r1, [pc, #632]	; (8018490 <_strtod_l+0x590>)
 8018218:	a81d      	add	r0, sp, #116	; 0x74
 801821a:	f001 ff69 	bl	801a0f0 <__match>
 801821e:	2800      	cmp	r0, #0
 8018220:	f43f aecc 	beq.w	8017fbc <_strtod_l+0xbc>
 8018224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018226:	781b      	ldrb	r3, [r3, #0]
 8018228:	2b28      	cmp	r3, #40	; 0x28
 801822a:	d12d      	bne.n	8018288 <_strtod_l+0x388>
 801822c:	4999      	ldr	r1, [pc, #612]	; (8018494 <_strtod_l+0x594>)
 801822e:	aa20      	add	r2, sp, #128	; 0x80
 8018230:	a81d      	add	r0, sp, #116	; 0x74
 8018232:	f001 ff71 	bl	801a118 <__hexnan>
 8018236:	2805      	cmp	r0, #5
 8018238:	d126      	bne.n	8018288 <_strtod_l+0x388>
 801823a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801823c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8018240:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8018244:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8018248:	e69c      	b.n	8017f84 <_strtod_l+0x84>
 801824a:	210a      	movs	r1, #10
 801824c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8018250:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8018254:	e7b9      	b.n	80181ca <_strtod_l+0x2ca>
 8018256:	2b6e      	cmp	r3, #110	; 0x6e
 8018258:	e7db      	b.n	8018212 <_strtod_l+0x312>
 801825a:	498f      	ldr	r1, [pc, #572]	; (8018498 <_strtod_l+0x598>)
 801825c:	a81d      	add	r0, sp, #116	; 0x74
 801825e:	f001 ff47 	bl	801a0f0 <__match>
 8018262:	2800      	cmp	r0, #0
 8018264:	f43f aeaa 	beq.w	8017fbc <_strtod_l+0xbc>
 8018268:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801826a:	498c      	ldr	r1, [pc, #560]	; (801849c <_strtod_l+0x59c>)
 801826c:	3b01      	subs	r3, #1
 801826e:	a81d      	add	r0, sp, #116	; 0x74
 8018270:	931d      	str	r3, [sp, #116]	; 0x74
 8018272:	f001 ff3d 	bl	801a0f0 <__match>
 8018276:	b910      	cbnz	r0, 801827e <_strtod_l+0x37e>
 8018278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801827a:	3301      	adds	r3, #1
 801827c:	931d      	str	r3, [sp, #116]	; 0x74
 801827e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80184ac <_strtod_l+0x5ac>
 8018282:	f04f 0a00 	mov.w	sl, #0
 8018286:	e67d      	b.n	8017f84 <_strtod_l+0x84>
 8018288:	4885      	ldr	r0, [pc, #532]	; (80184a0 <_strtod_l+0x5a0>)
 801828a:	f003 f82d 	bl	801b2e8 <nan>
 801828e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8018292:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018296:	e675      	b.n	8017f84 <_strtod_l+0x84>
 8018298:	9b07      	ldr	r3, [sp, #28]
 801829a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801829c:	1af3      	subs	r3, r6, r3
 801829e:	2f00      	cmp	r7, #0
 80182a0:	bf08      	it	eq
 80182a2:	462f      	moveq	r7, r5
 80182a4:	2d10      	cmp	r5, #16
 80182a6:	9308      	str	r3, [sp, #32]
 80182a8:	46a8      	mov	r8, r5
 80182aa:	bfa8      	it	ge
 80182ac:	f04f 0810 	movge.w	r8, #16
 80182b0:	f7e8 f938 	bl	8000524 <__aeabi_ui2d>
 80182b4:	2d09      	cmp	r5, #9
 80182b6:	4682      	mov	sl, r0
 80182b8:	468b      	mov	fp, r1
 80182ba:	dd13      	ble.n	80182e4 <_strtod_l+0x3e4>
 80182bc:	4b79      	ldr	r3, [pc, #484]	; (80184a4 <_strtod_l+0x5a4>)
 80182be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80182c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80182c6:	f7e8 f9a7 	bl	8000618 <__aeabi_dmul>
 80182ca:	4682      	mov	sl, r0
 80182cc:	4648      	mov	r0, r9
 80182ce:	468b      	mov	fp, r1
 80182d0:	f7e8 f928 	bl	8000524 <__aeabi_ui2d>
 80182d4:	4602      	mov	r2, r0
 80182d6:	460b      	mov	r3, r1
 80182d8:	4650      	mov	r0, sl
 80182da:	4659      	mov	r1, fp
 80182dc:	f7e7 ffe6 	bl	80002ac <__adddf3>
 80182e0:	4682      	mov	sl, r0
 80182e2:	468b      	mov	fp, r1
 80182e4:	2d0f      	cmp	r5, #15
 80182e6:	dc38      	bgt.n	801835a <_strtod_l+0x45a>
 80182e8:	9b08      	ldr	r3, [sp, #32]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	f43f ae4a 	beq.w	8017f84 <_strtod_l+0x84>
 80182f0:	dd24      	ble.n	801833c <_strtod_l+0x43c>
 80182f2:	2b16      	cmp	r3, #22
 80182f4:	dc0b      	bgt.n	801830e <_strtod_l+0x40e>
 80182f6:	4d6b      	ldr	r5, [pc, #428]	; (80184a4 <_strtod_l+0x5a4>)
 80182f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80182fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8018300:	4652      	mov	r2, sl
 8018302:	465b      	mov	r3, fp
 8018304:	f7e8 f988 	bl	8000618 <__aeabi_dmul>
 8018308:	4682      	mov	sl, r0
 801830a:	468b      	mov	fp, r1
 801830c:	e63a      	b.n	8017f84 <_strtod_l+0x84>
 801830e:	9a08      	ldr	r2, [sp, #32]
 8018310:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8018314:	4293      	cmp	r3, r2
 8018316:	db20      	blt.n	801835a <_strtod_l+0x45a>
 8018318:	4c62      	ldr	r4, [pc, #392]	; (80184a4 <_strtod_l+0x5a4>)
 801831a:	f1c5 050f 	rsb	r5, r5, #15
 801831e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8018322:	4652      	mov	r2, sl
 8018324:	465b      	mov	r3, fp
 8018326:	e9d1 0100 	ldrd	r0, r1, [r1]
 801832a:	f7e8 f975 	bl	8000618 <__aeabi_dmul>
 801832e:	9b08      	ldr	r3, [sp, #32]
 8018330:	1b5d      	subs	r5, r3, r5
 8018332:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8018336:	e9d4 2300 	ldrd	r2, r3, [r4]
 801833a:	e7e3      	b.n	8018304 <_strtod_l+0x404>
 801833c:	9b08      	ldr	r3, [sp, #32]
 801833e:	3316      	adds	r3, #22
 8018340:	db0b      	blt.n	801835a <_strtod_l+0x45a>
 8018342:	9b07      	ldr	r3, [sp, #28]
 8018344:	4a57      	ldr	r2, [pc, #348]	; (80184a4 <_strtod_l+0x5a4>)
 8018346:	1b9e      	subs	r6, r3, r6
 8018348:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801834c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018350:	4650      	mov	r0, sl
 8018352:	4659      	mov	r1, fp
 8018354:	f7e8 fa8a 	bl	800086c <__aeabi_ddiv>
 8018358:	e7d6      	b.n	8018308 <_strtod_l+0x408>
 801835a:	9b08      	ldr	r3, [sp, #32]
 801835c:	eba5 0808 	sub.w	r8, r5, r8
 8018360:	4498      	add	r8, r3
 8018362:	f1b8 0f00 	cmp.w	r8, #0
 8018366:	dd71      	ble.n	801844c <_strtod_l+0x54c>
 8018368:	f018 030f 	ands.w	r3, r8, #15
 801836c:	d00a      	beq.n	8018384 <_strtod_l+0x484>
 801836e:	494d      	ldr	r1, [pc, #308]	; (80184a4 <_strtod_l+0x5a4>)
 8018370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8018374:	4652      	mov	r2, sl
 8018376:	465b      	mov	r3, fp
 8018378:	e9d1 0100 	ldrd	r0, r1, [r1]
 801837c:	f7e8 f94c 	bl	8000618 <__aeabi_dmul>
 8018380:	4682      	mov	sl, r0
 8018382:	468b      	mov	fp, r1
 8018384:	f038 080f 	bics.w	r8, r8, #15
 8018388:	d04d      	beq.n	8018426 <_strtod_l+0x526>
 801838a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801838e:	dd22      	ble.n	80183d6 <_strtod_l+0x4d6>
 8018390:	2500      	movs	r5, #0
 8018392:	462e      	mov	r6, r5
 8018394:	9509      	str	r5, [sp, #36]	; 0x24
 8018396:	9507      	str	r5, [sp, #28]
 8018398:	2322      	movs	r3, #34	; 0x22
 801839a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80184ac <_strtod_l+0x5ac>
 801839e:	6023      	str	r3, [r4, #0]
 80183a0:	f04f 0a00 	mov.w	sl, #0
 80183a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	f43f adec 	beq.w	8017f84 <_strtod_l+0x84>
 80183ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80183ae:	4620      	mov	r0, r4
 80183b0:	f001 ffb0 	bl	801a314 <_Bfree>
 80183b4:	9907      	ldr	r1, [sp, #28]
 80183b6:	4620      	mov	r0, r4
 80183b8:	f001 ffac 	bl	801a314 <_Bfree>
 80183bc:	4631      	mov	r1, r6
 80183be:	4620      	mov	r0, r4
 80183c0:	f001 ffa8 	bl	801a314 <_Bfree>
 80183c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80183c6:	4620      	mov	r0, r4
 80183c8:	f001 ffa4 	bl	801a314 <_Bfree>
 80183cc:	4629      	mov	r1, r5
 80183ce:	4620      	mov	r0, r4
 80183d0:	f001 ffa0 	bl	801a314 <_Bfree>
 80183d4:	e5d6      	b.n	8017f84 <_strtod_l+0x84>
 80183d6:	2300      	movs	r3, #0
 80183d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80183dc:	4650      	mov	r0, sl
 80183de:	4659      	mov	r1, fp
 80183e0:	4699      	mov	r9, r3
 80183e2:	f1b8 0f01 	cmp.w	r8, #1
 80183e6:	dc21      	bgt.n	801842c <_strtod_l+0x52c>
 80183e8:	b10b      	cbz	r3, 80183ee <_strtod_l+0x4ee>
 80183ea:	4682      	mov	sl, r0
 80183ec:	468b      	mov	fp, r1
 80183ee:	4b2e      	ldr	r3, [pc, #184]	; (80184a8 <_strtod_l+0x5a8>)
 80183f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80183f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80183f8:	4652      	mov	r2, sl
 80183fa:	465b      	mov	r3, fp
 80183fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8018400:	f7e8 f90a 	bl	8000618 <__aeabi_dmul>
 8018404:	4b29      	ldr	r3, [pc, #164]	; (80184ac <_strtod_l+0x5ac>)
 8018406:	460a      	mov	r2, r1
 8018408:	400b      	ands	r3, r1
 801840a:	4929      	ldr	r1, [pc, #164]	; (80184b0 <_strtod_l+0x5b0>)
 801840c:	428b      	cmp	r3, r1
 801840e:	4682      	mov	sl, r0
 8018410:	d8be      	bhi.n	8018390 <_strtod_l+0x490>
 8018412:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8018416:	428b      	cmp	r3, r1
 8018418:	bf86      	itte	hi
 801841a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80184b4 <_strtod_l+0x5b4>
 801841e:	f04f 3aff 	movhi.w	sl, #4294967295
 8018422:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8018426:	2300      	movs	r3, #0
 8018428:	9304      	str	r3, [sp, #16]
 801842a:	e081      	b.n	8018530 <_strtod_l+0x630>
 801842c:	f018 0f01 	tst.w	r8, #1
 8018430:	d007      	beq.n	8018442 <_strtod_l+0x542>
 8018432:	4b1d      	ldr	r3, [pc, #116]	; (80184a8 <_strtod_l+0x5a8>)
 8018434:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8018438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801843c:	f7e8 f8ec 	bl	8000618 <__aeabi_dmul>
 8018440:	2301      	movs	r3, #1
 8018442:	f109 0901 	add.w	r9, r9, #1
 8018446:	ea4f 0868 	mov.w	r8, r8, asr #1
 801844a:	e7ca      	b.n	80183e2 <_strtod_l+0x4e2>
 801844c:	d0eb      	beq.n	8018426 <_strtod_l+0x526>
 801844e:	f1c8 0800 	rsb	r8, r8, #0
 8018452:	f018 020f 	ands.w	r2, r8, #15
 8018456:	d00a      	beq.n	801846e <_strtod_l+0x56e>
 8018458:	4b12      	ldr	r3, [pc, #72]	; (80184a4 <_strtod_l+0x5a4>)
 801845a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801845e:	4650      	mov	r0, sl
 8018460:	4659      	mov	r1, fp
 8018462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018466:	f7e8 fa01 	bl	800086c <__aeabi_ddiv>
 801846a:	4682      	mov	sl, r0
 801846c:	468b      	mov	fp, r1
 801846e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8018472:	d0d8      	beq.n	8018426 <_strtod_l+0x526>
 8018474:	f1b8 0f1f 	cmp.w	r8, #31
 8018478:	dd1e      	ble.n	80184b8 <_strtod_l+0x5b8>
 801847a:	2500      	movs	r5, #0
 801847c:	462e      	mov	r6, r5
 801847e:	9509      	str	r5, [sp, #36]	; 0x24
 8018480:	9507      	str	r5, [sp, #28]
 8018482:	2322      	movs	r3, #34	; 0x22
 8018484:	f04f 0a00 	mov.w	sl, #0
 8018488:	f04f 0b00 	mov.w	fp, #0
 801848c:	6023      	str	r3, [r4, #0]
 801848e:	e789      	b.n	80183a4 <_strtod_l+0x4a4>
 8018490:	08021d65 	.word	0x08021d65
 8018494:	08021e1c 	.word	0x08021e1c
 8018498:	08021d5d 	.word	0x08021d5d
 801849c:	08021e97 	.word	0x08021e97
 80184a0:	08021e93 	.word	0x08021e93
 80184a4:	08022080 	.word	0x08022080
 80184a8:	08022058 	.word	0x08022058
 80184ac:	7ff00000 	.word	0x7ff00000
 80184b0:	7ca00000 	.word	0x7ca00000
 80184b4:	7fefffff 	.word	0x7fefffff
 80184b8:	f018 0310 	ands.w	r3, r8, #16
 80184bc:	bf18      	it	ne
 80184be:	236a      	movne	r3, #106	; 0x6a
 80184c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8018878 <_strtod_l+0x978>
 80184c4:	9304      	str	r3, [sp, #16]
 80184c6:	4650      	mov	r0, sl
 80184c8:	4659      	mov	r1, fp
 80184ca:	2300      	movs	r3, #0
 80184cc:	f018 0f01 	tst.w	r8, #1
 80184d0:	d004      	beq.n	80184dc <_strtod_l+0x5dc>
 80184d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80184d6:	f7e8 f89f 	bl	8000618 <__aeabi_dmul>
 80184da:	2301      	movs	r3, #1
 80184dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80184e0:	f109 0908 	add.w	r9, r9, #8
 80184e4:	d1f2      	bne.n	80184cc <_strtod_l+0x5cc>
 80184e6:	b10b      	cbz	r3, 80184ec <_strtod_l+0x5ec>
 80184e8:	4682      	mov	sl, r0
 80184ea:	468b      	mov	fp, r1
 80184ec:	9b04      	ldr	r3, [sp, #16]
 80184ee:	b1bb      	cbz	r3, 8018520 <_strtod_l+0x620>
 80184f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80184f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	4659      	mov	r1, fp
 80184fc:	dd10      	ble.n	8018520 <_strtod_l+0x620>
 80184fe:	2b1f      	cmp	r3, #31
 8018500:	f340 8128 	ble.w	8018754 <_strtod_l+0x854>
 8018504:	2b34      	cmp	r3, #52	; 0x34
 8018506:	bfde      	ittt	le
 8018508:	3b20      	suble	r3, #32
 801850a:	f04f 32ff 	movle.w	r2, #4294967295
 801850e:	fa02 f303 	lslle.w	r3, r2, r3
 8018512:	f04f 0a00 	mov.w	sl, #0
 8018516:	bfcc      	ite	gt
 8018518:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801851c:	ea03 0b01 	andle.w	fp, r3, r1
 8018520:	2200      	movs	r2, #0
 8018522:	2300      	movs	r3, #0
 8018524:	4650      	mov	r0, sl
 8018526:	4659      	mov	r1, fp
 8018528:	f7e8 fade 	bl	8000ae8 <__aeabi_dcmpeq>
 801852c:	2800      	cmp	r0, #0
 801852e:	d1a4      	bne.n	801847a <_strtod_l+0x57a>
 8018530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018532:	9300      	str	r3, [sp, #0]
 8018534:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018536:	462b      	mov	r3, r5
 8018538:	463a      	mov	r2, r7
 801853a:	4620      	mov	r0, r4
 801853c:	f001 ff56 	bl	801a3ec <__s2b>
 8018540:	9009      	str	r0, [sp, #36]	; 0x24
 8018542:	2800      	cmp	r0, #0
 8018544:	f43f af24 	beq.w	8018390 <_strtod_l+0x490>
 8018548:	9b07      	ldr	r3, [sp, #28]
 801854a:	1b9e      	subs	r6, r3, r6
 801854c:	9b08      	ldr	r3, [sp, #32]
 801854e:	2b00      	cmp	r3, #0
 8018550:	bfb4      	ite	lt
 8018552:	4633      	movlt	r3, r6
 8018554:	2300      	movge	r3, #0
 8018556:	9310      	str	r3, [sp, #64]	; 0x40
 8018558:	9b08      	ldr	r3, [sp, #32]
 801855a:	2500      	movs	r5, #0
 801855c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018560:	9318      	str	r3, [sp, #96]	; 0x60
 8018562:	462e      	mov	r6, r5
 8018564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018566:	4620      	mov	r0, r4
 8018568:	6859      	ldr	r1, [r3, #4]
 801856a:	f001 fe93 	bl	801a294 <_Balloc>
 801856e:	9007      	str	r0, [sp, #28]
 8018570:	2800      	cmp	r0, #0
 8018572:	f43f af11 	beq.w	8018398 <_strtod_l+0x498>
 8018576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018578:	691a      	ldr	r2, [r3, #16]
 801857a:	3202      	adds	r2, #2
 801857c:	f103 010c 	add.w	r1, r3, #12
 8018580:	0092      	lsls	r2, r2, #2
 8018582:	300c      	adds	r0, #12
 8018584:	f7fe fd66 	bl	8017054 <memcpy>
 8018588:	ec4b ab10 	vmov	d0, sl, fp
 801858c:	aa20      	add	r2, sp, #128	; 0x80
 801858e:	a91f      	add	r1, sp, #124	; 0x7c
 8018590:	4620      	mov	r0, r4
 8018592:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8018596:	f002 fa65 	bl	801aa64 <__d2b>
 801859a:	901e      	str	r0, [sp, #120]	; 0x78
 801859c:	2800      	cmp	r0, #0
 801859e:	f43f aefb 	beq.w	8018398 <_strtod_l+0x498>
 80185a2:	2101      	movs	r1, #1
 80185a4:	4620      	mov	r0, r4
 80185a6:	f001 ffbb 	bl	801a520 <__i2b>
 80185aa:	4606      	mov	r6, r0
 80185ac:	2800      	cmp	r0, #0
 80185ae:	f43f aef3 	beq.w	8018398 <_strtod_l+0x498>
 80185b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80185b4:	9904      	ldr	r1, [sp, #16]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	bfab      	itete	ge
 80185ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80185bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80185be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80185c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80185c4:	bfac      	ite	ge
 80185c6:	eb03 0902 	addge.w	r9, r3, r2
 80185ca:	1ad7      	sublt	r7, r2, r3
 80185cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80185ce:	eba3 0801 	sub.w	r8, r3, r1
 80185d2:	4490      	add	r8, r2
 80185d4:	4ba3      	ldr	r3, [pc, #652]	; (8018864 <_strtod_l+0x964>)
 80185d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80185da:	4598      	cmp	r8, r3
 80185dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80185e0:	f280 80cc 	bge.w	801877c <_strtod_l+0x87c>
 80185e4:	eba3 0308 	sub.w	r3, r3, r8
 80185e8:	2b1f      	cmp	r3, #31
 80185ea:	eba2 0203 	sub.w	r2, r2, r3
 80185ee:	f04f 0101 	mov.w	r1, #1
 80185f2:	f300 80b6 	bgt.w	8018762 <_strtod_l+0x862>
 80185f6:	fa01 f303 	lsl.w	r3, r1, r3
 80185fa:	9311      	str	r3, [sp, #68]	; 0x44
 80185fc:	2300      	movs	r3, #0
 80185fe:	930c      	str	r3, [sp, #48]	; 0x30
 8018600:	eb09 0802 	add.w	r8, r9, r2
 8018604:	9b04      	ldr	r3, [sp, #16]
 8018606:	45c1      	cmp	r9, r8
 8018608:	4417      	add	r7, r2
 801860a:	441f      	add	r7, r3
 801860c:	464b      	mov	r3, r9
 801860e:	bfa8      	it	ge
 8018610:	4643      	movge	r3, r8
 8018612:	42bb      	cmp	r3, r7
 8018614:	bfa8      	it	ge
 8018616:	463b      	movge	r3, r7
 8018618:	2b00      	cmp	r3, #0
 801861a:	bfc2      	ittt	gt
 801861c:	eba8 0803 	subgt.w	r8, r8, r3
 8018620:	1aff      	subgt	r7, r7, r3
 8018622:	eba9 0903 	subgt.w	r9, r9, r3
 8018626:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018628:	2b00      	cmp	r3, #0
 801862a:	dd17      	ble.n	801865c <_strtod_l+0x75c>
 801862c:	4631      	mov	r1, r6
 801862e:	461a      	mov	r2, r3
 8018630:	4620      	mov	r0, r4
 8018632:	f002 f831 	bl	801a698 <__pow5mult>
 8018636:	4606      	mov	r6, r0
 8018638:	2800      	cmp	r0, #0
 801863a:	f43f aead 	beq.w	8018398 <_strtod_l+0x498>
 801863e:	4601      	mov	r1, r0
 8018640:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018642:	4620      	mov	r0, r4
 8018644:	f001 ff82 	bl	801a54c <__multiply>
 8018648:	900f      	str	r0, [sp, #60]	; 0x3c
 801864a:	2800      	cmp	r0, #0
 801864c:	f43f aea4 	beq.w	8018398 <_strtod_l+0x498>
 8018650:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018652:	4620      	mov	r0, r4
 8018654:	f001 fe5e 	bl	801a314 <_Bfree>
 8018658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801865a:	931e      	str	r3, [sp, #120]	; 0x78
 801865c:	f1b8 0f00 	cmp.w	r8, #0
 8018660:	f300 8091 	bgt.w	8018786 <_strtod_l+0x886>
 8018664:	9b08      	ldr	r3, [sp, #32]
 8018666:	2b00      	cmp	r3, #0
 8018668:	dd08      	ble.n	801867c <_strtod_l+0x77c>
 801866a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801866c:	9907      	ldr	r1, [sp, #28]
 801866e:	4620      	mov	r0, r4
 8018670:	f002 f812 	bl	801a698 <__pow5mult>
 8018674:	9007      	str	r0, [sp, #28]
 8018676:	2800      	cmp	r0, #0
 8018678:	f43f ae8e 	beq.w	8018398 <_strtod_l+0x498>
 801867c:	2f00      	cmp	r7, #0
 801867e:	dd08      	ble.n	8018692 <_strtod_l+0x792>
 8018680:	9907      	ldr	r1, [sp, #28]
 8018682:	463a      	mov	r2, r7
 8018684:	4620      	mov	r0, r4
 8018686:	f002 f861 	bl	801a74c <__lshift>
 801868a:	9007      	str	r0, [sp, #28]
 801868c:	2800      	cmp	r0, #0
 801868e:	f43f ae83 	beq.w	8018398 <_strtod_l+0x498>
 8018692:	f1b9 0f00 	cmp.w	r9, #0
 8018696:	dd08      	ble.n	80186aa <_strtod_l+0x7aa>
 8018698:	4631      	mov	r1, r6
 801869a:	464a      	mov	r2, r9
 801869c:	4620      	mov	r0, r4
 801869e:	f002 f855 	bl	801a74c <__lshift>
 80186a2:	4606      	mov	r6, r0
 80186a4:	2800      	cmp	r0, #0
 80186a6:	f43f ae77 	beq.w	8018398 <_strtod_l+0x498>
 80186aa:	9a07      	ldr	r2, [sp, #28]
 80186ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80186ae:	4620      	mov	r0, r4
 80186b0:	f002 f8d4 	bl	801a85c <__mdiff>
 80186b4:	4605      	mov	r5, r0
 80186b6:	2800      	cmp	r0, #0
 80186b8:	f43f ae6e 	beq.w	8018398 <_strtod_l+0x498>
 80186bc:	68c3      	ldr	r3, [r0, #12]
 80186be:	930f      	str	r3, [sp, #60]	; 0x3c
 80186c0:	2300      	movs	r3, #0
 80186c2:	60c3      	str	r3, [r0, #12]
 80186c4:	4631      	mov	r1, r6
 80186c6:	f002 f8ad 	bl	801a824 <__mcmp>
 80186ca:	2800      	cmp	r0, #0
 80186cc:	da65      	bge.n	801879a <_strtod_l+0x89a>
 80186ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186d0:	ea53 030a 	orrs.w	r3, r3, sl
 80186d4:	f040 8087 	bne.w	80187e6 <_strtod_l+0x8e6>
 80186d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80186dc:	2b00      	cmp	r3, #0
 80186de:	f040 8082 	bne.w	80187e6 <_strtod_l+0x8e6>
 80186e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80186e6:	0d1b      	lsrs	r3, r3, #20
 80186e8:	051b      	lsls	r3, r3, #20
 80186ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80186ee:	d97a      	bls.n	80187e6 <_strtod_l+0x8e6>
 80186f0:	696b      	ldr	r3, [r5, #20]
 80186f2:	b913      	cbnz	r3, 80186fa <_strtod_l+0x7fa>
 80186f4:	692b      	ldr	r3, [r5, #16]
 80186f6:	2b01      	cmp	r3, #1
 80186f8:	dd75      	ble.n	80187e6 <_strtod_l+0x8e6>
 80186fa:	4629      	mov	r1, r5
 80186fc:	2201      	movs	r2, #1
 80186fe:	4620      	mov	r0, r4
 8018700:	f002 f824 	bl	801a74c <__lshift>
 8018704:	4631      	mov	r1, r6
 8018706:	4605      	mov	r5, r0
 8018708:	f002 f88c 	bl	801a824 <__mcmp>
 801870c:	2800      	cmp	r0, #0
 801870e:	dd6a      	ble.n	80187e6 <_strtod_l+0x8e6>
 8018710:	9904      	ldr	r1, [sp, #16]
 8018712:	4a55      	ldr	r2, [pc, #340]	; (8018868 <_strtod_l+0x968>)
 8018714:	465b      	mov	r3, fp
 8018716:	2900      	cmp	r1, #0
 8018718:	f000 8085 	beq.w	8018826 <_strtod_l+0x926>
 801871c:	ea02 010b 	and.w	r1, r2, fp
 8018720:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018724:	dc7f      	bgt.n	8018826 <_strtod_l+0x926>
 8018726:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801872a:	f77f aeaa 	ble.w	8018482 <_strtod_l+0x582>
 801872e:	4a4f      	ldr	r2, [pc, #316]	; (801886c <_strtod_l+0x96c>)
 8018730:	2300      	movs	r3, #0
 8018732:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8018736:	4650      	mov	r0, sl
 8018738:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801873c:	4659      	mov	r1, fp
 801873e:	f7e7 ff6b 	bl	8000618 <__aeabi_dmul>
 8018742:	460b      	mov	r3, r1
 8018744:	4303      	orrs	r3, r0
 8018746:	bf08      	it	eq
 8018748:	2322      	moveq	r3, #34	; 0x22
 801874a:	4682      	mov	sl, r0
 801874c:	468b      	mov	fp, r1
 801874e:	bf08      	it	eq
 8018750:	6023      	streq	r3, [r4, #0]
 8018752:	e62b      	b.n	80183ac <_strtod_l+0x4ac>
 8018754:	f04f 32ff 	mov.w	r2, #4294967295
 8018758:	fa02 f303 	lsl.w	r3, r2, r3
 801875c:	ea03 0a0a 	and.w	sl, r3, sl
 8018760:	e6de      	b.n	8018520 <_strtod_l+0x620>
 8018762:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8018766:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801876a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801876e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8018772:	fa01 f308 	lsl.w	r3, r1, r8
 8018776:	930c      	str	r3, [sp, #48]	; 0x30
 8018778:	9111      	str	r1, [sp, #68]	; 0x44
 801877a:	e741      	b.n	8018600 <_strtod_l+0x700>
 801877c:	2300      	movs	r3, #0
 801877e:	930c      	str	r3, [sp, #48]	; 0x30
 8018780:	2301      	movs	r3, #1
 8018782:	9311      	str	r3, [sp, #68]	; 0x44
 8018784:	e73c      	b.n	8018600 <_strtod_l+0x700>
 8018786:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018788:	4642      	mov	r2, r8
 801878a:	4620      	mov	r0, r4
 801878c:	f001 ffde 	bl	801a74c <__lshift>
 8018790:	901e      	str	r0, [sp, #120]	; 0x78
 8018792:	2800      	cmp	r0, #0
 8018794:	f47f af66 	bne.w	8018664 <_strtod_l+0x764>
 8018798:	e5fe      	b.n	8018398 <_strtod_l+0x498>
 801879a:	465f      	mov	r7, fp
 801879c:	d16e      	bne.n	801887c <_strtod_l+0x97c>
 801879e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80187a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80187a4:	b342      	cbz	r2, 80187f8 <_strtod_l+0x8f8>
 80187a6:	4a32      	ldr	r2, [pc, #200]	; (8018870 <_strtod_l+0x970>)
 80187a8:	4293      	cmp	r3, r2
 80187aa:	d128      	bne.n	80187fe <_strtod_l+0x8fe>
 80187ac:	9b04      	ldr	r3, [sp, #16]
 80187ae:	4650      	mov	r0, sl
 80187b0:	b1eb      	cbz	r3, 80187ee <_strtod_l+0x8ee>
 80187b2:	4a2d      	ldr	r2, [pc, #180]	; (8018868 <_strtod_l+0x968>)
 80187b4:	403a      	ands	r2, r7
 80187b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80187ba:	f04f 31ff 	mov.w	r1, #4294967295
 80187be:	d819      	bhi.n	80187f4 <_strtod_l+0x8f4>
 80187c0:	0d12      	lsrs	r2, r2, #20
 80187c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80187c6:	fa01 f303 	lsl.w	r3, r1, r3
 80187ca:	4298      	cmp	r0, r3
 80187cc:	d117      	bne.n	80187fe <_strtod_l+0x8fe>
 80187ce:	4b29      	ldr	r3, [pc, #164]	; (8018874 <_strtod_l+0x974>)
 80187d0:	429f      	cmp	r7, r3
 80187d2:	d102      	bne.n	80187da <_strtod_l+0x8da>
 80187d4:	3001      	adds	r0, #1
 80187d6:	f43f addf 	beq.w	8018398 <_strtod_l+0x498>
 80187da:	4b23      	ldr	r3, [pc, #140]	; (8018868 <_strtod_l+0x968>)
 80187dc:	403b      	ands	r3, r7
 80187de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80187e2:	f04f 0a00 	mov.w	sl, #0
 80187e6:	9b04      	ldr	r3, [sp, #16]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d1a0      	bne.n	801872e <_strtod_l+0x82e>
 80187ec:	e5de      	b.n	80183ac <_strtod_l+0x4ac>
 80187ee:	f04f 33ff 	mov.w	r3, #4294967295
 80187f2:	e7ea      	b.n	80187ca <_strtod_l+0x8ca>
 80187f4:	460b      	mov	r3, r1
 80187f6:	e7e8      	b.n	80187ca <_strtod_l+0x8ca>
 80187f8:	ea53 030a 	orrs.w	r3, r3, sl
 80187fc:	d088      	beq.n	8018710 <_strtod_l+0x810>
 80187fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018800:	b1db      	cbz	r3, 801883a <_strtod_l+0x93a>
 8018802:	423b      	tst	r3, r7
 8018804:	d0ef      	beq.n	80187e6 <_strtod_l+0x8e6>
 8018806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018808:	9a04      	ldr	r2, [sp, #16]
 801880a:	4650      	mov	r0, sl
 801880c:	4659      	mov	r1, fp
 801880e:	b1c3      	cbz	r3, 8018842 <_strtod_l+0x942>
 8018810:	f7ff fb5a 	bl	8017ec8 <sulp>
 8018814:	4602      	mov	r2, r0
 8018816:	460b      	mov	r3, r1
 8018818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801881c:	f7e7 fd46 	bl	80002ac <__adddf3>
 8018820:	4682      	mov	sl, r0
 8018822:	468b      	mov	fp, r1
 8018824:	e7df      	b.n	80187e6 <_strtod_l+0x8e6>
 8018826:	4013      	ands	r3, r2
 8018828:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801882c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018830:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018834:	f04f 3aff 	mov.w	sl, #4294967295
 8018838:	e7d5      	b.n	80187e6 <_strtod_l+0x8e6>
 801883a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801883c:	ea13 0f0a 	tst.w	r3, sl
 8018840:	e7e0      	b.n	8018804 <_strtod_l+0x904>
 8018842:	f7ff fb41 	bl	8017ec8 <sulp>
 8018846:	4602      	mov	r2, r0
 8018848:	460b      	mov	r3, r1
 801884a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801884e:	f7e7 fd2b 	bl	80002a8 <__aeabi_dsub>
 8018852:	2200      	movs	r2, #0
 8018854:	2300      	movs	r3, #0
 8018856:	4682      	mov	sl, r0
 8018858:	468b      	mov	fp, r1
 801885a:	f7e8 f945 	bl	8000ae8 <__aeabi_dcmpeq>
 801885e:	2800      	cmp	r0, #0
 8018860:	d0c1      	beq.n	80187e6 <_strtod_l+0x8e6>
 8018862:	e60e      	b.n	8018482 <_strtod_l+0x582>
 8018864:	fffffc02 	.word	0xfffffc02
 8018868:	7ff00000 	.word	0x7ff00000
 801886c:	39500000 	.word	0x39500000
 8018870:	000fffff 	.word	0x000fffff
 8018874:	7fefffff 	.word	0x7fefffff
 8018878:	08021e30 	.word	0x08021e30
 801887c:	4631      	mov	r1, r6
 801887e:	4628      	mov	r0, r5
 8018880:	f002 f94c 	bl	801ab1c <__ratio>
 8018884:	ec59 8b10 	vmov	r8, r9, d0
 8018888:	ee10 0a10 	vmov	r0, s0
 801888c:	2200      	movs	r2, #0
 801888e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018892:	4649      	mov	r1, r9
 8018894:	f7e8 f93c 	bl	8000b10 <__aeabi_dcmple>
 8018898:	2800      	cmp	r0, #0
 801889a:	d07c      	beq.n	8018996 <_strtod_l+0xa96>
 801889c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d04c      	beq.n	801893c <_strtod_l+0xa3c>
 80188a2:	4b95      	ldr	r3, [pc, #596]	; (8018af8 <_strtod_l+0xbf8>)
 80188a4:	2200      	movs	r2, #0
 80188a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80188aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8018af8 <_strtod_l+0xbf8>
 80188ae:	f04f 0800 	mov.w	r8, #0
 80188b2:	4b92      	ldr	r3, [pc, #584]	; (8018afc <_strtod_l+0xbfc>)
 80188b4:	403b      	ands	r3, r7
 80188b6:	9311      	str	r3, [sp, #68]	; 0x44
 80188b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80188ba:	4b91      	ldr	r3, [pc, #580]	; (8018b00 <_strtod_l+0xc00>)
 80188bc:	429a      	cmp	r2, r3
 80188be:	f040 80b2 	bne.w	8018a26 <_strtod_l+0xb26>
 80188c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80188c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80188ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80188ce:	ec4b ab10 	vmov	d0, sl, fp
 80188d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80188d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80188da:	f002 f847 	bl	801a96c <__ulp>
 80188de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80188e2:	ec53 2b10 	vmov	r2, r3, d0
 80188e6:	f7e7 fe97 	bl	8000618 <__aeabi_dmul>
 80188ea:	4652      	mov	r2, sl
 80188ec:	465b      	mov	r3, fp
 80188ee:	f7e7 fcdd 	bl	80002ac <__adddf3>
 80188f2:	460b      	mov	r3, r1
 80188f4:	4981      	ldr	r1, [pc, #516]	; (8018afc <_strtod_l+0xbfc>)
 80188f6:	4a83      	ldr	r2, [pc, #524]	; (8018b04 <_strtod_l+0xc04>)
 80188f8:	4019      	ands	r1, r3
 80188fa:	4291      	cmp	r1, r2
 80188fc:	4682      	mov	sl, r0
 80188fe:	d95e      	bls.n	80189be <_strtod_l+0xabe>
 8018900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018902:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8018906:	4293      	cmp	r3, r2
 8018908:	d103      	bne.n	8018912 <_strtod_l+0xa12>
 801890a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801890c:	3301      	adds	r3, #1
 801890e:	f43f ad43 	beq.w	8018398 <_strtod_l+0x498>
 8018912:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018b10 <_strtod_l+0xc10>
 8018916:	f04f 3aff 	mov.w	sl, #4294967295
 801891a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801891c:	4620      	mov	r0, r4
 801891e:	f001 fcf9 	bl	801a314 <_Bfree>
 8018922:	9907      	ldr	r1, [sp, #28]
 8018924:	4620      	mov	r0, r4
 8018926:	f001 fcf5 	bl	801a314 <_Bfree>
 801892a:	4631      	mov	r1, r6
 801892c:	4620      	mov	r0, r4
 801892e:	f001 fcf1 	bl	801a314 <_Bfree>
 8018932:	4629      	mov	r1, r5
 8018934:	4620      	mov	r0, r4
 8018936:	f001 fced 	bl	801a314 <_Bfree>
 801893a:	e613      	b.n	8018564 <_strtod_l+0x664>
 801893c:	f1ba 0f00 	cmp.w	sl, #0
 8018940:	d11b      	bne.n	801897a <_strtod_l+0xa7a>
 8018942:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018946:	b9f3      	cbnz	r3, 8018986 <_strtod_l+0xa86>
 8018948:	4b6b      	ldr	r3, [pc, #428]	; (8018af8 <_strtod_l+0xbf8>)
 801894a:	2200      	movs	r2, #0
 801894c:	4640      	mov	r0, r8
 801894e:	4649      	mov	r1, r9
 8018950:	f7e8 f8d4 	bl	8000afc <__aeabi_dcmplt>
 8018954:	b9d0      	cbnz	r0, 801898c <_strtod_l+0xa8c>
 8018956:	4640      	mov	r0, r8
 8018958:	4649      	mov	r1, r9
 801895a:	4b6b      	ldr	r3, [pc, #428]	; (8018b08 <_strtod_l+0xc08>)
 801895c:	2200      	movs	r2, #0
 801895e:	f7e7 fe5b 	bl	8000618 <__aeabi_dmul>
 8018962:	4680      	mov	r8, r0
 8018964:	4689      	mov	r9, r1
 8018966:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801896a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801896e:	931b      	str	r3, [sp, #108]	; 0x6c
 8018970:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8018974:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018978:	e79b      	b.n	80188b2 <_strtod_l+0x9b2>
 801897a:	f1ba 0f01 	cmp.w	sl, #1
 801897e:	d102      	bne.n	8018986 <_strtod_l+0xa86>
 8018980:	2f00      	cmp	r7, #0
 8018982:	f43f ad7e 	beq.w	8018482 <_strtod_l+0x582>
 8018986:	4b61      	ldr	r3, [pc, #388]	; (8018b0c <_strtod_l+0xc0c>)
 8018988:	2200      	movs	r2, #0
 801898a:	e78c      	b.n	80188a6 <_strtod_l+0x9a6>
 801898c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018b08 <_strtod_l+0xc08>
 8018990:	f04f 0800 	mov.w	r8, #0
 8018994:	e7e7      	b.n	8018966 <_strtod_l+0xa66>
 8018996:	4b5c      	ldr	r3, [pc, #368]	; (8018b08 <_strtod_l+0xc08>)
 8018998:	4640      	mov	r0, r8
 801899a:	4649      	mov	r1, r9
 801899c:	2200      	movs	r2, #0
 801899e:	f7e7 fe3b 	bl	8000618 <__aeabi_dmul>
 80189a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189a4:	4680      	mov	r8, r0
 80189a6:	4689      	mov	r9, r1
 80189a8:	b933      	cbnz	r3, 80189b8 <_strtod_l+0xab8>
 80189aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80189ae:	9012      	str	r0, [sp, #72]	; 0x48
 80189b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80189b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80189b6:	e7dd      	b.n	8018974 <_strtod_l+0xa74>
 80189b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80189bc:	e7f9      	b.n	80189b2 <_strtod_l+0xab2>
 80189be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80189c2:	9b04      	ldr	r3, [sp, #16]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d1a8      	bne.n	801891a <_strtod_l+0xa1a>
 80189c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80189cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80189ce:	0d1b      	lsrs	r3, r3, #20
 80189d0:	051b      	lsls	r3, r3, #20
 80189d2:	429a      	cmp	r2, r3
 80189d4:	d1a1      	bne.n	801891a <_strtod_l+0xa1a>
 80189d6:	4640      	mov	r0, r8
 80189d8:	4649      	mov	r1, r9
 80189da:	f7e8 f97d 	bl	8000cd8 <__aeabi_d2lz>
 80189de:	f7e7 fded 	bl	80005bc <__aeabi_l2d>
 80189e2:	4602      	mov	r2, r0
 80189e4:	460b      	mov	r3, r1
 80189e6:	4640      	mov	r0, r8
 80189e8:	4649      	mov	r1, r9
 80189ea:	f7e7 fc5d 	bl	80002a8 <__aeabi_dsub>
 80189ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80189f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80189f4:	ea43 030a 	orr.w	r3, r3, sl
 80189f8:	4313      	orrs	r3, r2
 80189fa:	4680      	mov	r8, r0
 80189fc:	4689      	mov	r9, r1
 80189fe:	d053      	beq.n	8018aa8 <_strtod_l+0xba8>
 8018a00:	a335      	add	r3, pc, #212	; (adr r3, 8018ad8 <_strtod_l+0xbd8>)
 8018a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a06:	f7e8 f879 	bl	8000afc <__aeabi_dcmplt>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	f47f acce 	bne.w	80183ac <_strtod_l+0x4ac>
 8018a10:	a333      	add	r3, pc, #204	; (adr r3, 8018ae0 <_strtod_l+0xbe0>)
 8018a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a16:	4640      	mov	r0, r8
 8018a18:	4649      	mov	r1, r9
 8018a1a:	f7e8 f88d 	bl	8000b38 <__aeabi_dcmpgt>
 8018a1e:	2800      	cmp	r0, #0
 8018a20:	f43f af7b 	beq.w	801891a <_strtod_l+0xa1a>
 8018a24:	e4c2      	b.n	80183ac <_strtod_l+0x4ac>
 8018a26:	9b04      	ldr	r3, [sp, #16]
 8018a28:	b333      	cbz	r3, 8018a78 <_strtod_l+0xb78>
 8018a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018a2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018a30:	d822      	bhi.n	8018a78 <_strtod_l+0xb78>
 8018a32:	a32d      	add	r3, pc, #180	; (adr r3, 8018ae8 <_strtod_l+0xbe8>)
 8018a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a38:	4640      	mov	r0, r8
 8018a3a:	4649      	mov	r1, r9
 8018a3c:	f7e8 f868 	bl	8000b10 <__aeabi_dcmple>
 8018a40:	b1a0      	cbz	r0, 8018a6c <_strtod_l+0xb6c>
 8018a42:	4649      	mov	r1, r9
 8018a44:	4640      	mov	r0, r8
 8018a46:	f7e8 f8bf 	bl	8000bc8 <__aeabi_d2uiz>
 8018a4a:	2801      	cmp	r0, #1
 8018a4c:	bf38      	it	cc
 8018a4e:	2001      	movcc	r0, #1
 8018a50:	f7e7 fd68 	bl	8000524 <__aeabi_ui2d>
 8018a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a56:	4680      	mov	r8, r0
 8018a58:	4689      	mov	r9, r1
 8018a5a:	bb13      	cbnz	r3, 8018aa2 <_strtod_l+0xba2>
 8018a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a60:	9014      	str	r0, [sp, #80]	; 0x50
 8018a62:	9315      	str	r3, [sp, #84]	; 0x54
 8018a64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018a68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018a70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018a74:	1a9b      	subs	r3, r3, r2
 8018a76:	930d      	str	r3, [sp, #52]	; 0x34
 8018a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018a7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018a84:	f001 ff72 	bl	801a96c <__ulp>
 8018a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018a8c:	ec53 2b10 	vmov	r2, r3, d0
 8018a90:	f7e7 fdc2 	bl	8000618 <__aeabi_dmul>
 8018a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018a98:	f7e7 fc08 	bl	80002ac <__adddf3>
 8018a9c:	4682      	mov	sl, r0
 8018a9e:	468b      	mov	fp, r1
 8018aa0:	e78f      	b.n	80189c2 <_strtod_l+0xac2>
 8018aa2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8018aa6:	e7dd      	b.n	8018a64 <_strtod_l+0xb64>
 8018aa8:	a311      	add	r3, pc, #68	; (adr r3, 8018af0 <_strtod_l+0xbf0>)
 8018aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aae:	f7e8 f825 	bl	8000afc <__aeabi_dcmplt>
 8018ab2:	e7b4      	b.n	8018a1e <_strtod_l+0xb1e>
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	930e      	str	r3, [sp, #56]	; 0x38
 8018ab8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8018aba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018abc:	6013      	str	r3, [r2, #0]
 8018abe:	f7ff ba65 	b.w	8017f8c <_strtod_l+0x8c>
 8018ac2:	2b65      	cmp	r3, #101	; 0x65
 8018ac4:	f43f ab5d 	beq.w	8018182 <_strtod_l+0x282>
 8018ac8:	2b45      	cmp	r3, #69	; 0x45
 8018aca:	f43f ab5a 	beq.w	8018182 <_strtod_l+0x282>
 8018ace:	2201      	movs	r2, #1
 8018ad0:	f7ff bb92 	b.w	80181f8 <_strtod_l+0x2f8>
 8018ad4:	f3af 8000 	nop.w
 8018ad8:	94a03595 	.word	0x94a03595
 8018adc:	3fdfffff 	.word	0x3fdfffff
 8018ae0:	35afe535 	.word	0x35afe535
 8018ae4:	3fe00000 	.word	0x3fe00000
 8018ae8:	ffc00000 	.word	0xffc00000
 8018aec:	41dfffff 	.word	0x41dfffff
 8018af0:	94a03595 	.word	0x94a03595
 8018af4:	3fcfffff 	.word	0x3fcfffff
 8018af8:	3ff00000 	.word	0x3ff00000
 8018afc:	7ff00000 	.word	0x7ff00000
 8018b00:	7fe00000 	.word	0x7fe00000
 8018b04:	7c9fffff 	.word	0x7c9fffff
 8018b08:	3fe00000 	.word	0x3fe00000
 8018b0c:	bff00000 	.word	0xbff00000
 8018b10:	7fefffff 	.word	0x7fefffff

08018b14 <_strtod_r>:
 8018b14:	4b01      	ldr	r3, [pc, #4]	; (8018b1c <_strtod_r+0x8>)
 8018b16:	f7ff b9f3 	b.w	8017f00 <_strtod_l>
 8018b1a:	bf00      	nop
 8018b1c:	200001fc 	.word	0x200001fc

08018b20 <_strtol_l.isra.0>:
 8018b20:	2b01      	cmp	r3, #1
 8018b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b26:	d001      	beq.n	8018b2c <_strtol_l.isra.0+0xc>
 8018b28:	2b24      	cmp	r3, #36	; 0x24
 8018b2a:	d906      	bls.n	8018b3a <_strtol_l.isra.0+0x1a>
 8018b2c:	f000 ff14 	bl	8019958 <__errno>
 8018b30:	2316      	movs	r3, #22
 8018b32:	6003      	str	r3, [r0, #0]
 8018b34:	2000      	movs	r0, #0
 8018b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b3a:	4f3a      	ldr	r7, [pc, #232]	; (8018c24 <_strtol_l.isra.0+0x104>)
 8018b3c:	468e      	mov	lr, r1
 8018b3e:	4676      	mov	r6, lr
 8018b40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018b44:	5de5      	ldrb	r5, [r4, r7]
 8018b46:	f015 0508 	ands.w	r5, r5, #8
 8018b4a:	d1f8      	bne.n	8018b3e <_strtol_l.isra.0+0x1e>
 8018b4c:	2c2d      	cmp	r4, #45	; 0x2d
 8018b4e:	d134      	bne.n	8018bba <_strtol_l.isra.0+0x9a>
 8018b50:	f89e 4000 	ldrb.w	r4, [lr]
 8018b54:	f04f 0801 	mov.w	r8, #1
 8018b58:	f106 0e02 	add.w	lr, r6, #2
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d05c      	beq.n	8018c1a <_strtol_l.isra.0+0xfa>
 8018b60:	2b10      	cmp	r3, #16
 8018b62:	d10c      	bne.n	8018b7e <_strtol_l.isra.0+0x5e>
 8018b64:	2c30      	cmp	r4, #48	; 0x30
 8018b66:	d10a      	bne.n	8018b7e <_strtol_l.isra.0+0x5e>
 8018b68:	f89e 4000 	ldrb.w	r4, [lr]
 8018b6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018b70:	2c58      	cmp	r4, #88	; 0x58
 8018b72:	d14d      	bne.n	8018c10 <_strtol_l.isra.0+0xf0>
 8018b74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018b78:	2310      	movs	r3, #16
 8018b7a:	f10e 0e02 	add.w	lr, lr, #2
 8018b7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018b82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018b86:	2600      	movs	r6, #0
 8018b88:	fbbc f9f3 	udiv	r9, ip, r3
 8018b8c:	4635      	mov	r5, r6
 8018b8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8018b92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018b96:	2f09      	cmp	r7, #9
 8018b98:	d818      	bhi.n	8018bcc <_strtol_l.isra.0+0xac>
 8018b9a:	463c      	mov	r4, r7
 8018b9c:	42a3      	cmp	r3, r4
 8018b9e:	dd24      	ble.n	8018bea <_strtol_l.isra.0+0xca>
 8018ba0:	2e00      	cmp	r6, #0
 8018ba2:	db1f      	blt.n	8018be4 <_strtol_l.isra.0+0xc4>
 8018ba4:	45a9      	cmp	r9, r5
 8018ba6:	d31d      	bcc.n	8018be4 <_strtol_l.isra.0+0xc4>
 8018ba8:	d101      	bne.n	8018bae <_strtol_l.isra.0+0x8e>
 8018baa:	45a2      	cmp	sl, r4
 8018bac:	db1a      	blt.n	8018be4 <_strtol_l.isra.0+0xc4>
 8018bae:	fb05 4503 	mla	r5, r5, r3, r4
 8018bb2:	2601      	movs	r6, #1
 8018bb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018bb8:	e7eb      	b.n	8018b92 <_strtol_l.isra.0+0x72>
 8018bba:	2c2b      	cmp	r4, #43	; 0x2b
 8018bbc:	bf08      	it	eq
 8018bbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018bc2:	46a8      	mov	r8, r5
 8018bc4:	bf08      	it	eq
 8018bc6:	f106 0e02 	addeq.w	lr, r6, #2
 8018bca:	e7c7      	b.n	8018b5c <_strtol_l.isra.0+0x3c>
 8018bcc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018bd0:	2f19      	cmp	r7, #25
 8018bd2:	d801      	bhi.n	8018bd8 <_strtol_l.isra.0+0xb8>
 8018bd4:	3c37      	subs	r4, #55	; 0x37
 8018bd6:	e7e1      	b.n	8018b9c <_strtol_l.isra.0+0x7c>
 8018bd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018bdc:	2f19      	cmp	r7, #25
 8018bde:	d804      	bhi.n	8018bea <_strtol_l.isra.0+0xca>
 8018be0:	3c57      	subs	r4, #87	; 0x57
 8018be2:	e7db      	b.n	8018b9c <_strtol_l.isra.0+0x7c>
 8018be4:	f04f 36ff 	mov.w	r6, #4294967295
 8018be8:	e7e4      	b.n	8018bb4 <_strtol_l.isra.0+0x94>
 8018bea:	2e00      	cmp	r6, #0
 8018bec:	da05      	bge.n	8018bfa <_strtol_l.isra.0+0xda>
 8018bee:	2322      	movs	r3, #34	; 0x22
 8018bf0:	6003      	str	r3, [r0, #0]
 8018bf2:	4665      	mov	r5, ip
 8018bf4:	b942      	cbnz	r2, 8018c08 <_strtol_l.isra.0+0xe8>
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	e79d      	b.n	8018b36 <_strtol_l.isra.0+0x16>
 8018bfa:	f1b8 0f00 	cmp.w	r8, #0
 8018bfe:	d000      	beq.n	8018c02 <_strtol_l.isra.0+0xe2>
 8018c00:	426d      	negs	r5, r5
 8018c02:	2a00      	cmp	r2, #0
 8018c04:	d0f7      	beq.n	8018bf6 <_strtol_l.isra.0+0xd6>
 8018c06:	b10e      	cbz	r6, 8018c0c <_strtol_l.isra.0+0xec>
 8018c08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018c0c:	6011      	str	r1, [r2, #0]
 8018c0e:	e7f2      	b.n	8018bf6 <_strtol_l.isra.0+0xd6>
 8018c10:	2430      	movs	r4, #48	; 0x30
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d1b3      	bne.n	8018b7e <_strtol_l.isra.0+0x5e>
 8018c16:	2308      	movs	r3, #8
 8018c18:	e7b1      	b.n	8018b7e <_strtol_l.isra.0+0x5e>
 8018c1a:	2c30      	cmp	r4, #48	; 0x30
 8018c1c:	d0a4      	beq.n	8018b68 <_strtol_l.isra.0+0x48>
 8018c1e:	230a      	movs	r3, #10
 8018c20:	e7ad      	b.n	8018b7e <_strtol_l.isra.0+0x5e>
 8018c22:	bf00      	nop
 8018c24:	08021c53 	.word	0x08021c53

08018c28 <_strtol_r>:
 8018c28:	f7ff bf7a 	b.w	8018b20 <_strtol_l.isra.0>

08018c2c <__assert_func>:
 8018c2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c2e:	4614      	mov	r4, r2
 8018c30:	461a      	mov	r2, r3
 8018c32:	4b09      	ldr	r3, [pc, #36]	; (8018c58 <__assert_func+0x2c>)
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	4605      	mov	r5, r0
 8018c38:	68d8      	ldr	r0, [r3, #12]
 8018c3a:	b14c      	cbz	r4, 8018c50 <__assert_func+0x24>
 8018c3c:	4b07      	ldr	r3, [pc, #28]	; (8018c5c <__assert_func+0x30>)
 8018c3e:	9100      	str	r1, [sp, #0]
 8018c40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018c44:	4906      	ldr	r1, [pc, #24]	; (8018c60 <__assert_func+0x34>)
 8018c46:	462b      	mov	r3, r5
 8018c48:	f000 ff62 	bl	8019b10 <fiprintf>
 8018c4c:	f002 fc88 	bl	801b560 <abort>
 8018c50:	4b04      	ldr	r3, [pc, #16]	; (8018c64 <__assert_func+0x38>)
 8018c52:	461c      	mov	r4, r3
 8018c54:	e7f3      	b.n	8018c3e <__assert_func+0x12>
 8018c56:	bf00      	nop
 8018c58:	20000194 	.word	0x20000194
 8018c5c:	08021e58 	.word	0x08021e58
 8018c60:	08021e65 	.word	0x08021e65
 8018c64:	08021e93 	.word	0x08021e93

08018c68 <quorem>:
 8018c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6c:	6903      	ldr	r3, [r0, #16]
 8018c6e:	690c      	ldr	r4, [r1, #16]
 8018c70:	42a3      	cmp	r3, r4
 8018c72:	4607      	mov	r7, r0
 8018c74:	f2c0 8081 	blt.w	8018d7a <quorem+0x112>
 8018c78:	3c01      	subs	r4, #1
 8018c7a:	f101 0814 	add.w	r8, r1, #20
 8018c7e:	f100 0514 	add.w	r5, r0, #20
 8018c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018c86:	9301      	str	r3, [sp, #4]
 8018c88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018c8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018c90:	3301      	adds	r3, #1
 8018c92:	429a      	cmp	r2, r3
 8018c94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018c98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018c9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8018ca0:	d331      	bcc.n	8018d06 <quorem+0x9e>
 8018ca2:	f04f 0e00 	mov.w	lr, #0
 8018ca6:	4640      	mov	r0, r8
 8018ca8:	46ac      	mov	ip, r5
 8018caa:	46f2      	mov	sl, lr
 8018cac:	f850 2b04 	ldr.w	r2, [r0], #4
 8018cb0:	b293      	uxth	r3, r2
 8018cb2:	fb06 e303 	mla	r3, r6, r3, lr
 8018cb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018cba:	b29b      	uxth	r3, r3
 8018cbc:	ebaa 0303 	sub.w	r3, sl, r3
 8018cc0:	0c12      	lsrs	r2, r2, #16
 8018cc2:	f8dc a000 	ldr.w	sl, [ip]
 8018cc6:	fb06 e202 	mla	r2, r6, r2, lr
 8018cca:	fa13 f38a 	uxtah	r3, r3, sl
 8018cce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018cd2:	fa1f fa82 	uxth.w	sl, r2
 8018cd6:	f8dc 2000 	ldr.w	r2, [ip]
 8018cda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018cde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018ce2:	b29b      	uxth	r3, r3
 8018ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ce8:	4581      	cmp	r9, r0
 8018cea:	f84c 3b04 	str.w	r3, [ip], #4
 8018cee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018cf2:	d2db      	bcs.n	8018cac <quorem+0x44>
 8018cf4:	f855 300b 	ldr.w	r3, [r5, fp]
 8018cf8:	b92b      	cbnz	r3, 8018d06 <quorem+0x9e>
 8018cfa:	9b01      	ldr	r3, [sp, #4]
 8018cfc:	3b04      	subs	r3, #4
 8018cfe:	429d      	cmp	r5, r3
 8018d00:	461a      	mov	r2, r3
 8018d02:	d32e      	bcc.n	8018d62 <quorem+0xfa>
 8018d04:	613c      	str	r4, [r7, #16]
 8018d06:	4638      	mov	r0, r7
 8018d08:	f001 fd8c 	bl	801a824 <__mcmp>
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	db24      	blt.n	8018d5a <quorem+0xf2>
 8018d10:	3601      	adds	r6, #1
 8018d12:	4628      	mov	r0, r5
 8018d14:	f04f 0c00 	mov.w	ip, #0
 8018d18:	f858 2b04 	ldr.w	r2, [r8], #4
 8018d1c:	f8d0 e000 	ldr.w	lr, [r0]
 8018d20:	b293      	uxth	r3, r2
 8018d22:	ebac 0303 	sub.w	r3, ip, r3
 8018d26:	0c12      	lsrs	r2, r2, #16
 8018d28:	fa13 f38e 	uxtah	r3, r3, lr
 8018d2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018d34:	b29b      	uxth	r3, r3
 8018d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d3a:	45c1      	cmp	r9, r8
 8018d3c:	f840 3b04 	str.w	r3, [r0], #4
 8018d40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018d44:	d2e8      	bcs.n	8018d18 <quorem+0xb0>
 8018d46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018d4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018d4e:	b922      	cbnz	r2, 8018d5a <quorem+0xf2>
 8018d50:	3b04      	subs	r3, #4
 8018d52:	429d      	cmp	r5, r3
 8018d54:	461a      	mov	r2, r3
 8018d56:	d30a      	bcc.n	8018d6e <quorem+0x106>
 8018d58:	613c      	str	r4, [r7, #16]
 8018d5a:	4630      	mov	r0, r6
 8018d5c:	b003      	add	sp, #12
 8018d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d62:	6812      	ldr	r2, [r2, #0]
 8018d64:	3b04      	subs	r3, #4
 8018d66:	2a00      	cmp	r2, #0
 8018d68:	d1cc      	bne.n	8018d04 <quorem+0x9c>
 8018d6a:	3c01      	subs	r4, #1
 8018d6c:	e7c7      	b.n	8018cfe <quorem+0x96>
 8018d6e:	6812      	ldr	r2, [r2, #0]
 8018d70:	3b04      	subs	r3, #4
 8018d72:	2a00      	cmp	r2, #0
 8018d74:	d1f0      	bne.n	8018d58 <quorem+0xf0>
 8018d76:	3c01      	subs	r4, #1
 8018d78:	e7eb      	b.n	8018d52 <quorem+0xea>
 8018d7a:	2000      	movs	r0, #0
 8018d7c:	e7ee      	b.n	8018d5c <quorem+0xf4>
	...

08018d80 <_dtoa_r>:
 8018d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d84:	ed2d 8b02 	vpush	{d8}
 8018d88:	ec57 6b10 	vmov	r6, r7, d0
 8018d8c:	b095      	sub	sp, #84	; 0x54
 8018d8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018d90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018d94:	9105      	str	r1, [sp, #20]
 8018d96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8018d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018da0:	b975      	cbnz	r5, 8018dc0 <_dtoa_r+0x40>
 8018da2:	2010      	movs	r0, #16
 8018da4:	f001 fa5c 	bl	801a260 <malloc>
 8018da8:	4602      	mov	r2, r0
 8018daa:	6260      	str	r0, [r4, #36]	; 0x24
 8018dac:	b920      	cbnz	r0, 8018db8 <_dtoa_r+0x38>
 8018dae:	4bb2      	ldr	r3, [pc, #712]	; (8019078 <_dtoa_r+0x2f8>)
 8018db0:	21ea      	movs	r1, #234	; 0xea
 8018db2:	48b2      	ldr	r0, [pc, #712]	; (801907c <_dtoa_r+0x2fc>)
 8018db4:	f7ff ff3a 	bl	8018c2c <__assert_func>
 8018db8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018dbc:	6005      	str	r5, [r0, #0]
 8018dbe:	60c5      	str	r5, [r0, #12]
 8018dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018dc2:	6819      	ldr	r1, [r3, #0]
 8018dc4:	b151      	cbz	r1, 8018ddc <_dtoa_r+0x5c>
 8018dc6:	685a      	ldr	r2, [r3, #4]
 8018dc8:	604a      	str	r2, [r1, #4]
 8018dca:	2301      	movs	r3, #1
 8018dcc:	4093      	lsls	r3, r2
 8018dce:	608b      	str	r3, [r1, #8]
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	f001 fa9f 	bl	801a314 <_Bfree>
 8018dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018dd8:	2200      	movs	r2, #0
 8018dda:	601a      	str	r2, [r3, #0]
 8018ddc:	1e3b      	subs	r3, r7, #0
 8018dde:	bfb9      	ittee	lt
 8018de0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018de4:	9303      	strlt	r3, [sp, #12]
 8018de6:	2300      	movge	r3, #0
 8018de8:	f8c8 3000 	strge.w	r3, [r8]
 8018dec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018df0:	4ba3      	ldr	r3, [pc, #652]	; (8019080 <_dtoa_r+0x300>)
 8018df2:	bfbc      	itt	lt
 8018df4:	2201      	movlt	r2, #1
 8018df6:	f8c8 2000 	strlt.w	r2, [r8]
 8018dfa:	ea33 0309 	bics.w	r3, r3, r9
 8018dfe:	d11b      	bne.n	8018e38 <_dtoa_r+0xb8>
 8018e00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018e02:	f242 730f 	movw	r3, #9999	; 0x270f
 8018e06:	6013      	str	r3, [r2, #0]
 8018e08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e0c:	4333      	orrs	r3, r6
 8018e0e:	f000 857a 	beq.w	8019906 <_dtoa_r+0xb86>
 8018e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e14:	b963      	cbnz	r3, 8018e30 <_dtoa_r+0xb0>
 8018e16:	4b9b      	ldr	r3, [pc, #620]	; (8019084 <_dtoa_r+0x304>)
 8018e18:	e024      	b.n	8018e64 <_dtoa_r+0xe4>
 8018e1a:	4b9b      	ldr	r3, [pc, #620]	; (8019088 <_dtoa_r+0x308>)
 8018e1c:	9300      	str	r3, [sp, #0]
 8018e1e:	3308      	adds	r3, #8
 8018e20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018e22:	6013      	str	r3, [r2, #0]
 8018e24:	9800      	ldr	r0, [sp, #0]
 8018e26:	b015      	add	sp, #84	; 0x54
 8018e28:	ecbd 8b02 	vpop	{d8}
 8018e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e30:	4b94      	ldr	r3, [pc, #592]	; (8019084 <_dtoa_r+0x304>)
 8018e32:	9300      	str	r3, [sp, #0]
 8018e34:	3303      	adds	r3, #3
 8018e36:	e7f3      	b.n	8018e20 <_dtoa_r+0xa0>
 8018e38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	ec51 0b17 	vmov	r0, r1, d7
 8018e42:	2300      	movs	r3, #0
 8018e44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018e48:	f7e7 fe4e 	bl	8000ae8 <__aeabi_dcmpeq>
 8018e4c:	4680      	mov	r8, r0
 8018e4e:	b158      	cbz	r0, 8018e68 <_dtoa_r+0xe8>
 8018e50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018e52:	2301      	movs	r3, #1
 8018e54:	6013      	str	r3, [r2, #0]
 8018e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f000 8551 	beq.w	8019900 <_dtoa_r+0xb80>
 8018e5e:	488b      	ldr	r0, [pc, #556]	; (801908c <_dtoa_r+0x30c>)
 8018e60:	6018      	str	r0, [r3, #0]
 8018e62:	1e43      	subs	r3, r0, #1
 8018e64:	9300      	str	r3, [sp, #0]
 8018e66:	e7dd      	b.n	8018e24 <_dtoa_r+0xa4>
 8018e68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018e6c:	aa12      	add	r2, sp, #72	; 0x48
 8018e6e:	a913      	add	r1, sp, #76	; 0x4c
 8018e70:	4620      	mov	r0, r4
 8018e72:	f001 fdf7 	bl	801aa64 <__d2b>
 8018e76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018e7a:	4683      	mov	fp, r0
 8018e7c:	2d00      	cmp	r5, #0
 8018e7e:	d07c      	beq.n	8018f7a <_dtoa_r+0x1fa>
 8018e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018e82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018e8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018e8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018e92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018e9a:	4b7d      	ldr	r3, [pc, #500]	; (8019090 <_dtoa_r+0x310>)
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	4630      	mov	r0, r6
 8018ea0:	4639      	mov	r1, r7
 8018ea2:	f7e7 fa01 	bl	80002a8 <__aeabi_dsub>
 8018ea6:	a36e      	add	r3, pc, #440	; (adr r3, 8019060 <_dtoa_r+0x2e0>)
 8018ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eac:	f7e7 fbb4 	bl	8000618 <__aeabi_dmul>
 8018eb0:	a36d      	add	r3, pc, #436	; (adr r3, 8019068 <_dtoa_r+0x2e8>)
 8018eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eb6:	f7e7 f9f9 	bl	80002ac <__adddf3>
 8018eba:	4606      	mov	r6, r0
 8018ebc:	4628      	mov	r0, r5
 8018ebe:	460f      	mov	r7, r1
 8018ec0:	f7e7 fb40 	bl	8000544 <__aeabi_i2d>
 8018ec4:	a36a      	add	r3, pc, #424	; (adr r3, 8019070 <_dtoa_r+0x2f0>)
 8018ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eca:	f7e7 fba5 	bl	8000618 <__aeabi_dmul>
 8018ece:	4602      	mov	r2, r0
 8018ed0:	460b      	mov	r3, r1
 8018ed2:	4630      	mov	r0, r6
 8018ed4:	4639      	mov	r1, r7
 8018ed6:	f7e7 f9e9 	bl	80002ac <__adddf3>
 8018eda:	4606      	mov	r6, r0
 8018edc:	460f      	mov	r7, r1
 8018ede:	f7e7 fe4b 	bl	8000b78 <__aeabi_d2iz>
 8018ee2:	2200      	movs	r2, #0
 8018ee4:	4682      	mov	sl, r0
 8018ee6:	2300      	movs	r3, #0
 8018ee8:	4630      	mov	r0, r6
 8018eea:	4639      	mov	r1, r7
 8018eec:	f7e7 fe06 	bl	8000afc <__aeabi_dcmplt>
 8018ef0:	b148      	cbz	r0, 8018f06 <_dtoa_r+0x186>
 8018ef2:	4650      	mov	r0, sl
 8018ef4:	f7e7 fb26 	bl	8000544 <__aeabi_i2d>
 8018ef8:	4632      	mov	r2, r6
 8018efa:	463b      	mov	r3, r7
 8018efc:	f7e7 fdf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8018f00:	b908      	cbnz	r0, 8018f06 <_dtoa_r+0x186>
 8018f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f06:	f1ba 0f16 	cmp.w	sl, #22
 8018f0a:	d854      	bhi.n	8018fb6 <_dtoa_r+0x236>
 8018f0c:	4b61      	ldr	r3, [pc, #388]	; (8019094 <_dtoa_r+0x314>)
 8018f0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018f1a:	f7e7 fdef 	bl	8000afc <__aeabi_dcmplt>
 8018f1e:	2800      	cmp	r0, #0
 8018f20:	d04b      	beq.n	8018fba <_dtoa_r+0x23a>
 8018f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f26:	2300      	movs	r3, #0
 8018f28:	930e      	str	r3, [sp, #56]	; 0x38
 8018f2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018f2c:	1b5d      	subs	r5, r3, r5
 8018f2e:	1e6b      	subs	r3, r5, #1
 8018f30:	9304      	str	r3, [sp, #16]
 8018f32:	bf43      	ittte	mi
 8018f34:	2300      	movmi	r3, #0
 8018f36:	f1c5 0801 	rsbmi	r8, r5, #1
 8018f3a:	9304      	strmi	r3, [sp, #16]
 8018f3c:	f04f 0800 	movpl.w	r8, #0
 8018f40:	f1ba 0f00 	cmp.w	sl, #0
 8018f44:	db3b      	blt.n	8018fbe <_dtoa_r+0x23e>
 8018f46:	9b04      	ldr	r3, [sp, #16]
 8018f48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018f4c:	4453      	add	r3, sl
 8018f4e:	9304      	str	r3, [sp, #16]
 8018f50:	2300      	movs	r3, #0
 8018f52:	9306      	str	r3, [sp, #24]
 8018f54:	9b05      	ldr	r3, [sp, #20]
 8018f56:	2b09      	cmp	r3, #9
 8018f58:	d869      	bhi.n	801902e <_dtoa_r+0x2ae>
 8018f5a:	2b05      	cmp	r3, #5
 8018f5c:	bfc4      	itt	gt
 8018f5e:	3b04      	subgt	r3, #4
 8018f60:	9305      	strgt	r3, [sp, #20]
 8018f62:	9b05      	ldr	r3, [sp, #20]
 8018f64:	f1a3 0302 	sub.w	r3, r3, #2
 8018f68:	bfcc      	ite	gt
 8018f6a:	2500      	movgt	r5, #0
 8018f6c:	2501      	movle	r5, #1
 8018f6e:	2b03      	cmp	r3, #3
 8018f70:	d869      	bhi.n	8019046 <_dtoa_r+0x2c6>
 8018f72:	e8df f003 	tbb	[pc, r3]
 8018f76:	4e2c      	.short	0x4e2c
 8018f78:	5a4c      	.short	0x5a4c
 8018f7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018f7e:	441d      	add	r5, r3
 8018f80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018f84:	2b20      	cmp	r3, #32
 8018f86:	bfc1      	itttt	gt
 8018f88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018f8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018f90:	fa09 f303 	lslgt.w	r3, r9, r3
 8018f94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018f98:	bfda      	itte	le
 8018f9a:	f1c3 0320 	rsble	r3, r3, #32
 8018f9e:	fa06 f003 	lslle.w	r0, r6, r3
 8018fa2:	4318      	orrgt	r0, r3
 8018fa4:	f7e7 fabe 	bl	8000524 <__aeabi_ui2d>
 8018fa8:	2301      	movs	r3, #1
 8018faa:	4606      	mov	r6, r0
 8018fac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018fb0:	3d01      	subs	r5, #1
 8018fb2:	9310      	str	r3, [sp, #64]	; 0x40
 8018fb4:	e771      	b.n	8018e9a <_dtoa_r+0x11a>
 8018fb6:	2301      	movs	r3, #1
 8018fb8:	e7b6      	b.n	8018f28 <_dtoa_r+0x1a8>
 8018fba:	900e      	str	r0, [sp, #56]	; 0x38
 8018fbc:	e7b5      	b.n	8018f2a <_dtoa_r+0x1aa>
 8018fbe:	f1ca 0300 	rsb	r3, sl, #0
 8018fc2:	9306      	str	r3, [sp, #24]
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	eba8 080a 	sub.w	r8, r8, sl
 8018fca:	930d      	str	r3, [sp, #52]	; 0x34
 8018fcc:	e7c2      	b.n	8018f54 <_dtoa_r+0x1d4>
 8018fce:	2300      	movs	r3, #0
 8018fd0:	9308      	str	r3, [sp, #32]
 8018fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	dc39      	bgt.n	801904c <_dtoa_r+0x2cc>
 8018fd8:	f04f 0901 	mov.w	r9, #1
 8018fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8018fe0:	464b      	mov	r3, r9
 8018fe2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018fe6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018fe8:	2200      	movs	r2, #0
 8018fea:	6042      	str	r2, [r0, #4]
 8018fec:	2204      	movs	r2, #4
 8018fee:	f102 0614 	add.w	r6, r2, #20
 8018ff2:	429e      	cmp	r6, r3
 8018ff4:	6841      	ldr	r1, [r0, #4]
 8018ff6:	d92f      	bls.n	8019058 <_dtoa_r+0x2d8>
 8018ff8:	4620      	mov	r0, r4
 8018ffa:	f001 f94b 	bl	801a294 <_Balloc>
 8018ffe:	9000      	str	r0, [sp, #0]
 8019000:	2800      	cmp	r0, #0
 8019002:	d14b      	bne.n	801909c <_dtoa_r+0x31c>
 8019004:	4b24      	ldr	r3, [pc, #144]	; (8019098 <_dtoa_r+0x318>)
 8019006:	4602      	mov	r2, r0
 8019008:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801900c:	e6d1      	b.n	8018db2 <_dtoa_r+0x32>
 801900e:	2301      	movs	r3, #1
 8019010:	e7de      	b.n	8018fd0 <_dtoa_r+0x250>
 8019012:	2300      	movs	r3, #0
 8019014:	9308      	str	r3, [sp, #32]
 8019016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019018:	eb0a 0903 	add.w	r9, sl, r3
 801901c:	f109 0301 	add.w	r3, r9, #1
 8019020:	2b01      	cmp	r3, #1
 8019022:	9301      	str	r3, [sp, #4]
 8019024:	bfb8      	it	lt
 8019026:	2301      	movlt	r3, #1
 8019028:	e7dd      	b.n	8018fe6 <_dtoa_r+0x266>
 801902a:	2301      	movs	r3, #1
 801902c:	e7f2      	b.n	8019014 <_dtoa_r+0x294>
 801902e:	2501      	movs	r5, #1
 8019030:	2300      	movs	r3, #0
 8019032:	9305      	str	r3, [sp, #20]
 8019034:	9508      	str	r5, [sp, #32]
 8019036:	f04f 39ff 	mov.w	r9, #4294967295
 801903a:	2200      	movs	r2, #0
 801903c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019040:	2312      	movs	r3, #18
 8019042:	9209      	str	r2, [sp, #36]	; 0x24
 8019044:	e7cf      	b.n	8018fe6 <_dtoa_r+0x266>
 8019046:	2301      	movs	r3, #1
 8019048:	9308      	str	r3, [sp, #32]
 801904a:	e7f4      	b.n	8019036 <_dtoa_r+0x2b6>
 801904c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019050:	f8cd 9004 	str.w	r9, [sp, #4]
 8019054:	464b      	mov	r3, r9
 8019056:	e7c6      	b.n	8018fe6 <_dtoa_r+0x266>
 8019058:	3101      	adds	r1, #1
 801905a:	6041      	str	r1, [r0, #4]
 801905c:	0052      	lsls	r2, r2, #1
 801905e:	e7c6      	b.n	8018fee <_dtoa_r+0x26e>
 8019060:	636f4361 	.word	0x636f4361
 8019064:	3fd287a7 	.word	0x3fd287a7
 8019068:	8b60c8b3 	.word	0x8b60c8b3
 801906c:	3fc68a28 	.word	0x3fc68a28
 8019070:	509f79fb 	.word	0x509f79fb
 8019074:	3fd34413 	.word	0x3fd34413
 8019078:	08021d91 	.word	0x08021d91
 801907c:	08021ea1 	.word	0x08021ea1
 8019080:	7ff00000 	.word	0x7ff00000
 8019084:	08021e9d 	.word	0x08021e9d
 8019088:	08021e94 	.word	0x08021e94
 801908c:	08021d69 	.word	0x08021d69
 8019090:	3ff80000 	.word	0x3ff80000
 8019094:	08022080 	.word	0x08022080
 8019098:	08021f00 	.word	0x08021f00
 801909c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801909e:	9a00      	ldr	r2, [sp, #0]
 80190a0:	601a      	str	r2, [r3, #0]
 80190a2:	9b01      	ldr	r3, [sp, #4]
 80190a4:	2b0e      	cmp	r3, #14
 80190a6:	f200 80ad 	bhi.w	8019204 <_dtoa_r+0x484>
 80190aa:	2d00      	cmp	r5, #0
 80190ac:	f000 80aa 	beq.w	8019204 <_dtoa_r+0x484>
 80190b0:	f1ba 0f00 	cmp.w	sl, #0
 80190b4:	dd36      	ble.n	8019124 <_dtoa_r+0x3a4>
 80190b6:	4ac3      	ldr	r2, [pc, #780]	; (80193c4 <_dtoa_r+0x644>)
 80190b8:	f00a 030f 	and.w	r3, sl, #15
 80190bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80190c0:	ed93 7b00 	vldr	d7, [r3]
 80190c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80190c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80190cc:	eeb0 8a47 	vmov.f32	s16, s14
 80190d0:	eef0 8a67 	vmov.f32	s17, s15
 80190d4:	d016      	beq.n	8019104 <_dtoa_r+0x384>
 80190d6:	4bbc      	ldr	r3, [pc, #752]	; (80193c8 <_dtoa_r+0x648>)
 80190d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80190dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80190e0:	f7e7 fbc4 	bl	800086c <__aeabi_ddiv>
 80190e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80190e8:	f007 070f 	and.w	r7, r7, #15
 80190ec:	2503      	movs	r5, #3
 80190ee:	4eb6      	ldr	r6, [pc, #728]	; (80193c8 <_dtoa_r+0x648>)
 80190f0:	b957      	cbnz	r7, 8019108 <_dtoa_r+0x388>
 80190f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190f6:	ec53 2b18 	vmov	r2, r3, d8
 80190fa:	f7e7 fbb7 	bl	800086c <__aeabi_ddiv>
 80190fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019102:	e029      	b.n	8019158 <_dtoa_r+0x3d8>
 8019104:	2502      	movs	r5, #2
 8019106:	e7f2      	b.n	80190ee <_dtoa_r+0x36e>
 8019108:	07f9      	lsls	r1, r7, #31
 801910a:	d508      	bpl.n	801911e <_dtoa_r+0x39e>
 801910c:	ec51 0b18 	vmov	r0, r1, d8
 8019110:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019114:	f7e7 fa80 	bl	8000618 <__aeabi_dmul>
 8019118:	ec41 0b18 	vmov	d8, r0, r1
 801911c:	3501      	adds	r5, #1
 801911e:	107f      	asrs	r7, r7, #1
 8019120:	3608      	adds	r6, #8
 8019122:	e7e5      	b.n	80190f0 <_dtoa_r+0x370>
 8019124:	f000 80a6 	beq.w	8019274 <_dtoa_r+0x4f4>
 8019128:	f1ca 0600 	rsb	r6, sl, #0
 801912c:	4ba5      	ldr	r3, [pc, #660]	; (80193c4 <_dtoa_r+0x644>)
 801912e:	4fa6      	ldr	r7, [pc, #664]	; (80193c8 <_dtoa_r+0x648>)
 8019130:	f006 020f 	and.w	r2, r6, #15
 8019134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801913c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019140:	f7e7 fa6a 	bl	8000618 <__aeabi_dmul>
 8019144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019148:	1136      	asrs	r6, r6, #4
 801914a:	2300      	movs	r3, #0
 801914c:	2502      	movs	r5, #2
 801914e:	2e00      	cmp	r6, #0
 8019150:	f040 8085 	bne.w	801925e <_dtoa_r+0x4de>
 8019154:	2b00      	cmp	r3, #0
 8019156:	d1d2      	bne.n	80190fe <_dtoa_r+0x37e>
 8019158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801915a:	2b00      	cmp	r3, #0
 801915c:	f000 808c 	beq.w	8019278 <_dtoa_r+0x4f8>
 8019160:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019164:	4b99      	ldr	r3, [pc, #612]	; (80193cc <_dtoa_r+0x64c>)
 8019166:	2200      	movs	r2, #0
 8019168:	4630      	mov	r0, r6
 801916a:	4639      	mov	r1, r7
 801916c:	f7e7 fcc6 	bl	8000afc <__aeabi_dcmplt>
 8019170:	2800      	cmp	r0, #0
 8019172:	f000 8081 	beq.w	8019278 <_dtoa_r+0x4f8>
 8019176:	9b01      	ldr	r3, [sp, #4]
 8019178:	2b00      	cmp	r3, #0
 801917a:	d07d      	beq.n	8019278 <_dtoa_r+0x4f8>
 801917c:	f1b9 0f00 	cmp.w	r9, #0
 8019180:	dd3c      	ble.n	80191fc <_dtoa_r+0x47c>
 8019182:	f10a 33ff 	add.w	r3, sl, #4294967295
 8019186:	9307      	str	r3, [sp, #28]
 8019188:	2200      	movs	r2, #0
 801918a:	4b91      	ldr	r3, [pc, #580]	; (80193d0 <_dtoa_r+0x650>)
 801918c:	4630      	mov	r0, r6
 801918e:	4639      	mov	r1, r7
 8019190:	f7e7 fa42 	bl	8000618 <__aeabi_dmul>
 8019194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019198:	3501      	adds	r5, #1
 801919a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801919e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80191a2:	4628      	mov	r0, r5
 80191a4:	f7e7 f9ce 	bl	8000544 <__aeabi_i2d>
 80191a8:	4632      	mov	r2, r6
 80191aa:	463b      	mov	r3, r7
 80191ac:	f7e7 fa34 	bl	8000618 <__aeabi_dmul>
 80191b0:	4b88      	ldr	r3, [pc, #544]	; (80193d4 <_dtoa_r+0x654>)
 80191b2:	2200      	movs	r2, #0
 80191b4:	f7e7 f87a 	bl	80002ac <__adddf3>
 80191b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80191bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80191c0:	9303      	str	r3, [sp, #12]
 80191c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d15c      	bne.n	8019282 <_dtoa_r+0x502>
 80191c8:	4b83      	ldr	r3, [pc, #524]	; (80193d8 <_dtoa_r+0x658>)
 80191ca:	2200      	movs	r2, #0
 80191cc:	4630      	mov	r0, r6
 80191ce:	4639      	mov	r1, r7
 80191d0:	f7e7 f86a 	bl	80002a8 <__aeabi_dsub>
 80191d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80191d8:	4606      	mov	r6, r0
 80191da:	460f      	mov	r7, r1
 80191dc:	f7e7 fcac 	bl	8000b38 <__aeabi_dcmpgt>
 80191e0:	2800      	cmp	r0, #0
 80191e2:	f040 8296 	bne.w	8019712 <_dtoa_r+0x992>
 80191e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80191ea:	4630      	mov	r0, r6
 80191ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80191f0:	4639      	mov	r1, r7
 80191f2:	f7e7 fc83 	bl	8000afc <__aeabi_dcmplt>
 80191f6:	2800      	cmp	r0, #0
 80191f8:	f040 8288 	bne.w	801970c <_dtoa_r+0x98c>
 80191fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019206:	2b00      	cmp	r3, #0
 8019208:	f2c0 8158 	blt.w	80194bc <_dtoa_r+0x73c>
 801920c:	f1ba 0f0e 	cmp.w	sl, #14
 8019210:	f300 8154 	bgt.w	80194bc <_dtoa_r+0x73c>
 8019214:	4b6b      	ldr	r3, [pc, #428]	; (80193c4 <_dtoa_r+0x644>)
 8019216:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801921a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801921e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019220:	2b00      	cmp	r3, #0
 8019222:	f280 80e3 	bge.w	80193ec <_dtoa_r+0x66c>
 8019226:	9b01      	ldr	r3, [sp, #4]
 8019228:	2b00      	cmp	r3, #0
 801922a:	f300 80df 	bgt.w	80193ec <_dtoa_r+0x66c>
 801922e:	f040 826d 	bne.w	801970c <_dtoa_r+0x98c>
 8019232:	4b69      	ldr	r3, [pc, #420]	; (80193d8 <_dtoa_r+0x658>)
 8019234:	2200      	movs	r2, #0
 8019236:	4640      	mov	r0, r8
 8019238:	4649      	mov	r1, r9
 801923a:	f7e7 f9ed 	bl	8000618 <__aeabi_dmul>
 801923e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019242:	f7e7 fc6f 	bl	8000b24 <__aeabi_dcmpge>
 8019246:	9e01      	ldr	r6, [sp, #4]
 8019248:	4637      	mov	r7, r6
 801924a:	2800      	cmp	r0, #0
 801924c:	f040 8243 	bne.w	80196d6 <_dtoa_r+0x956>
 8019250:	9d00      	ldr	r5, [sp, #0]
 8019252:	2331      	movs	r3, #49	; 0x31
 8019254:	f805 3b01 	strb.w	r3, [r5], #1
 8019258:	f10a 0a01 	add.w	sl, sl, #1
 801925c:	e23f      	b.n	80196de <_dtoa_r+0x95e>
 801925e:	07f2      	lsls	r2, r6, #31
 8019260:	d505      	bpl.n	801926e <_dtoa_r+0x4ee>
 8019262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019266:	f7e7 f9d7 	bl	8000618 <__aeabi_dmul>
 801926a:	3501      	adds	r5, #1
 801926c:	2301      	movs	r3, #1
 801926e:	1076      	asrs	r6, r6, #1
 8019270:	3708      	adds	r7, #8
 8019272:	e76c      	b.n	801914e <_dtoa_r+0x3ce>
 8019274:	2502      	movs	r5, #2
 8019276:	e76f      	b.n	8019158 <_dtoa_r+0x3d8>
 8019278:	9b01      	ldr	r3, [sp, #4]
 801927a:	f8cd a01c 	str.w	sl, [sp, #28]
 801927e:	930c      	str	r3, [sp, #48]	; 0x30
 8019280:	e78d      	b.n	801919e <_dtoa_r+0x41e>
 8019282:	9900      	ldr	r1, [sp, #0]
 8019284:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019286:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019288:	4b4e      	ldr	r3, [pc, #312]	; (80193c4 <_dtoa_r+0x644>)
 801928a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801928e:	4401      	add	r1, r0
 8019290:	9102      	str	r1, [sp, #8]
 8019292:	9908      	ldr	r1, [sp, #32]
 8019294:	eeb0 8a47 	vmov.f32	s16, s14
 8019298:	eef0 8a67 	vmov.f32	s17, s15
 801929c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80192a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80192a4:	2900      	cmp	r1, #0
 80192a6:	d045      	beq.n	8019334 <_dtoa_r+0x5b4>
 80192a8:	494c      	ldr	r1, [pc, #304]	; (80193dc <_dtoa_r+0x65c>)
 80192aa:	2000      	movs	r0, #0
 80192ac:	f7e7 fade 	bl	800086c <__aeabi_ddiv>
 80192b0:	ec53 2b18 	vmov	r2, r3, d8
 80192b4:	f7e6 fff8 	bl	80002a8 <__aeabi_dsub>
 80192b8:	9d00      	ldr	r5, [sp, #0]
 80192ba:	ec41 0b18 	vmov	d8, r0, r1
 80192be:	4639      	mov	r1, r7
 80192c0:	4630      	mov	r0, r6
 80192c2:	f7e7 fc59 	bl	8000b78 <__aeabi_d2iz>
 80192c6:	900c      	str	r0, [sp, #48]	; 0x30
 80192c8:	f7e7 f93c 	bl	8000544 <__aeabi_i2d>
 80192cc:	4602      	mov	r2, r0
 80192ce:	460b      	mov	r3, r1
 80192d0:	4630      	mov	r0, r6
 80192d2:	4639      	mov	r1, r7
 80192d4:	f7e6 ffe8 	bl	80002a8 <__aeabi_dsub>
 80192d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80192da:	3330      	adds	r3, #48	; 0x30
 80192dc:	f805 3b01 	strb.w	r3, [r5], #1
 80192e0:	ec53 2b18 	vmov	r2, r3, d8
 80192e4:	4606      	mov	r6, r0
 80192e6:	460f      	mov	r7, r1
 80192e8:	f7e7 fc08 	bl	8000afc <__aeabi_dcmplt>
 80192ec:	2800      	cmp	r0, #0
 80192ee:	d165      	bne.n	80193bc <_dtoa_r+0x63c>
 80192f0:	4632      	mov	r2, r6
 80192f2:	463b      	mov	r3, r7
 80192f4:	4935      	ldr	r1, [pc, #212]	; (80193cc <_dtoa_r+0x64c>)
 80192f6:	2000      	movs	r0, #0
 80192f8:	f7e6 ffd6 	bl	80002a8 <__aeabi_dsub>
 80192fc:	ec53 2b18 	vmov	r2, r3, d8
 8019300:	f7e7 fbfc 	bl	8000afc <__aeabi_dcmplt>
 8019304:	2800      	cmp	r0, #0
 8019306:	f040 80b9 	bne.w	801947c <_dtoa_r+0x6fc>
 801930a:	9b02      	ldr	r3, [sp, #8]
 801930c:	429d      	cmp	r5, r3
 801930e:	f43f af75 	beq.w	80191fc <_dtoa_r+0x47c>
 8019312:	4b2f      	ldr	r3, [pc, #188]	; (80193d0 <_dtoa_r+0x650>)
 8019314:	ec51 0b18 	vmov	r0, r1, d8
 8019318:	2200      	movs	r2, #0
 801931a:	f7e7 f97d 	bl	8000618 <__aeabi_dmul>
 801931e:	4b2c      	ldr	r3, [pc, #176]	; (80193d0 <_dtoa_r+0x650>)
 8019320:	ec41 0b18 	vmov	d8, r0, r1
 8019324:	2200      	movs	r2, #0
 8019326:	4630      	mov	r0, r6
 8019328:	4639      	mov	r1, r7
 801932a:	f7e7 f975 	bl	8000618 <__aeabi_dmul>
 801932e:	4606      	mov	r6, r0
 8019330:	460f      	mov	r7, r1
 8019332:	e7c4      	b.n	80192be <_dtoa_r+0x53e>
 8019334:	ec51 0b17 	vmov	r0, r1, d7
 8019338:	f7e7 f96e 	bl	8000618 <__aeabi_dmul>
 801933c:	9b02      	ldr	r3, [sp, #8]
 801933e:	9d00      	ldr	r5, [sp, #0]
 8019340:	930c      	str	r3, [sp, #48]	; 0x30
 8019342:	ec41 0b18 	vmov	d8, r0, r1
 8019346:	4639      	mov	r1, r7
 8019348:	4630      	mov	r0, r6
 801934a:	f7e7 fc15 	bl	8000b78 <__aeabi_d2iz>
 801934e:	9011      	str	r0, [sp, #68]	; 0x44
 8019350:	f7e7 f8f8 	bl	8000544 <__aeabi_i2d>
 8019354:	4602      	mov	r2, r0
 8019356:	460b      	mov	r3, r1
 8019358:	4630      	mov	r0, r6
 801935a:	4639      	mov	r1, r7
 801935c:	f7e6 ffa4 	bl	80002a8 <__aeabi_dsub>
 8019360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019362:	3330      	adds	r3, #48	; 0x30
 8019364:	f805 3b01 	strb.w	r3, [r5], #1
 8019368:	9b02      	ldr	r3, [sp, #8]
 801936a:	429d      	cmp	r5, r3
 801936c:	4606      	mov	r6, r0
 801936e:	460f      	mov	r7, r1
 8019370:	f04f 0200 	mov.w	r2, #0
 8019374:	d134      	bne.n	80193e0 <_dtoa_r+0x660>
 8019376:	4b19      	ldr	r3, [pc, #100]	; (80193dc <_dtoa_r+0x65c>)
 8019378:	ec51 0b18 	vmov	r0, r1, d8
 801937c:	f7e6 ff96 	bl	80002ac <__adddf3>
 8019380:	4602      	mov	r2, r0
 8019382:	460b      	mov	r3, r1
 8019384:	4630      	mov	r0, r6
 8019386:	4639      	mov	r1, r7
 8019388:	f7e7 fbd6 	bl	8000b38 <__aeabi_dcmpgt>
 801938c:	2800      	cmp	r0, #0
 801938e:	d175      	bne.n	801947c <_dtoa_r+0x6fc>
 8019390:	ec53 2b18 	vmov	r2, r3, d8
 8019394:	4911      	ldr	r1, [pc, #68]	; (80193dc <_dtoa_r+0x65c>)
 8019396:	2000      	movs	r0, #0
 8019398:	f7e6 ff86 	bl	80002a8 <__aeabi_dsub>
 801939c:	4602      	mov	r2, r0
 801939e:	460b      	mov	r3, r1
 80193a0:	4630      	mov	r0, r6
 80193a2:	4639      	mov	r1, r7
 80193a4:	f7e7 fbaa 	bl	8000afc <__aeabi_dcmplt>
 80193a8:	2800      	cmp	r0, #0
 80193aa:	f43f af27 	beq.w	80191fc <_dtoa_r+0x47c>
 80193ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80193b0:	1e6b      	subs	r3, r5, #1
 80193b2:	930c      	str	r3, [sp, #48]	; 0x30
 80193b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80193b8:	2b30      	cmp	r3, #48	; 0x30
 80193ba:	d0f8      	beq.n	80193ae <_dtoa_r+0x62e>
 80193bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80193c0:	e04a      	b.n	8019458 <_dtoa_r+0x6d8>
 80193c2:	bf00      	nop
 80193c4:	08022080 	.word	0x08022080
 80193c8:	08022058 	.word	0x08022058
 80193cc:	3ff00000 	.word	0x3ff00000
 80193d0:	40240000 	.word	0x40240000
 80193d4:	401c0000 	.word	0x401c0000
 80193d8:	40140000 	.word	0x40140000
 80193dc:	3fe00000 	.word	0x3fe00000
 80193e0:	4baf      	ldr	r3, [pc, #700]	; (80196a0 <_dtoa_r+0x920>)
 80193e2:	f7e7 f919 	bl	8000618 <__aeabi_dmul>
 80193e6:	4606      	mov	r6, r0
 80193e8:	460f      	mov	r7, r1
 80193ea:	e7ac      	b.n	8019346 <_dtoa_r+0x5c6>
 80193ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80193f0:	9d00      	ldr	r5, [sp, #0]
 80193f2:	4642      	mov	r2, r8
 80193f4:	464b      	mov	r3, r9
 80193f6:	4630      	mov	r0, r6
 80193f8:	4639      	mov	r1, r7
 80193fa:	f7e7 fa37 	bl	800086c <__aeabi_ddiv>
 80193fe:	f7e7 fbbb 	bl	8000b78 <__aeabi_d2iz>
 8019402:	9002      	str	r0, [sp, #8]
 8019404:	f7e7 f89e 	bl	8000544 <__aeabi_i2d>
 8019408:	4642      	mov	r2, r8
 801940a:	464b      	mov	r3, r9
 801940c:	f7e7 f904 	bl	8000618 <__aeabi_dmul>
 8019410:	4602      	mov	r2, r0
 8019412:	460b      	mov	r3, r1
 8019414:	4630      	mov	r0, r6
 8019416:	4639      	mov	r1, r7
 8019418:	f7e6 ff46 	bl	80002a8 <__aeabi_dsub>
 801941c:	9e02      	ldr	r6, [sp, #8]
 801941e:	9f01      	ldr	r7, [sp, #4]
 8019420:	3630      	adds	r6, #48	; 0x30
 8019422:	f805 6b01 	strb.w	r6, [r5], #1
 8019426:	9e00      	ldr	r6, [sp, #0]
 8019428:	1bae      	subs	r6, r5, r6
 801942a:	42b7      	cmp	r7, r6
 801942c:	4602      	mov	r2, r0
 801942e:	460b      	mov	r3, r1
 8019430:	d137      	bne.n	80194a2 <_dtoa_r+0x722>
 8019432:	f7e6 ff3b 	bl	80002ac <__adddf3>
 8019436:	4642      	mov	r2, r8
 8019438:	464b      	mov	r3, r9
 801943a:	4606      	mov	r6, r0
 801943c:	460f      	mov	r7, r1
 801943e:	f7e7 fb7b 	bl	8000b38 <__aeabi_dcmpgt>
 8019442:	b9c8      	cbnz	r0, 8019478 <_dtoa_r+0x6f8>
 8019444:	4642      	mov	r2, r8
 8019446:	464b      	mov	r3, r9
 8019448:	4630      	mov	r0, r6
 801944a:	4639      	mov	r1, r7
 801944c:	f7e7 fb4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8019450:	b110      	cbz	r0, 8019458 <_dtoa_r+0x6d8>
 8019452:	9b02      	ldr	r3, [sp, #8]
 8019454:	07d9      	lsls	r1, r3, #31
 8019456:	d40f      	bmi.n	8019478 <_dtoa_r+0x6f8>
 8019458:	4620      	mov	r0, r4
 801945a:	4659      	mov	r1, fp
 801945c:	f000 ff5a 	bl	801a314 <_Bfree>
 8019460:	2300      	movs	r3, #0
 8019462:	702b      	strb	r3, [r5, #0]
 8019464:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019466:	f10a 0001 	add.w	r0, sl, #1
 801946a:	6018      	str	r0, [r3, #0]
 801946c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801946e:	2b00      	cmp	r3, #0
 8019470:	f43f acd8 	beq.w	8018e24 <_dtoa_r+0xa4>
 8019474:	601d      	str	r5, [r3, #0]
 8019476:	e4d5      	b.n	8018e24 <_dtoa_r+0xa4>
 8019478:	f8cd a01c 	str.w	sl, [sp, #28]
 801947c:	462b      	mov	r3, r5
 801947e:	461d      	mov	r5, r3
 8019480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019484:	2a39      	cmp	r2, #57	; 0x39
 8019486:	d108      	bne.n	801949a <_dtoa_r+0x71a>
 8019488:	9a00      	ldr	r2, [sp, #0]
 801948a:	429a      	cmp	r2, r3
 801948c:	d1f7      	bne.n	801947e <_dtoa_r+0x6fe>
 801948e:	9a07      	ldr	r2, [sp, #28]
 8019490:	9900      	ldr	r1, [sp, #0]
 8019492:	3201      	adds	r2, #1
 8019494:	9207      	str	r2, [sp, #28]
 8019496:	2230      	movs	r2, #48	; 0x30
 8019498:	700a      	strb	r2, [r1, #0]
 801949a:	781a      	ldrb	r2, [r3, #0]
 801949c:	3201      	adds	r2, #1
 801949e:	701a      	strb	r2, [r3, #0]
 80194a0:	e78c      	b.n	80193bc <_dtoa_r+0x63c>
 80194a2:	4b7f      	ldr	r3, [pc, #508]	; (80196a0 <_dtoa_r+0x920>)
 80194a4:	2200      	movs	r2, #0
 80194a6:	f7e7 f8b7 	bl	8000618 <__aeabi_dmul>
 80194aa:	2200      	movs	r2, #0
 80194ac:	2300      	movs	r3, #0
 80194ae:	4606      	mov	r6, r0
 80194b0:	460f      	mov	r7, r1
 80194b2:	f7e7 fb19 	bl	8000ae8 <__aeabi_dcmpeq>
 80194b6:	2800      	cmp	r0, #0
 80194b8:	d09b      	beq.n	80193f2 <_dtoa_r+0x672>
 80194ba:	e7cd      	b.n	8019458 <_dtoa_r+0x6d8>
 80194bc:	9a08      	ldr	r2, [sp, #32]
 80194be:	2a00      	cmp	r2, #0
 80194c0:	f000 80c4 	beq.w	801964c <_dtoa_r+0x8cc>
 80194c4:	9a05      	ldr	r2, [sp, #20]
 80194c6:	2a01      	cmp	r2, #1
 80194c8:	f300 80a8 	bgt.w	801961c <_dtoa_r+0x89c>
 80194cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80194ce:	2a00      	cmp	r2, #0
 80194d0:	f000 80a0 	beq.w	8019614 <_dtoa_r+0x894>
 80194d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80194d8:	9e06      	ldr	r6, [sp, #24]
 80194da:	4645      	mov	r5, r8
 80194dc:	9a04      	ldr	r2, [sp, #16]
 80194de:	2101      	movs	r1, #1
 80194e0:	441a      	add	r2, r3
 80194e2:	4620      	mov	r0, r4
 80194e4:	4498      	add	r8, r3
 80194e6:	9204      	str	r2, [sp, #16]
 80194e8:	f001 f81a 	bl	801a520 <__i2b>
 80194ec:	4607      	mov	r7, r0
 80194ee:	2d00      	cmp	r5, #0
 80194f0:	dd0b      	ble.n	801950a <_dtoa_r+0x78a>
 80194f2:	9b04      	ldr	r3, [sp, #16]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	dd08      	ble.n	801950a <_dtoa_r+0x78a>
 80194f8:	42ab      	cmp	r3, r5
 80194fa:	9a04      	ldr	r2, [sp, #16]
 80194fc:	bfa8      	it	ge
 80194fe:	462b      	movge	r3, r5
 8019500:	eba8 0803 	sub.w	r8, r8, r3
 8019504:	1aed      	subs	r5, r5, r3
 8019506:	1ad3      	subs	r3, r2, r3
 8019508:	9304      	str	r3, [sp, #16]
 801950a:	9b06      	ldr	r3, [sp, #24]
 801950c:	b1fb      	cbz	r3, 801954e <_dtoa_r+0x7ce>
 801950e:	9b08      	ldr	r3, [sp, #32]
 8019510:	2b00      	cmp	r3, #0
 8019512:	f000 809f 	beq.w	8019654 <_dtoa_r+0x8d4>
 8019516:	2e00      	cmp	r6, #0
 8019518:	dd11      	ble.n	801953e <_dtoa_r+0x7be>
 801951a:	4639      	mov	r1, r7
 801951c:	4632      	mov	r2, r6
 801951e:	4620      	mov	r0, r4
 8019520:	f001 f8ba 	bl	801a698 <__pow5mult>
 8019524:	465a      	mov	r2, fp
 8019526:	4601      	mov	r1, r0
 8019528:	4607      	mov	r7, r0
 801952a:	4620      	mov	r0, r4
 801952c:	f001 f80e 	bl	801a54c <__multiply>
 8019530:	4659      	mov	r1, fp
 8019532:	9007      	str	r0, [sp, #28]
 8019534:	4620      	mov	r0, r4
 8019536:	f000 feed 	bl	801a314 <_Bfree>
 801953a:	9b07      	ldr	r3, [sp, #28]
 801953c:	469b      	mov	fp, r3
 801953e:	9b06      	ldr	r3, [sp, #24]
 8019540:	1b9a      	subs	r2, r3, r6
 8019542:	d004      	beq.n	801954e <_dtoa_r+0x7ce>
 8019544:	4659      	mov	r1, fp
 8019546:	4620      	mov	r0, r4
 8019548:	f001 f8a6 	bl	801a698 <__pow5mult>
 801954c:	4683      	mov	fp, r0
 801954e:	2101      	movs	r1, #1
 8019550:	4620      	mov	r0, r4
 8019552:	f000 ffe5 	bl	801a520 <__i2b>
 8019556:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019558:	2b00      	cmp	r3, #0
 801955a:	4606      	mov	r6, r0
 801955c:	dd7c      	ble.n	8019658 <_dtoa_r+0x8d8>
 801955e:	461a      	mov	r2, r3
 8019560:	4601      	mov	r1, r0
 8019562:	4620      	mov	r0, r4
 8019564:	f001 f898 	bl	801a698 <__pow5mult>
 8019568:	9b05      	ldr	r3, [sp, #20]
 801956a:	2b01      	cmp	r3, #1
 801956c:	4606      	mov	r6, r0
 801956e:	dd76      	ble.n	801965e <_dtoa_r+0x8de>
 8019570:	2300      	movs	r3, #0
 8019572:	9306      	str	r3, [sp, #24]
 8019574:	6933      	ldr	r3, [r6, #16]
 8019576:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801957a:	6918      	ldr	r0, [r3, #16]
 801957c:	f000 ff80 	bl	801a480 <__hi0bits>
 8019580:	f1c0 0020 	rsb	r0, r0, #32
 8019584:	9b04      	ldr	r3, [sp, #16]
 8019586:	4418      	add	r0, r3
 8019588:	f010 001f 	ands.w	r0, r0, #31
 801958c:	f000 8086 	beq.w	801969c <_dtoa_r+0x91c>
 8019590:	f1c0 0320 	rsb	r3, r0, #32
 8019594:	2b04      	cmp	r3, #4
 8019596:	dd7f      	ble.n	8019698 <_dtoa_r+0x918>
 8019598:	f1c0 001c 	rsb	r0, r0, #28
 801959c:	9b04      	ldr	r3, [sp, #16]
 801959e:	4403      	add	r3, r0
 80195a0:	4480      	add	r8, r0
 80195a2:	4405      	add	r5, r0
 80195a4:	9304      	str	r3, [sp, #16]
 80195a6:	f1b8 0f00 	cmp.w	r8, #0
 80195aa:	dd05      	ble.n	80195b8 <_dtoa_r+0x838>
 80195ac:	4659      	mov	r1, fp
 80195ae:	4642      	mov	r2, r8
 80195b0:	4620      	mov	r0, r4
 80195b2:	f001 f8cb 	bl	801a74c <__lshift>
 80195b6:	4683      	mov	fp, r0
 80195b8:	9b04      	ldr	r3, [sp, #16]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	dd05      	ble.n	80195ca <_dtoa_r+0x84a>
 80195be:	4631      	mov	r1, r6
 80195c0:	461a      	mov	r2, r3
 80195c2:	4620      	mov	r0, r4
 80195c4:	f001 f8c2 	bl	801a74c <__lshift>
 80195c8:	4606      	mov	r6, r0
 80195ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d069      	beq.n	80196a4 <_dtoa_r+0x924>
 80195d0:	4631      	mov	r1, r6
 80195d2:	4658      	mov	r0, fp
 80195d4:	f001 f926 	bl	801a824 <__mcmp>
 80195d8:	2800      	cmp	r0, #0
 80195da:	da63      	bge.n	80196a4 <_dtoa_r+0x924>
 80195dc:	2300      	movs	r3, #0
 80195de:	4659      	mov	r1, fp
 80195e0:	220a      	movs	r2, #10
 80195e2:	4620      	mov	r0, r4
 80195e4:	f000 feb8 	bl	801a358 <__multadd>
 80195e8:	9b08      	ldr	r3, [sp, #32]
 80195ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80195ee:	4683      	mov	fp, r0
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	f000 818f 	beq.w	8019914 <_dtoa_r+0xb94>
 80195f6:	4639      	mov	r1, r7
 80195f8:	2300      	movs	r3, #0
 80195fa:	220a      	movs	r2, #10
 80195fc:	4620      	mov	r0, r4
 80195fe:	f000 feab 	bl	801a358 <__multadd>
 8019602:	f1b9 0f00 	cmp.w	r9, #0
 8019606:	4607      	mov	r7, r0
 8019608:	f300 808e 	bgt.w	8019728 <_dtoa_r+0x9a8>
 801960c:	9b05      	ldr	r3, [sp, #20]
 801960e:	2b02      	cmp	r3, #2
 8019610:	dc50      	bgt.n	80196b4 <_dtoa_r+0x934>
 8019612:	e089      	b.n	8019728 <_dtoa_r+0x9a8>
 8019614:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019616:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801961a:	e75d      	b.n	80194d8 <_dtoa_r+0x758>
 801961c:	9b01      	ldr	r3, [sp, #4]
 801961e:	1e5e      	subs	r6, r3, #1
 8019620:	9b06      	ldr	r3, [sp, #24]
 8019622:	42b3      	cmp	r3, r6
 8019624:	bfbf      	itttt	lt
 8019626:	9b06      	ldrlt	r3, [sp, #24]
 8019628:	9606      	strlt	r6, [sp, #24]
 801962a:	1af2      	sublt	r2, r6, r3
 801962c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801962e:	bfb6      	itet	lt
 8019630:	189b      	addlt	r3, r3, r2
 8019632:	1b9e      	subge	r6, r3, r6
 8019634:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019636:	9b01      	ldr	r3, [sp, #4]
 8019638:	bfb8      	it	lt
 801963a:	2600      	movlt	r6, #0
 801963c:	2b00      	cmp	r3, #0
 801963e:	bfb5      	itete	lt
 8019640:	eba8 0503 	sublt.w	r5, r8, r3
 8019644:	9b01      	ldrge	r3, [sp, #4]
 8019646:	2300      	movlt	r3, #0
 8019648:	4645      	movge	r5, r8
 801964a:	e747      	b.n	80194dc <_dtoa_r+0x75c>
 801964c:	9e06      	ldr	r6, [sp, #24]
 801964e:	9f08      	ldr	r7, [sp, #32]
 8019650:	4645      	mov	r5, r8
 8019652:	e74c      	b.n	80194ee <_dtoa_r+0x76e>
 8019654:	9a06      	ldr	r2, [sp, #24]
 8019656:	e775      	b.n	8019544 <_dtoa_r+0x7c4>
 8019658:	9b05      	ldr	r3, [sp, #20]
 801965a:	2b01      	cmp	r3, #1
 801965c:	dc18      	bgt.n	8019690 <_dtoa_r+0x910>
 801965e:	9b02      	ldr	r3, [sp, #8]
 8019660:	b9b3      	cbnz	r3, 8019690 <_dtoa_r+0x910>
 8019662:	9b03      	ldr	r3, [sp, #12]
 8019664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019668:	b9a3      	cbnz	r3, 8019694 <_dtoa_r+0x914>
 801966a:	9b03      	ldr	r3, [sp, #12]
 801966c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019670:	0d1b      	lsrs	r3, r3, #20
 8019672:	051b      	lsls	r3, r3, #20
 8019674:	b12b      	cbz	r3, 8019682 <_dtoa_r+0x902>
 8019676:	9b04      	ldr	r3, [sp, #16]
 8019678:	3301      	adds	r3, #1
 801967a:	9304      	str	r3, [sp, #16]
 801967c:	f108 0801 	add.w	r8, r8, #1
 8019680:	2301      	movs	r3, #1
 8019682:	9306      	str	r3, [sp, #24]
 8019684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019686:	2b00      	cmp	r3, #0
 8019688:	f47f af74 	bne.w	8019574 <_dtoa_r+0x7f4>
 801968c:	2001      	movs	r0, #1
 801968e:	e779      	b.n	8019584 <_dtoa_r+0x804>
 8019690:	2300      	movs	r3, #0
 8019692:	e7f6      	b.n	8019682 <_dtoa_r+0x902>
 8019694:	9b02      	ldr	r3, [sp, #8]
 8019696:	e7f4      	b.n	8019682 <_dtoa_r+0x902>
 8019698:	d085      	beq.n	80195a6 <_dtoa_r+0x826>
 801969a:	4618      	mov	r0, r3
 801969c:	301c      	adds	r0, #28
 801969e:	e77d      	b.n	801959c <_dtoa_r+0x81c>
 80196a0:	40240000 	.word	0x40240000
 80196a4:	9b01      	ldr	r3, [sp, #4]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	dc38      	bgt.n	801971c <_dtoa_r+0x99c>
 80196aa:	9b05      	ldr	r3, [sp, #20]
 80196ac:	2b02      	cmp	r3, #2
 80196ae:	dd35      	ble.n	801971c <_dtoa_r+0x99c>
 80196b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80196b4:	f1b9 0f00 	cmp.w	r9, #0
 80196b8:	d10d      	bne.n	80196d6 <_dtoa_r+0x956>
 80196ba:	4631      	mov	r1, r6
 80196bc:	464b      	mov	r3, r9
 80196be:	2205      	movs	r2, #5
 80196c0:	4620      	mov	r0, r4
 80196c2:	f000 fe49 	bl	801a358 <__multadd>
 80196c6:	4601      	mov	r1, r0
 80196c8:	4606      	mov	r6, r0
 80196ca:	4658      	mov	r0, fp
 80196cc:	f001 f8aa 	bl	801a824 <__mcmp>
 80196d0:	2800      	cmp	r0, #0
 80196d2:	f73f adbd 	bgt.w	8019250 <_dtoa_r+0x4d0>
 80196d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196d8:	9d00      	ldr	r5, [sp, #0]
 80196da:	ea6f 0a03 	mvn.w	sl, r3
 80196de:	f04f 0800 	mov.w	r8, #0
 80196e2:	4631      	mov	r1, r6
 80196e4:	4620      	mov	r0, r4
 80196e6:	f000 fe15 	bl	801a314 <_Bfree>
 80196ea:	2f00      	cmp	r7, #0
 80196ec:	f43f aeb4 	beq.w	8019458 <_dtoa_r+0x6d8>
 80196f0:	f1b8 0f00 	cmp.w	r8, #0
 80196f4:	d005      	beq.n	8019702 <_dtoa_r+0x982>
 80196f6:	45b8      	cmp	r8, r7
 80196f8:	d003      	beq.n	8019702 <_dtoa_r+0x982>
 80196fa:	4641      	mov	r1, r8
 80196fc:	4620      	mov	r0, r4
 80196fe:	f000 fe09 	bl	801a314 <_Bfree>
 8019702:	4639      	mov	r1, r7
 8019704:	4620      	mov	r0, r4
 8019706:	f000 fe05 	bl	801a314 <_Bfree>
 801970a:	e6a5      	b.n	8019458 <_dtoa_r+0x6d8>
 801970c:	2600      	movs	r6, #0
 801970e:	4637      	mov	r7, r6
 8019710:	e7e1      	b.n	80196d6 <_dtoa_r+0x956>
 8019712:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019714:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019718:	4637      	mov	r7, r6
 801971a:	e599      	b.n	8019250 <_dtoa_r+0x4d0>
 801971c:	9b08      	ldr	r3, [sp, #32]
 801971e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019722:	2b00      	cmp	r3, #0
 8019724:	f000 80fd 	beq.w	8019922 <_dtoa_r+0xba2>
 8019728:	2d00      	cmp	r5, #0
 801972a:	dd05      	ble.n	8019738 <_dtoa_r+0x9b8>
 801972c:	4639      	mov	r1, r7
 801972e:	462a      	mov	r2, r5
 8019730:	4620      	mov	r0, r4
 8019732:	f001 f80b 	bl	801a74c <__lshift>
 8019736:	4607      	mov	r7, r0
 8019738:	9b06      	ldr	r3, [sp, #24]
 801973a:	2b00      	cmp	r3, #0
 801973c:	d05c      	beq.n	80197f8 <_dtoa_r+0xa78>
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	4620      	mov	r0, r4
 8019742:	f000 fda7 	bl	801a294 <_Balloc>
 8019746:	4605      	mov	r5, r0
 8019748:	b928      	cbnz	r0, 8019756 <_dtoa_r+0x9d6>
 801974a:	4b80      	ldr	r3, [pc, #512]	; (801994c <_dtoa_r+0xbcc>)
 801974c:	4602      	mov	r2, r0
 801974e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019752:	f7ff bb2e 	b.w	8018db2 <_dtoa_r+0x32>
 8019756:	693a      	ldr	r2, [r7, #16]
 8019758:	3202      	adds	r2, #2
 801975a:	0092      	lsls	r2, r2, #2
 801975c:	f107 010c 	add.w	r1, r7, #12
 8019760:	300c      	adds	r0, #12
 8019762:	f7fd fc77 	bl	8017054 <memcpy>
 8019766:	2201      	movs	r2, #1
 8019768:	4629      	mov	r1, r5
 801976a:	4620      	mov	r0, r4
 801976c:	f000 ffee 	bl	801a74c <__lshift>
 8019770:	9b00      	ldr	r3, [sp, #0]
 8019772:	3301      	adds	r3, #1
 8019774:	9301      	str	r3, [sp, #4]
 8019776:	9b00      	ldr	r3, [sp, #0]
 8019778:	444b      	add	r3, r9
 801977a:	9307      	str	r3, [sp, #28]
 801977c:	9b02      	ldr	r3, [sp, #8]
 801977e:	f003 0301 	and.w	r3, r3, #1
 8019782:	46b8      	mov	r8, r7
 8019784:	9306      	str	r3, [sp, #24]
 8019786:	4607      	mov	r7, r0
 8019788:	9b01      	ldr	r3, [sp, #4]
 801978a:	4631      	mov	r1, r6
 801978c:	3b01      	subs	r3, #1
 801978e:	4658      	mov	r0, fp
 8019790:	9302      	str	r3, [sp, #8]
 8019792:	f7ff fa69 	bl	8018c68 <quorem>
 8019796:	4603      	mov	r3, r0
 8019798:	3330      	adds	r3, #48	; 0x30
 801979a:	9004      	str	r0, [sp, #16]
 801979c:	4641      	mov	r1, r8
 801979e:	4658      	mov	r0, fp
 80197a0:	9308      	str	r3, [sp, #32]
 80197a2:	f001 f83f 	bl	801a824 <__mcmp>
 80197a6:	463a      	mov	r2, r7
 80197a8:	4681      	mov	r9, r0
 80197aa:	4631      	mov	r1, r6
 80197ac:	4620      	mov	r0, r4
 80197ae:	f001 f855 	bl	801a85c <__mdiff>
 80197b2:	68c2      	ldr	r2, [r0, #12]
 80197b4:	9b08      	ldr	r3, [sp, #32]
 80197b6:	4605      	mov	r5, r0
 80197b8:	bb02      	cbnz	r2, 80197fc <_dtoa_r+0xa7c>
 80197ba:	4601      	mov	r1, r0
 80197bc:	4658      	mov	r0, fp
 80197be:	f001 f831 	bl	801a824 <__mcmp>
 80197c2:	9b08      	ldr	r3, [sp, #32]
 80197c4:	4602      	mov	r2, r0
 80197c6:	4629      	mov	r1, r5
 80197c8:	4620      	mov	r0, r4
 80197ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80197ce:	f000 fda1 	bl	801a314 <_Bfree>
 80197d2:	9b05      	ldr	r3, [sp, #20]
 80197d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80197d6:	9d01      	ldr	r5, [sp, #4]
 80197d8:	ea43 0102 	orr.w	r1, r3, r2
 80197dc:	9b06      	ldr	r3, [sp, #24]
 80197de:	430b      	orrs	r3, r1
 80197e0:	9b08      	ldr	r3, [sp, #32]
 80197e2:	d10d      	bne.n	8019800 <_dtoa_r+0xa80>
 80197e4:	2b39      	cmp	r3, #57	; 0x39
 80197e6:	d029      	beq.n	801983c <_dtoa_r+0xabc>
 80197e8:	f1b9 0f00 	cmp.w	r9, #0
 80197ec:	dd01      	ble.n	80197f2 <_dtoa_r+0xa72>
 80197ee:	9b04      	ldr	r3, [sp, #16]
 80197f0:	3331      	adds	r3, #49	; 0x31
 80197f2:	9a02      	ldr	r2, [sp, #8]
 80197f4:	7013      	strb	r3, [r2, #0]
 80197f6:	e774      	b.n	80196e2 <_dtoa_r+0x962>
 80197f8:	4638      	mov	r0, r7
 80197fa:	e7b9      	b.n	8019770 <_dtoa_r+0x9f0>
 80197fc:	2201      	movs	r2, #1
 80197fe:	e7e2      	b.n	80197c6 <_dtoa_r+0xa46>
 8019800:	f1b9 0f00 	cmp.w	r9, #0
 8019804:	db06      	blt.n	8019814 <_dtoa_r+0xa94>
 8019806:	9905      	ldr	r1, [sp, #20]
 8019808:	ea41 0909 	orr.w	r9, r1, r9
 801980c:	9906      	ldr	r1, [sp, #24]
 801980e:	ea59 0101 	orrs.w	r1, r9, r1
 8019812:	d120      	bne.n	8019856 <_dtoa_r+0xad6>
 8019814:	2a00      	cmp	r2, #0
 8019816:	ddec      	ble.n	80197f2 <_dtoa_r+0xa72>
 8019818:	4659      	mov	r1, fp
 801981a:	2201      	movs	r2, #1
 801981c:	4620      	mov	r0, r4
 801981e:	9301      	str	r3, [sp, #4]
 8019820:	f000 ff94 	bl	801a74c <__lshift>
 8019824:	4631      	mov	r1, r6
 8019826:	4683      	mov	fp, r0
 8019828:	f000 fffc 	bl	801a824 <__mcmp>
 801982c:	2800      	cmp	r0, #0
 801982e:	9b01      	ldr	r3, [sp, #4]
 8019830:	dc02      	bgt.n	8019838 <_dtoa_r+0xab8>
 8019832:	d1de      	bne.n	80197f2 <_dtoa_r+0xa72>
 8019834:	07da      	lsls	r2, r3, #31
 8019836:	d5dc      	bpl.n	80197f2 <_dtoa_r+0xa72>
 8019838:	2b39      	cmp	r3, #57	; 0x39
 801983a:	d1d8      	bne.n	80197ee <_dtoa_r+0xa6e>
 801983c:	9a02      	ldr	r2, [sp, #8]
 801983e:	2339      	movs	r3, #57	; 0x39
 8019840:	7013      	strb	r3, [r2, #0]
 8019842:	462b      	mov	r3, r5
 8019844:	461d      	mov	r5, r3
 8019846:	3b01      	subs	r3, #1
 8019848:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801984c:	2a39      	cmp	r2, #57	; 0x39
 801984e:	d050      	beq.n	80198f2 <_dtoa_r+0xb72>
 8019850:	3201      	adds	r2, #1
 8019852:	701a      	strb	r2, [r3, #0]
 8019854:	e745      	b.n	80196e2 <_dtoa_r+0x962>
 8019856:	2a00      	cmp	r2, #0
 8019858:	dd03      	ble.n	8019862 <_dtoa_r+0xae2>
 801985a:	2b39      	cmp	r3, #57	; 0x39
 801985c:	d0ee      	beq.n	801983c <_dtoa_r+0xabc>
 801985e:	3301      	adds	r3, #1
 8019860:	e7c7      	b.n	80197f2 <_dtoa_r+0xa72>
 8019862:	9a01      	ldr	r2, [sp, #4]
 8019864:	9907      	ldr	r1, [sp, #28]
 8019866:	f802 3c01 	strb.w	r3, [r2, #-1]
 801986a:	428a      	cmp	r2, r1
 801986c:	d02a      	beq.n	80198c4 <_dtoa_r+0xb44>
 801986e:	4659      	mov	r1, fp
 8019870:	2300      	movs	r3, #0
 8019872:	220a      	movs	r2, #10
 8019874:	4620      	mov	r0, r4
 8019876:	f000 fd6f 	bl	801a358 <__multadd>
 801987a:	45b8      	cmp	r8, r7
 801987c:	4683      	mov	fp, r0
 801987e:	f04f 0300 	mov.w	r3, #0
 8019882:	f04f 020a 	mov.w	r2, #10
 8019886:	4641      	mov	r1, r8
 8019888:	4620      	mov	r0, r4
 801988a:	d107      	bne.n	801989c <_dtoa_r+0xb1c>
 801988c:	f000 fd64 	bl	801a358 <__multadd>
 8019890:	4680      	mov	r8, r0
 8019892:	4607      	mov	r7, r0
 8019894:	9b01      	ldr	r3, [sp, #4]
 8019896:	3301      	adds	r3, #1
 8019898:	9301      	str	r3, [sp, #4]
 801989a:	e775      	b.n	8019788 <_dtoa_r+0xa08>
 801989c:	f000 fd5c 	bl	801a358 <__multadd>
 80198a0:	4639      	mov	r1, r7
 80198a2:	4680      	mov	r8, r0
 80198a4:	2300      	movs	r3, #0
 80198a6:	220a      	movs	r2, #10
 80198a8:	4620      	mov	r0, r4
 80198aa:	f000 fd55 	bl	801a358 <__multadd>
 80198ae:	4607      	mov	r7, r0
 80198b0:	e7f0      	b.n	8019894 <_dtoa_r+0xb14>
 80198b2:	f1b9 0f00 	cmp.w	r9, #0
 80198b6:	9a00      	ldr	r2, [sp, #0]
 80198b8:	bfcc      	ite	gt
 80198ba:	464d      	movgt	r5, r9
 80198bc:	2501      	movle	r5, #1
 80198be:	4415      	add	r5, r2
 80198c0:	f04f 0800 	mov.w	r8, #0
 80198c4:	4659      	mov	r1, fp
 80198c6:	2201      	movs	r2, #1
 80198c8:	4620      	mov	r0, r4
 80198ca:	9301      	str	r3, [sp, #4]
 80198cc:	f000 ff3e 	bl	801a74c <__lshift>
 80198d0:	4631      	mov	r1, r6
 80198d2:	4683      	mov	fp, r0
 80198d4:	f000 ffa6 	bl	801a824 <__mcmp>
 80198d8:	2800      	cmp	r0, #0
 80198da:	dcb2      	bgt.n	8019842 <_dtoa_r+0xac2>
 80198dc:	d102      	bne.n	80198e4 <_dtoa_r+0xb64>
 80198de:	9b01      	ldr	r3, [sp, #4]
 80198e0:	07db      	lsls	r3, r3, #31
 80198e2:	d4ae      	bmi.n	8019842 <_dtoa_r+0xac2>
 80198e4:	462b      	mov	r3, r5
 80198e6:	461d      	mov	r5, r3
 80198e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80198ec:	2a30      	cmp	r2, #48	; 0x30
 80198ee:	d0fa      	beq.n	80198e6 <_dtoa_r+0xb66>
 80198f0:	e6f7      	b.n	80196e2 <_dtoa_r+0x962>
 80198f2:	9a00      	ldr	r2, [sp, #0]
 80198f4:	429a      	cmp	r2, r3
 80198f6:	d1a5      	bne.n	8019844 <_dtoa_r+0xac4>
 80198f8:	f10a 0a01 	add.w	sl, sl, #1
 80198fc:	2331      	movs	r3, #49	; 0x31
 80198fe:	e779      	b.n	80197f4 <_dtoa_r+0xa74>
 8019900:	4b13      	ldr	r3, [pc, #76]	; (8019950 <_dtoa_r+0xbd0>)
 8019902:	f7ff baaf 	b.w	8018e64 <_dtoa_r+0xe4>
 8019906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019908:	2b00      	cmp	r3, #0
 801990a:	f47f aa86 	bne.w	8018e1a <_dtoa_r+0x9a>
 801990e:	4b11      	ldr	r3, [pc, #68]	; (8019954 <_dtoa_r+0xbd4>)
 8019910:	f7ff baa8 	b.w	8018e64 <_dtoa_r+0xe4>
 8019914:	f1b9 0f00 	cmp.w	r9, #0
 8019918:	dc03      	bgt.n	8019922 <_dtoa_r+0xba2>
 801991a:	9b05      	ldr	r3, [sp, #20]
 801991c:	2b02      	cmp	r3, #2
 801991e:	f73f aec9 	bgt.w	80196b4 <_dtoa_r+0x934>
 8019922:	9d00      	ldr	r5, [sp, #0]
 8019924:	4631      	mov	r1, r6
 8019926:	4658      	mov	r0, fp
 8019928:	f7ff f99e 	bl	8018c68 <quorem>
 801992c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019930:	f805 3b01 	strb.w	r3, [r5], #1
 8019934:	9a00      	ldr	r2, [sp, #0]
 8019936:	1aaa      	subs	r2, r5, r2
 8019938:	4591      	cmp	r9, r2
 801993a:	ddba      	ble.n	80198b2 <_dtoa_r+0xb32>
 801993c:	4659      	mov	r1, fp
 801993e:	2300      	movs	r3, #0
 8019940:	220a      	movs	r2, #10
 8019942:	4620      	mov	r0, r4
 8019944:	f000 fd08 	bl	801a358 <__multadd>
 8019948:	4683      	mov	fp, r0
 801994a:	e7eb      	b.n	8019924 <_dtoa_r+0xba4>
 801994c:	08021f00 	.word	0x08021f00
 8019950:	08021d68 	.word	0x08021d68
 8019954:	08021e94 	.word	0x08021e94

08019958 <__errno>:
 8019958:	4b01      	ldr	r3, [pc, #4]	; (8019960 <__errno+0x8>)
 801995a:	6818      	ldr	r0, [r3, #0]
 801995c:	4770      	bx	lr
 801995e:	bf00      	nop
 8019960:	20000194 	.word	0x20000194

08019964 <std>:
 8019964:	2300      	movs	r3, #0
 8019966:	b510      	push	{r4, lr}
 8019968:	4604      	mov	r4, r0
 801996a:	e9c0 3300 	strd	r3, r3, [r0]
 801996e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019972:	6083      	str	r3, [r0, #8]
 8019974:	8181      	strh	r1, [r0, #12]
 8019976:	6643      	str	r3, [r0, #100]	; 0x64
 8019978:	81c2      	strh	r2, [r0, #14]
 801997a:	6183      	str	r3, [r0, #24]
 801997c:	4619      	mov	r1, r3
 801997e:	2208      	movs	r2, #8
 8019980:	305c      	adds	r0, #92	; 0x5c
 8019982:	f7fd fb8f 	bl	80170a4 <memset>
 8019986:	4b05      	ldr	r3, [pc, #20]	; (801999c <std+0x38>)
 8019988:	6263      	str	r3, [r4, #36]	; 0x24
 801998a:	4b05      	ldr	r3, [pc, #20]	; (80199a0 <std+0x3c>)
 801998c:	62a3      	str	r3, [r4, #40]	; 0x28
 801998e:	4b05      	ldr	r3, [pc, #20]	; (80199a4 <std+0x40>)
 8019990:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019992:	4b05      	ldr	r3, [pc, #20]	; (80199a8 <std+0x44>)
 8019994:	6224      	str	r4, [r4, #32]
 8019996:	6323      	str	r3, [r4, #48]	; 0x30
 8019998:	bd10      	pop	{r4, pc}
 801999a:	bf00      	nop
 801999c:	0801b319 	.word	0x0801b319
 80199a0:	0801b33b 	.word	0x0801b33b
 80199a4:	0801b373 	.word	0x0801b373
 80199a8:	0801b397 	.word	0x0801b397

080199ac <_cleanup_r>:
 80199ac:	4901      	ldr	r1, [pc, #4]	; (80199b4 <_cleanup_r+0x8>)
 80199ae:	f000 b8c1 	b.w	8019b34 <_fwalk_reent>
 80199b2:	bf00      	nop
 80199b4:	0801b69d 	.word	0x0801b69d

080199b8 <__sfmoreglue>:
 80199b8:	b570      	push	{r4, r5, r6, lr}
 80199ba:	1e4a      	subs	r2, r1, #1
 80199bc:	2568      	movs	r5, #104	; 0x68
 80199be:	4355      	muls	r5, r2
 80199c0:	460e      	mov	r6, r1
 80199c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80199c6:	f001 f97f 	bl	801acc8 <_malloc_r>
 80199ca:	4604      	mov	r4, r0
 80199cc:	b140      	cbz	r0, 80199e0 <__sfmoreglue+0x28>
 80199ce:	2100      	movs	r1, #0
 80199d0:	e9c0 1600 	strd	r1, r6, [r0]
 80199d4:	300c      	adds	r0, #12
 80199d6:	60a0      	str	r0, [r4, #8]
 80199d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80199dc:	f7fd fb62 	bl	80170a4 <memset>
 80199e0:	4620      	mov	r0, r4
 80199e2:	bd70      	pop	{r4, r5, r6, pc}

080199e4 <__sfp_lock_acquire>:
 80199e4:	4801      	ldr	r0, [pc, #4]	; (80199ec <__sfp_lock_acquire+0x8>)
 80199e6:	f000 bc38 	b.w	801a25a <__retarget_lock_acquire_recursive>
 80199ea:	bf00      	nop
 80199ec:	20008a18 	.word	0x20008a18

080199f0 <__sfp_lock_release>:
 80199f0:	4801      	ldr	r0, [pc, #4]	; (80199f8 <__sfp_lock_release+0x8>)
 80199f2:	f000 bc33 	b.w	801a25c <__retarget_lock_release_recursive>
 80199f6:	bf00      	nop
 80199f8:	20008a18 	.word	0x20008a18

080199fc <__sinit_lock_acquire>:
 80199fc:	4801      	ldr	r0, [pc, #4]	; (8019a04 <__sinit_lock_acquire+0x8>)
 80199fe:	f000 bc2c 	b.w	801a25a <__retarget_lock_acquire_recursive>
 8019a02:	bf00      	nop
 8019a04:	20008a13 	.word	0x20008a13

08019a08 <__sinit_lock_release>:
 8019a08:	4801      	ldr	r0, [pc, #4]	; (8019a10 <__sinit_lock_release+0x8>)
 8019a0a:	f000 bc27 	b.w	801a25c <__retarget_lock_release_recursive>
 8019a0e:	bf00      	nop
 8019a10:	20008a13 	.word	0x20008a13

08019a14 <__sinit>:
 8019a14:	b510      	push	{r4, lr}
 8019a16:	4604      	mov	r4, r0
 8019a18:	f7ff fff0 	bl	80199fc <__sinit_lock_acquire>
 8019a1c:	69a3      	ldr	r3, [r4, #24]
 8019a1e:	b11b      	cbz	r3, 8019a28 <__sinit+0x14>
 8019a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a24:	f7ff bff0 	b.w	8019a08 <__sinit_lock_release>
 8019a28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019a2c:	6523      	str	r3, [r4, #80]	; 0x50
 8019a2e:	4b13      	ldr	r3, [pc, #76]	; (8019a7c <__sinit+0x68>)
 8019a30:	4a13      	ldr	r2, [pc, #76]	; (8019a80 <__sinit+0x6c>)
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	62a2      	str	r2, [r4, #40]	; 0x28
 8019a36:	42a3      	cmp	r3, r4
 8019a38:	bf04      	itt	eq
 8019a3a:	2301      	moveq	r3, #1
 8019a3c:	61a3      	streq	r3, [r4, #24]
 8019a3e:	4620      	mov	r0, r4
 8019a40:	f000 f820 	bl	8019a84 <__sfp>
 8019a44:	6060      	str	r0, [r4, #4]
 8019a46:	4620      	mov	r0, r4
 8019a48:	f000 f81c 	bl	8019a84 <__sfp>
 8019a4c:	60a0      	str	r0, [r4, #8]
 8019a4e:	4620      	mov	r0, r4
 8019a50:	f000 f818 	bl	8019a84 <__sfp>
 8019a54:	2200      	movs	r2, #0
 8019a56:	60e0      	str	r0, [r4, #12]
 8019a58:	2104      	movs	r1, #4
 8019a5a:	6860      	ldr	r0, [r4, #4]
 8019a5c:	f7ff ff82 	bl	8019964 <std>
 8019a60:	68a0      	ldr	r0, [r4, #8]
 8019a62:	2201      	movs	r2, #1
 8019a64:	2109      	movs	r1, #9
 8019a66:	f7ff ff7d 	bl	8019964 <std>
 8019a6a:	68e0      	ldr	r0, [r4, #12]
 8019a6c:	2202      	movs	r2, #2
 8019a6e:	2112      	movs	r1, #18
 8019a70:	f7ff ff78 	bl	8019964 <std>
 8019a74:	2301      	movs	r3, #1
 8019a76:	61a3      	str	r3, [r4, #24]
 8019a78:	e7d2      	b.n	8019a20 <__sinit+0xc>
 8019a7a:	bf00      	nop
 8019a7c:	08021d54 	.word	0x08021d54
 8019a80:	080199ad 	.word	0x080199ad

08019a84 <__sfp>:
 8019a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a86:	4607      	mov	r7, r0
 8019a88:	f7ff ffac 	bl	80199e4 <__sfp_lock_acquire>
 8019a8c:	4b1e      	ldr	r3, [pc, #120]	; (8019b08 <__sfp+0x84>)
 8019a8e:	681e      	ldr	r6, [r3, #0]
 8019a90:	69b3      	ldr	r3, [r6, #24]
 8019a92:	b913      	cbnz	r3, 8019a9a <__sfp+0x16>
 8019a94:	4630      	mov	r0, r6
 8019a96:	f7ff ffbd 	bl	8019a14 <__sinit>
 8019a9a:	3648      	adds	r6, #72	; 0x48
 8019a9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019aa0:	3b01      	subs	r3, #1
 8019aa2:	d503      	bpl.n	8019aac <__sfp+0x28>
 8019aa4:	6833      	ldr	r3, [r6, #0]
 8019aa6:	b30b      	cbz	r3, 8019aec <__sfp+0x68>
 8019aa8:	6836      	ldr	r6, [r6, #0]
 8019aaa:	e7f7      	b.n	8019a9c <__sfp+0x18>
 8019aac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ab0:	b9d5      	cbnz	r5, 8019ae8 <__sfp+0x64>
 8019ab2:	4b16      	ldr	r3, [pc, #88]	; (8019b0c <__sfp+0x88>)
 8019ab4:	60e3      	str	r3, [r4, #12]
 8019ab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019aba:	6665      	str	r5, [r4, #100]	; 0x64
 8019abc:	f000 fbcc 	bl	801a258 <__retarget_lock_init_recursive>
 8019ac0:	f7ff ff96 	bl	80199f0 <__sfp_lock_release>
 8019ac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019ac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019acc:	6025      	str	r5, [r4, #0]
 8019ace:	61a5      	str	r5, [r4, #24]
 8019ad0:	2208      	movs	r2, #8
 8019ad2:	4629      	mov	r1, r5
 8019ad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ad8:	f7fd fae4 	bl	80170a4 <memset>
 8019adc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019ae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ae8:	3468      	adds	r4, #104	; 0x68
 8019aea:	e7d9      	b.n	8019aa0 <__sfp+0x1c>
 8019aec:	2104      	movs	r1, #4
 8019aee:	4638      	mov	r0, r7
 8019af0:	f7ff ff62 	bl	80199b8 <__sfmoreglue>
 8019af4:	4604      	mov	r4, r0
 8019af6:	6030      	str	r0, [r6, #0]
 8019af8:	2800      	cmp	r0, #0
 8019afa:	d1d5      	bne.n	8019aa8 <__sfp+0x24>
 8019afc:	f7ff ff78 	bl	80199f0 <__sfp_lock_release>
 8019b00:	230c      	movs	r3, #12
 8019b02:	603b      	str	r3, [r7, #0]
 8019b04:	e7ee      	b.n	8019ae4 <__sfp+0x60>
 8019b06:	bf00      	nop
 8019b08:	08021d54 	.word	0x08021d54
 8019b0c:	ffff0001 	.word	0xffff0001

08019b10 <fiprintf>:
 8019b10:	b40e      	push	{r1, r2, r3}
 8019b12:	b503      	push	{r0, r1, lr}
 8019b14:	4601      	mov	r1, r0
 8019b16:	ab03      	add	r3, sp, #12
 8019b18:	4805      	ldr	r0, [pc, #20]	; (8019b30 <fiprintf+0x20>)
 8019b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b1e:	6800      	ldr	r0, [r0, #0]
 8019b20:	9301      	str	r3, [sp, #4]
 8019b22:	f001 fab1 	bl	801b088 <_vfiprintf_r>
 8019b26:	b002      	add	sp, #8
 8019b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b2c:	b003      	add	sp, #12
 8019b2e:	4770      	bx	lr
 8019b30:	20000194 	.word	0x20000194

08019b34 <_fwalk_reent>:
 8019b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b38:	4606      	mov	r6, r0
 8019b3a:	4688      	mov	r8, r1
 8019b3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b40:	2700      	movs	r7, #0
 8019b42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b46:	f1b9 0901 	subs.w	r9, r9, #1
 8019b4a:	d505      	bpl.n	8019b58 <_fwalk_reent+0x24>
 8019b4c:	6824      	ldr	r4, [r4, #0]
 8019b4e:	2c00      	cmp	r4, #0
 8019b50:	d1f7      	bne.n	8019b42 <_fwalk_reent+0xe>
 8019b52:	4638      	mov	r0, r7
 8019b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b58:	89ab      	ldrh	r3, [r5, #12]
 8019b5a:	2b01      	cmp	r3, #1
 8019b5c:	d907      	bls.n	8019b6e <_fwalk_reent+0x3a>
 8019b5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b62:	3301      	adds	r3, #1
 8019b64:	d003      	beq.n	8019b6e <_fwalk_reent+0x3a>
 8019b66:	4629      	mov	r1, r5
 8019b68:	4630      	mov	r0, r6
 8019b6a:	47c0      	blx	r8
 8019b6c:	4307      	orrs	r7, r0
 8019b6e:	3568      	adds	r5, #104	; 0x68
 8019b70:	e7e9      	b.n	8019b46 <_fwalk_reent+0x12>

08019b72 <rshift>:
 8019b72:	6903      	ldr	r3, [r0, #16]
 8019b74:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8019b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b7c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019b80:	f100 0414 	add.w	r4, r0, #20
 8019b84:	dd45      	ble.n	8019c12 <rshift+0xa0>
 8019b86:	f011 011f 	ands.w	r1, r1, #31
 8019b8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019b8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019b92:	d10c      	bne.n	8019bae <rshift+0x3c>
 8019b94:	f100 0710 	add.w	r7, r0, #16
 8019b98:	4629      	mov	r1, r5
 8019b9a:	42b1      	cmp	r1, r6
 8019b9c:	d334      	bcc.n	8019c08 <rshift+0x96>
 8019b9e:	1a9b      	subs	r3, r3, r2
 8019ba0:	009b      	lsls	r3, r3, #2
 8019ba2:	1eea      	subs	r2, r5, #3
 8019ba4:	4296      	cmp	r6, r2
 8019ba6:	bf38      	it	cc
 8019ba8:	2300      	movcc	r3, #0
 8019baa:	4423      	add	r3, r4
 8019bac:	e015      	b.n	8019bda <rshift+0x68>
 8019bae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019bb2:	f1c1 0820 	rsb	r8, r1, #32
 8019bb6:	40cf      	lsrs	r7, r1
 8019bb8:	f105 0e04 	add.w	lr, r5, #4
 8019bbc:	46a1      	mov	r9, r4
 8019bbe:	4576      	cmp	r6, lr
 8019bc0:	46f4      	mov	ip, lr
 8019bc2:	d815      	bhi.n	8019bf0 <rshift+0x7e>
 8019bc4:	1a9b      	subs	r3, r3, r2
 8019bc6:	009a      	lsls	r2, r3, #2
 8019bc8:	3a04      	subs	r2, #4
 8019bca:	3501      	adds	r5, #1
 8019bcc:	42ae      	cmp	r6, r5
 8019bce:	bf38      	it	cc
 8019bd0:	2200      	movcc	r2, #0
 8019bd2:	18a3      	adds	r3, r4, r2
 8019bd4:	50a7      	str	r7, [r4, r2]
 8019bd6:	b107      	cbz	r7, 8019bda <rshift+0x68>
 8019bd8:	3304      	adds	r3, #4
 8019bda:	1b1a      	subs	r2, r3, r4
 8019bdc:	42a3      	cmp	r3, r4
 8019bde:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8019be2:	bf08      	it	eq
 8019be4:	2300      	moveq	r3, #0
 8019be6:	6102      	str	r2, [r0, #16]
 8019be8:	bf08      	it	eq
 8019bea:	6143      	streq	r3, [r0, #20]
 8019bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bf0:	f8dc c000 	ldr.w	ip, [ip]
 8019bf4:	fa0c fc08 	lsl.w	ip, ip, r8
 8019bf8:	ea4c 0707 	orr.w	r7, ip, r7
 8019bfc:	f849 7b04 	str.w	r7, [r9], #4
 8019c00:	f85e 7b04 	ldr.w	r7, [lr], #4
 8019c04:	40cf      	lsrs	r7, r1
 8019c06:	e7da      	b.n	8019bbe <rshift+0x4c>
 8019c08:	f851 cb04 	ldr.w	ip, [r1], #4
 8019c0c:	f847 cf04 	str.w	ip, [r7, #4]!
 8019c10:	e7c3      	b.n	8019b9a <rshift+0x28>
 8019c12:	4623      	mov	r3, r4
 8019c14:	e7e1      	b.n	8019bda <rshift+0x68>

08019c16 <__hexdig_fun>:
 8019c16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8019c1a:	2b09      	cmp	r3, #9
 8019c1c:	d802      	bhi.n	8019c24 <__hexdig_fun+0xe>
 8019c1e:	3820      	subs	r0, #32
 8019c20:	b2c0      	uxtb	r0, r0
 8019c22:	4770      	bx	lr
 8019c24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8019c28:	2b05      	cmp	r3, #5
 8019c2a:	d801      	bhi.n	8019c30 <__hexdig_fun+0x1a>
 8019c2c:	3847      	subs	r0, #71	; 0x47
 8019c2e:	e7f7      	b.n	8019c20 <__hexdig_fun+0xa>
 8019c30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019c34:	2b05      	cmp	r3, #5
 8019c36:	d801      	bhi.n	8019c3c <__hexdig_fun+0x26>
 8019c38:	3827      	subs	r0, #39	; 0x27
 8019c3a:	e7f1      	b.n	8019c20 <__hexdig_fun+0xa>
 8019c3c:	2000      	movs	r0, #0
 8019c3e:	4770      	bx	lr

08019c40 <__gethex>:
 8019c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c44:	ed2d 8b02 	vpush	{d8}
 8019c48:	b089      	sub	sp, #36	; 0x24
 8019c4a:	ee08 0a10 	vmov	s16, r0
 8019c4e:	9304      	str	r3, [sp, #16]
 8019c50:	4bbc      	ldr	r3, [pc, #752]	; (8019f44 <__gethex+0x304>)
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	9301      	str	r3, [sp, #4]
 8019c56:	4618      	mov	r0, r3
 8019c58:	468b      	mov	fp, r1
 8019c5a:	4690      	mov	r8, r2
 8019c5c:	f7e6 fac8 	bl	80001f0 <strlen>
 8019c60:	9b01      	ldr	r3, [sp, #4]
 8019c62:	f8db 2000 	ldr.w	r2, [fp]
 8019c66:	4403      	add	r3, r0
 8019c68:	4682      	mov	sl, r0
 8019c6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019c6e:	9305      	str	r3, [sp, #20]
 8019c70:	1c93      	adds	r3, r2, #2
 8019c72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019c76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019c7a:	32fe      	adds	r2, #254	; 0xfe
 8019c7c:	18d1      	adds	r1, r2, r3
 8019c7e:	461f      	mov	r7, r3
 8019c80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019c84:	9100      	str	r1, [sp, #0]
 8019c86:	2830      	cmp	r0, #48	; 0x30
 8019c88:	d0f8      	beq.n	8019c7c <__gethex+0x3c>
 8019c8a:	f7ff ffc4 	bl	8019c16 <__hexdig_fun>
 8019c8e:	4604      	mov	r4, r0
 8019c90:	2800      	cmp	r0, #0
 8019c92:	d13a      	bne.n	8019d0a <__gethex+0xca>
 8019c94:	9901      	ldr	r1, [sp, #4]
 8019c96:	4652      	mov	r2, sl
 8019c98:	4638      	mov	r0, r7
 8019c9a:	f7fe f903 	bl	8017ea4 <strncmp>
 8019c9e:	4605      	mov	r5, r0
 8019ca0:	2800      	cmp	r0, #0
 8019ca2:	d168      	bne.n	8019d76 <__gethex+0x136>
 8019ca4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019ca8:	eb07 060a 	add.w	r6, r7, sl
 8019cac:	f7ff ffb3 	bl	8019c16 <__hexdig_fun>
 8019cb0:	2800      	cmp	r0, #0
 8019cb2:	d062      	beq.n	8019d7a <__gethex+0x13a>
 8019cb4:	4633      	mov	r3, r6
 8019cb6:	7818      	ldrb	r0, [r3, #0]
 8019cb8:	2830      	cmp	r0, #48	; 0x30
 8019cba:	461f      	mov	r7, r3
 8019cbc:	f103 0301 	add.w	r3, r3, #1
 8019cc0:	d0f9      	beq.n	8019cb6 <__gethex+0x76>
 8019cc2:	f7ff ffa8 	bl	8019c16 <__hexdig_fun>
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	fab0 f480 	clz	r4, r0
 8019ccc:	0964      	lsrs	r4, r4, #5
 8019cce:	4635      	mov	r5, r6
 8019cd0:	9300      	str	r3, [sp, #0]
 8019cd2:	463a      	mov	r2, r7
 8019cd4:	4616      	mov	r6, r2
 8019cd6:	3201      	adds	r2, #1
 8019cd8:	7830      	ldrb	r0, [r6, #0]
 8019cda:	f7ff ff9c 	bl	8019c16 <__hexdig_fun>
 8019cde:	2800      	cmp	r0, #0
 8019ce0:	d1f8      	bne.n	8019cd4 <__gethex+0x94>
 8019ce2:	9901      	ldr	r1, [sp, #4]
 8019ce4:	4652      	mov	r2, sl
 8019ce6:	4630      	mov	r0, r6
 8019ce8:	f7fe f8dc 	bl	8017ea4 <strncmp>
 8019cec:	b980      	cbnz	r0, 8019d10 <__gethex+0xd0>
 8019cee:	b94d      	cbnz	r5, 8019d04 <__gethex+0xc4>
 8019cf0:	eb06 050a 	add.w	r5, r6, sl
 8019cf4:	462a      	mov	r2, r5
 8019cf6:	4616      	mov	r6, r2
 8019cf8:	3201      	adds	r2, #1
 8019cfa:	7830      	ldrb	r0, [r6, #0]
 8019cfc:	f7ff ff8b 	bl	8019c16 <__hexdig_fun>
 8019d00:	2800      	cmp	r0, #0
 8019d02:	d1f8      	bne.n	8019cf6 <__gethex+0xb6>
 8019d04:	1bad      	subs	r5, r5, r6
 8019d06:	00ad      	lsls	r5, r5, #2
 8019d08:	e004      	b.n	8019d14 <__gethex+0xd4>
 8019d0a:	2400      	movs	r4, #0
 8019d0c:	4625      	mov	r5, r4
 8019d0e:	e7e0      	b.n	8019cd2 <__gethex+0x92>
 8019d10:	2d00      	cmp	r5, #0
 8019d12:	d1f7      	bne.n	8019d04 <__gethex+0xc4>
 8019d14:	7833      	ldrb	r3, [r6, #0]
 8019d16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019d1a:	2b50      	cmp	r3, #80	; 0x50
 8019d1c:	d13b      	bne.n	8019d96 <__gethex+0x156>
 8019d1e:	7873      	ldrb	r3, [r6, #1]
 8019d20:	2b2b      	cmp	r3, #43	; 0x2b
 8019d22:	d02c      	beq.n	8019d7e <__gethex+0x13e>
 8019d24:	2b2d      	cmp	r3, #45	; 0x2d
 8019d26:	d02e      	beq.n	8019d86 <__gethex+0x146>
 8019d28:	1c71      	adds	r1, r6, #1
 8019d2a:	f04f 0900 	mov.w	r9, #0
 8019d2e:	7808      	ldrb	r0, [r1, #0]
 8019d30:	f7ff ff71 	bl	8019c16 <__hexdig_fun>
 8019d34:	1e43      	subs	r3, r0, #1
 8019d36:	b2db      	uxtb	r3, r3
 8019d38:	2b18      	cmp	r3, #24
 8019d3a:	d82c      	bhi.n	8019d96 <__gethex+0x156>
 8019d3c:	f1a0 0210 	sub.w	r2, r0, #16
 8019d40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019d44:	f7ff ff67 	bl	8019c16 <__hexdig_fun>
 8019d48:	1e43      	subs	r3, r0, #1
 8019d4a:	b2db      	uxtb	r3, r3
 8019d4c:	2b18      	cmp	r3, #24
 8019d4e:	d91d      	bls.n	8019d8c <__gethex+0x14c>
 8019d50:	f1b9 0f00 	cmp.w	r9, #0
 8019d54:	d000      	beq.n	8019d58 <__gethex+0x118>
 8019d56:	4252      	negs	r2, r2
 8019d58:	4415      	add	r5, r2
 8019d5a:	f8cb 1000 	str.w	r1, [fp]
 8019d5e:	b1e4      	cbz	r4, 8019d9a <__gethex+0x15a>
 8019d60:	9b00      	ldr	r3, [sp, #0]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	bf14      	ite	ne
 8019d66:	2700      	movne	r7, #0
 8019d68:	2706      	moveq	r7, #6
 8019d6a:	4638      	mov	r0, r7
 8019d6c:	b009      	add	sp, #36	; 0x24
 8019d6e:	ecbd 8b02 	vpop	{d8}
 8019d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d76:	463e      	mov	r6, r7
 8019d78:	4625      	mov	r5, r4
 8019d7a:	2401      	movs	r4, #1
 8019d7c:	e7ca      	b.n	8019d14 <__gethex+0xd4>
 8019d7e:	f04f 0900 	mov.w	r9, #0
 8019d82:	1cb1      	adds	r1, r6, #2
 8019d84:	e7d3      	b.n	8019d2e <__gethex+0xee>
 8019d86:	f04f 0901 	mov.w	r9, #1
 8019d8a:	e7fa      	b.n	8019d82 <__gethex+0x142>
 8019d8c:	230a      	movs	r3, #10
 8019d8e:	fb03 0202 	mla	r2, r3, r2, r0
 8019d92:	3a10      	subs	r2, #16
 8019d94:	e7d4      	b.n	8019d40 <__gethex+0x100>
 8019d96:	4631      	mov	r1, r6
 8019d98:	e7df      	b.n	8019d5a <__gethex+0x11a>
 8019d9a:	1bf3      	subs	r3, r6, r7
 8019d9c:	3b01      	subs	r3, #1
 8019d9e:	4621      	mov	r1, r4
 8019da0:	2b07      	cmp	r3, #7
 8019da2:	dc0b      	bgt.n	8019dbc <__gethex+0x17c>
 8019da4:	ee18 0a10 	vmov	r0, s16
 8019da8:	f000 fa74 	bl	801a294 <_Balloc>
 8019dac:	4604      	mov	r4, r0
 8019dae:	b940      	cbnz	r0, 8019dc2 <__gethex+0x182>
 8019db0:	4b65      	ldr	r3, [pc, #404]	; (8019f48 <__gethex+0x308>)
 8019db2:	4602      	mov	r2, r0
 8019db4:	21de      	movs	r1, #222	; 0xde
 8019db6:	4865      	ldr	r0, [pc, #404]	; (8019f4c <__gethex+0x30c>)
 8019db8:	f7fe ff38 	bl	8018c2c <__assert_func>
 8019dbc:	3101      	adds	r1, #1
 8019dbe:	105b      	asrs	r3, r3, #1
 8019dc0:	e7ee      	b.n	8019da0 <__gethex+0x160>
 8019dc2:	f100 0914 	add.w	r9, r0, #20
 8019dc6:	f04f 0b00 	mov.w	fp, #0
 8019dca:	f1ca 0301 	rsb	r3, sl, #1
 8019dce:	f8cd 9008 	str.w	r9, [sp, #8]
 8019dd2:	f8cd b000 	str.w	fp, [sp]
 8019dd6:	9306      	str	r3, [sp, #24]
 8019dd8:	42b7      	cmp	r7, r6
 8019dda:	d340      	bcc.n	8019e5e <__gethex+0x21e>
 8019ddc:	9802      	ldr	r0, [sp, #8]
 8019dde:	9b00      	ldr	r3, [sp, #0]
 8019de0:	f840 3b04 	str.w	r3, [r0], #4
 8019de4:	eba0 0009 	sub.w	r0, r0, r9
 8019de8:	1080      	asrs	r0, r0, #2
 8019dea:	0146      	lsls	r6, r0, #5
 8019dec:	6120      	str	r0, [r4, #16]
 8019dee:	4618      	mov	r0, r3
 8019df0:	f000 fb46 	bl	801a480 <__hi0bits>
 8019df4:	1a30      	subs	r0, r6, r0
 8019df6:	f8d8 6000 	ldr.w	r6, [r8]
 8019dfa:	42b0      	cmp	r0, r6
 8019dfc:	dd63      	ble.n	8019ec6 <__gethex+0x286>
 8019dfe:	1b87      	subs	r7, r0, r6
 8019e00:	4639      	mov	r1, r7
 8019e02:	4620      	mov	r0, r4
 8019e04:	f000 fee0 	bl	801abc8 <__any_on>
 8019e08:	4682      	mov	sl, r0
 8019e0a:	b1a8      	cbz	r0, 8019e38 <__gethex+0x1f8>
 8019e0c:	1e7b      	subs	r3, r7, #1
 8019e0e:	1159      	asrs	r1, r3, #5
 8019e10:	f003 021f 	and.w	r2, r3, #31
 8019e14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019e18:	f04f 0a01 	mov.w	sl, #1
 8019e1c:	fa0a f202 	lsl.w	r2, sl, r2
 8019e20:	420a      	tst	r2, r1
 8019e22:	d009      	beq.n	8019e38 <__gethex+0x1f8>
 8019e24:	4553      	cmp	r3, sl
 8019e26:	dd05      	ble.n	8019e34 <__gethex+0x1f4>
 8019e28:	1eb9      	subs	r1, r7, #2
 8019e2a:	4620      	mov	r0, r4
 8019e2c:	f000 fecc 	bl	801abc8 <__any_on>
 8019e30:	2800      	cmp	r0, #0
 8019e32:	d145      	bne.n	8019ec0 <__gethex+0x280>
 8019e34:	f04f 0a02 	mov.w	sl, #2
 8019e38:	4639      	mov	r1, r7
 8019e3a:	4620      	mov	r0, r4
 8019e3c:	f7ff fe99 	bl	8019b72 <rshift>
 8019e40:	443d      	add	r5, r7
 8019e42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019e46:	42ab      	cmp	r3, r5
 8019e48:	da4c      	bge.n	8019ee4 <__gethex+0x2a4>
 8019e4a:	ee18 0a10 	vmov	r0, s16
 8019e4e:	4621      	mov	r1, r4
 8019e50:	f000 fa60 	bl	801a314 <_Bfree>
 8019e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e56:	2300      	movs	r3, #0
 8019e58:	6013      	str	r3, [r2, #0]
 8019e5a:	27a3      	movs	r7, #163	; 0xa3
 8019e5c:	e785      	b.n	8019d6a <__gethex+0x12a>
 8019e5e:	1e73      	subs	r3, r6, #1
 8019e60:	9a05      	ldr	r2, [sp, #20]
 8019e62:	9303      	str	r3, [sp, #12]
 8019e64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019e68:	4293      	cmp	r3, r2
 8019e6a:	d019      	beq.n	8019ea0 <__gethex+0x260>
 8019e6c:	f1bb 0f20 	cmp.w	fp, #32
 8019e70:	d107      	bne.n	8019e82 <__gethex+0x242>
 8019e72:	9b02      	ldr	r3, [sp, #8]
 8019e74:	9a00      	ldr	r2, [sp, #0]
 8019e76:	f843 2b04 	str.w	r2, [r3], #4
 8019e7a:	9302      	str	r3, [sp, #8]
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	9300      	str	r3, [sp, #0]
 8019e80:	469b      	mov	fp, r3
 8019e82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019e86:	f7ff fec6 	bl	8019c16 <__hexdig_fun>
 8019e8a:	9b00      	ldr	r3, [sp, #0]
 8019e8c:	f000 000f 	and.w	r0, r0, #15
 8019e90:	fa00 f00b 	lsl.w	r0, r0, fp
 8019e94:	4303      	orrs	r3, r0
 8019e96:	9300      	str	r3, [sp, #0]
 8019e98:	f10b 0b04 	add.w	fp, fp, #4
 8019e9c:	9b03      	ldr	r3, [sp, #12]
 8019e9e:	e00d      	b.n	8019ebc <__gethex+0x27c>
 8019ea0:	9b03      	ldr	r3, [sp, #12]
 8019ea2:	9a06      	ldr	r2, [sp, #24]
 8019ea4:	4413      	add	r3, r2
 8019ea6:	42bb      	cmp	r3, r7
 8019ea8:	d3e0      	bcc.n	8019e6c <__gethex+0x22c>
 8019eaa:	4618      	mov	r0, r3
 8019eac:	9901      	ldr	r1, [sp, #4]
 8019eae:	9307      	str	r3, [sp, #28]
 8019eb0:	4652      	mov	r2, sl
 8019eb2:	f7fd fff7 	bl	8017ea4 <strncmp>
 8019eb6:	9b07      	ldr	r3, [sp, #28]
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	d1d7      	bne.n	8019e6c <__gethex+0x22c>
 8019ebc:	461e      	mov	r6, r3
 8019ebe:	e78b      	b.n	8019dd8 <__gethex+0x198>
 8019ec0:	f04f 0a03 	mov.w	sl, #3
 8019ec4:	e7b8      	b.n	8019e38 <__gethex+0x1f8>
 8019ec6:	da0a      	bge.n	8019ede <__gethex+0x29e>
 8019ec8:	1a37      	subs	r7, r6, r0
 8019eca:	4621      	mov	r1, r4
 8019ecc:	ee18 0a10 	vmov	r0, s16
 8019ed0:	463a      	mov	r2, r7
 8019ed2:	f000 fc3b 	bl	801a74c <__lshift>
 8019ed6:	1bed      	subs	r5, r5, r7
 8019ed8:	4604      	mov	r4, r0
 8019eda:	f100 0914 	add.w	r9, r0, #20
 8019ede:	f04f 0a00 	mov.w	sl, #0
 8019ee2:	e7ae      	b.n	8019e42 <__gethex+0x202>
 8019ee4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019ee8:	42a8      	cmp	r0, r5
 8019eea:	dd72      	ble.n	8019fd2 <__gethex+0x392>
 8019eec:	1b45      	subs	r5, r0, r5
 8019eee:	42ae      	cmp	r6, r5
 8019ef0:	dc36      	bgt.n	8019f60 <__gethex+0x320>
 8019ef2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019ef6:	2b02      	cmp	r3, #2
 8019ef8:	d02a      	beq.n	8019f50 <__gethex+0x310>
 8019efa:	2b03      	cmp	r3, #3
 8019efc:	d02c      	beq.n	8019f58 <__gethex+0x318>
 8019efe:	2b01      	cmp	r3, #1
 8019f00:	d115      	bne.n	8019f2e <__gethex+0x2ee>
 8019f02:	42ae      	cmp	r6, r5
 8019f04:	d113      	bne.n	8019f2e <__gethex+0x2ee>
 8019f06:	2e01      	cmp	r6, #1
 8019f08:	d10b      	bne.n	8019f22 <__gethex+0x2e2>
 8019f0a:	9a04      	ldr	r2, [sp, #16]
 8019f0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019f10:	6013      	str	r3, [r2, #0]
 8019f12:	2301      	movs	r3, #1
 8019f14:	6123      	str	r3, [r4, #16]
 8019f16:	f8c9 3000 	str.w	r3, [r9]
 8019f1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019f1c:	2762      	movs	r7, #98	; 0x62
 8019f1e:	601c      	str	r4, [r3, #0]
 8019f20:	e723      	b.n	8019d6a <__gethex+0x12a>
 8019f22:	1e71      	subs	r1, r6, #1
 8019f24:	4620      	mov	r0, r4
 8019f26:	f000 fe4f 	bl	801abc8 <__any_on>
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	d1ed      	bne.n	8019f0a <__gethex+0x2ca>
 8019f2e:	ee18 0a10 	vmov	r0, s16
 8019f32:	4621      	mov	r1, r4
 8019f34:	f000 f9ee 	bl	801a314 <_Bfree>
 8019f38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	6013      	str	r3, [r2, #0]
 8019f3e:	2750      	movs	r7, #80	; 0x50
 8019f40:	e713      	b.n	8019d6a <__gethex+0x12a>
 8019f42:	bf00      	nop
 8019f44:	08021fe0 	.word	0x08021fe0
 8019f48:	08021f00 	.word	0x08021f00
 8019f4c:	08021f74 	.word	0x08021f74
 8019f50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d1eb      	bne.n	8019f2e <__gethex+0x2ee>
 8019f56:	e7d8      	b.n	8019f0a <__gethex+0x2ca>
 8019f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d1d5      	bne.n	8019f0a <__gethex+0x2ca>
 8019f5e:	e7e6      	b.n	8019f2e <__gethex+0x2ee>
 8019f60:	1e6f      	subs	r7, r5, #1
 8019f62:	f1ba 0f00 	cmp.w	sl, #0
 8019f66:	d131      	bne.n	8019fcc <__gethex+0x38c>
 8019f68:	b127      	cbz	r7, 8019f74 <__gethex+0x334>
 8019f6a:	4639      	mov	r1, r7
 8019f6c:	4620      	mov	r0, r4
 8019f6e:	f000 fe2b 	bl	801abc8 <__any_on>
 8019f72:	4682      	mov	sl, r0
 8019f74:	117b      	asrs	r3, r7, #5
 8019f76:	2101      	movs	r1, #1
 8019f78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019f7c:	f007 071f 	and.w	r7, r7, #31
 8019f80:	fa01 f707 	lsl.w	r7, r1, r7
 8019f84:	421f      	tst	r7, r3
 8019f86:	4629      	mov	r1, r5
 8019f88:	4620      	mov	r0, r4
 8019f8a:	bf18      	it	ne
 8019f8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8019f90:	1b76      	subs	r6, r6, r5
 8019f92:	f7ff fdee 	bl	8019b72 <rshift>
 8019f96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019f9a:	2702      	movs	r7, #2
 8019f9c:	f1ba 0f00 	cmp.w	sl, #0
 8019fa0:	d048      	beq.n	801a034 <__gethex+0x3f4>
 8019fa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019fa6:	2b02      	cmp	r3, #2
 8019fa8:	d015      	beq.n	8019fd6 <__gethex+0x396>
 8019faa:	2b03      	cmp	r3, #3
 8019fac:	d017      	beq.n	8019fde <__gethex+0x39e>
 8019fae:	2b01      	cmp	r3, #1
 8019fb0:	d109      	bne.n	8019fc6 <__gethex+0x386>
 8019fb2:	f01a 0f02 	tst.w	sl, #2
 8019fb6:	d006      	beq.n	8019fc6 <__gethex+0x386>
 8019fb8:	f8d9 0000 	ldr.w	r0, [r9]
 8019fbc:	ea4a 0a00 	orr.w	sl, sl, r0
 8019fc0:	f01a 0f01 	tst.w	sl, #1
 8019fc4:	d10e      	bne.n	8019fe4 <__gethex+0x3a4>
 8019fc6:	f047 0710 	orr.w	r7, r7, #16
 8019fca:	e033      	b.n	801a034 <__gethex+0x3f4>
 8019fcc:	f04f 0a01 	mov.w	sl, #1
 8019fd0:	e7d0      	b.n	8019f74 <__gethex+0x334>
 8019fd2:	2701      	movs	r7, #1
 8019fd4:	e7e2      	b.n	8019f9c <__gethex+0x35c>
 8019fd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019fd8:	f1c3 0301 	rsb	r3, r3, #1
 8019fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8019fde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d0f0      	beq.n	8019fc6 <__gethex+0x386>
 8019fe4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019fe8:	f104 0314 	add.w	r3, r4, #20
 8019fec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019ff0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019ff4:	f04f 0c00 	mov.w	ip, #0
 8019ff8:	4618      	mov	r0, r3
 8019ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ffe:	f1b2 3fff 	cmp.w	r2, #4294967295
 801a002:	d01c      	beq.n	801a03e <__gethex+0x3fe>
 801a004:	3201      	adds	r2, #1
 801a006:	6002      	str	r2, [r0, #0]
 801a008:	2f02      	cmp	r7, #2
 801a00a:	f104 0314 	add.w	r3, r4, #20
 801a00e:	d13f      	bne.n	801a090 <__gethex+0x450>
 801a010:	f8d8 2000 	ldr.w	r2, [r8]
 801a014:	3a01      	subs	r2, #1
 801a016:	42b2      	cmp	r2, r6
 801a018:	d10a      	bne.n	801a030 <__gethex+0x3f0>
 801a01a:	1171      	asrs	r1, r6, #5
 801a01c:	2201      	movs	r2, #1
 801a01e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a022:	f006 061f 	and.w	r6, r6, #31
 801a026:	fa02 f606 	lsl.w	r6, r2, r6
 801a02a:	421e      	tst	r6, r3
 801a02c:	bf18      	it	ne
 801a02e:	4617      	movne	r7, r2
 801a030:	f047 0720 	orr.w	r7, r7, #32
 801a034:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a036:	601c      	str	r4, [r3, #0]
 801a038:	9b04      	ldr	r3, [sp, #16]
 801a03a:	601d      	str	r5, [r3, #0]
 801a03c:	e695      	b.n	8019d6a <__gethex+0x12a>
 801a03e:	4299      	cmp	r1, r3
 801a040:	f843 cc04 	str.w	ip, [r3, #-4]
 801a044:	d8d8      	bhi.n	8019ff8 <__gethex+0x3b8>
 801a046:	68a3      	ldr	r3, [r4, #8]
 801a048:	459b      	cmp	fp, r3
 801a04a:	db19      	blt.n	801a080 <__gethex+0x440>
 801a04c:	6861      	ldr	r1, [r4, #4]
 801a04e:	ee18 0a10 	vmov	r0, s16
 801a052:	3101      	adds	r1, #1
 801a054:	f000 f91e 	bl	801a294 <_Balloc>
 801a058:	4681      	mov	r9, r0
 801a05a:	b918      	cbnz	r0, 801a064 <__gethex+0x424>
 801a05c:	4b1a      	ldr	r3, [pc, #104]	; (801a0c8 <__gethex+0x488>)
 801a05e:	4602      	mov	r2, r0
 801a060:	2184      	movs	r1, #132	; 0x84
 801a062:	e6a8      	b.n	8019db6 <__gethex+0x176>
 801a064:	6922      	ldr	r2, [r4, #16]
 801a066:	3202      	adds	r2, #2
 801a068:	f104 010c 	add.w	r1, r4, #12
 801a06c:	0092      	lsls	r2, r2, #2
 801a06e:	300c      	adds	r0, #12
 801a070:	f7fc fff0 	bl	8017054 <memcpy>
 801a074:	4621      	mov	r1, r4
 801a076:	ee18 0a10 	vmov	r0, s16
 801a07a:	f000 f94b 	bl	801a314 <_Bfree>
 801a07e:	464c      	mov	r4, r9
 801a080:	6923      	ldr	r3, [r4, #16]
 801a082:	1c5a      	adds	r2, r3, #1
 801a084:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a088:	6122      	str	r2, [r4, #16]
 801a08a:	2201      	movs	r2, #1
 801a08c:	615a      	str	r2, [r3, #20]
 801a08e:	e7bb      	b.n	801a008 <__gethex+0x3c8>
 801a090:	6922      	ldr	r2, [r4, #16]
 801a092:	455a      	cmp	r2, fp
 801a094:	dd0b      	ble.n	801a0ae <__gethex+0x46e>
 801a096:	2101      	movs	r1, #1
 801a098:	4620      	mov	r0, r4
 801a09a:	f7ff fd6a 	bl	8019b72 <rshift>
 801a09e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801a0a2:	3501      	adds	r5, #1
 801a0a4:	42ab      	cmp	r3, r5
 801a0a6:	f6ff aed0 	blt.w	8019e4a <__gethex+0x20a>
 801a0aa:	2701      	movs	r7, #1
 801a0ac:	e7c0      	b.n	801a030 <__gethex+0x3f0>
 801a0ae:	f016 061f 	ands.w	r6, r6, #31
 801a0b2:	d0fa      	beq.n	801a0aa <__gethex+0x46a>
 801a0b4:	449a      	add	sl, r3
 801a0b6:	f1c6 0620 	rsb	r6, r6, #32
 801a0ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801a0be:	f000 f9df 	bl	801a480 <__hi0bits>
 801a0c2:	42b0      	cmp	r0, r6
 801a0c4:	dbe7      	blt.n	801a096 <__gethex+0x456>
 801a0c6:	e7f0      	b.n	801a0aa <__gethex+0x46a>
 801a0c8:	08021f00 	.word	0x08021f00

0801a0cc <L_shift>:
 801a0cc:	f1c2 0208 	rsb	r2, r2, #8
 801a0d0:	0092      	lsls	r2, r2, #2
 801a0d2:	b570      	push	{r4, r5, r6, lr}
 801a0d4:	f1c2 0620 	rsb	r6, r2, #32
 801a0d8:	6843      	ldr	r3, [r0, #4]
 801a0da:	6804      	ldr	r4, [r0, #0]
 801a0dc:	fa03 f506 	lsl.w	r5, r3, r6
 801a0e0:	432c      	orrs	r4, r5
 801a0e2:	40d3      	lsrs	r3, r2
 801a0e4:	6004      	str	r4, [r0, #0]
 801a0e6:	f840 3f04 	str.w	r3, [r0, #4]!
 801a0ea:	4288      	cmp	r0, r1
 801a0ec:	d3f4      	bcc.n	801a0d8 <L_shift+0xc>
 801a0ee:	bd70      	pop	{r4, r5, r6, pc}

0801a0f0 <__match>:
 801a0f0:	b530      	push	{r4, r5, lr}
 801a0f2:	6803      	ldr	r3, [r0, #0]
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a0fa:	b914      	cbnz	r4, 801a102 <__match+0x12>
 801a0fc:	6003      	str	r3, [r0, #0]
 801a0fe:	2001      	movs	r0, #1
 801a100:	bd30      	pop	{r4, r5, pc}
 801a102:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a106:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801a10a:	2d19      	cmp	r5, #25
 801a10c:	bf98      	it	ls
 801a10e:	3220      	addls	r2, #32
 801a110:	42a2      	cmp	r2, r4
 801a112:	d0f0      	beq.n	801a0f6 <__match+0x6>
 801a114:	2000      	movs	r0, #0
 801a116:	e7f3      	b.n	801a100 <__match+0x10>

0801a118 <__hexnan>:
 801a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a11c:	680b      	ldr	r3, [r1, #0]
 801a11e:	6801      	ldr	r1, [r0, #0]
 801a120:	115e      	asrs	r6, r3, #5
 801a122:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801a126:	f013 031f 	ands.w	r3, r3, #31
 801a12a:	b087      	sub	sp, #28
 801a12c:	bf18      	it	ne
 801a12e:	3604      	addne	r6, #4
 801a130:	2500      	movs	r5, #0
 801a132:	1f37      	subs	r7, r6, #4
 801a134:	4682      	mov	sl, r0
 801a136:	4690      	mov	r8, r2
 801a138:	9301      	str	r3, [sp, #4]
 801a13a:	f846 5c04 	str.w	r5, [r6, #-4]
 801a13e:	46b9      	mov	r9, r7
 801a140:	463c      	mov	r4, r7
 801a142:	9502      	str	r5, [sp, #8]
 801a144:	46ab      	mov	fp, r5
 801a146:	784a      	ldrb	r2, [r1, #1]
 801a148:	1c4b      	adds	r3, r1, #1
 801a14a:	9303      	str	r3, [sp, #12]
 801a14c:	b342      	cbz	r2, 801a1a0 <__hexnan+0x88>
 801a14e:	4610      	mov	r0, r2
 801a150:	9105      	str	r1, [sp, #20]
 801a152:	9204      	str	r2, [sp, #16]
 801a154:	f7ff fd5f 	bl	8019c16 <__hexdig_fun>
 801a158:	2800      	cmp	r0, #0
 801a15a:	d14f      	bne.n	801a1fc <__hexnan+0xe4>
 801a15c:	9a04      	ldr	r2, [sp, #16]
 801a15e:	9905      	ldr	r1, [sp, #20]
 801a160:	2a20      	cmp	r2, #32
 801a162:	d818      	bhi.n	801a196 <__hexnan+0x7e>
 801a164:	9b02      	ldr	r3, [sp, #8]
 801a166:	459b      	cmp	fp, r3
 801a168:	dd13      	ble.n	801a192 <__hexnan+0x7a>
 801a16a:	454c      	cmp	r4, r9
 801a16c:	d206      	bcs.n	801a17c <__hexnan+0x64>
 801a16e:	2d07      	cmp	r5, #7
 801a170:	dc04      	bgt.n	801a17c <__hexnan+0x64>
 801a172:	462a      	mov	r2, r5
 801a174:	4649      	mov	r1, r9
 801a176:	4620      	mov	r0, r4
 801a178:	f7ff ffa8 	bl	801a0cc <L_shift>
 801a17c:	4544      	cmp	r4, r8
 801a17e:	d950      	bls.n	801a222 <__hexnan+0x10a>
 801a180:	2300      	movs	r3, #0
 801a182:	f1a4 0904 	sub.w	r9, r4, #4
 801a186:	f844 3c04 	str.w	r3, [r4, #-4]
 801a18a:	f8cd b008 	str.w	fp, [sp, #8]
 801a18e:	464c      	mov	r4, r9
 801a190:	461d      	mov	r5, r3
 801a192:	9903      	ldr	r1, [sp, #12]
 801a194:	e7d7      	b.n	801a146 <__hexnan+0x2e>
 801a196:	2a29      	cmp	r2, #41	; 0x29
 801a198:	d156      	bne.n	801a248 <__hexnan+0x130>
 801a19a:	3102      	adds	r1, #2
 801a19c:	f8ca 1000 	str.w	r1, [sl]
 801a1a0:	f1bb 0f00 	cmp.w	fp, #0
 801a1a4:	d050      	beq.n	801a248 <__hexnan+0x130>
 801a1a6:	454c      	cmp	r4, r9
 801a1a8:	d206      	bcs.n	801a1b8 <__hexnan+0xa0>
 801a1aa:	2d07      	cmp	r5, #7
 801a1ac:	dc04      	bgt.n	801a1b8 <__hexnan+0xa0>
 801a1ae:	462a      	mov	r2, r5
 801a1b0:	4649      	mov	r1, r9
 801a1b2:	4620      	mov	r0, r4
 801a1b4:	f7ff ff8a 	bl	801a0cc <L_shift>
 801a1b8:	4544      	cmp	r4, r8
 801a1ba:	d934      	bls.n	801a226 <__hexnan+0x10e>
 801a1bc:	f1a8 0204 	sub.w	r2, r8, #4
 801a1c0:	4623      	mov	r3, r4
 801a1c2:	f853 1b04 	ldr.w	r1, [r3], #4
 801a1c6:	f842 1f04 	str.w	r1, [r2, #4]!
 801a1ca:	429f      	cmp	r7, r3
 801a1cc:	d2f9      	bcs.n	801a1c2 <__hexnan+0xaa>
 801a1ce:	1b3b      	subs	r3, r7, r4
 801a1d0:	f023 0303 	bic.w	r3, r3, #3
 801a1d4:	3304      	adds	r3, #4
 801a1d6:	3401      	adds	r4, #1
 801a1d8:	3e03      	subs	r6, #3
 801a1da:	42b4      	cmp	r4, r6
 801a1dc:	bf88      	it	hi
 801a1de:	2304      	movhi	r3, #4
 801a1e0:	4443      	add	r3, r8
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	f843 2b04 	str.w	r2, [r3], #4
 801a1e8:	429f      	cmp	r7, r3
 801a1ea:	d2fb      	bcs.n	801a1e4 <__hexnan+0xcc>
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	b91b      	cbnz	r3, 801a1f8 <__hexnan+0xe0>
 801a1f0:	4547      	cmp	r7, r8
 801a1f2:	d127      	bne.n	801a244 <__hexnan+0x12c>
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	603b      	str	r3, [r7, #0]
 801a1f8:	2005      	movs	r0, #5
 801a1fa:	e026      	b.n	801a24a <__hexnan+0x132>
 801a1fc:	3501      	adds	r5, #1
 801a1fe:	2d08      	cmp	r5, #8
 801a200:	f10b 0b01 	add.w	fp, fp, #1
 801a204:	dd06      	ble.n	801a214 <__hexnan+0xfc>
 801a206:	4544      	cmp	r4, r8
 801a208:	d9c3      	bls.n	801a192 <__hexnan+0x7a>
 801a20a:	2300      	movs	r3, #0
 801a20c:	f844 3c04 	str.w	r3, [r4, #-4]
 801a210:	2501      	movs	r5, #1
 801a212:	3c04      	subs	r4, #4
 801a214:	6822      	ldr	r2, [r4, #0]
 801a216:	f000 000f 	and.w	r0, r0, #15
 801a21a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801a21e:	6022      	str	r2, [r4, #0]
 801a220:	e7b7      	b.n	801a192 <__hexnan+0x7a>
 801a222:	2508      	movs	r5, #8
 801a224:	e7b5      	b.n	801a192 <__hexnan+0x7a>
 801a226:	9b01      	ldr	r3, [sp, #4]
 801a228:	2b00      	cmp	r3, #0
 801a22a:	d0df      	beq.n	801a1ec <__hexnan+0xd4>
 801a22c:	f04f 32ff 	mov.w	r2, #4294967295
 801a230:	f1c3 0320 	rsb	r3, r3, #32
 801a234:	fa22 f303 	lsr.w	r3, r2, r3
 801a238:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a23c:	401a      	ands	r2, r3
 801a23e:	f846 2c04 	str.w	r2, [r6, #-4]
 801a242:	e7d3      	b.n	801a1ec <__hexnan+0xd4>
 801a244:	3f04      	subs	r7, #4
 801a246:	e7d1      	b.n	801a1ec <__hexnan+0xd4>
 801a248:	2004      	movs	r0, #4
 801a24a:	b007      	add	sp, #28
 801a24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a250 <_localeconv_r>:
 801a250:	4800      	ldr	r0, [pc, #0]	; (801a254 <_localeconv_r+0x4>)
 801a252:	4770      	bx	lr
 801a254:	200002ec 	.word	0x200002ec

0801a258 <__retarget_lock_init_recursive>:
 801a258:	4770      	bx	lr

0801a25a <__retarget_lock_acquire_recursive>:
 801a25a:	4770      	bx	lr

0801a25c <__retarget_lock_release_recursive>:
 801a25c:	4770      	bx	lr
	...

0801a260 <malloc>:
 801a260:	4b02      	ldr	r3, [pc, #8]	; (801a26c <malloc+0xc>)
 801a262:	4601      	mov	r1, r0
 801a264:	6818      	ldr	r0, [r3, #0]
 801a266:	f000 bd2f 	b.w	801acc8 <_malloc_r>
 801a26a:	bf00      	nop
 801a26c:	20000194 	.word	0x20000194

0801a270 <__ascii_mbtowc>:
 801a270:	b082      	sub	sp, #8
 801a272:	b901      	cbnz	r1, 801a276 <__ascii_mbtowc+0x6>
 801a274:	a901      	add	r1, sp, #4
 801a276:	b142      	cbz	r2, 801a28a <__ascii_mbtowc+0x1a>
 801a278:	b14b      	cbz	r3, 801a28e <__ascii_mbtowc+0x1e>
 801a27a:	7813      	ldrb	r3, [r2, #0]
 801a27c:	600b      	str	r3, [r1, #0]
 801a27e:	7812      	ldrb	r2, [r2, #0]
 801a280:	1e10      	subs	r0, r2, #0
 801a282:	bf18      	it	ne
 801a284:	2001      	movne	r0, #1
 801a286:	b002      	add	sp, #8
 801a288:	4770      	bx	lr
 801a28a:	4610      	mov	r0, r2
 801a28c:	e7fb      	b.n	801a286 <__ascii_mbtowc+0x16>
 801a28e:	f06f 0001 	mvn.w	r0, #1
 801a292:	e7f8      	b.n	801a286 <__ascii_mbtowc+0x16>

0801a294 <_Balloc>:
 801a294:	b570      	push	{r4, r5, r6, lr}
 801a296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a298:	4604      	mov	r4, r0
 801a29a:	460d      	mov	r5, r1
 801a29c:	b976      	cbnz	r6, 801a2bc <_Balloc+0x28>
 801a29e:	2010      	movs	r0, #16
 801a2a0:	f7ff ffde 	bl	801a260 <malloc>
 801a2a4:	4602      	mov	r2, r0
 801a2a6:	6260      	str	r0, [r4, #36]	; 0x24
 801a2a8:	b920      	cbnz	r0, 801a2b4 <_Balloc+0x20>
 801a2aa:	4b18      	ldr	r3, [pc, #96]	; (801a30c <_Balloc+0x78>)
 801a2ac:	4818      	ldr	r0, [pc, #96]	; (801a310 <_Balloc+0x7c>)
 801a2ae:	2166      	movs	r1, #102	; 0x66
 801a2b0:	f7fe fcbc 	bl	8018c2c <__assert_func>
 801a2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a2b8:	6006      	str	r6, [r0, #0]
 801a2ba:	60c6      	str	r6, [r0, #12]
 801a2bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a2be:	68f3      	ldr	r3, [r6, #12]
 801a2c0:	b183      	cbz	r3, 801a2e4 <_Balloc+0x50>
 801a2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a2c4:	68db      	ldr	r3, [r3, #12]
 801a2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a2ca:	b9b8      	cbnz	r0, 801a2fc <_Balloc+0x68>
 801a2cc:	2101      	movs	r1, #1
 801a2ce:	fa01 f605 	lsl.w	r6, r1, r5
 801a2d2:	1d72      	adds	r2, r6, #5
 801a2d4:	0092      	lsls	r2, r2, #2
 801a2d6:	4620      	mov	r0, r4
 801a2d8:	f000 fc97 	bl	801ac0a <_calloc_r>
 801a2dc:	b160      	cbz	r0, 801a2f8 <_Balloc+0x64>
 801a2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a2e2:	e00e      	b.n	801a302 <_Balloc+0x6e>
 801a2e4:	2221      	movs	r2, #33	; 0x21
 801a2e6:	2104      	movs	r1, #4
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	f000 fc8e 	bl	801ac0a <_calloc_r>
 801a2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a2f0:	60f0      	str	r0, [r6, #12]
 801a2f2:	68db      	ldr	r3, [r3, #12]
 801a2f4:	2b00      	cmp	r3, #0
 801a2f6:	d1e4      	bne.n	801a2c2 <_Balloc+0x2e>
 801a2f8:	2000      	movs	r0, #0
 801a2fa:	bd70      	pop	{r4, r5, r6, pc}
 801a2fc:	6802      	ldr	r2, [r0, #0]
 801a2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a302:	2300      	movs	r3, #0
 801a304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a308:	e7f7      	b.n	801a2fa <_Balloc+0x66>
 801a30a:	bf00      	nop
 801a30c:	08021d91 	.word	0x08021d91
 801a310:	08021ff4 	.word	0x08021ff4

0801a314 <_Bfree>:
 801a314:	b570      	push	{r4, r5, r6, lr}
 801a316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a318:	4605      	mov	r5, r0
 801a31a:	460c      	mov	r4, r1
 801a31c:	b976      	cbnz	r6, 801a33c <_Bfree+0x28>
 801a31e:	2010      	movs	r0, #16
 801a320:	f7ff ff9e 	bl	801a260 <malloc>
 801a324:	4602      	mov	r2, r0
 801a326:	6268      	str	r0, [r5, #36]	; 0x24
 801a328:	b920      	cbnz	r0, 801a334 <_Bfree+0x20>
 801a32a:	4b09      	ldr	r3, [pc, #36]	; (801a350 <_Bfree+0x3c>)
 801a32c:	4809      	ldr	r0, [pc, #36]	; (801a354 <_Bfree+0x40>)
 801a32e:	218a      	movs	r1, #138	; 0x8a
 801a330:	f7fe fc7c 	bl	8018c2c <__assert_func>
 801a334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a338:	6006      	str	r6, [r0, #0]
 801a33a:	60c6      	str	r6, [r0, #12]
 801a33c:	b13c      	cbz	r4, 801a34e <_Bfree+0x3a>
 801a33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a340:	6862      	ldr	r2, [r4, #4]
 801a342:	68db      	ldr	r3, [r3, #12]
 801a344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a348:	6021      	str	r1, [r4, #0]
 801a34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a34e:	bd70      	pop	{r4, r5, r6, pc}
 801a350:	08021d91 	.word	0x08021d91
 801a354:	08021ff4 	.word	0x08021ff4

0801a358 <__multadd>:
 801a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a35c:	690e      	ldr	r6, [r1, #16]
 801a35e:	4607      	mov	r7, r0
 801a360:	4698      	mov	r8, r3
 801a362:	460c      	mov	r4, r1
 801a364:	f101 0014 	add.w	r0, r1, #20
 801a368:	2300      	movs	r3, #0
 801a36a:	6805      	ldr	r5, [r0, #0]
 801a36c:	b2a9      	uxth	r1, r5
 801a36e:	fb02 8101 	mla	r1, r2, r1, r8
 801a372:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a376:	0c2d      	lsrs	r5, r5, #16
 801a378:	fb02 c505 	mla	r5, r2, r5, ip
 801a37c:	b289      	uxth	r1, r1
 801a37e:	3301      	adds	r3, #1
 801a380:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a384:	429e      	cmp	r6, r3
 801a386:	f840 1b04 	str.w	r1, [r0], #4
 801a38a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a38e:	dcec      	bgt.n	801a36a <__multadd+0x12>
 801a390:	f1b8 0f00 	cmp.w	r8, #0
 801a394:	d022      	beq.n	801a3dc <__multadd+0x84>
 801a396:	68a3      	ldr	r3, [r4, #8]
 801a398:	42b3      	cmp	r3, r6
 801a39a:	dc19      	bgt.n	801a3d0 <__multadd+0x78>
 801a39c:	6861      	ldr	r1, [r4, #4]
 801a39e:	4638      	mov	r0, r7
 801a3a0:	3101      	adds	r1, #1
 801a3a2:	f7ff ff77 	bl	801a294 <_Balloc>
 801a3a6:	4605      	mov	r5, r0
 801a3a8:	b928      	cbnz	r0, 801a3b6 <__multadd+0x5e>
 801a3aa:	4602      	mov	r2, r0
 801a3ac:	4b0d      	ldr	r3, [pc, #52]	; (801a3e4 <__multadd+0x8c>)
 801a3ae:	480e      	ldr	r0, [pc, #56]	; (801a3e8 <__multadd+0x90>)
 801a3b0:	21b5      	movs	r1, #181	; 0xb5
 801a3b2:	f7fe fc3b 	bl	8018c2c <__assert_func>
 801a3b6:	6922      	ldr	r2, [r4, #16]
 801a3b8:	3202      	adds	r2, #2
 801a3ba:	f104 010c 	add.w	r1, r4, #12
 801a3be:	0092      	lsls	r2, r2, #2
 801a3c0:	300c      	adds	r0, #12
 801a3c2:	f7fc fe47 	bl	8017054 <memcpy>
 801a3c6:	4621      	mov	r1, r4
 801a3c8:	4638      	mov	r0, r7
 801a3ca:	f7ff ffa3 	bl	801a314 <_Bfree>
 801a3ce:	462c      	mov	r4, r5
 801a3d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a3d4:	3601      	adds	r6, #1
 801a3d6:	f8c3 8014 	str.w	r8, [r3, #20]
 801a3da:	6126      	str	r6, [r4, #16]
 801a3dc:	4620      	mov	r0, r4
 801a3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3e2:	bf00      	nop
 801a3e4:	08021f00 	.word	0x08021f00
 801a3e8:	08021ff4 	.word	0x08021ff4

0801a3ec <__s2b>:
 801a3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3f0:	460c      	mov	r4, r1
 801a3f2:	4615      	mov	r5, r2
 801a3f4:	461f      	mov	r7, r3
 801a3f6:	2209      	movs	r2, #9
 801a3f8:	3308      	adds	r3, #8
 801a3fa:	4606      	mov	r6, r0
 801a3fc:	fb93 f3f2 	sdiv	r3, r3, r2
 801a400:	2100      	movs	r1, #0
 801a402:	2201      	movs	r2, #1
 801a404:	429a      	cmp	r2, r3
 801a406:	db09      	blt.n	801a41c <__s2b+0x30>
 801a408:	4630      	mov	r0, r6
 801a40a:	f7ff ff43 	bl	801a294 <_Balloc>
 801a40e:	b940      	cbnz	r0, 801a422 <__s2b+0x36>
 801a410:	4602      	mov	r2, r0
 801a412:	4b19      	ldr	r3, [pc, #100]	; (801a478 <__s2b+0x8c>)
 801a414:	4819      	ldr	r0, [pc, #100]	; (801a47c <__s2b+0x90>)
 801a416:	21ce      	movs	r1, #206	; 0xce
 801a418:	f7fe fc08 	bl	8018c2c <__assert_func>
 801a41c:	0052      	lsls	r2, r2, #1
 801a41e:	3101      	adds	r1, #1
 801a420:	e7f0      	b.n	801a404 <__s2b+0x18>
 801a422:	9b08      	ldr	r3, [sp, #32]
 801a424:	6143      	str	r3, [r0, #20]
 801a426:	2d09      	cmp	r5, #9
 801a428:	f04f 0301 	mov.w	r3, #1
 801a42c:	6103      	str	r3, [r0, #16]
 801a42e:	dd16      	ble.n	801a45e <__s2b+0x72>
 801a430:	f104 0909 	add.w	r9, r4, #9
 801a434:	46c8      	mov	r8, r9
 801a436:	442c      	add	r4, r5
 801a438:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a43c:	4601      	mov	r1, r0
 801a43e:	3b30      	subs	r3, #48	; 0x30
 801a440:	220a      	movs	r2, #10
 801a442:	4630      	mov	r0, r6
 801a444:	f7ff ff88 	bl	801a358 <__multadd>
 801a448:	45a0      	cmp	r8, r4
 801a44a:	d1f5      	bne.n	801a438 <__s2b+0x4c>
 801a44c:	f1a5 0408 	sub.w	r4, r5, #8
 801a450:	444c      	add	r4, r9
 801a452:	1b2d      	subs	r5, r5, r4
 801a454:	1963      	adds	r3, r4, r5
 801a456:	42bb      	cmp	r3, r7
 801a458:	db04      	blt.n	801a464 <__s2b+0x78>
 801a45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a45e:	340a      	adds	r4, #10
 801a460:	2509      	movs	r5, #9
 801a462:	e7f6      	b.n	801a452 <__s2b+0x66>
 801a464:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a468:	4601      	mov	r1, r0
 801a46a:	3b30      	subs	r3, #48	; 0x30
 801a46c:	220a      	movs	r2, #10
 801a46e:	4630      	mov	r0, r6
 801a470:	f7ff ff72 	bl	801a358 <__multadd>
 801a474:	e7ee      	b.n	801a454 <__s2b+0x68>
 801a476:	bf00      	nop
 801a478:	08021f00 	.word	0x08021f00
 801a47c:	08021ff4 	.word	0x08021ff4

0801a480 <__hi0bits>:
 801a480:	0c03      	lsrs	r3, r0, #16
 801a482:	041b      	lsls	r3, r3, #16
 801a484:	b9d3      	cbnz	r3, 801a4bc <__hi0bits+0x3c>
 801a486:	0400      	lsls	r0, r0, #16
 801a488:	2310      	movs	r3, #16
 801a48a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a48e:	bf04      	itt	eq
 801a490:	0200      	lsleq	r0, r0, #8
 801a492:	3308      	addeq	r3, #8
 801a494:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a498:	bf04      	itt	eq
 801a49a:	0100      	lsleq	r0, r0, #4
 801a49c:	3304      	addeq	r3, #4
 801a49e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a4a2:	bf04      	itt	eq
 801a4a4:	0080      	lsleq	r0, r0, #2
 801a4a6:	3302      	addeq	r3, #2
 801a4a8:	2800      	cmp	r0, #0
 801a4aa:	db05      	blt.n	801a4b8 <__hi0bits+0x38>
 801a4ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a4b0:	f103 0301 	add.w	r3, r3, #1
 801a4b4:	bf08      	it	eq
 801a4b6:	2320      	moveq	r3, #32
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	4770      	bx	lr
 801a4bc:	2300      	movs	r3, #0
 801a4be:	e7e4      	b.n	801a48a <__hi0bits+0xa>

0801a4c0 <__lo0bits>:
 801a4c0:	6803      	ldr	r3, [r0, #0]
 801a4c2:	f013 0207 	ands.w	r2, r3, #7
 801a4c6:	4601      	mov	r1, r0
 801a4c8:	d00b      	beq.n	801a4e2 <__lo0bits+0x22>
 801a4ca:	07da      	lsls	r2, r3, #31
 801a4cc:	d424      	bmi.n	801a518 <__lo0bits+0x58>
 801a4ce:	0798      	lsls	r0, r3, #30
 801a4d0:	bf49      	itett	mi
 801a4d2:	085b      	lsrmi	r3, r3, #1
 801a4d4:	089b      	lsrpl	r3, r3, #2
 801a4d6:	2001      	movmi	r0, #1
 801a4d8:	600b      	strmi	r3, [r1, #0]
 801a4da:	bf5c      	itt	pl
 801a4dc:	600b      	strpl	r3, [r1, #0]
 801a4de:	2002      	movpl	r0, #2
 801a4e0:	4770      	bx	lr
 801a4e2:	b298      	uxth	r0, r3
 801a4e4:	b9b0      	cbnz	r0, 801a514 <__lo0bits+0x54>
 801a4e6:	0c1b      	lsrs	r3, r3, #16
 801a4e8:	2010      	movs	r0, #16
 801a4ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a4ee:	bf04      	itt	eq
 801a4f0:	0a1b      	lsreq	r3, r3, #8
 801a4f2:	3008      	addeq	r0, #8
 801a4f4:	071a      	lsls	r2, r3, #28
 801a4f6:	bf04      	itt	eq
 801a4f8:	091b      	lsreq	r3, r3, #4
 801a4fa:	3004      	addeq	r0, #4
 801a4fc:	079a      	lsls	r2, r3, #30
 801a4fe:	bf04      	itt	eq
 801a500:	089b      	lsreq	r3, r3, #2
 801a502:	3002      	addeq	r0, #2
 801a504:	07da      	lsls	r2, r3, #31
 801a506:	d403      	bmi.n	801a510 <__lo0bits+0x50>
 801a508:	085b      	lsrs	r3, r3, #1
 801a50a:	f100 0001 	add.w	r0, r0, #1
 801a50e:	d005      	beq.n	801a51c <__lo0bits+0x5c>
 801a510:	600b      	str	r3, [r1, #0]
 801a512:	4770      	bx	lr
 801a514:	4610      	mov	r0, r2
 801a516:	e7e8      	b.n	801a4ea <__lo0bits+0x2a>
 801a518:	2000      	movs	r0, #0
 801a51a:	4770      	bx	lr
 801a51c:	2020      	movs	r0, #32
 801a51e:	4770      	bx	lr

0801a520 <__i2b>:
 801a520:	b510      	push	{r4, lr}
 801a522:	460c      	mov	r4, r1
 801a524:	2101      	movs	r1, #1
 801a526:	f7ff feb5 	bl	801a294 <_Balloc>
 801a52a:	4602      	mov	r2, r0
 801a52c:	b928      	cbnz	r0, 801a53a <__i2b+0x1a>
 801a52e:	4b05      	ldr	r3, [pc, #20]	; (801a544 <__i2b+0x24>)
 801a530:	4805      	ldr	r0, [pc, #20]	; (801a548 <__i2b+0x28>)
 801a532:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a536:	f7fe fb79 	bl	8018c2c <__assert_func>
 801a53a:	2301      	movs	r3, #1
 801a53c:	6144      	str	r4, [r0, #20]
 801a53e:	6103      	str	r3, [r0, #16]
 801a540:	bd10      	pop	{r4, pc}
 801a542:	bf00      	nop
 801a544:	08021f00 	.word	0x08021f00
 801a548:	08021ff4 	.word	0x08021ff4

0801a54c <__multiply>:
 801a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a550:	4614      	mov	r4, r2
 801a552:	690a      	ldr	r2, [r1, #16]
 801a554:	6923      	ldr	r3, [r4, #16]
 801a556:	429a      	cmp	r2, r3
 801a558:	bfb8      	it	lt
 801a55a:	460b      	movlt	r3, r1
 801a55c:	460d      	mov	r5, r1
 801a55e:	bfbc      	itt	lt
 801a560:	4625      	movlt	r5, r4
 801a562:	461c      	movlt	r4, r3
 801a564:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a568:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a56c:	68ab      	ldr	r3, [r5, #8]
 801a56e:	6869      	ldr	r1, [r5, #4]
 801a570:	eb0a 0709 	add.w	r7, sl, r9
 801a574:	42bb      	cmp	r3, r7
 801a576:	b085      	sub	sp, #20
 801a578:	bfb8      	it	lt
 801a57a:	3101      	addlt	r1, #1
 801a57c:	f7ff fe8a 	bl	801a294 <_Balloc>
 801a580:	b930      	cbnz	r0, 801a590 <__multiply+0x44>
 801a582:	4602      	mov	r2, r0
 801a584:	4b42      	ldr	r3, [pc, #264]	; (801a690 <__multiply+0x144>)
 801a586:	4843      	ldr	r0, [pc, #268]	; (801a694 <__multiply+0x148>)
 801a588:	f240 115d 	movw	r1, #349	; 0x15d
 801a58c:	f7fe fb4e 	bl	8018c2c <__assert_func>
 801a590:	f100 0614 	add.w	r6, r0, #20
 801a594:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a598:	4633      	mov	r3, r6
 801a59a:	2200      	movs	r2, #0
 801a59c:	4543      	cmp	r3, r8
 801a59e:	d31e      	bcc.n	801a5de <__multiply+0x92>
 801a5a0:	f105 0c14 	add.w	ip, r5, #20
 801a5a4:	f104 0314 	add.w	r3, r4, #20
 801a5a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a5ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a5b0:	9202      	str	r2, [sp, #8]
 801a5b2:	ebac 0205 	sub.w	r2, ip, r5
 801a5b6:	3a15      	subs	r2, #21
 801a5b8:	f022 0203 	bic.w	r2, r2, #3
 801a5bc:	3204      	adds	r2, #4
 801a5be:	f105 0115 	add.w	r1, r5, #21
 801a5c2:	458c      	cmp	ip, r1
 801a5c4:	bf38      	it	cc
 801a5c6:	2204      	movcc	r2, #4
 801a5c8:	9201      	str	r2, [sp, #4]
 801a5ca:	9a02      	ldr	r2, [sp, #8]
 801a5cc:	9303      	str	r3, [sp, #12]
 801a5ce:	429a      	cmp	r2, r3
 801a5d0:	d808      	bhi.n	801a5e4 <__multiply+0x98>
 801a5d2:	2f00      	cmp	r7, #0
 801a5d4:	dc55      	bgt.n	801a682 <__multiply+0x136>
 801a5d6:	6107      	str	r7, [r0, #16]
 801a5d8:	b005      	add	sp, #20
 801a5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5de:	f843 2b04 	str.w	r2, [r3], #4
 801a5e2:	e7db      	b.n	801a59c <__multiply+0x50>
 801a5e4:	f8b3 a000 	ldrh.w	sl, [r3]
 801a5e8:	f1ba 0f00 	cmp.w	sl, #0
 801a5ec:	d020      	beq.n	801a630 <__multiply+0xe4>
 801a5ee:	f105 0e14 	add.w	lr, r5, #20
 801a5f2:	46b1      	mov	r9, r6
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a5fa:	f8d9 b000 	ldr.w	fp, [r9]
 801a5fe:	b2a1      	uxth	r1, r4
 801a600:	fa1f fb8b 	uxth.w	fp, fp
 801a604:	fb0a b101 	mla	r1, sl, r1, fp
 801a608:	4411      	add	r1, r2
 801a60a:	f8d9 2000 	ldr.w	r2, [r9]
 801a60e:	0c24      	lsrs	r4, r4, #16
 801a610:	0c12      	lsrs	r2, r2, #16
 801a612:	fb0a 2404 	mla	r4, sl, r4, r2
 801a616:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a61a:	b289      	uxth	r1, r1
 801a61c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a620:	45f4      	cmp	ip, lr
 801a622:	f849 1b04 	str.w	r1, [r9], #4
 801a626:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a62a:	d8e4      	bhi.n	801a5f6 <__multiply+0xaa>
 801a62c:	9901      	ldr	r1, [sp, #4]
 801a62e:	5072      	str	r2, [r6, r1]
 801a630:	9a03      	ldr	r2, [sp, #12]
 801a632:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a636:	3304      	adds	r3, #4
 801a638:	f1b9 0f00 	cmp.w	r9, #0
 801a63c:	d01f      	beq.n	801a67e <__multiply+0x132>
 801a63e:	6834      	ldr	r4, [r6, #0]
 801a640:	f105 0114 	add.w	r1, r5, #20
 801a644:	46b6      	mov	lr, r6
 801a646:	f04f 0a00 	mov.w	sl, #0
 801a64a:	880a      	ldrh	r2, [r1, #0]
 801a64c:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a650:	fb09 b202 	mla	r2, r9, r2, fp
 801a654:	4492      	add	sl, r2
 801a656:	b2a4      	uxth	r4, r4
 801a658:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a65c:	f84e 4b04 	str.w	r4, [lr], #4
 801a660:	f851 4b04 	ldr.w	r4, [r1], #4
 801a664:	f8be 2000 	ldrh.w	r2, [lr]
 801a668:	0c24      	lsrs	r4, r4, #16
 801a66a:	fb09 2404 	mla	r4, r9, r4, r2
 801a66e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a672:	458c      	cmp	ip, r1
 801a674:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a678:	d8e7      	bhi.n	801a64a <__multiply+0xfe>
 801a67a:	9a01      	ldr	r2, [sp, #4]
 801a67c:	50b4      	str	r4, [r6, r2]
 801a67e:	3604      	adds	r6, #4
 801a680:	e7a3      	b.n	801a5ca <__multiply+0x7e>
 801a682:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a686:	2b00      	cmp	r3, #0
 801a688:	d1a5      	bne.n	801a5d6 <__multiply+0x8a>
 801a68a:	3f01      	subs	r7, #1
 801a68c:	e7a1      	b.n	801a5d2 <__multiply+0x86>
 801a68e:	bf00      	nop
 801a690:	08021f00 	.word	0x08021f00
 801a694:	08021ff4 	.word	0x08021ff4

0801a698 <__pow5mult>:
 801a698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a69c:	4615      	mov	r5, r2
 801a69e:	f012 0203 	ands.w	r2, r2, #3
 801a6a2:	4606      	mov	r6, r0
 801a6a4:	460f      	mov	r7, r1
 801a6a6:	d007      	beq.n	801a6b8 <__pow5mult+0x20>
 801a6a8:	4c25      	ldr	r4, [pc, #148]	; (801a740 <__pow5mult+0xa8>)
 801a6aa:	3a01      	subs	r2, #1
 801a6ac:	2300      	movs	r3, #0
 801a6ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a6b2:	f7ff fe51 	bl	801a358 <__multadd>
 801a6b6:	4607      	mov	r7, r0
 801a6b8:	10ad      	asrs	r5, r5, #2
 801a6ba:	d03d      	beq.n	801a738 <__pow5mult+0xa0>
 801a6bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a6be:	b97c      	cbnz	r4, 801a6e0 <__pow5mult+0x48>
 801a6c0:	2010      	movs	r0, #16
 801a6c2:	f7ff fdcd 	bl	801a260 <malloc>
 801a6c6:	4602      	mov	r2, r0
 801a6c8:	6270      	str	r0, [r6, #36]	; 0x24
 801a6ca:	b928      	cbnz	r0, 801a6d8 <__pow5mult+0x40>
 801a6cc:	4b1d      	ldr	r3, [pc, #116]	; (801a744 <__pow5mult+0xac>)
 801a6ce:	481e      	ldr	r0, [pc, #120]	; (801a748 <__pow5mult+0xb0>)
 801a6d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a6d4:	f7fe faaa 	bl	8018c2c <__assert_func>
 801a6d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a6dc:	6004      	str	r4, [r0, #0]
 801a6de:	60c4      	str	r4, [r0, #12]
 801a6e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a6e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a6e8:	b94c      	cbnz	r4, 801a6fe <__pow5mult+0x66>
 801a6ea:	f240 2171 	movw	r1, #625	; 0x271
 801a6ee:	4630      	mov	r0, r6
 801a6f0:	f7ff ff16 	bl	801a520 <__i2b>
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	f8c8 0008 	str.w	r0, [r8, #8]
 801a6fa:	4604      	mov	r4, r0
 801a6fc:	6003      	str	r3, [r0, #0]
 801a6fe:	f04f 0900 	mov.w	r9, #0
 801a702:	07eb      	lsls	r3, r5, #31
 801a704:	d50a      	bpl.n	801a71c <__pow5mult+0x84>
 801a706:	4639      	mov	r1, r7
 801a708:	4622      	mov	r2, r4
 801a70a:	4630      	mov	r0, r6
 801a70c:	f7ff ff1e 	bl	801a54c <__multiply>
 801a710:	4639      	mov	r1, r7
 801a712:	4680      	mov	r8, r0
 801a714:	4630      	mov	r0, r6
 801a716:	f7ff fdfd 	bl	801a314 <_Bfree>
 801a71a:	4647      	mov	r7, r8
 801a71c:	106d      	asrs	r5, r5, #1
 801a71e:	d00b      	beq.n	801a738 <__pow5mult+0xa0>
 801a720:	6820      	ldr	r0, [r4, #0]
 801a722:	b938      	cbnz	r0, 801a734 <__pow5mult+0x9c>
 801a724:	4622      	mov	r2, r4
 801a726:	4621      	mov	r1, r4
 801a728:	4630      	mov	r0, r6
 801a72a:	f7ff ff0f 	bl	801a54c <__multiply>
 801a72e:	6020      	str	r0, [r4, #0]
 801a730:	f8c0 9000 	str.w	r9, [r0]
 801a734:	4604      	mov	r4, r0
 801a736:	e7e4      	b.n	801a702 <__pow5mult+0x6a>
 801a738:	4638      	mov	r0, r7
 801a73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a73e:	bf00      	nop
 801a740:	08022148 	.word	0x08022148
 801a744:	08021d91 	.word	0x08021d91
 801a748:	08021ff4 	.word	0x08021ff4

0801a74c <__lshift>:
 801a74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a750:	460c      	mov	r4, r1
 801a752:	6849      	ldr	r1, [r1, #4]
 801a754:	6923      	ldr	r3, [r4, #16]
 801a756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a75a:	68a3      	ldr	r3, [r4, #8]
 801a75c:	4607      	mov	r7, r0
 801a75e:	4691      	mov	r9, r2
 801a760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a764:	f108 0601 	add.w	r6, r8, #1
 801a768:	42b3      	cmp	r3, r6
 801a76a:	db0b      	blt.n	801a784 <__lshift+0x38>
 801a76c:	4638      	mov	r0, r7
 801a76e:	f7ff fd91 	bl	801a294 <_Balloc>
 801a772:	4605      	mov	r5, r0
 801a774:	b948      	cbnz	r0, 801a78a <__lshift+0x3e>
 801a776:	4602      	mov	r2, r0
 801a778:	4b28      	ldr	r3, [pc, #160]	; (801a81c <__lshift+0xd0>)
 801a77a:	4829      	ldr	r0, [pc, #164]	; (801a820 <__lshift+0xd4>)
 801a77c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a780:	f7fe fa54 	bl	8018c2c <__assert_func>
 801a784:	3101      	adds	r1, #1
 801a786:	005b      	lsls	r3, r3, #1
 801a788:	e7ee      	b.n	801a768 <__lshift+0x1c>
 801a78a:	2300      	movs	r3, #0
 801a78c:	f100 0114 	add.w	r1, r0, #20
 801a790:	f100 0210 	add.w	r2, r0, #16
 801a794:	4618      	mov	r0, r3
 801a796:	4553      	cmp	r3, sl
 801a798:	db33      	blt.n	801a802 <__lshift+0xb6>
 801a79a:	6920      	ldr	r0, [r4, #16]
 801a79c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a7a0:	f104 0314 	add.w	r3, r4, #20
 801a7a4:	f019 091f 	ands.w	r9, r9, #31
 801a7a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a7ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a7b0:	d02b      	beq.n	801a80a <__lshift+0xbe>
 801a7b2:	f1c9 0e20 	rsb	lr, r9, #32
 801a7b6:	468a      	mov	sl, r1
 801a7b8:	2200      	movs	r2, #0
 801a7ba:	6818      	ldr	r0, [r3, #0]
 801a7bc:	fa00 f009 	lsl.w	r0, r0, r9
 801a7c0:	4302      	orrs	r2, r0
 801a7c2:	f84a 2b04 	str.w	r2, [sl], #4
 801a7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7ca:	459c      	cmp	ip, r3
 801a7cc:	fa22 f20e 	lsr.w	r2, r2, lr
 801a7d0:	d8f3      	bhi.n	801a7ba <__lshift+0x6e>
 801a7d2:	ebac 0304 	sub.w	r3, ip, r4
 801a7d6:	3b15      	subs	r3, #21
 801a7d8:	f023 0303 	bic.w	r3, r3, #3
 801a7dc:	3304      	adds	r3, #4
 801a7de:	f104 0015 	add.w	r0, r4, #21
 801a7e2:	4584      	cmp	ip, r0
 801a7e4:	bf38      	it	cc
 801a7e6:	2304      	movcc	r3, #4
 801a7e8:	50ca      	str	r2, [r1, r3]
 801a7ea:	b10a      	cbz	r2, 801a7f0 <__lshift+0xa4>
 801a7ec:	f108 0602 	add.w	r6, r8, #2
 801a7f0:	3e01      	subs	r6, #1
 801a7f2:	4638      	mov	r0, r7
 801a7f4:	612e      	str	r6, [r5, #16]
 801a7f6:	4621      	mov	r1, r4
 801a7f8:	f7ff fd8c 	bl	801a314 <_Bfree>
 801a7fc:	4628      	mov	r0, r5
 801a7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a802:	f842 0f04 	str.w	r0, [r2, #4]!
 801a806:	3301      	adds	r3, #1
 801a808:	e7c5      	b.n	801a796 <__lshift+0x4a>
 801a80a:	3904      	subs	r1, #4
 801a80c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a810:	f841 2f04 	str.w	r2, [r1, #4]!
 801a814:	459c      	cmp	ip, r3
 801a816:	d8f9      	bhi.n	801a80c <__lshift+0xc0>
 801a818:	e7ea      	b.n	801a7f0 <__lshift+0xa4>
 801a81a:	bf00      	nop
 801a81c:	08021f00 	.word	0x08021f00
 801a820:	08021ff4 	.word	0x08021ff4

0801a824 <__mcmp>:
 801a824:	b530      	push	{r4, r5, lr}
 801a826:	6902      	ldr	r2, [r0, #16]
 801a828:	690c      	ldr	r4, [r1, #16]
 801a82a:	1b12      	subs	r2, r2, r4
 801a82c:	d10e      	bne.n	801a84c <__mcmp+0x28>
 801a82e:	f100 0314 	add.w	r3, r0, #20
 801a832:	3114      	adds	r1, #20
 801a834:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a838:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a83c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a840:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a844:	42a5      	cmp	r5, r4
 801a846:	d003      	beq.n	801a850 <__mcmp+0x2c>
 801a848:	d305      	bcc.n	801a856 <__mcmp+0x32>
 801a84a:	2201      	movs	r2, #1
 801a84c:	4610      	mov	r0, r2
 801a84e:	bd30      	pop	{r4, r5, pc}
 801a850:	4283      	cmp	r3, r0
 801a852:	d3f3      	bcc.n	801a83c <__mcmp+0x18>
 801a854:	e7fa      	b.n	801a84c <__mcmp+0x28>
 801a856:	f04f 32ff 	mov.w	r2, #4294967295
 801a85a:	e7f7      	b.n	801a84c <__mcmp+0x28>

0801a85c <__mdiff>:
 801a85c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a860:	460c      	mov	r4, r1
 801a862:	4606      	mov	r6, r0
 801a864:	4611      	mov	r1, r2
 801a866:	4620      	mov	r0, r4
 801a868:	4617      	mov	r7, r2
 801a86a:	f7ff ffdb 	bl	801a824 <__mcmp>
 801a86e:	1e05      	subs	r5, r0, #0
 801a870:	d110      	bne.n	801a894 <__mdiff+0x38>
 801a872:	4629      	mov	r1, r5
 801a874:	4630      	mov	r0, r6
 801a876:	f7ff fd0d 	bl	801a294 <_Balloc>
 801a87a:	b930      	cbnz	r0, 801a88a <__mdiff+0x2e>
 801a87c:	4b39      	ldr	r3, [pc, #228]	; (801a964 <__mdiff+0x108>)
 801a87e:	4602      	mov	r2, r0
 801a880:	f240 2132 	movw	r1, #562	; 0x232
 801a884:	4838      	ldr	r0, [pc, #224]	; (801a968 <__mdiff+0x10c>)
 801a886:	f7fe f9d1 	bl	8018c2c <__assert_func>
 801a88a:	2301      	movs	r3, #1
 801a88c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a894:	bfa4      	itt	ge
 801a896:	463b      	movge	r3, r7
 801a898:	4627      	movge	r7, r4
 801a89a:	4630      	mov	r0, r6
 801a89c:	6879      	ldr	r1, [r7, #4]
 801a89e:	bfa6      	itte	ge
 801a8a0:	461c      	movge	r4, r3
 801a8a2:	2500      	movge	r5, #0
 801a8a4:	2501      	movlt	r5, #1
 801a8a6:	f7ff fcf5 	bl	801a294 <_Balloc>
 801a8aa:	b920      	cbnz	r0, 801a8b6 <__mdiff+0x5a>
 801a8ac:	4b2d      	ldr	r3, [pc, #180]	; (801a964 <__mdiff+0x108>)
 801a8ae:	4602      	mov	r2, r0
 801a8b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a8b4:	e7e6      	b.n	801a884 <__mdiff+0x28>
 801a8b6:	693e      	ldr	r6, [r7, #16]
 801a8b8:	60c5      	str	r5, [r0, #12]
 801a8ba:	6925      	ldr	r5, [r4, #16]
 801a8bc:	f107 0114 	add.w	r1, r7, #20
 801a8c0:	f104 0914 	add.w	r9, r4, #20
 801a8c4:	f100 0e14 	add.w	lr, r0, #20
 801a8c8:	f107 0210 	add.w	r2, r7, #16
 801a8cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a8d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a8d4:	46f2      	mov	sl, lr
 801a8d6:	2700      	movs	r7, #0
 801a8d8:	f859 3b04 	ldr.w	r3, [r9], #4
 801a8dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a8e0:	fa1f f883 	uxth.w	r8, r3
 801a8e4:	fa17 f78b 	uxtah	r7, r7, fp
 801a8e8:	0c1b      	lsrs	r3, r3, #16
 801a8ea:	eba7 0808 	sub.w	r8, r7, r8
 801a8ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a8f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a8f6:	fa1f f888 	uxth.w	r8, r8
 801a8fa:	141f      	asrs	r7, r3, #16
 801a8fc:	454d      	cmp	r5, r9
 801a8fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a902:	f84a 3b04 	str.w	r3, [sl], #4
 801a906:	d8e7      	bhi.n	801a8d8 <__mdiff+0x7c>
 801a908:	1b2b      	subs	r3, r5, r4
 801a90a:	3b15      	subs	r3, #21
 801a90c:	f023 0303 	bic.w	r3, r3, #3
 801a910:	3304      	adds	r3, #4
 801a912:	3415      	adds	r4, #21
 801a914:	42a5      	cmp	r5, r4
 801a916:	bf38      	it	cc
 801a918:	2304      	movcc	r3, #4
 801a91a:	4419      	add	r1, r3
 801a91c:	4473      	add	r3, lr
 801a91e:	469e      	mov	lr, r3
 801a920:	460d      	mov	r5, r1
 801a922:	4565      	cmp	r5, ip
 801a924:	d30e      	bcc.n	801a944 <__mdiff+0xe8>
 801a926:	f10c 0203 	add.w	r2, ip, #3
 801a92a:	1a52      	subs	r2, r2, r1
 801a92c:	f022 0203 	bic.w	r2, r2, #3
 801a930:	3903      	subs	r1, #3
 801a932:	458c      	cmp	ip, r1
 801a934:	bf38      	it	cc
 801a936:	2200      	movcc	r2, #0
 801a938:	441a      	add	r2, r3
 801a93a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a93e:	b17b      	cbz	r3, 801a960 <__mdiff+0x104>
 801a940:	6106      	str	r6, [r0, #16]
 801a942:	e7a5      	b.n	801a890 <__mdiff+0x34>
 801a944:	f855 8b04 	ldr.w	r8, [r5], #4
 801a948:	fa17 f488 	uxtah	r4, r7, r8
 801a94c:	1422      	asrs	r2, r4, #16
 801a94e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a952:	b2a4      	uxth	r4, r4
 801a954:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a958:	f84e 4b04 	str.w	r4, [lr], #4
 801a95c:	1417      	asrs	r7, r2, #16
 801a95e:	e7e0      	b.n	801a922 <__mdiff+0xc6>
 801a960:	3e01      	subs	r6, #1
 801a962:	e7ea      	b.n	801a93a <__mdiff+0xde>
 801a964:	08021f00 	.word	0x08021f00
 801a968:	08021ff4 	.word	0x08021ff4

0801a96c <__ulp>:
 801a96c:	b082      	sub	sp, #8
 801a96e:	ed8d 0b00 	vstr	d0, [sp]
 801a972:	9b01      	ldr	r3, [sp, #4]
 801a974:	4912      	ldr	r1, [pc, #72]	; (801a9c0 <__ulp+0x54>)
 801a976:	4019      	ands	r1, r3
 801a978:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a97c:	2900      	cmp	r1, #0
 801a97e:	dd05      	ble.n	801a98c <__ulp+0x20>
 801a980:	2200      	movs	r2, #0
 801a982:	460b      	mov	r3, r1
 801a984:	ec43 2b10 	vmov	d0, r2, r3
 801a988:	b002      	add	sp, #8
 801a98a:	4770      	bx	lr
 801a98c:	4249      	negs	r1, r1
 801a98e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a992:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a996:	f04f 0200 	mov.w	r2, #0
 801a99a:	f04f 0300 	mov.w	r3, #0
 801a99e:	da04      	bge.n	801a9aa <__ulp+0x3e>
 801a9a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a9a4:	fa41 f300 	asr.w	r3, r1, r0
 801a9a8:	e7ec      	b.n	801a984 <__ulp+0x18>
 801a9aa:	f1a0 0114 	sub.w	r1, r0, #20
 801a9ae:	291e      	cmp	r1, #30
 801a9b0:	bfda      	itte	le
 801a9b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a9b6:	fa20 f101 	lsrle.w	r1, r0, r1
 801a9ba:	2101      	movgt	r1, #1
 801a9bc:	460a      	mov	r2, r1
 801a9be:	e7e1      	b.n	801a984 <__ulp+0x18>
 801a9c0:	7ff00000 	.word	0x7ff00000

0801a9c4 <__b2d>:
 801a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9c6:	6905      	ldr	r5, [r0, #16]
 801a9c8:	f100 0714 	add.w	r7, r0, #20
 801a9cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a9d0:	1f2e      	subs	r6, r5, #4
 801a9d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a9d6:	4620      	mov	r0, r4
 801a9d8:	f7ff fd52 	bl	801a480 <__hi0bits>
 801a9dc:	f1c0 0320 	rsb	r3, r0, #32
 801a9e0:	280a      	cmp	r0, #10
 801a9e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801aa60 <__b2d+0x9c>
 801a9e6:	600b      	str	r3, [r1, #0]
 801a9e8:	dc14      	bgt.n	801aa14 <__b2d+0x50>
 801a9ea:	f1c0 0e0b 	rsb	lr, r0, #11
 801a9ee:	fa24 f10e 	lsr.w	r1, r4, lr
 801a9f2:	42b7      	cmp	r7, r6
 801a9f4:	ea41 030c 	orr.w	r3, r1, ip
 801a9f8:	bf34      	ite	cc
 801a9fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a9fe:	2100      	movcs	r1, #0
 801aa00:	3015      	adds	r0, #21
 801aa02:	fa04 f000 	lsl.w	r0, r4, r0
 801aa06:	fa21 f10e 	lsr.w	r1, r1, lr
 801aa0a:	ea40 0201 	orr.w	r2, r0, r1
 801aa0e:	ec43 2b10 	vmov	d0, r2, r3
 801aa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa14:	42b7      	cmp	r7, r6
 801aa16:	bf3a      	itte	cc
 801aa18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801aa1c:	f1a5 0608 	subcc.w	r6, r5, #8
 801aa20:	2100      	movcs	r1, #0
 801aa22:	380b      	subs	r0, #11
 801aa24:	d017      	beq.n	801aa56 <__b2d+0x92>
 801aa26:	f1c0 0c20 	rsb	ip, r0, #32
 801aa2a:	fa04 f500 	lsl.w	r5, r4, r0
 801aa2e:	42be      	cmp	r6, r7
 801aa30:	fa21 f40c 	lsr.w	r4, r1, ip
 801aa34:	ea45 0504 	orr.w	r5, r5, r4
 801aa38:	bf8c      	ite	hi
 801aa3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801aa3e:	2400      	movls	r4, #0
 801aa40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801aa44:	fa01 f000 	lsl.w	r0, r1, r0
 801aa48:	fa24 f40c 	lsr.w	r4, r4, ip
 801aa4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801aa50:	ea40 0204 	orr.w	r2, r0, r4
 801aa54:	e7db      	b.n	801aa0e <__b2d+0x4a>
 801aa56:	ea44 030c 	orr.w	r3, r4, ip
 801aa5a:	460a      	mov	r2, r1
 801aa5c:	e7d7      	b.n	801aa0e <__b2d+0x4a>
 801aa5e:	bf00      	nop
 801aa60:	3ff00000 	.word	0x3ff00000

0801aa64 <__d2b>:
 801aa64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801aa68:	4689      	mov	r9, r1
 801aa6a:	2101      	movs	r1, #1
 801aa6c:	ec57 6b10 	vmov	r6, r7, d0
 801aa70:	4690      	mov	r8, r2
 801aa72:	f7ff fc0f 	bl	801a294 <_Balloc>
 801aa76:	4604      	mov	r4, r0
 801aa78:	b930      	cbnz	r0, 801aa88 <__d2b+0x24>
 801aa7a:	4602      	mov	r2, r0
 801aa7c:	4b25      	ldr	r3, [pc, #148]	; (801ab14 <__d2b+0xb0>)
 801aa7e:	4826      	ldr	r0, [pc, #152]	; (801ab18 <__d2b+0xb4>)
 801aa80:	f240 310a 	movw	r1, #778	; 0x30a
 801aa84:	f7fe f8d2 	bl	8018c2c <__assert_func>
 801aa88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801aa8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801aa90:	bb35      	cbnz	r5, 801aae0 <__d2b+0x7c>
 801aa92:	2e00      	cmp	r6, #0
 801aa94:	9301      	str	r3, [sp, #4]
 801aa96:	d028      	beq.n	801aaea <__d2b+0x86>
 801aa98:	4668      	mov	r0, sp
 801aa9a:	9600      	str	r6, [sp, #0]
 801aa9c:	f7ff fd10 	bl	801a4c0 <__lo0bits>
 801aaa0:	9900      	ldr	r1, [sp, #0]
 801aaa2:	b300      	cbz	r0, 801aae6 <__d2b+0x82>
 801aaa4:	9a01      	ldr	r2, [sp, #4]
 801aaa6:	f1c0 0320 	rsb	r3, r0, #32
 801aaaa:	fa02 f303 	lsl.w	r3, r2, r3
 801aaae:	430b      	orrs	r3, r1
 801aab0:	40c2      	lsrs	r2, r0
 801aab2:	6163      	str	r3, [r4, #20]
 801aab4:	9201      	str	r2, [sp, #4]
 801aab6:	9b01      	ldr	r3, [sp, #4]
 801aab8:	61a3      	str	r3, [r4, #24]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	bf14      	ite	ne
 801aabe:	2202      	movne	r2, #2
 801aac0:	2201      	moveq	r2, #1
 801aac2:	6122      	str	r2, [r4, #16]
 801aac4:	b1d5      	cbz	r5, 801aafc <__d2b+0x98>
 801aac6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801aaca:	4405      	add	r5, r0
 801aacc:	f8c9 5000 	str.w	r5, [r9]
 801aad0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801aad4:	f8c8 0000 	str.w	r0, [r8]
 801aad8:	4620      	mov	r0, r4
 801aada:	b003      	add	sp, #12
 801aadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801aae4:	e7d5      	b.n	801aa92 <__d2b+0x2e>
 801aae6:	6161      	str	r1, [r4, #20]
 801aae8:	e7e5      	b.n	801aab6 <__d2b+0x52>
 801aaea:	a801      	add	r0, sp, #4
 801aaec:	f7ff fce8 	bl	801a4c0 <__lo0bits>
 801aaf0:	9b01      	ldr	r3, [sp, #4]
 801aaf2:	6163      	str	r3, [r4, #20]
 801aaf4:	2201      	movs	r2, #1
 801aaf6:	6122      	str	r2, [r4, #16]
 801aaf8:	3020      	adds	r0, #32
 801aafa:	e7e3      	b.n	801aac4 <__d2b+0x60>
 801aafc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ab00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ab04:	f8c9 0000 	str.w	r0, [r9]
 801ab08:	6918      	ldr	r0, [r3, #16]
 801ab0a:	f7ff fcb9 	bl	801a480 <__hi0bits>
 801ab0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ab12:	e7df      	b.n	801aad4 <__d2b+0x70>
 801ab14:	08021f00 	.word	0x08021f00
 801ab18:	08021ff4 	.word	0x08021ff4

0801ab1c <__ratio>:
 801ab1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab20:	4688      	mov	r8, r1
 801ab22:	4669      	mov	r1, sp
 801ab24:	4681      	mov	r9, r0
 801ab26:	f7ff ff4d 	bl	801a9c4 <__b2d>
 801ab2a:	a901      	add	r1, sp, #4
 801ab2c:	4640      	mov	r0, r8
 801ab2e:	ec55 4b10 	vmov	r4, r5, d0
 801ab32:	f7ff ff47 	bl	801a9c4 <__b2d>
 801ab36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ab3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ab3e:	eba3 0c02 	sub.w	ip, r3, r2
 801ab42:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ab46:	1a9b      	subs	r3, r3, r2
 801ab48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ab4c:	ec51 0b10 	vmov	r0, r1, d0
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	bfd6      	itet	le
 801ab54:	460a      	movle	r2, r1
 801ab56:	462a      	movgt	r2, r5
 801ab58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ab5c:	468b      	mov	fp, r1
 801ab5e:	462f      	mov	r7, r5
 801ab60:	bfd4      	ite	le
 801ab62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ab66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ab6a:	4620      	mov	r0, r4
 801ab6c:	ee10 2a10 	vmov	r2, s0
 801ab70:	465b      	mov	r3, fp
 801ab72:	4639      	mov	r1, r7
 801ab74:	f7e5 fe7a 	bl	800086c <__aeabi_ddiv>
 801ab78:	ec41 0b10 	vmov	d0, r0, r1
 801ab7c:	b003      	add	sp, #12
 801ab7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab82 <__copybits>:
 801ab82:	3901      	subs	r1, #1
 801ab84:	b570      	push	{r4, r5, r6, lr}
 801ab86:	1149      	asrs	r1, r1, #5
 801ab88:	6914      	ldr	r4, [r2, #16]
 801ab8a:	3101      	adds	r1, #1
 801ab8c:	f102 0314 	add.w	r3, r2, #20
 801ab90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ab94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ab98:	1f05      	subs	r5, r0, #4
 801ab9a:	42a3      	cmp	r3, r4
 801ab9c:	d30c      	bcc.n	801abb8 <__copybits+0x36>
 801ab9e:	1aa3      	subs	r3, r4, r2
 801aba0:	3b11      	subs	r3, #17
 801aba2:	f023 0303 	bic.w	r3, r3, #3
 801aba6:	3211      	adds	r2, #17
 801aba8:	42a2      	cmp	r2, r4
 801abaa:	bf88      	it	hi
 801abac:	2300      	movhi	r3, #0
 801abae:	4418      	add	r0, r3
 801abb0:	2300      	movs	r3, #0
 801abb2:	4288      	cmp	r0, r1
 801abb4:	d305      	bcc.n	801abc2 <__copybits+0x40>
 801abb6:	bd70      	pop	{r4, r5, r6, pc}
 801abb8:	f853 6b04 	ldr.w	r6, [r3], #4
 801abbc:	f845 6f04 	str.w	r6, [r5, #4]!
 801abc0:	e7eb      	b.n	801ab9a <__copybits+0x18>
 801abc2:	f840 3b04 	str.w	r3, [r0], #4
 801abc6:	e7f4      	b.n	801abb2 <__copybits+0x30>

0801abc8 <__any_on>:
 801abc8:	f100 0214 	add.w	r2, r0, #20
 801abcc:	6900      	ldr	r0, [r0, #16]
 801abce:	114b      	asrs	r3, r1, #5
 801abd0:	4298      	cmp	r0, r3
 801abd2:	b510      	push	{r4, lr}
 801abd4:	db11      	blt.n	801abfa <__any_on+0x32>
 801abd6:	dd0a      	ble.n	801abee <__any_on+0x26>
 801abd8:	f011 011f 	ands.w	r1, r1, #31
 801abdc:	d007      	beq.n	801abee <__any_on+0x26>
 801abde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801abe2:	fa24 f001 	lsr.w	r0, r4, r1
 801abe6:	fa00 f101 	lsl.w	r1, r0, r1
 801abea:	428c      	cmp	r4, r1
 801abec:	d10b      	bne.n	801ac06 <__any_on+0x3e>
 801abee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801abf2:	4293      	cmp	r3, r2
 801abf4:	d803      	bhi.n	801abfe <__any_on+0x36>
 801abf6:	2000      	movs	r0, #0
 801abf8:	bd10      	pop	{r4, pc}
 801abfa:	4603      	mov	r3, r0
 801abfc:	e7f7      	b.n	801abee <__any_on+0x26>
 801abfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ac02:	2900      	cmp	r1, #0
 801ac04:	d0f5      	beq.n	801abf2 <__any_on+0x2a>
 801ac06:	2001      	movs	r0, #1
 801ac08:	e7f6      	b.n	801abf8 <__any_on+0x30>

0801ac0a <_calloc_r>:
 801ac0a:	b513      	push	{r0, r1, r4, lr}
 801ac0c:	434a      	muls	r2, r1
 801ac0e:	4611      	mov	r1, r2
 801ac10:	9201      	str	r2, [sp, #4]
 801ac12:	f000 f859 	bl	801acc8 <_malloc_r>
 801ac16:	4604      	mov	r4, r0
 801ac18:	b118      	cbz	r0, 801ac22 <_calloc_r+0x18>
 801ac1a:	9a01      	ldr	r2, [sp, #4]
 801ac1c:	2100      	movs	r1, #0
 801ac1e:	f7fc fa41 	bl	80170a4 <memset>
 801ac22:	4620      	mov	r0, r4
 801ac24:	b002      	add	sp, #8
 801ac26:	bd10      	pop	{r4, pc}

0801ac28 <_free_r>:
 801ac28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac2a:	2900      	cmp	r1, #0
 801ac2c:	d048      	beq.n	801acc0 <_free_r+0x98>
 801ac2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac32:	9001      	str	r0, [sp, #4]
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	f1a1 0404 	sub.w	r4, r1, #4
 801ac3a:	bfb8      	it	lt
 801ac3c:	18e4      	addlt	r4, r4, r3
 801ac3e:	f000 fddf 	bl	801b800 <__malloc_lock>
 801ac42:	4a20      	ldr	r2, [pc, #128]	; (801acc4 <_free_r+0x9c>)
 801ac44:	9801      	ldr	r0, [sp, #4]
 801ac46:	6813      	ldr	r3, [r2, #0]
 801ac48:	4615      	mov	r5, r2
 801ac4a:	b933      	cbnz	r3, 801ac5a <_free_r+0x32>
 801ac4c:	6063      	str	r3, [r4, #4]
 801ac4e:	6014      	str	r4, [r2, #0]
 801ac50:	b003      	add	sp, #12
 801ac52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac56:	f000 bdd9 	b.w	801b80c <__malloc_unlock>
 801ac5a:	42a3      	cmp	r3, r4
 801ac5c:	d90b      	bls.n	801ac76 <_free_r+0x4e>
 801ac5e:	6821      	ldr	r1, [r4, #0]
 801ac60:	1862      	adds	r2, r4, r1
 801ac62:	4293      	cmp	r3, r2
 801ac64:	bf04      	itt	eq
 801ac66:	681a      	ldreq	r2, [r3, #0]
 801ac68:	685b      	ldreq	r3, [r3, #4]
 801ac6a:	6063      	str	r3, [r4, #4]
 801ac6c:	bf04      	itt	eq
 801ac6e:	1852      	addeq	r2, r2, r1
 801ac70:	6022      	streq	r2, [r4, #0]
 801ac72:	602c      	str	r4, [r5, #0]
 801ac74:	e7ec      	b.n	801ac50 <_free_r+0x28>
 801ac76:	461a      	mov	r2, r3
 801ac78:	685b      	ldr	r3, [r3, #4]
 801ac7a:	b10b      	cbz	r3, 801ac80 <_free_r+0x58>
 801ac7c:	42a3      	cmp	r3, r4
 801ac7e:	d9fa      	bls.n	801ac76 <_free_r+0x4e>
 801ac80:	6811      	ldr	r1, [r2, #0]
 801ac82:	1855      	adds	r5, r2, r1
 801ac84:	42a5      	cmp	r5, r4
 801ac86:	d10b      	bne.n	801aca0 <_free_r+0x78>
 801ac88:	6824      	ldr	r4, [r4, #0]
 801ac8a:	4421      	add	r1, r4
 801ac8c:	1854      	adds	r4, r2, r1
 801ac8e:	42a3      	cmp	r3, r4
 801ac90:	6011      	str	r1, [r2, #0]
 801ac92:	d1dd      	bne.n	801ac50 <_free_r+0x28>
 801ac94:	681c      	ldr	r4, [r3, #0]
 801ac96:	685b      	ldr	r3, [r3, #4]
 801ac98:	6053      	str	r3, [r2, #4]
 801ac9a:	4421      	add	r1, r4
 801ac9c:	6011      	str	r1, [r2, #0]
 801ac9e:	e7d7      	b.n	801ac50 <_free_r+0x28>
 801aca0:	d902      	bls.n	801aca8 <_free_r+0x80>
 801aca2:	230c      	movs	r3, #12
 801aca4:	6003      	str	r3, [r0, #0]
 801aca6:	e7d3      	b.n	801ac50 <_free_r+0x28>
 801aca8:	6825      	ldr	r5, [r4, #0]
 801acaa:	1961      	adds	r1, r4, r5
 801acac:	428b      	cmp	r3, r1
 801acae:	bf04      	itt	eq
 801acb0:	6819      	ldreq	r1, [r3, #0]
 801acb2:	685b      	ldreq	r3, [r3, #4]
 801acb4:	6063      	str	r3, [r4, #4]
 801acb6:	bf04      	itt	eq
 801acb8:	1949      	addeq	r1, r1, r5
 801acba:	6021      	streq	r1, [r4, #0]
 801acbc:	6054      	str	r4, [r2, #4]
 801acbe:	e7c7      	b.n	801ac50 <_free_r+0x28>
 801acc0:	b003      	add	sp, #12
 801acc2:	bd30      	pop	{r4, r5, pc}
 801acc4:	200007b0 	.word	0x200007b0

0801acc8 <_malloc_r>:
 801acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acca:	1ccd      	adds	r5, r1, #3
 801accc:	f025 0503 	bic.w	r5, r5, #3
 801acd0:	3508      	adds	r5, #8
 801acd2:	2d0c      	cmp	r5, #12
 801acd4:	bf38      	it	cc
 801acd6:	250c      	movcc	r5, #12
 801acd8:	2d00      	cmp	r5, #0
 801acda:	4606      	mov	r6, r0
 801acdc:	db01      	blt.n	801ace2 <_malloc_r+0x1a>
 801acde:	42a9      	cmp	r1, r5
 801ace0:	d903      	bls.n	801acea <_malloc_r+0x22>
 801ace2:	230c      	movs	r3, #12
 801ace4:	6033      	str	r3, [r6, #0]
 801ace6:	2000      	movs	r0, #0
 801ace8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acea:	f000 fd89 	bl	801b800 <__malloc_lock>
 801acee:	4921      	ldr	r1, [pc, #132]	; (801ad74 <_malloc_r+0xac>)
 801acf0:	680a      	ldr	r2, [r1, #0]
 801acf2:	4614      	mov	r4, r2
 801acf4:	b99c      	cbnz	r4, 801ad1e <_malloc_r+0x56>
 801acf6:	4f20      	ldr	r7, [pc, #128]	; (801ad78 <_malloc_r+0xb0>)
 801acf8:	683b      	ldr	r3, [r7, #0]
 801acfa:	b923      	cbnz	r3, 801ad06 <_malloc_r+0x3e>
 801acfc:	4621      	mov	r1, r4
 801acfe:	4630      	mov	r0, r6
 801ad00:	f000 fafa 	bl	801b2f8 <_sbrk_r>
 801ad04:	6038      	str	r0, [r7, #0]
 801ad06:	4629      	mov	r1, r5
 801ad08:	4630      	mov	r0, r6
 801ad0a:	f000 faf5 	bl	801b2f8 <_sbrk_r>
 801ad0e:	1c43      	adds	r3, r0, #1
 801ad10:	d123      	bne.n	801ad5a <_malloc_r+0x92>
 801ad12:	230c      	movs	r3, #12
 801ad14:	6033      	str	r3, [r6, #0]
 801ad16:	4630      	mov	r0, r6
 801ad18:	f000 fd78 	bl	801b80c <__malloc_unlock>
 801ad1c:	e7e3      	b.n	801ace6 <_malloc_r+0x1e>
 801ad1e:	6823      	ldr	r3, [r4, #0]
 801ad20:	1b5b      	subs	r3, r3, r5
 801ad22:	d417      	bmi.n	801ad54 <_malloc_r+0x8c>
 801ad24:	2b0b      	cmp	r3, #11
 801ad26:	d903      	bls.n	801ad30 <_malloc_r+0x68>
 801ad28:	6023      	str	r3, [r4, #0]
 801ad2a:	441c      	add	r4, r3
 801ad2c:	6025      	str	r5, [r4, #0]
 801ad2e:	e004      	b.n	801ad3a <_malloc_r+0x72>
 801ad30:	6863      	ldr	r3, [r4, #4]
 801ad32:	42a2      	cmp	r2, r4
 801ad34:	bf0c      	ite	eq
 801ad36:	600b      	streq	r3, [r1, #0]
 801ad38:	6053      	strne	r3, [r2, #4]
 801ad3a:	4630      	mov	r0, r6
 801ad3c:	f000 fd66 	bl	801b80c <__malloc_unlock>
 801ad40:	f104 000b 	add.w	r0, r4, #11
 801ad44:	1d23      	adds	r3, r4, #4
 801ad46:	f020 0007 	bic.w	r0, r0, #7
 801ad4a:	1ac2      	subs	r2, r0, r3
 801ad4c:	d0cc      	beq.n	801ace8 <_malloc_r+0x20>
 801ad4e:	1a1b      	subs	r3, r3, r0
 801ad50:	50a3      	str	r3, [r4, r2]
 801ad52:	e7c9      	b.n	801ace8 <_malloc_r+0x20>
 801ad54:	4622      	mov	r2, r4
 801ad56:	6864      	ldr	r4, [r4, #4]
 801ad58:	e7cc      	b.n	801acf4 <_malloc_r+0x2c>
 801ad5a:	1cc4      	adds	r4, r0, #3
 801ad5c:	f024 0403 	bic.w	r4, r4, #3
 801ad60:	42a0      	cmp	r0, r4
 801ad62:	d0e3      	beq.n	801ad2c <_malloc_r+0x64>
 801ad64:	1a21      	subs	r1, r4, r0
 801ad66:	4630      	mov	r0, r6
 801ad68:	f000 fac6 	bl	801b2f8 <_sbrk_r>
 801ad6c:	3001      	adds	r0, #1
 801ad6e:	d1dd      	bne.n	801ad2c <_malloc_r+0x64>
 801ad70:	e7cf      	b.n	801ad12 <_malloc_r+0x4a>
 801ad72:	bf00      	nop
 801ad74:	200007b0 	.word	0x200007b0
 801ad78:	200007b4 	.word	0x200007b4

0801ad7c <__ssputs_r>:
 801ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad80:	688e      	ldr	r6, [r1, #8]
 801ad82:	429e      	cmp	r6, r3
 801ad84:	4682      	mov	sl, r0
 801ad86:	460c      	mov	r4, r1
 801ad88:	4690      	mov	r8, r2
 801ad8a:	461f      	mov	r7, r3
 801ad8c:	d838      	bhi.n	801ae00 <__ssputs_r+0x84>
 801ad8e:	898a      	ldrh	r2, [r1, #12]
 801ad90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ad94:	d032      	beq.n	801adfc <__ssputs_r+0x80>
 801ad96:	6825      	ldr	r5, [r4, #0]
 801ad98:	6909      	ldr	r1, [r1, #16]
 801ad9a:	eba5 0901 	sub.w	r9, r5, r1
 801ad9e:	6965      	ldr	r5, [r4, #20]
 801ada0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ada4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ada8:	3301      	adds	r3, #1
 801adaa:	444b      	add	r3, r9
 801adac:	106d      	asrs	r5, r5, #1
 801adae:	429d      	cmp	r5, r3
 801adb0:	bf38      	it	cc
 801adb2:	461d      	movcc	r5, r3
 801adb4:	0553      	lsls	r3, r2, #21
 801adb6:	d531      	bpl.n	801ae1c <__ssputs_r+0xa0>
 801adb8:	4629      	mov	r1, r5
 801adba:	f7ff ff85 	bl	801acc8 <_malloc_r>
 801adbe:	4606      	mov	r6, r0
 801adc0:	b950      	cbnz	r0, 801add8 <__ssputs_r+0x5c>
 801adc2:	230c      	movs	r3, #12
 801adc4:	f8ca 3000 	str.w	r3, [sl]
 801adc8:	89a3      	ldrh	r3, [r4, #12]
 801adca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801adce:	81a3      	strh	r3, [r4, #12]
 801add0:	f04f 30ff 	mov.w	r0, #4294967295
 801add4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801add8:	6921      	ldr	r1, [r4, #16]
 801adda:	464a      	mov	r2, r9
 801addc:	f7fc f93a 	bl	8017054 <memcpy>
 801ade0:	89a3      	ldrh	r3, [r4, #12]
 801ade2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ade6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adea:	81a3      	strh	r3, [r4, #12]
 801adec:	6126      	str	r6, [r4, #16]
 801adee:	6165      	str	r5, [r4, #20]
 801adf0:	444e      	add	r6, r9
 801adf2:	eba5 0509 	sub.w	r5, r5, r9
 801adf6:	6026      	str	r6, [r4, #0]
 801adf8:	60a5      	str	r5, [r4, #8]
 801adfa:	463e      	mov	r6, r7
 801adfc:	42be      	cmp	r6, r7
 801adfe:	d900      	bls.n	801ae02 <__ssputs_r+0x86>
 801ae00:	463e      	mov	r6, r7
 801ae02:	4632      	mov	r2, r6
 801ae04:	6820      	ldr	r0, [r4, #0]
 801ae06:	4641      	mov	r1, r8
 801ae08:	f7fc f932 	bl	8017070 <memmove>
 801ae0c:	68a3      	ldr	r3, [r4, #8]
 801ae0e:	6822      	ldr	r2, [r4, #0]
 801ae10:	1b9b      	subs	r3, r3, r6
 801ae12:	4432      	add	r2, r6
 801ae14:	60a3      	str	r3, [r4, #8]
 801ae16:	6022      	str	r2, [r4, #0]
 801ae18:	2000      	movs	r0, #0
 801ae1a:	e7db      	b.n	801add4 <__ssputs_r+0x58>
 801ae1c:	462a      	mov	r2, r5
 801ae1e:	f000 fcfb 	bl	801b818 <_realloc_r>
 801ae22:	4606      	mov	r6, r0
 801ae24:	2800      	cmp	r0, #0
 801ae26:	d1e1      	bne.n	801adec <__ssputs_r+0x70>
 801ae28:	6921      	ldr	r1, [r4, #16]
 801ae2a:	4650      	mov	r0, sl
 801ae2c:	f7ff fefc 	bl	801ac28 <_free_r>
 801ae30:	e7c7      	b.n	801adc2 <__ssputs_r+0x46>
	...

0801ae34 <_svfiprintf_r>:
 801ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae38:	4698      	mov	r8, r3
 801ae3a:	898b      	ldrh	r3, [r1, #12]
 801ae3c:	061b      	lsls	r3, r3, #24
 801ae3e:	b09d      	sub	sp, #116	; 0x74
 801ae40:	4607      	mov	r7, r0
 801ae42:	460d      	mov	r5, r1
 801ae44:	4614      	mov	r4, r2
 801ae46:	d50e      	bpl.n	801ae66 <_svfiprintf_r+0x32>
 801ae48:	690b      	ldr	r3, [r1, #16]
 801ae4a:	b963      	cbnz	r3, 801ae66 <_svfiprintf_r+0x32>
 801ae4c:	2140      	movs	r1, #64	; 0x40
 801ae4e:	f7ff ff3b 	bl	801acc8 <_malloc_r>
 801ae52:	6028      	str	r0, [r5, #0]
 801ae54:	6128      	str	r0, [r5, #16]
 801ae56:	b920      	cbnz	r0, 801ae62 <_svfiprintf_r+0x2e>
 801ae58:	230c      	movs	r3, #12
 801ae5a:	603b      	str	r3, [r7, #0]
 801ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ae60:	e0d1      	b.n	801b006 <_svfiprintf_r+0x1d2>
 801ae62:	2340      	movs	r3, #64	; 0x40
 801ae64:	616b      	str	r3, [r5, #20]
 801ae66:	2300      	movs	r3, #0
 801ae68:	9309      	str	r3, [sp, #36]	; 0x24
 801ae6a:	2320      	movs	r3, #32
 801ae6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae70:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae74:	2330      	movs	r3, #48	; 0x30
 801ae76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b020 <_svfiprintf_r+0x1ec>
 801ae7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae7e:	f04f 0901 	mov.w	r9, #1
 801ae82:	4623      	mov	r3, r4
 801ae84:	469a      	mov	sl, r3
 801ae86:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae8a:	b10a      	cbz	r2, 801ae90 <_svfiprintf_r+0x5c>
 801ae8c:	2a25      	cmp	r2, #37	; 0x25
 801ae8e:	d1f9      	bne.n	801ae84 <_svfiprintf_r+0x50>
 801ae90:	ebba 0b04 	subs.w	fp, sl, r4
 801ae94:	d00b      	beq.n	801aeae <_svfiprintf_r+0x7a>
 801ae96:	465b      	mov	r3, fp
 801ae98:	4622      	mov	r2, r4
 801ae9a:	4629      	mov	r1, r5
 801ae9c:	4638      	mov	r0, r7
 801ae9e:	f7ff ff6d 	bl	801ad7c <__ssputs_r>
 801aea2:	3001      	adds	r0, #1
 801aea4:	f000 80aa 	beq.w	801affc <_svfiprintf_r+0x1c8>
 801aea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aeaa:	445a      	add	r2, fp
 801aeac:	9209      	str	r2, [sp, #36]	; 0x24
 801aeae:	f89a 3000 	ldrb.w	r3, [sl]
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	f000 80a2 	beq.w	801affc <_svfiprintf_r+0x1c8>
 801aeb8:	2300      	movs	r3, #0
 801aeba:	f04f 32ff 	mov.w	r2, #4294967295
 801aebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aec2:	f10a 0a01 	add.w	sl, sl, #1
 801aec6:	9304      	str	r3, [sp, #16]
 801aec8:	9307      	str	r3, [sp, #28]
 801aeca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aece:	931a      	str	r3, [sp, #104]	; 0x68
 801aed0:	4654      	mov	r4, sl
 801aed2:	2205      	movs	r2, #5
 801aed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aed8:	4851      	ldr	r0, [pc, #324]	; (801b020 <_svfiprintf_r+0x1ec>)
 801aeda:	f7e5 f991 	bl	8000200 <memchr>
 801aede:	9a04      	ldr	r2, [sp, #16]
 801aee0:	b9d8      	cbnz	r0, 801af1a <_svfiprintf_r+0xe6>
 801aee2:	06d0      	lsls	r0, r2, #27
 801aee4:	bf44      	itt	mi
 801aee6:	2320      	movmi	r3, #32
 801aee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aeec:	0711      	lsls	r1, r2, #28
 801aeee:	bf44      	itt	mi
 801aef0:	232b      	movmi	r3, #43	; 0x2b
 801aef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aef6:	f89a 3000 	ldrb.w	r3, [sl]
 801aefa:	2b2a      	cmp	r3, #42	; 0x2a
 801aefc:	d015      	beq.n	801af2a <_svfiprintf_r+0xf6>
 801aefe:	9a07      	ldr	r2, [sp, #28]
 801af00:	4654      	mov	r4, sl
 801af02:	2000      	movs	r0, #0
 801af04:	f04f 0c0a 	mov.w	ip, #10
 801af08:	4621      	mov	r1, r4
 801af0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af0e:	3b30      	subs	r3, #48	; 0x30
 801af10:	2b09      	cmp	r3, #9
 801af12:	d94e      	bls.n	801afb2 <_svfiprintf_r+0x17e>
 801af14:	b1b0      	cbz	r0, 801af44 <_svfiprintf_r+0x110>
 801af16:	9207      	str	r2, [sp, #28]
 801af18:	e014      	b.n	801af44 <_svfiprintf_r+0x110>
 801af1a:	eba0 0308 	sub.w	r3, r0, r8
 801af1e:	fa09 f303 	lsl.w	r3, r9, r3
 801af22:	4313      	orrs	r3, r2
 801af24:	9304      	str	r3, [sp, #16]
 801af26:	46a2      	mov	sl, r4
 801af28:	e7d2      	b.n	801aed0 <_svfiprintf_r+0x9c>
 801af2a:	9b03      	ldr	r3, [sp, #12]
 801af2c:	1d19      	adds	r1, r3, #4
 801af2e:	681b      	ldr	r3, [r3, #0]
 801af30:	9103      	str	r1, [sp, #12]
 801af32:	2b00      	cmp	r3, #0
 801af34:	bfbb      	ittet	lt
 801af36:	425b      	neglt	r3, r3
 801af38:	f042 0202 	orrlt.w	r2, r2, #2
 801af3c:	9307      	strge	r3, [sp, #28]
 801af3e:	9307      	strlt	r3, [sp, #28]
 801af40:	bfb8      	it	lt
 801af42:	9204      	strlt	r2, [sp, #16]
 801af44:	7823      	ldrb	r3, [r4, #0]
 801af46:	2b2e      	cmp	r3, #46	; 0x2e
 801af48:	d10c      	bne.n	801af64 <_svfiprintf_r+0x130>
 801af4a:	7863      	ldrb	r3, [r4, #1]
 801af4c:	2b2a      	cmp	r3, #42	; 0x2a
 801af4e:	d135      	bne.n	801afbc <_svfiprintf_r+0x188>
 801af50:	9b03      	ldr	r3, [sp, #12]
 801af52:	1d1a      	adds	r2, r3, #4
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	9203      	str	r2, [sp, #12]
 801af58:	2b00      	cmp	r3, #0
 801af5a:	bfb8      	it	lt
 801af5c:	f04f 33ff 	movlt.w	r3, #4294967295
 801af60:	3402      	adds	r4, #2
 801af62:	9305      	str	r3, [sp, #20]
 801af64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b030 <_svfiprintf_r+0x1fc>
 801af68:	7821      	ldrb	r1, [r4, #0]
 801af6a:	2203      	movs	r2, #3
 801af6c:	4650      	mov	r0, sl
 801af6e:	f7e5 f947 	bl	8000200 <memchr>
 801af72:	b140      	cbz	r0, 801af86 <_svfiprintf_r+0x152>
 801af74:	2340      	movs	r3, #64	; 0x40
 801af76:	eba0 000a 	sub.w	r0, r0, sl
 801af7a:	fa03 f000 	lsl.w	r0, r3, r0
 801af7e:	9b04      	ldr	r3, [sp, #16]
 801af80:	4303      	orrs	r3, r0
 801af82:	3401      	adds	r4, #1
 801af84:	9304      	str	r3, [sp, #16]
 801af86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af8a:	4826      	ldr	r0, [pc, #152]	; (801b024 <_svfiprintf_r+0x1f0>)
 801af8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801af90:	2206      	movs	r2, #6
 801af92:	f7e5 f935 	bl	8000200 <memchr>
 801af96:	2800      	cmp	r0, #0
 801af98:	d038      	beq.n	801b00c <_svfiprintf_r+0x1d8>
 801af9a:	4b23      	ldr	r3, [pc, #140]	; (801b028 <_svfiprintf_r+0x1f4>)
 801af9c:	bb1b      	cbnz	r3, 801afe6 <_svfiprintf_r+0x1b2>
 801af9e:	9b03      	ldr	r3, [sp, #12]
 801afa0:	3307      	adds	r3, #7
 801afa2:	f023 0307 	bic.w	r3, r3, #7
 801afa6:	3308      	adds	r3, #8
 801afa8:	9303      	str	r3, [sp, #12]
 801afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afac:	4433      	add	r3, r6
 801afae:	9309      	str	r3, [sp, #36]	; 0x24
 801afb0:	e767      	b.n	801ae82 <_svfiprintf_r+0x4e>
 801afb2:	fb0c 3202 	mla	r2, ip, r2, r3
 801afb6:	460c      	mov	r4, r1
 801afb8:	2001      	movs	r0, #1
 801afba:	e7a5      	b.n	801af08 <_svfiprintf_r+0xd4>
 801afbc:	2300      	movs	r3, #0
 801afbe:	3401      	adds	r4, #1
 801afc0:	9305      	str	r3, [sp, #20]
 801afc2:	4619      	mov	r1, r3
 801afc4:	f04f 0c0a 	mov.w	ip, #10
 801afc8:	4620      	mov	r0, r4
 801afca:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afce:	3a30      	subs	r2, #48	; 0x30
 801afd0:	2a09      	cmp	r2, #9
 801afd2:	d903      	bls.n	801afdc <_svfiprintf_r+0x1a8>
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d0c5      	beq.n	801af64 <_svfiprintf_r+0x130>
 801afd8:	9105      	str	r1, [sp, #20]
 801afda:	e7c3      	b.n	801af64 <_svfiprintf_r+0x130>
 801afdc:	fb0c 2101 	mla	r1, ip, r1, r2
 801afe0:	4604      	mov	r4, r0
 801afe2:	2301      	movs	r3, #1
 801afe4:	e7f0      	b.n	801afc8 <_svfiprintf_r+0x194>
 801afe6:	ab03      	add	r3, sp, #12
 801afe8:	9300      	str	r3, [sp, #0]
 801afea:	462a      	mov	r2, r5
 801afec:	4b0f      	ldr	r3, [pc, #60]	; (801b02c <_svfiprintf_r+0x1f8>)
 801afee:	a904      	add	r1, sp, #16
 801aff0:	4638      	mov	r0, r7
 801aff2:	f7fc f8ff 	bl	80171f4 <_printf_float>
 801aff6:	1c42      	adds	r2, r0, #1
 801aff8:	4606      	mov	r6, r0
 801affa:	d1d6      	bne.n	801afaa <_svfiprintf_r+0x176>
 801affc:	89ab      	ldrh	r3, [r5, #12]
 801affe:	065b      	lsls	r3, r3, #25
 801b000:	f53f af2c 	bmi.w	801ae5c <_svfiprintf_r+0x28>
 801b004:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b006:	b01d      	add	sp, #116	; 0x74
 801b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b00c:	ab03      	add	r3, sp, #12
 801b00e:	9300      	str	r3, [sp, #0]
 801b010:	462a      	mov	r2, r5
 801b012:	4b06      	ldr	r3, [pc, #24]	; (801b02c <_svfiprintf_r+0x1f8>)
 801b014:	a904      	add	r1, sp, #16
 801b016:	4638      	mov	r0, r7
 801b018:	f7fc fb90 	bl	801773c <_printf_i>
 801b01c:	e7eb      	b.n	801aff6 <_svfiprintf_r+0x1c2>
 801b01e:	bf00      	nop
 801b020:	08022154 	.word	0x08022154
 801b024:	0802215e 	.word	0x0802215e
 801b028:	080171f5 	.word	0x080171f5
 801b02c:	0801ad7d 	.word	0x0801ad7d
 801b030:	0802215a 	.word	0x0802215a

0801b034 <__sfputc_r>:
 801b034:	6893      	ldr	r3, [r2, #8]
 801b036:	3b01      	subs	r3, #1
 801b038:	2b00      	cmp	r3, #0
 801b03a:	b410      	push	{r4}
 801b03c:	6093      	str	r3, [r2, #8]
 801b03e:	da08      	bge.n	801b052 <__sfputc_r+0x1e>
 801b040:	6994      	ldr	r4, [r2, #24]
 801b042:	42a3      	cmp	r3, r4
 801b044:	db01      	blt.n	801b04a <__sfputc_r+0x16>
 801b046:	290a      	cmp	r1, #10
 801b048:	d103      	bne.n	801b052 <__sfputc_r+0x1e>
 801b04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b04e:	f000 b9a7 	b.w	801b3a0 <__swbuf_r>
 801b052:	6813      	ldr	r3, [r2, #0]
 801b054:	1c58      	adds	r0, r3, #1
 801b056:	6010      	str	r0, [r2, #0]
 801b058:	7019      	strb	r1, [r3, #0]
 801b05a:	4608      	mov	r0, r1
 801b05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b060:	4770      	bx	lr

0801b062 <__sfputs_r>:
 801b062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b064:	4606      	mov	r6, r0
 801b066:	460f      	mov	r7, r1
 801b068:	4614      	mov	r4, r2
 801b06a:	18d5      	adds	r5, r2, r3
 801b06c:	42ac      	cmp	r4, r5
 801b06e:	d101      	bne.n	801b074 <__sfputs_r+0x12>
 801b070:	2000      	movs	r0, #0
 801b072:	e007      	b.n	801b084 <__sfputs_r+0x22>
 801b074:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b078:	463a      	mov	r2, r7
 801b07a:	4630      	mov	r0, r6
 801b07c:	f7ff ffda 	bl	801b034 <__sfputc_r>
 801b080:	1c43      	adds	r3, r0, #1
 801b082:	d1f3      	bne.n	801b06c <__sfputs_r+0xa>
 801b084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b088 <_vfiprintf_r>:
 801b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b08c:	460d      	mov	r5, r1
 801b08e:	b09d      	sub	sp, #116	; 0x74
 801b090:	4614      	mov	r4, r2
 801b092:	4698      	mov	r8, r3
 801b094:	4606      	mov	r6, r0
 801b096:	b118      	cbz	r0, 801b0a0 <_vfiprintf_r+0x18>
 801b098:	6983      	ldr	r3, [r0, #24]
 801b09a:	b90b      	cbnz	r3, 801b0a0 <_vfiprintf_r+0x18>
 801b09c:	f7fe fcba 	bl	8019a14 <__sinit>
 801b0a0:	4b89      	ldr	r3, [pc, #548]	; (801b2c8 <_vfiprintf_r+0x240>)
 801b0a2:	429d      	cmp	r5, r3
 801b0a4:	d11b      	bne.n	801b0de <_vfiprintf_r+0x56>
 801b0a6:	6875      	ldr	r5, [r6, #4]
 801b0a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b0aa:	07d9      	lsls	r1, r3, #31
 801b0ac:	d405      	bmi.n	801b0ba <_vfiprintf_r+0x32>
 801b0ae:	89ab      	ldrh	r3, [r5, #12]
 801b0b0:	059a      	lsls	r2, r3, #22
 801b0b2:	d402      	bmi.n	801b0ba <_vfiprintf_r+0x32>
 801b0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b0b6:	f7ff f8d0 	bl	801a25a <__retarget_lock_acquire_recursive>
 801b0ba:	89ab      	ldrh	r3, [r5, #12]
 801b0bc:	071b      	lsls	r3, r3, #28
 801b0be:	d501      	bpl.n	801b0c4 <_vfiprintf_r+0x3c>
 801b0c0:	692b      	ldr	r3, [r5, #16]
 801b0c2:	b9eb      	cbnz	r3, 801b100 <_vfiprintf_r+0x78>
 801b0c4:	4629      	mov	r1, r5
 801b0c6:	4630      	mov	r0, r6
 801b0c8:	f000 f9dc 	bl	801b484 <__swsetup_r>
 801b0cc:	b1c0      	cbz	r0, 801b100 <_vfiprintf_r+0x78>
 801b0ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b0d0:	07dc      	lsls	r4, r3, #31
 801b0d2:	d50e      	bpl.n	801b0f2 <_vfiprintf_r+0x6a>
 801b0d4:	f04f 30ff 	mov.w	r0, #4294967295
 801b0d8:	b01d      	add	sp, #116	; 0x74
 801b0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0de:	4b7b      	ldr	r3, [pc, #492]	; (801b2cc <_vfiprintf_r+0x244>)
 801b0e0:	429d      	cmp	r5, r3
 801b0e2:	d101      	bne.n	801b0e8 <_vfiprintf_r+0x60>
 801b0e4:	68b5      	ldr	r5, [r6, #8]
 801b0e6:	e7df      	b.n	801b0a8 <_vfiprintf_r+0x20>
 801b0e8:	4b79      	ldr	r3, [pc, #484]	; (801b2d0 <_vfiprintf_r+0x248>)
 801b0ea:	429d      	cmp	r5, r3
 801b0ec:	bf08      	it	eq
 801b0ee:	68f5      	ldreq	r5, [r6, #12]
 801b0f0:	e7da      	b.n	801b0a8 <_vfiprintf_r+0x20>
 801b0f2:	89ab      	ldrh	r3, [r5, #12]
 801b0f4:	0598      	lsls	r0, r3, #22
 801b0f6:	d4ed      	bmi.n	801b0d4 <_vfiprintf_r+0x4c>
 801b0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b0fa:	f7ff f8af 	bl	801a25c <__retarget_lock_release_recursive>
 801b0fe:	e7e9      	b.n	801b0d4 <_vfiprintf_r+0x4c>
 801b100:	2300      	movs	r3, #0
 801b102:	9309      	str	r3, [sp, #36]	; 0x24
 801b104:	2320      	movs	r3, #32
 801b106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b10a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b10e:	2330      	movs	r3, #48	; 0x30
 801b110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b2d4 <_vfiprintf_r+0x24c>
 801b114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b118:	f04f 0901 	mov.w	r9, #1
 801b11c:	4623      	mov	r3, r4
 801b11e:	469a      	mov	sl, r3
 801b120:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b124:	b10a      	cbz	r2, 801b12a <_vfiprintf_r+0xa2>
 801b126:	2a25      	cmp	r2, #37	; 0x25
 801b128:	d1f9      	bne.n	801b11e <_vfiprintf_r+0x96>
 801b12a:	ebba 0b04 	subs.w	fp, sl, r4
 801b12e:	d00b      	beq.n	801b148 <_vfiprintf_r+0xc0>
 801b130:	465b      	mov	r3, fp
 801b132:	4622      	mov	r2, r4
 801b134:	4629      	mov	r1, r5
 801b136:	4630      	mov	r0, r6
 801b138:	f7ff ff93 	bl	801b062 <__sfputs_r>
 801b13c:	3001      	adds	r0, #1
 801b13e:	f000 80aa 	beq.w	801b296 <_vfiprintf_r+0x20e>
 801b142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b144:	445a      	add	r2, fp
 801b146:	9209      	str	r2, [sp, #36]	; 0x24
 801b148:	f89a 3000 	ldrb.w	r3, [sl]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	f000 80a2 	beq.w	801b296 <_vfiprintf_r+0x20e>
 801b152:	2300      	movs	r3, #0
 801b154:	f04f 32ff 	mov.w	r2, #4294967295
 801b158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b15c:	f10a 0a01 	add.w	sl, sl, #1
 801b160:	9304      	str	r3, [sp, #16]
 801b162:	9307      	str	r3, [sp, #28]
 801b164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b168:	931a      	str	r3, [sp, #104]	; 0x68
 801b16a:	4654      	mov	r4, sl
 801b16c:	2205      	movs	r2, #5
 801b16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b172:	4858      	ldr	r0, [pc, #352]	; (801b2d4 <_vfiprintf_r+0x24c>)
 801b174:	f7e5 f844 	bl	8000200 <memchr>
 801b178:	9a04      	ldr	r2, [sp, #16]
 801b17a:	b9d8      	cbnz	r0, 801b1b4 <_vfiprintf_r+0x12c>
 801b17c:	06d1      	lsls	r1, r2, #27
 801b17e:	bf44      	itt	mi
 801b180:	2320      	movmi	r3, #32
 801b182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b186:	0713      	lsls	r3, r2, #28
 801b188:	bf44      	itt	mi
 801b18a:	232b      	movmi	r3, #43	; 0x2b
 801b18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b190:	f89a 3000 	ldrb.w	r3, [sl]
 801b194:	2b2a      	cmp	r3, #42	; 0x2a
 801b196:	d015      	beq.n	801b1c4 <_vfiprintf_r+0x13c>
 801b198:	9a07      	ldr	r2, [sp, #28]
 801b19a:	4654      	mov	r4, sl
 801b19c:	2000      	movs	r0, #0
 801b19e:	f04f 0c0a 	mov.w	ip, #10
 801b1a2:	4621      	mov	r1, r4
 801b1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b1a8:	3b30      	subs	r3, #48	; 0x30
 801b1aa:	2b09      	cmp	r3, #9
 801b1ac:	d94e      	bls.n	801b24c <_vfiprintf_r+0x1c4>
 801b1ae:	b1b0      	cbz	r0, 801b1de <_vfiprintf_r+0x156>
 801b1b0:	9207      	str	r2, [sp, #28]
 801b1b2:	e014      	b.n	801b1de <_vfiprintf_r+0x156>
 801b1b4:	eba0 0308 	sub.w	r3, r0, r8
 801b1b8:	fa09 f303 	lsl.w	r3, r9, r3
 801b1bc:	4313      	orrs	r3, r2
 801b1be:	9304      	str	r3, [sp, #16]
 801b1c0:	46a2      	mov	sl, r4
 801b1c2:	e7d2      	b.n	801b16a <_vfiprintf_r+0xe2>
 801b1c4:	9b03      	ldr	r3, [sp, #12]
 801b1c6:	1d19      	adds	r1, r3, #4
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	9103      	str	r1, [sp, #12]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	bfbb      	ittet	lt
 801b1d0:	425b      	neglt	r3, r3
 801b1d2:	f042 0202 	orrlt.w	r2, r2, #2
 801b1d6:	9307      	strge	r3, [sp, #28]
 801b1d8:	9307      	strlt	r3, [sp, #28]
 801b1da:	bfb8      	it	lt
 801b1dc:	9204      	strlt	r2, [sp, #16]
 801b1de:	7823      	ldrb	r3, [r4, #0]
 801b1e0:	2b2e      	cmp	r3, #46	; 0x2e
 801b1e2:	d10c      	bne.n	801b1fe <_vfiprintf_r+0x176>
 801b1e4:	7863      	ldrb	r3, [r4, #1]
 801b1e6:	2b2a      	cmp	r3, #42	; 0x2a
 801b1e8:	d135      	bne.n	801b256 <_vfiprintf_r+0x1ce>
 801b1ea:	9b03      	ldr	r3, [sp, #12]
 801b1ec:	1d1a      	adds	r2, r3, #4
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	9203      	str	r2, [sp, #12]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	bfb8      	it	lt
 801b1f6:	f04f 33ff 	movlt.w	r3, #4294967295
 801b1fa:	3402      	adds	r4, #2
 801b1fc:	9305      	str	r3, [sp, #20]
 801b1fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b2e4 <_vfiprintf_r+0x25c>
 801b202:	7821      	ldrb	r1, [r4, #0]
 801b204:	2203      	movs	r2, #3
 801b206:	4650      	mov	r0, sl
 801b208:	f7e4 fffa 	bl	8000200 <memchr>
 801b20c:	b140      	cbz	r0, 801b220 <_vfiprintf_r+0x198>
 801b20e:	2340      	movs	r3, #64	; 0x40
 801b210:	eba0 000a 	sub.w	r0, r0, sl
 801b214:	fa03 f000 	lsl.w	r0, r3, r0
 801b218:	9b04      	ldr	r3, [sp, #16]
 801b21a:	4303      	orrs	r3, r0
 801b21c:	3401      	adds	r4, #1
 801b21e:	9304      	str	r3, [sp, #16]
 801b220:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b224:	482c      	ldr	r0, [pc, #176]	; (801b2d8 <_vfiprintf_r+0x250>)
 801b226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b22a:	2206      	movs	r2, #6
 801b22c:	f7e4 ffe8 	bl	8000200 <memchr>
 801b230:	2800      	cmp	r0, #0
 801b232:	d03f      	beq.n	801b2b4 <_vfiprintf_r+0x22c>
 801b234:	4b29      	ldr	r3, [pc, #164]	; (801b2dc <_vfiprintf_r+0x254>)
 801b236:	bb1b      	cbnz	r3, 801b280 <_vfiprintf_r+0x1f8>
 801b238:	9b03      	ldr	r3, [sp, #12]
 801b23a:	3307      	adds	r3, #7
 801b23c:	f023 0307 	bic.w	r3, r3, #7
 801b240:	3308      	adds	r3, #8
 801b242:	9303      	str	r3, [sp, #12]
 801b244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b246:	443b      	add	r3, r7
 801b248:	9309      	str	r3, [sp, #36]	; 0x24
 801b24a:	e767      	b.n	801b11c <_vfiprintf_r+0x94>
 801b24c:	fb0c 3202 	mla	r2, ip, r2, r3
 801b250:	460c      	mov	r4, r1
 801b252:	2001      	movs	r0, #1
 801b254:	e7a5      	b.n	801b1a2 <_vfiprintf_r+0x11a>
 801b256:	2300      	movs	r3, #0
 801b258:	3401      	adds	r4, #1
 801b25a:	9305      	str	r3, [sp, #20]
 801b25c:	4619      	mov	r1, r3
 801b25e:	f04f 0c0a 	mov.w	ip, #10
 801b262:	4620      	mov	r0, r4
 801b264:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b268:	3a30      	subs	r2, #48	; 0x30
 801b26a:	2a09      	cmp	r2, #9
 801b26c:	d903      	bls.n	801b276 <_vfiprintf_r+0x1ee>
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d0c5      	beq.n	801b1fe <_vfiprintf_r+0x176>
 801b272:	9105      	str	r1, [sp, #20]
 801b274:	e7c3      	b.n	801b1fe <_vfiprintf_r+0x176>
 801b276:	fb0c 2101 	mla	r1, ip, r1, r2
 801b27a:	4604      	mov	r4, r0
 801b27c:	2301      	movs	r3, #1
 801b27e:	e7f0      	b.n	801b262 <_vfiprintf_r+0x1da>
 801b280:	ab03      	add	r3, sp, #12
 801b282:	9300      	str	r3, [sp, #0]
 801b284:	462a      	mov	r2, r5
 801b286:	4b16      	ldr	r3, [pc, #88]	; (801b2e0 <_vfiprintf_r+0x258>)
 801b288:	a904      	add	r1, sp, #16
 801b28a:	4630      	mov	r0, r6
 801b28c:	f7fb ffb2 	bl	80171f4 <_printf_float>
 801b290:	4607      	mov	r7, r0
 801b292:	1c78      	adds	r0, r7, #1
 801b294:	d1d6      	bne.n	801b244 <_vfiprintf_r+0x1bc>
 801b296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b298:	07d9      	lsls	r1, r3, #31
 801b29a:	d405      	bmi.n	801b2a8 <_vfiprintf_r+0x220>
 801b29c:	89ab      	ldrh	r3, [r5, #12]
 801b29e:	059a      	lsls	r2, r3, #22
 801b2a0:	d402      	bmi.n	801b2a8 <_vfiprintf_r+0x220>
 801b2a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b2a4:	f7fe ffda 	bl	801a25c <__retarget_lock_release_recursive>
 801b2a8:	89ab      	ldrh	r3, [r5, #12]
 801b2aa:	065b      	lsls	r3, r3, #25
 801b2ac:	f53f af12 	bmi.w	801b0d4 <_vfiprintf_r+0x4c>
 801b2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b2b2:	e711      	b.n	801b0d8 <_vfiprintf_r+0x50>
 801b2b4:	ab03      	add	r3, sp, #12
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	462a      	mov	r2, r5
 801b2ba:	4b09      	ldr	r3, [pc, #36]	; (801b2e0 <_vfiprintf_r+0x258>)
 801b2bc:	a904      	add	r1, sp, #16
 801b2be:	4630      	mov	r0, r6
 801b2c0:	f7fc fa3c 	bl	801773c <_printf_i>
 801b2c4:	e7e4      	b.n	801b290 <_vfiprintf_r+0x208>
 801b2c6:	bf00      	nop
 801b2c8:	08021f34 	.word	0x08021f34
 801b2cc:	08021f54 	.word	0x08021f54
 801b2d0:	08021f14 	.word	0x08021f14
 801b2d4:	08022154 	.word	0x08022154
 801b2d8:	0802215e 	.word	0x0802215e
 801b2dc:	080171f5 	.word	0x080171f5
 801b2e0:	0801b063 	.word	0x0801b063
 801b2e4:	0802215a 	.word	0x0802215a

0801b2e8 <nan>:
 801b2e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b2f0 <nan+0x8>
 801b2ec:	4770      	bx	lr
 801b2ee:	bf00      	nop
 801b2f0:	00000000 	.word	0x00000000
 801b2f4:	7ff80000 	.word	0x7ff80000

0801b2f8 <_sbrk_r>:
 801b2f8:	b538      	push	{r3, r4, r5, lr}
 801b2fa:	4d06      	ldr	r5, [pc, #24]	; (801b314 <_sbrk_r+0x1c>)
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	4604      	mov	r4, r0
 801b300:	4608      	mov	r0, r1
 801b302:	602b      	str	r3, [r5, #0]
 801b304:	f7e6 fe42 	bl	8001f8c <_sbrk>
 801b308:	1c43      	adds	r3, r0, #1
 801b30a:	d102      	bne.n	801b312 <_sbrk_r+0x1a>
 801b30c:	682b      	ldr	r3, [r5, #0]
 801b30e:	b103      	cbz	r3, 801b312 <_sbrk_r+0x1a>
 801b310:	6023      	str	r3, [r4, #0]
 801b312:	bd38      	pop	{r3, r4, r5, pc}
 801b314:	20008a0c 	.word	0x20008a0c

0801b318 <__sread>:
 801b318:	b510      	push	{r4, lr}
 801b31a:	460c      	mov	r4, r1
 801b31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b320:	f000 faa0 	bl	801b864 <_read_r>
 801b324:	2800      	cmp	r0, #0
 801b326:	bfab      	itete	ge
 801b328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b32a:	89a3      	ldrhlt	r3, [r4, #12]
 801b32c:	181b      	addge	r3, r3, r0
 801b32e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b332:	bfac      	ite	ge
 801b334:	6563      	strge	r3, [r4, #84]	; 0x54
 801b336:	81a3      	strhlt	r3, [r4, #12]
 801b338:	bd10      	pop	{r4, pc}

0801b33a <__swrite>:
 801b33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b33e:	461f      	mov	r7, r3
 801b340:	898b      	ldrh	r3, [r1, #12]
 801b342:	05db      	lsls	r3, r3, #23
 801b344:	4605      	mov	r5, r0
 801b346:	460c      	mov	r4, r1
 801b348:	4616      	mov	r6, r2
 801b34a:	d505      	bpl.n	801b358 <__swrite+0x1e>
 801b34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b350:	2302      	movs	r3, #2
 801b352:	2200      	movs	r2, #0
 801b354:	f000 f9de 	bl	801b714 <_lseek_r>
 801b358:	89a3      	ldrh	r3, [r4, #12]
 801b35a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b35e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b362:	81a3      	strh	r3, [r4, #12]
 801b364:	4632      	mov	r2, r6
 801b366:	463b      	mov	r3, r7
 801b368:	4628      	mov	r0, r5
 801b36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b36e:	f000 b877 	b.w	801b460 <_write_r>

0801b372 <__sseek>:
 801b372:	b510      	push	{r4, lr}
 801b374:	460c      	mov	r4, r1
 801b376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b37a:	f000 f9cb 	bl	801b714 <_lseek_r>
 801b37e:	1c43      	adds	r3, r0, #1
 801b380:	89a3      	ldrh	r3, [r4, #12]
 801b382:	bf15      	itete	ne
 801b384:	6560      	strne	r0, [r4, #84]	; 0x54
 801b386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b38a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b38e:	81a3      	strheq	r3, [r4, #12]
 801b390:	bf18      	it	ne
 801b392:	81a3      	strhne	r3, [r4, #12]
 801b394:	bd10      	pop	{r4, pc}

0801b396 <__sclose>:
 801b396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b39a:	f000 b8e9 	b.w	801b570 <_close_r>
	...

0801b3a0 <__swbuf_r>:
 801b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3a2:	460e      	mov	r6, r1
 801b3a4:	4614      	mov	r4, r2
 801b3a6:	4605      	mov	r5, r0
 801b3a8:	b118      	cbz	r0, 801b3b2 <__swbuf_r+0x12>
 801b3aa:	6983      	ldr	r3, [r0, #24]
 801b3ac:	b90b      	cbnz	r3, 801b3b2 <__swbuf_r+0x12>
 801b3ae:	f7fe fb31 	bl	8019a14 <__sinit>
 801b3b2:	4b21      	ldr	r3, [pc, #132]	; (801b438 <__swbuf_r+0x98>)
 801b3b4:	429c      	cmp	r4, r3
 801b3b6:	d12b      	bne.n	801b410 <__swbuf_r+0x70>
 801b3b8:	686c      	ldr	r4, [r5, #4]
 801b3ba:	69a3      	ldr	r3, [r4, #24]
 801b3bc:	60a3      	str	r3, [r4, #8]
 801b3be:	89a3      	ldrh	r3, [r4, #12]
 801b3c0:	071a      	lsls	r2, r3, #28
 801b3c2:	d52f      	bpl.n	801b424 <__swbuf_r+0x84>
 801b3c4:	6923      	ldr	r3, [r4, #16]
 801b3c6:	b36b      	cbz	r3, 801b424 <__swbuf_r+0x84>
 801b3c8:	6923      	ldr	r3, [r4, #16]
 801b3ca:	6820      	ldr	r0, [r4, #0]
 801b3cc:	1ac0      	subs	r0, r0, r3
 801b3ce:	6963      	ldr	r3, [r4, #20]
 801b3d0:	b2f6      	uxtb	r6, r6
 801b3d2:	4283      	cmp	r3, r0
 801b3d4:	4637      	mov	r7, r6
 801b3d6:	dc04      	bgt.n	801b3e2 <__swbuf_r+0x42>
 801b3d8:	4621      	mov	r1, r4
 801b3da:	4628      	mov	r0, r5
 801b3dc:	f000 f95e 	bl	801b69c <_fflush_r>
 801b3e0:	bb30      	cbnz	r0, 801b430 <__swbuf_r+0x90>
 801b3e2:	68a3      	ldr	r3, [r4, #8]
 801b3e4:	3b01      	subs	r3, #1
 801b3e6:	60a3      	str	r3, [r4, #8]
 801b3e8:	6823      	ldr	r3, [r4, #0]
 801b3ea:	1c5a      	adds	r2, r3, #1
 801b3ec:	6022      	str	r2, [r4, #0]
 801b3ee:	701e      	strb	r6, [r3, #0]
 801b3f0:	6963      	ldr	r3, [r4, #20]
 801b3f2:	3001      	adds	r0, #1
 801b3f4:	4283      	cmp	r3, r0
 801b3f6:	d004      	beq.n	801b402 <__swbuf_r+0x62>
 801b3f8:	89a3      	ldrh	r3, [r4, #12]
 801b3fa:	07db      	lsls	r3, r3, #31
 801b3fc:	d506      	bpl.n	801b40c <__swbuf_r+0x6c>
 801b3fe:	2e0a      	cmp	r6, #10
 801b400:	d104      	bne.n	801b40c <__swbuf_r+0x6c>
 801b402:	4621      	mov	r1, r4
 801b404:	4628      	mov	r0, r5
 801b406:	f000 f949 	bl	801b69c <_fflush_r>
 801b40a:	b988      	cbnz	r0, 801b430 <__swbuf_r+0x90>
 801b40c:	4638      	mov	r0, r7
 801b40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b410:	4b0a      	ldr	r3, [pc, #40]	; (801b43c <__swbuf_r+0x9c>)
 801b412:	429c      	cmp	r4, r3
 801b414:	d101      	bne.n	801b41a <__swbuf_r+0x7a>
 801b416:	68ac      	ldr	r4, [r5, #8]
 801b418:	e7cf      	b.n	801b3ba <__swbuf_r+0x1a>
 801b41a:	4b09      	ldr	r3, [pc, #36]	; (801b440 <__swbuf_r+0xa0>)
 801b41c:	429c      	cmp	r4, r3
 801b41e:	bf08      	it	eq
 801b420:	68ec      	ldreq	r4, [r5, #12]
 801b422:	e7ca      	b.n	801b3ba <__swbuf_r+0x1a>
 801b424:	4621      	mov	r1, r4
 801b426:	4628      	mov	r0, r5
 801b428:	f000 f82c 	bl	801b484 <__swsetup_r>
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d0cb      	beq.n	801b3c8 <__swbuf_r+0x28>
 801b430:	f04f 37ff 	mov.w	r7, #4294967295
 801b434:	e7ea      	b.n	801b40c <__swbuf_r+0x6c>
 801b436:	bf00      	nop
 801b438:	08021f34 	.word	0x08021f34
 801b43c:	08021f54 	.word	0x08021f54
 801b440:	08021f14 	.word	0x08021f14

0801b444 <__ascii_wctomb>:
 801b444:	b149      	cbz	r1, 801b45a <__ascii_wctomb+0x16>
 801b446:	2aff      	cmp	r2, #255	; 0xff
 801b448:	bf85      	ittet	hi
 801b44a:	238a      	movhi	r3, #138	; 0x8a
 801b44c:	6003      	strhi	r3, [r0, #0]
 801b44e:	700a      	strbls	r2, [r1, #0]
 801b450:	f04f 30ff 	movhi.w	r0, #4294967295
 801b454:	bf98      	it	ls
 801b456:	2001      	movls	r0, #1
 801b458:	4770      	bx	lr
 801b45a:	4608      	mov	r0, r1
 801b45c:	4770      	bx	lr
	...

0801b460 <_write_r>:
 801b460:	b538      	push	{r3, r4, r5, lr}
 801b462:	4d07      	ldr	r5, [pc, #28]	; (801b480 <_write_r+0x20>)
 801b464:	4604      	mov	r4, r0
 801b466:	4608      	mov	r0, r1
 801b468:	4611      	mov	r1, r2
 801b46a:	2200      	movs	r2, #0
 801b46c:	602a      	str	r2, [r5, #0]
 801b46e:	461a      	mov	r2, r3
 801b470:	f7e6 fd3b 	bl	8001eea <_write>
 801b474:	1c43      	adds	r3, r0, #1
 801b476:	d102      	bne.n	801b47e <_write_r+0x1e>
 801b478:	682b      	ldr	r3, [r5, #0]
 801b47a:	b103      	cbz	r3, 801b47e <_write_r+0x1e>
 801b47c:	6023      	str	r3, [r4, #0]
 801b47e:	bd38      	pop	{r3, r4, r5, pc}
 801b480:	20008a0c 	.word	0x20008a0c

0801b484 <__swsetup_r>:
 801b484:	4b32      	ldr	r3, [pc, #200]	; (801b550 <__swsetup_r+0xcc>)
 801b486:	b570      	push	{r4, r5, r6, lr}
 801b488:	681d      	ldr	r5, [r3, #0]
 801b48a:	4606      	mov	r6, r0
 801b48c:	460c      	mov	r4, r1
 801b48e:	b125      	cbz	r5, 801b49a <__swsetup_r+0x16>
 801b490:	69ab      	ldr	r3, [r5, #24]
 801b492:	b913      	cbnz	r3, 801b49a <__swsetup_r+0x16>
 801b494:	4628      	mov	r0, r5
 801b496:	f7fe fabd 	bl	8019a14 <__sinit>
 801b49a:	4b2e      	ldr	r3, [pc, #184]	; (801b554 <__swsetup_r+0xd0>)
 801b49c:	429c      	cmp	r4, r3
 801b49e:	d10f      	bne.n	801b4c0 <__swsetup_r+0x3c>
 801b4a0:	686c      	ldr	r4, [r5, #4]
 801b4a2:	89a3      	ldrh	r3, [r4, #12]
 801b4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4a8:	0719      	lsls	r1, r3, #28
 801b4aa:	d42c      	bmi.n	801b506 <__swsetup_r+0x82>
 801b4ac:	06dd      	lsls	r5, r3, #27
 801b4ae:	d411      	bmi.n	801b4d4 <__swsetup_r+0x50>
 801b4b0:	2309      	movs	r3, #9
 801b4b2:	6033      	str	r3, [r6, #0]
 801b4b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b4b8:	81a3      	strh	r3, [r4, #12]
 801b4ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b4be:	e03e      	b.n	801b53e <__swsetup_r+0xba>
 801b4c0:	4b25      	ldr	r3, [pc, #148]	; (801b558 <__swsetup_r+0xd4>)
 801b4c2:	429c      	cmp	r4, r3
 801b4c4:	d101      	bne.n	801b4ca <__swsetup_r+0x46>
 801b4c6:	68ac      	ldr	r4, [r5, #8]
 801b4c8:	e7eb      	b.n	801b4a2 <__swsetup_r+0x1e>
 801b4ca:	4b24      	ldr	r3, [pc, #144]	; (801b55c <__swsetup_r+0xd8>)
 801b4cc:	429c      	cmp	r4, r3
 801b4ce:	bf08      	it	eq
 801b4d0:	68ec      	ldreq	r4, [r5, #12]
 801b4d2:	e7e6      	b.n	801b4a2 <__swsetup_r+0x1e>
 801b4d4:	0758      	lsls	r0, r3, #29
 801b4d6:	d512      	bpl.n	801b4fe <__swsetup_r+0x7a>
 801b4d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4da:	b141      	cbz	r1, 801b4ee <__swsetup_r+0x6a>
 801b4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b4e0:	4299      	cmp	r1, r3
 801b4e2:	d002      	beq.n	801b4ea <__swsetup_r+0x66>
 801b4e4:	4630      	mov	r0, r6
 801b4e6:	f7ff fb9f 	bl	801ac28 <_free_r>
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	6363      	str	r3, [r4, #52]	; 0x34
 801b4ee:	89a3      	ldrh	r3, [r4, #12]
 801b4f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b4f4:	81a3      	strh	r3, [r4, #12]
 801b4f6:	2300      	movs	r3, #0
 801b4f8:	6063      	str	r3, [r4, #4]
 801b4fa:	6923      	ldr	r3, [r4, #16]
 801b4fc:	6023      	str	r3, [r4, #0]
 801b4fe:	89a3      	ldrh	r3, [r4, #12]
 801b500:	f043 0308 	orr.w	r3, r3, #8
 801b504:	81a3      	strh	r3, [r4, #12]
 801b506:	6923      	ldr	r3, [r4, #16]
 801b508:	b94b      	cbnz	r3, 801b51e <__swsetup_r+0x9a>
 801b50a:	89a3      	ldrh	r3, [r4, #12]
 801b50c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b514:	d003      	beq.n	801b51e <__swsetup_r+0x9a>
 801b516:	4621      	mov	r1, r4
 801b518:	4630      	mov	r0, r6
 801b51a:	f000 f931 	bl	801b780 <__smakebuf_r>
 801b51e:	89a0      	ldrh	r0, [r4, #12]
 801b520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b524:	f010 0301 	ands.w	r3, r0, #1
 801b528:	d00a      	beq.n	801b540 <__swsetup_r+0xbc>
 801b52a:	2300      	movs	r3, #0
 801b52c:	60a3      	str	r3, [r4, #8]
 801b52e:	6963      	ldr	r3, [r4, #20]
 801b530:	425b      	negs	r3, r3
 801b532:	61a3      	str	r3, [r4, #24]
 801b534:	6923      	ldr	r3, [r4, #16]
 801b536:	b943      	cbnz	r3, 801b54a <__swsetup_r+0xc6>
 801b538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b53c:	d1ba      	bne.n	801b4b4 <__swsetup_r+0x30>
 801b53e:	bd70      	pop	{r4, r5, r6, pc}
 801b540:	0781      	lsls	r1, r0, #30
 801b542:	bf58      	it	pl
 801b544:	6963      	ldrpl	r3, [r4, #20]
 801b546:	60a3      	str	r3, [r4, #8]
 801b548:	e7f4      	b.n	801b534 <__swsetup_r+0xb0>
 801b54a:	2000      	movs	r0, #0
 801b54c:	e7f7      	b.n	801b53e <__swsetup_r+0xba>
 801b54e:	bf00      	nop
 801b550:	20000194 	.word	0x20000194
 801b554:	08021f34 	.word	0x08021f34
 801b558:	08021f54 	.word	0x08021f54
 801b55c:	08021f14 	.word	0x08021f14

0801b560 <abort>:
 801b560:	b508      	push	{r3, lr}
 801b562:	2006      	movs	r0, #6
 801b564:	f000 f9b8 	bl	801b8d8 <raise>
 801b568:	2001      	movs	r0, #1
 801b56a:	f7e6 fc97 	bl	8001e9c <_exit>
	...

0801b570 <_close_r>:
 801b570:	b538      	push	{r3, r4, r5, lr}
 801b572:	4d06      	ldr	r5, [pc, #24]	; (801b58c <_close_r+0x1c>)
 801b574:	2300      	movs	r3, #0
 801b576:	4604      	mov	r4, r0
 801b578:	4608      	mov	r0, r1
 801b57a:	602b      	str	r3, [r5, #0]
 801b57c:	f7e6 fcd1 	bl	8001f22 <_close>
 801b580:	1c43      	adds	r3, r0, #1
 801b582:	d102      	bne.n	801b58a <_close_r+0x1a>
 801b584:	682b      	ldr	r3, [r5, #0]
 801b586:	b103      	cbz	r3, 801b58a <_close_r+0x1a>
 801b588:	6023      	str	r3, [r4, #0]
 801b58a:	bd38      	pop	{r3, r4, r5, pc}
 801b58c:	20008a0c 	.word	0x20008a0c

0801b590 <__sflush_r>:
 801b590:	898a      	ldrh	r2, [r1, #12]
 801b592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b596:	4605      	mov	r5, r0
 801b598:	0710      	lsls	r0, r2, #28
 801b59a:	460c      	mov	r4, r1
 801b59c:	d458      	bmi.n	801b650 <__sflush_r+0xc0>
 801b59e:	684b      	ldr	r3, [r1, #4]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	dc05      	bgt.n	801b5b0 <__sflush_r+0x20>
 801b5a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	dc02      	bgt.n	801b5b0 <__sflush_r+0x20>
 801b5aa:	2000      	movs	r0, #0
 801b5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b5b2:	2e00      	cmp	r6, #0
 801b5b4:	d0f9      	beq.n	801b5aa <__sflush_r+0x1a>
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b5bc:	682f      	ldr	r7, [r5, #0]
 801b5be:	602b      	str	r3, [r5, #0]
 801b5c0:	d032      	beq.n	801b628 <__sflush_r+0x98>
 801b5c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b5c4:	89a3      	ldrh	r3, [r4, #12]
 801b5c6:	075a      	lsls	r2, r3, #29
 801b5c8:	d505      	bpl.n	801b5d6 <__sflush_r+0x46>
 801b5ca:	6863      	ldr	r3, [r4, #4]
 801b5cc:	1ac0      	subs	r0, r0, r3
 801b5ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b5d0:	b10b      	cbz	r3, 801b5d6 <__sflush_r+0x46>
 801b5d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b5d4:	1ac0      	subs	r0, r0, r3
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	4602      	mov	r2, r0
 801b5da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b5dc:	6a21      	ldr	r1, [r4, #32]
 801b5de:	4628      	mov	r0, r5
 801b5e0:	47b0      	blx	r6
 801b5e2:	1c43      	adds	r3, r0, #1
 801b5e4:	89a3      	ldrh	r3, [r4, #12]
 801b5e6:	d106      	bne.n	801b5f6 <__sflush_r+0x66>
 801b5e8:	6829      	ldr	r1, [r5, #0]
 801b5ea:	291d      	cmp	r1, #29
 801b5ec:	d82c      	bhi.n	801b648 <__sflush_r+0xb8>
 801b5ee:	4a2a      	ldr	r2, [pc, #168]	; (801b698 <__sflush_r+0x108>)
 801b5f0:	40ca      	lsrs	r2, r1
 801b5f2:	07d6      	lsls	r6, r2, #31
 801b5f4:	d528      	bpl.n	801b648 <__sflush_r+0xb8>
 801b5f6:	2200      	movs	r2, #0
 801b5f8:	6062      	str	r2, [r4, #4]
 801b5fa:	04d9      	lsls	r1, r3, #19
 801b5fc:	6922      	ldr	r2, [r4, #16]
 801b5fe:	6022      	str	r2, [r4, #0]
 801b600:	d504      	bpl.n	801b60c <__sflush_r+0x7c>
 801b602:	1c42      	adds	r2, r0, #1
 801b604:	d101      	bne.n	801b60a <__sflush_r+0x7a>
 801b606:	682b      	ldr	r3, [r5, #0]
 801b608:	b903      	cbnz	r3, 801b60c <__sflush_r+0x7c>
 801b60a:	6560      	str	r0, [r4, #84]	; 0x54
 801b60c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b60e:	602f      	str	r7, [r5, #0]
 801b610:	2900      	cmp	r1, #0
 801b612:	d0ca      	beq.n	801b5aa <__sflush_r+0x1a>
 801b614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b618:	4299      	cmp	r1, r3
 801b61a:	d002      	beq.n	801b622 <__sflush_r+0x92>
 801b61c:	4628      	mov	r0, r5
 801b61e:	f7ff fb03 	bl	801ac28 <_free_r>
 801b622:	2000      	movs	r0, #0
 801b624:	6360      	str	r0, [r4, #52]	; 0x34
 801b626:	e7c1      	b.n	801b5ac <__sflush_r+0x1c>
 801b628:	6a21      	ldr	r1, [r4, #32]
 801b62a:	2301      	movs	r3, #1
 801b62c:	4628      	mov	r0, r5
 801b62e:	47b0      	blx	r6
 801b630:	1c41      	adds	r1, r0, #1
 801b632:	d1c7      	bne.n	801b5c4 <__sflush_r+0x34>
 801b634:	682b      	ldr	r3, [r5, #0]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d0c4      	beq.n	801b5c4 <__sflush_r+0x34>
 801b63a:	2b1d      	cmp	r3, #29
 801b63c:	d001      	beq.n	801b642 <__sflush_r+0xb2>
 801b63e:	2b16      	cmp	r3, #22
 801b640:	d101      	bne.n	801b646 <__sflush_r+0xb6>
 801b642:	602f      	str	r7, [r5, #0]
 801b644:	e7b1      	b.n	801b5aa <__sflush_r+0x1a>
 801b646:	89a3      	ldrh	r3, [r4, #12]
 801b648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b64c:	81a3      	strh	r3, [r4, #12]
 801b64e:	e7ad      	b.n	801b5ac <__sflush_r+0x1c>
 801b650:	690f      	ldr	r7, [r1, #16]
 801b652:	2f00      	cmp	r7, #0
 801b654:	d0a9      	beq.n	801b5aa <__sflush_r+0x1a>
 801b656:	0793      	lsls	r3, r2, #30
 801b658:	680e      	ldr	r6, [r1, #0]
 801b65a:	bf08      	it	eq
 801b65c:	694b      	ldreq	r3, [r1, #20]
 801b65e:	600f      	str	r7, [r1, #0]
 801b660:	bf18      	it	ne
 801b662:	2300      	movne	r3, #0
 801b664:	eba6 0807 	sub.w	r8, r6, r7
 801b668:	608b      	str	r3, [r1, #8]
 801b66a:	f1b8 0f00 	cmp.w	r8, #0
 801b66e:	dd9c      	ble.n	801b5aa <__sflush_r+0x1a>
 801b670:	6a21      	ldr	r1, [r4, #32]
 801b672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b674:	4643      	mov	r3, r8
 801b676:	463a      	mov	r2, r7
 801b678:	4628      	mov	r0, r5
 801b67a:	47b0      	blx	r6
 801b67c:	2800      	cmp	r0, #0
 801b67e:	dc06      	bgt.n	801b68e <__sflush_r+0xfe>
 801b680:	89a3      	ldrh	r3, [r4, #12]
 801b682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b686:	81a3      	strh	r3, [r4, #12]
 801b688:	f04f 30ff 	mov.w	r0, #4294967295
 801b68c:	e78e      	b.n	801b5ac <__sflush_r+0x1c>
 801b68e:	4407      	add	r7, r0
 801b690:	eba8 0800 	sub.w	r8, r8, r0
 801b694:	e7e9      	b.n	801b66a <__sflush_r+0xda>
 801b696:	bf00      	nop
 801b698:	20400001 	.word	0x20400001

0801b69c <_fflush_r>:
 801b69c:	b538      	push	{r3, r4, r5, lr}
 801b69e:	690b      	ldr	r3, [r1, #16]
 801b6a0:	4605      	mov	r5, r0
 801b6a2:	460c      	mov	r4, r1
 801b6a4:	b913      	cbnz	r3, 801b6ac <_fflush_r+0x10>
 801b6a6:	2500      	movs	r5, #0
 801b6a8:	4628      	mov	r0, r5
 801b6aa:	bd38      	pop	{r3, r4, r5, pc}
 801b6ac:	b118      	cbz	r0, 801b6b6 <_fflush_r+0x1a>
 801b6ae:	6983      	ldr	r3, [r0, #24]
 801b6b0:	b90b      	cbnz	r3, 801b6b6 <_fflush_r+0x1a>
 801b6b2:	f7fe f9af 	bl	8019a14 <__sinit>
 801b6b6:	4b14      	ldr	r3, [pc, #80]	; (801b708 <_fflush_r+0x6c>)
 801b6b8:	429c      	cmp	r4, r3
 801b6ba:	d11b      	bne.n	801b6f4 <_fflush_r+0x58>
 801b6bc:	686c      	ldr	r4, [r5, #4]
 801b6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b6c2:	2b00      	cmp	r3, #0
 801b6c4:	d0ef      	beq.n	801b6a6 <_fflush_r+0xa>
 801b6c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b6c8:	07d0      	lsls	r0, r2, #31
 801b6ca:	d404      	bmi.n	801b6d6 <_fflush_r+0x3a>
 801b6cc:	0599      	lsls	r1, r3, #22
 801b6ce:	d402      	bmi.n	801b6d6 <_fflush_r+0x3a>
 801b6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b6d2:	f7fe fdc2 	bl	801a25a <__retarget_lock_acquire_recursive>
 801b6d6:	4628      	mov	r0, r5
 801b6d8:	4621      	mov	r1, r4
 801b6da:	f7ff ff59 	bl	801b590 <__sflush_r>
 801b6de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b6e0:	07da      	lsls	r2, r3, #31
 801b6e2:	4605      	mov	r5, r0
 801b6e4:	d4e0      	bmi.n	801b6a8 <_fflush_r+0xc>
 801b6e6:	89a3      	ldrh	r3, [r4, #12]
 801b6e8:	059b      	lsls	r3, r3, #22
 801b6ea:	d4dd      	bmi.n	801b6a8 <_fflush_r+0xc>
 801b6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b6ee:	f7fe fdb5 	bl	801a25c <__retarget_lock_release_recursive>
 801b6f2:	e7d9      	b.n	801b6a8 <_fflush_r+0xc>
 801b6f4:	4b05      	ldr	r3, [pc, #20]	; (801b70c <_fflush_r+0x70>)
 801b6f6:	429c      	cmp	r4, r3
 801b6f8:	d101      	bne.n	801b6fe <_fflush_r+0x62>
 801b6fa:	68ac      	ldr	r4, [r5, #8]
 801b6fc:	e7df      	b.n	801b6be <_fflush_r+0x22>
 801b6fe:	4b04      	ldr	r3, [pc, #16]	; (801b710 <_fflush_r+0x74>)
 801b700:	429c      	cmp	r4, r3
 801b702:	bf08      	it	eq
 801b704:	68ec      	ldreq	r4, [r5, #12]
 801b706:	e7da      	b.n	801b6be <_fflush_r+0x22>
 801b708:	08021f34 	.word	0x08021f34
 801b70c:	08021f54 	.word	0x08021f54
 801b710:	08021f14 	.word	0x08021f14

0801b714 <_lseek_r>:
 801b714:	b538      	push	{r3, r4, r5, lr}
 801b716:	4d07      	ldr	r5, [pc, #28]	; (801b734 <_lseek_r+0x20>)
 801b718:	4604      	mov	r4, r0
 801b71a:	4608      	mov	r0, r1
 801b71c:	4611      	mov	r1, r2
 801b71e:	2200      	movs	r2, #0
 801b720:	602a      	str	r2, [r5, #0]
 801b722:	461a      	mov	r2, r3
 801b724:	f7e6 fc24 	bl	8001f70 <_lseek>
 801b728:	1c43      	adds	r3, r0, #1
 801b72a:	d102      	bne.n	801b732 <_lseek_r+0x1e>
 801b72c:	682b      	ldr	r3, [r5, #0]
 801b72e:	b103      	cbz	r3, 801b732 <_lseek_r+0x1e>
 801b730:	6023      	str	r3, [r4, #0]
 801b732:	bd38      	pop	{r3, r4, r5, pc}
 801b734:	20008a0c 	.word	0x20008a0c

0801b738 <__swhatbuf_r>:
 801b738:	b570      	push	{r4, r5, r6, lr}
 801b73a:	460e      	mov	r6, r1
 801b73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b740:	2900      	cmp	r1, #0
 801b742:	b096      	sub	sp, #88	; 0x58
 801b744:	4614      	mov	r4, r2
 801b746:	461d      	mov	r5, r3
 801b748:	da07      	bge.n	801b75a <__swhatbuf_r+0x22>
 801b74a:	2300      	movs	r3, #0
 801b74c:	602b      	str	r3, [r5, #0]
 801b74e:	89b3      	ldrh	r3, [r6, #12]
 801b750:	061a      	lsls	r2, r3, #24
 801b752:	d410      	bmi.n	801b776 <__swhatbuf_r+0x3e>
 801b754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b758:	e00e      	b.n	801b778 <__swhatbuf_r+0x40>
 801b75a:	466a      	mov	r2, sp
 801b75c:	f000 f8d8 	bl	801b910 <_fstat_r>
 801b760:	2800      	cmp	r0, #0
 801b762:	dbf2      	blt.n	801b74a <__swhatbuf_r+0x12>
 801b764:	9a01      	ldr	r2, [sp, #4]
 801b766:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b76a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b76e:	425a      	negs	r2, r3
 801b770:	415a      	adcs	r2, r3
 801b772:	602a      	str	r2, [r5, #0]
 801b774:	e7ee      	b.n	801b754 <__swhatbuf_r+0x1c>
 801b776:	2340      	movs	r3, #64	; 0x40
 801b778:	2000      	movs	r0, #0
 801b77a:	6023      	str	r3, [r4, #0]
 801b77c:	b016      	add	sp, #88	; 0x58
 801b77e:	bd70      	pop	{r4, r5, r6, pc}

0801b780 <__smakebuf_r>:
 801b780:	898b      	ldrh	r3, [r1, #12]
 801b782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b784:	079d      	lsls	r5, r3, #30
 801b786:	4606      	mov	r6, r0
 801b788:	460c      	mov	r4, r1
 801b78a:	d507      	bpl.n	801b79c <__smakebuf_r+0x1c>
 801b78c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b790:	6023      	str	r3, [r4, #0]
 801b792:	6123      	str	r3, [r4, #16]
 801b794:	2301      	movs	r3, #1
 801b796:	6163      	str	r3, [r4, #20]
 801b798:	b002      	add	sp, #8
 801b79a:	bd70      	pop	{r4, r5, r6, pc}
 801b79c:	ab01      	add	r3, sp, #4
 801b79e:	466a      	mov	r2, sp
 801b7a0:	f7ff ffca 	bl	801b738 <__swhatbuf_r>
 801b7a4:	9900      	ldr	r1, [sp, #0]
 801b7a6:	4605      	mov	r5, r0
 801b7a8:	4630      	mov	r0, r6
 801b7aa:	f7ff fa8d 	bl	801acc8 <_malloc_r>
 801b7ae:	b948      	cbnz	r0, 801b7c4 <__smakebuf_r+0x44>
 801b7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b7b4:	059a      	lsls	r2, r3, #22
 801b7b6:	d4ef      	bmi.n	801b798 <__smakebuf_r+0x18>
 801b7b8:	f023 0303 	bic.w	r3, r3, #3
 801b7bc:	f043 0302 	orr.w	r3, r3, #2
 801b7c0:	81a3      	strh	r3, [r4, #12]
 801b7c2:	e7e3      	b.n	801b78c <__smakebuf_r+0xc>
 801b7c4:	4b0d      	ldr	r3, [pc, #52]	; (801b7fc <__smakebuf_r+0x7c>)
 801b7c6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b7c8:	89a3      	ldrh	r3, [r4, #12]
 801b7ca:	6020      	str	r0, [r4, #0]
 801b7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b7d0:	81a3      	strh	r3, [r4, #12]
 801b7d2:	9b00      	ldr	r3, [sp, #0]
 801b7d4:	6163      	str	r3, [r4, #20]
 801b7d6:	9b01      	ldr	r3, [sp, #4]
 801b7d8:	6120      	str	r0, [r4, #16]
 801b7da:	b15b      	cbz	r3, 801b7f4 <__smakebuf_r+0x74>
 801b7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b7e0:	4630      	mov	r0, r6
 801b7e2:	f000 f8a7 	bl	801b934 <_isatty_r>
 801b7e6:	b128      	cbz	r0, 801b7f4 <__smakebuf_r+0x74>
 801b7e8:	89a3      	ldrh	r3, [r4, #12]
 801b7ea:	f023 0303 	bic.w	r3, r3, #3
 801b7ee:	f043 0301 	orr.w	r3, r3, #1
 801b7f2:	81a3      	strh	r3, [r4, #12]
 801b7f4:	89a0      	ldrh	r0, [r4, #12]
 801b7f6:	4305      	orrs	r5, r0
 801b7f8:	81a5      	strh	r5, [r4, #12]
 801b7fa:	e7cd      	b.n	801b798 <__smakebuf_r+0x18>
 801b7fc:	080199ad 	.word	0x080199ad

0801b800 <__malloc_lock>:
 801b800:	4801      	ldr	r0, [pc, #4]	; (801b808 <__malloc_lock+0x8>)
 801b802:	f7fe bd2a 	b.w	801a25a <__retarget_lock_acquire_recursive>
 801b806:	bf00      	nop
 801b808:	20008a14 	.word	0x20008a14

0801b80c <__malloc_unlock>:
 801b80c:	4801      	ldr	r0, [pc, #4]	; (801b814 <__malloc_unlock+0x8>)
 801b80e:	f7fe bd25 	b.w	801a25c <__retarget_lock_release_recursive>
 801b812:	bf00      	nop
 801b814:	20008a14 	.word	0x20008a14

0801b818 <_realloc_r>:
 801b818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b81a:	4607      	mov	r7, r0
 801b81c:	4614      	mov	r4, r2
 801b81e:	460e      	mov	r6, r1
 801b820:	b921      	cbnz	r1, 801b82c <_realloc_r+0x14>
 801b822:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b826:	4611      	mov	r1, r2
 801b828:	f7ff ba4e 	b.w	801acc8 <_malloc_r>
 801b82c:	b922      	cbnz	r2, 801b838 <_realloc_r+0x20>
 801b82e:	f7ff f9fb 	bl	801ac28 <_free_r>
 801b832:	4625      	mov	r5, r4
 801b834:	4628      	mov	r0, r5
 801b836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b838:	f000 f88c 	bl	801b954 <_malloc_usable_size_r>
 801b83c:	42a0      	cmp	r0, r4
 801b83e:	d20f      	bcs.n	801b860 <_realloc_r+0x48>
 801b840:	4621      	mov	r1, r4
 801b842:	4638      	mov	r0, r7
 801b844:	f7ff fa40 	bl	801acc8 <_malloc_r>
 801b848:	4605      	mov	r5, r0
 801b84a:	2800      	cmp	r0, #0
 801b84c:	d0f2      	beq.n	801b834 <_realloc_r+0x1c>
 801b84e:	4631      	mov	r1, r6
 801b850:	4622      	mov	r2, r4
 801b852:	f7fb fbff 	bl	8017054 <memcpy>
 801b856:	4631      	mov	r1, r6
 801b858:	4638      	mov	r0, r7
 801b85a:	f7ff f9e5 	bl	801ac28 <_free_r>
 801b85e:	e7e9      	b.n	801b834 <_realloc_r+0x1c>
 801b860:	4635      	mov	r5, r6
 801b862:	e7e7      	b.n	801b834 <_realloc_r+0x1c>

0801b864 <_read_r>:
 801b864:	b538      	push	{r3, r4, r5, lr}
 801b866:	4d07      	ldr	r5, [pc, #28]	; (801b884 <_read_r+0x20>)
 801b868:	4604      	mov	r4, r0
 801b86a:	4608      	mov	r0, r1
 801b86c:	4611      	mov	r1, r2
 801b86e:	2200      	movs	r2, #0
 801b870:	602a      	str	r2, [r5, #0]
 801b872:	461a      	mov	r2, r3
 801b874:	f7e6 fb1c 	bl	8001eb0 <_read>
 801b878:	1c43      	adds	r3, r0, #1
 801b87a:	d102      	bne.n	801b882 <_read_r+0x1e>
 801b87c:	682b      	ldr	r3, [r5, #0]
 801b87e:	b103      	cbz	r3, 801b882 <_read_r+0x1e>
 801b880:	6023      	str	r3, [r4, #0]
 801b882:	bd38      	pop	{r3, r4, r5, pc}
 801b884:	20008a0c 	.word	0x20008a0c

0801b888 <_raise_r>:
 801b888:	291f      	cmp	r1, #31
 801b88a:	b538      	push	{r3, r4, r5, lr}
 801b88c:	4604      	mov	r4, r0
 801b88e:	460d      	mov	r5, r1
 801b890:	d904      	bls.n	801b89c <_raise_r+0x14>
 801b892:	2316      	movs	r3, #22
 801b894:	6003      	str	r3, [r0, #0]
 801b896:	f04f 30ff 	mov.w	r0, #4294967295
 801b89a:	bd38      	pop	{r3, r4, r5, pc}
 801b89c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b89e:	b112      	cbz	r2, 801b8a6 <_raise_r+0x1e>
 801b8a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b8a4:	b94b      	cbnz	r3, 801b8ba <_raise_r+0x32>
 801b8a6:	4620      	mov	r0, r4
 801b8a8:	f000 f830 	bl	801b90c <_getpid_r>
 801b8ac:	462a      	mov	r2, r5
 801b8ae:	4601      	mov	r1, r0
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b8b6:	f000 b817 	b.w	801b8e8 <_kill_r>
 801b8ba:	2b01      	cmp	r3, #1
 801b8bc:	d00a      	beq.n	801b8d4 <_raise_r+0x4c>
 801b8be:	1c59      	adds	r1, r3, #1
 801b8c0:	d103      	bne.n	801b8ca <_raise_r+0x42>
 801b8c2:	2316      	movs	r3, #22
 801b8c4:	6003      	str	r3, [r0, #0]
 801b8c6:	2001      	movs	r0, #1
 801b8c8:	e7e7      	b.n	801b89a <_raise_r+0x12>
 801b8ca:	2400      	movs	r4, #0
 801b8cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b8d0:	4628      	mov	r0, r5
 801b8d2:	4798      	blx	r3
 801b8d4:	2000      	movs	r0, #0
 801b8d6:	e7e0      	b.n	801b89a <_raise_r+0x12>

0801b8d8 <raise>:
 801b8d8:	4b02      	ldr	r3, [pc, #8]	; (801b8e4 <raise+0xc>)
 801b8da:	4601      	mov	r1, r0
 801b8dc:	6818      	ldr	r0, [r3, #0]
 801b8de:	f7ff bfd3 	b.w	801b888 <_raise_r>
 801b8e2:	bf00      	nop
 801b8e4:	20000194 	.word	0x20000194

0801b8e8 <_kill_r>:
 801b8e8:	b538      	push	{r3, r4, r5, lr}
 801b8ea:	4d07      	ldr	r5, [pc, #28]	; (801b908 <_kill_r+0x20>)
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	4608      	mov	r0, r1
 801b8f2:	4611      	mov	r1, r2
 801b8f4:	602b      	str	r3, [r5, #0]
 801b8f6:	f7e6 fabf 	bl	8001e78 <_kill>
 801b8fa:	1c43      	adds	r3, r0, #1
 801b8fc:	d102      	bne.n	801b904 <_kill_r+0x1c>
 801b8fe:	682b      	ldr	r3, [r5, #0]
 801b900:	b103      	cbz	r3, 801b904 <_kill_r+0x1c>
 801b902:	6023      	str	r3, [r4, #0]
 801b904:	bd38      	pop	{r3, r4, r5, pc}
 801b906:	bf00      	nop
 801b908:	20008a0c 	.word	0x20008a0c

0801b90c <_getpid_r>:
 801b90c:	f7e6 baac 	b.w	8001e68 <_getpid>

0801b910 <_fstat_r>:
 801b910:	b538      	push	{r3, r4, r5, lr}
 801b912:	4d07      	ldr	r5, [pc, #28]	; (801b930 <_fstat_r+0x20>)
 801b914:	2300      	movs	r3, #0
 801b916:	4604      	mov	r4, r0
 801b918:	4608      	mov	r0, r1
 801b91a:	4611      	mov	r1, r2
 801b91c:	602b      	str	r3, [r5, #0]
 801b91e:	f7e6 fb0c 	bl	8001f3a <_fstat>
 801b922:	1c43      	adds	r3, r0, #1
 801b924:	d102      	bne.n	801b92c <_fstat_r+0x1c>
 801b926:	682b      	ldr	r3, [r5, #0]
 801b928:	b103      	cbz	r3, 801b92c <_fstat_r+0x1c>
 801b92a:	6023      	str	r3, [r4, #0]
 801b92c:	bd38      	pop	{r3, r4, r5, pc}
 801b92e:	bf00      	nop
 801b930:	20008a0c 	.word	0x20008a0c

0801b934 <_isatty_r>:
 801b934:	b538      	push	{r3, r4, r5, lr}
 801b936:	4d06      	ldr	r5, [pc, #24]	; (801b950 <_isatty_r+0x1c>)
 801b938:	2300      	movs	r3, #0
 801b93a:	4604      	mov	r4, r0
 801b93c:	4608      	mov	r0, r1
 801b93e:	602b      	str	r3, [r5, #0]
 801b940:	f7e6 fb0b 	bl	8001f5a <_isatty>
 801b944:	1c43      	adds	r3, r0, #1
 801b946:	d102      	bne.n	801b94e <_isatty_r+0x1a>
 801b948:	682b      	ldr	r3, [r5, #0]
 801b94a:	b103      	cbz	r3, 801b94e <_isatty_r+0x1a>
 801b94c:	6023      	str	r3, [r4, #0]
 801b94e:	bd38      	pop	{r3, r4, r5, pc}
 801b950:	20008a0c 	.word	0x20008a0c

0801b954 <_malloc_usable_size_r>:
 801b954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b958:	1f18      	subs	r0, r3, #4
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	bfbc      	itt	lt
 801b95e:	580b      	ldrlt	r3, [r1, r0]
 801b960:	18c0      	addlt	r0, r0, r3
 801b962:	4770      	bx	lr
 801b964:	0000      	movs	r0, r0
	...

0801b968 <cos>:
 801b968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b96a:	ec53 2b10 	vmov	r2, r3, d0
 801b96e:	4824      	ldr	r0, [pc, #144]	; (801ba00 <cos+0x98>)
 801b970:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b974:	4281      	cmp	r1, r0
 801b976:	dc06      	bgt.n	801b986 <cos+0x1e>
 801b978:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 801b9f8 <cos+0x90>
 801b97c:	f001 fee8 	bl	801d750 <__kernel_cos>
 801b980:	ec51 0b10 	vmov	r0, r1, d0
 801b984:	e007      	b.n	801b996 <cos+0x2e>
 801b986:	481f      	ldr	r0, [pc, #124]	; (801ba04 <cos+0x9c>)
 801b988:	4281      	cmp	r1, r0
 801b98a:	dd09      	ble.n	801b9a0 <cos+0x38>
 801b98c:	ee10 0a10 	vmov	r0, s0
 801b990:	4619      	mov	r1, r3
 801b992:	f7e4 fc89 	bl	80002a8 <__aeabi_dsub>
 801b996:	ec41 0b10 	vmov	d0, r0, r1
 801b99a:	b005      	add	sp, #20
 801b99c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b9a0:	4668      	mov	r0, sp
 801b9a2:	f001 fad9 	bl	801cf58 <__ieee754_rem_pio2>
 801b9a6:	f000 0003 	and.w	r0, r0, #3
 801b9aa:	2801      	cmp	r0, #1
 801b9ac:	d007      	beq.n	801b9be <cos+0x56>
 801b9ae:	2802      	cmp	r0, #2
 801b9b0:	d012      	beq.n	801b9d8 <cos+0x70>
 801b9b2:	b9c0      	cbnz	r0, 801b9e6 <cos+0x7e>
 801b9b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b9b8:	ed9d 0b00 	vldr	d0, [sp]
 801b9bc:	e7de      	b.n	801b97c <cos+0x14>
 801b9be:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b9c2:	ed9d 0b00 	vldr	d0, [sp]
 801b9c6:	f002 facb 	bl	801df60 <__kernel_sin>
 801b9ca:	ec53 2b10 	vmov	r2, r3, d0
 801b9ce:	ee10 0a10 	vmov	r0, s0
 801b9d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b9d6:	e7de      	b.n	801b996 <cos+0x2e>
 801b9d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b9dc:	ed9d 0b00 	vldr	d0, [sp]
 801b9e0:	f001 feb6 	bl	801d750 <__kernel_cos>
 801b9e4:	e7f1      	b.n	801b9ca <cos+0x62>
 801b9e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 801b9ea:	ed9d 0b00 	vldr	d0, [sp]
 801b9ee:	2001      	movs	r0, #1
 801b9f0:	f002 fab6 	bl	801df60 <__kernel_sin>
 801b9f4:	e7c4      	b.n	801b980 <cos+0x18>
 801b9f6:	bf00      	nop
	...
 801ba00:	3fe921fb 	.word	0x3fe921fb
 801ba04:	7fefffff 	.word	0x7fefffff

0801ba08 <atanf>:
 801ba08:	b538      	push	{r3, r4, r5, lr}
 801ba0a:	ee10 5a10 	vmov	r5, s0
 801ba0e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801ba12:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801ba16:	eef0 7a40 	vmov.f32	s15, s0
 801ba1a:	db10      	blt.n	801ba3e <atanf+0x36>
 801ba1c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ba20:	dd04      	ble.n	801ba2c <atanf+0x24>
 801ba22:	ee70 7a00 	vadd.f32	s15, s0, s0
 801ba26:	eeb0 0a67 	vmov.f32	s0, s15
 801ba2a:	bd38      	pop	{r3, r4, r5, pc}
 801ba2c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801bb64 <atanf+0x15c>
 801ba30:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801bb68 <atanf+0x160>
 801ba34:	2d00      	cmp	r5, #0
 801ba36:	bfd8      	it	le
 801ba38:	eef0 7a40 	vmovle.f32	s15, s0
 801ba3c:	e7f3      	b.n	801ba26 <atanf+0x1e>
 801ba3e:	4b4b      	ldr	r3, [pc, #300]	; (801bb6c <atanf+0x164>)
 801ba40:	429c      	cmp	r4, r3
 801ba42:	dc10      	bgt.n	801ba66 <atanf+0x5e>
 801ba44:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801ba48:	da0a      	bge.n	801ba60 <atanf+0x58>
 801ba4a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801bb70 <atanf+0x168>
 801ba4e:	ee30 7a07 	vadd.f32	s14, s0, s14
 801ba52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba56:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801ba5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba5e:	dce2      	bgt.n	801ba26 <atanf+0x1e>
 801ba60:	f04f 33ff 	mov.w	r3, #4294967295
 801ba64:	e013      	b.n	801ba8e <atanf+0x86>
 801ba66:	f000 f8e3 	bl	801bc30 <fabsf>
 801ba6a:	4b42      	ldr	r3, [pc, #264]	; (801bb74 <atanf+0x16c>)
 801ba6c:	429c      	cmp	r4, r3
 801ba6e:	dc4f      	bgt.n	801bb10 <atanf+0x108>
 801ba70:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801ba74:	429c      	cmp	r4, r3
 801ba76:	dc41      	bgt.n	801bafc <atanf+0xf4>
 801ba78:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801ba7c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801ba80:	eea0 7a27 	vfma.f32	s14, s0, s15
 801ba84:	2300      	movs	r3, #0
 801ba86:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ba8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ba8e:	1c5a      	adds	r2, r3, #1
 801ba90:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801ba94:	eddf 5a38 	vldr	s11, [pc, #224]	; 801bb78 <atanf+0x170>
 801ba98:	ed9f 6a38 	vldr	s12, [pc, #224]	; 801bb7c <atanf+0x174>
 801ba9c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801bb80 <atanf+0x178>
 801baa0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801bb84 <atanf+0x17c>
 801baa4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801baa8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801baac:	eddf 5a36 	vldr	s11, [pc, #216]	; 801bb88 <atanf+0x180>
 801bab0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801bab4:	ed9f 6a35 	vldr	s12, [pc, #212]	; 801bb8c <atanf+0x184>
 801bab8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801babc:	eddf 5a34 	vldr	s11, [pc, #208]	; 801bb90 <atanf+0x188>
 801bac0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801bac4:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801bb94 <atanf+0x18c>
 801bac8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bacc:	eddf 5a32 	vldr	s11, [pc, #200]	; 801bb98 <atanf+0x190>
 801bad0:	eee7 5a05 	vfma.f32	s11, s14, s10
 801bad4:	ed9f 5a31 	vldr	s10, [pc, #196]	; 801bb9c <atanf+0x194>
 801bad8:	eea5 5a87 	vfma.f32	s10, s11, s14
 801badc:	eddf 5a30 	vldr	s11, [pc, #192]	; 801bba0 <atanf+0x198>
 801bae0:	eee5 5a07 	vfma.f32	s11, s10, s14
 801bae4:	eea5 0a87 	vfma.f32	s0, s11, s14
 801bae8:	ee20 0a07 	vmul.f32	s0, s0, s14
 801baec:	eea6 0a26 	vfma.f32	s0, s12, s13
 801baf0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801baf4:	d121      	bne.n	801bb3a <atanf+0x132>
 801baf6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801bafa:	e794      	b.n	801ba26 <atanf+0x1e>
 801bafc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bb00:	ee30 7a67 	vsub.f32	s14, s0, s15
 801bb04:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bb08:	2301      	movs	r3, #1
 801bb0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bb0e:	e7be      	b.n	801ba8e <atanf+0x86>
 801bb10:	4b24      	ldr	r3, [pc, #144]	; (801bba4 <atanf+0x19c>)
 801bb12:	429c      	cmp	r4, r3
 801bb14:	dc0b      	bgt.n	801bb2e <atanf+0x126>
 801bb16:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801bb1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bb1e:	eea0 7a27 	vfma.f32	s14, s0, s15
 801bb22:	2302      	movs	r3, #2
 801bb24:	ee70 6a67 	vsub.f32	s13, s0, s15
 801bb28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bb2c:	e7af      	b.n	801ba8e <atanf+0x86>
 801bb2e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801bb32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bb36:	2303      	movs	r3, #3
 801bb38:	e7a9      	b.n	801ba8e <atanf+0x86>
 801bb3a:	4a1b      	ldr	r2, [pc, #108]	; (801bba8 <atanf+0x1a0>)
 801bb3c:	491b      	ldr	r1, [pc, #108]	; (801bbac <atanf+0x1a4>)
 801bb3e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801bb42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801bb46:	ed93 7a00 	vldr	s14, [r3]
 801bb4a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801bb4e:	2d00      	cmp	r5, #0
 801bb50:	ee70 7a67 	vsub.f32	s15, s0, s15
 801bb54:	ed92 0a00 	vldr	s0, [r2]
 801bb58:	ee70 7a67 	vsub.f32	s15, s0, s15
 801bb5c:	bfb8      	it	lt
 801bb5e:	eef1 7a67 	vneglt.f32	s15, s15
 801bb62:	e760      	b.n	801ba26 <atanf+0x1e>
 801bb64:	3fc90fdb 	.word	0x3fc90fdb
 801bb68:	bfc90fdb 	.word	0xbfc90fdb
 801bb6c:	3edfffff 	.word	0x3edfffff
 801bb70:	7149f2ca 	.word	0x7149f2ca
 801bb74:	3f97ffff 	.word	0x3f97ffff
 801bb78:	3c8569d7 	.word	0x3c8569d7
 801bb7c:	3d4bda59 	.word	0x3d4bda59
 801bb80:	bd15a221 	.word	0xbd15a221
 801bb84:	be4ccccd 	.word	0xbe4ccccd
 801bb88:	3d886b35 	.word	0x3d886b35
 801bb8c:	3dba2e6e 	.word	0x3dba2e6e
 801bb90:	3e124925 	.word	0x3e124925
 801bb94:	3eaaaaab 	.word	0x3eaaaaab
 801bb98:	bd6ef16b 	.word	0xbd6ef16b
 801bb9c:	bd9d8795 	.word	0xbd9d8795
 801bba0:	bde38e38 	.word	0xbde38e38
 801bba4:	401bffff 	.word	0x401bffff
 801bba8:	08022168 	.word	0x08022168
 801bbac:	08022178 	.word	0x08022178

0801bbb0 <cosf>:
 801bbb0:	ee10 3a10 	vmov	r3, s0
 801bbb4:	b507      	push	{r0, r1, r2, lr}
 801bbb6:	4a1c      	ldr	r2, [pc, #112]	; (801bc28 <cosf+0x78>)
 801bbb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bbbc:	4293      	cmp	r3, r2
 801bbbe:	dc04      	bgt.n	801bbca <cosf+0x1a>
 801bbc0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801bc2c <cosf+0x7c>
 801bbc4:	f002 fa8a 	bl	801e0dc <__kernel_cosf>
 801bbc8:	e004      	b.n	801bbd4 <cosf+0x24>
 801bbca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bbce:	db04      	blt.n	801bbda <cosf+0x2a>
 801bbd0:	ee30 0a40 	vsub.f32	s0, s0, s0
 801bbd4:	b003      	add	sp, #12
 801bbd6:	f85d fb04 	ldr.w	pc, [sp], #4
 801bbda:	4668      	mov	r0, sp
 801bbdc:	f001 fc7a 	bl	801d4d4 <__ieee754_rem_pio2f>
 801bbe0:	f000 0003 	and.w	r0, r0, #3
 801bbe4:	2801      	cmp	r0, #1
 801bbe6:	d007      	beq.n	801bbf8 <cosf+0x48>
 801bbe8:	2802      	cmp	r0, #2
 801bbea:	d00e      	beq.n	801bc0a <cosf+0x5a>
 801bbec:	b9a0      	cbnz	r0, 801bc18 <cosf+0x68>
 801bbee:	eddd 0a01 	vldr	s1, [sp, #4]
 801bbf2:	ed9d 0a00 	vldr	s0, [sp]
 801bbf6:	e7e5      	b.n	801bbc4 <cosf+0x14>
 801bbf8:	eddd 0a01 	vldr	s1, [sp, #4]
 801bbfc:	ed9d 0a00 	vldr	s0, [sp]
 801bc00:	f002 fd56 	bl	801e6b0 <__kernel_sinf>
 801bc04:	eeb1 0a40 	vneg.f32	s0, s0
 801bc08:	e7e4      	b.n	801bbd4 <cosf+0x24>
 801bc0a:	eddd 0a01 	vldr	s1, [sp, #4]
 801bc0e:	ed9d 0a00 	vldr	s0, [sp]
 801bc12:	f002 fa63 	bl	801e0dc <__kernel_cosf>
 801bc16:	e7f5      	b.n	801bc04 <cosf+0x54>
 801bc18:	eddd 0a01 	vldr	s1, [sp, #4]
 801bc1c:	ed9d 0a00 	vldr	s0, [sp]
 801bc20:	2001      	movs	r0, #1
 801bc22:	f002 fd45 	bl	801e6b0 <__kernel_sinf>
 801bc26:	e7d5      	b.n	801bbd4 <cosf+0x24>
 801bc28:	3f490fd8 	.word	0x3f490fd8
 801bc2c:	00000000 	.word	0x00000000

0801bc30 <fabsf>:
 801bc30:	ee10 3a10 	vmov	r3, s0
 801bc34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bc38:	ee00 3a10 	vmov	s0, r3
 801bc3c:	4770      	bx	lr
	...

0801bc40 <sinf>:
 801bc40:	ee10 3a10 	vmov	r3, s0
 801bc44:	b507      	push	{r0, r1, r2, lr}
 801bc46:	4a1d      	ldr	r2, [pc, #116]	; (801bcbc <sinf+0x7c>)
 801bc48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bc4c:	4293      	cmp	r3, r2
 801bc4e:	dc05      	bgt.n	801bc5c <sinf+0x1c>
 801bc50:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801bcc0 <sinf+0x80>
 801bc54:	2000      	movs	r0, #0
 801bc56:	f002 fd2b 	bl	801e6b0 <__kernel_sinf>
 801bc5a:	e004      	b.n	801bc66 <sinf+0x26>
 801bc5c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bc60:	db04      	blt.n	801bc6c <sinf+0x2c>
 801bc62:	ee30 0a40 	vsub.f32	s0, s0, s0
 801bc66:	b003      	add	sp, #12
 801bc68:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc6c:	4668      	mov	r0, sp
 801bc6e:	f001 fc31 	bl	801d4d4 <__ieee754_rem_pio2f>
 801bc72:	f000 0003 	and.w	r0, r0, #3
 801bc76:	2801      	cmp	r0, #1
 801bc78:	d008      	beq.n	801bc8c <sinf+0x4c>
 801bc7a:	2802      	cmp	r0, #2
 801bc7c:	d00d      	beq.n	801bc9a <sinf+0x5a>
 801bc7e:	b9b0      	cbnz	r0, 801bcae <sinf+0x6e>
 801bc80:	eddd 0a01 	vldr	s1, [sp, #4]
 801bc84:	ed9d 0a00 	vldr	s0, [sp]
 801bc88:	2001      	movs	r0, #1
 801bc8a:	e7e4      	b.n	801bc56 <sinf+0x16>
 801bc8c:	eddd 0a01 	vldr	s1, [sp, #4]
 801bc90:	ed9d 0a00 	vldr	s0, [sp]
 801bc94:	f002 fa22 	bl	801e0dc <__kernel_cosf>
 801bc98:	e7e5      	b.n	801bc66 <sinf+0x26>
 801bc9a:	eddd 0a01 	vldr	s1, [sp, #4]
 801bc9e:	ed9d 0a00 	vldr	s0, [sp]
 801bca2:	2001      	movs	r0, #1
 801bca4:	f002 fd04 	bl	801e6b0 <__kernel_sinf>
 801bca8:	eeb1 0a40 	vneg.f32	s0, s0
 801bcac:	e7db      	b.n	801bc66 <sinf+0x26>
 801bcae:	eddd 0a01 	vldr	s1, [sp, #4]
 801bcb2:	ed9d 0a00 	vldr	s0, [sp]
 801bcb6:	f002 fa11 	bl	801e0dc <__kernel_cosf>
 801bcba:	e7f5      	b.n	801bca8 <sinf+0x68>
 801bcbc:	3f490fd8 	.word	0x3f490fd8
 801bcc0:	00000000 	.word	0x00000000

0801bcc4 <tanf>:
 801bcc4:	ee10 3a10 	vmov	r3, s0
 801bcc8:	b507      	push	{r0, r1, r2, lr}
 801bcca:	4a10      	ldr	r2, [pc, #64]	; (801bd0c <tanf+0x48>)
 801bccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bcd0:	4293      	cmp	r3, r2
 801bcd2:	dc05      	bgt.n	801bce0 <tanf+0x1c>
 801bcd4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801bd10 <tanf+0x4c>
 801bcd8:	2001      	movs	r0, #1
 801bcda:	f002 fd31 	bl	801e740 <__kernel_tanf>
 801bcde:	e004      	b.n	801bcea <tanf+0x26>
 801bce0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bce4:	db04      	blt.n	801bcf0 <tanf+0x2c>
 801bce6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801bcea:	b003      	add	sp, #12
 801bcec:	f85d fb04 	ldr.w	pc, [sp], #4
 801bcf0:	4668      	mov	r0, sp
 801bcf2:	f001 fbef 	bl	801d4d4 <__ieee754_rem_pio2f>
 801bcf6:	0040      	lsls	r0, r0, #1
 801bcf8:	f000 0002 	and.w	r0, r0, #2
 801bcfc:	eddd 0a01 	vldr	s1, [sp, #4]
 801bd00:	ed9d 0a00 	vldr	s0, [sp]
 801bd04:	f1c0 0001 	rsb	r0, r0, #1
 801bd08:	e7e7      	b.n	801bcda <tanf+0x16>
 801bd0a:	bf00      	nop
 801bd0c:	3f490fda 	.word	0x3f490fda
 801bd10:	00000000 	.word	0x00000000

0801bd14 <asin>:
 801bd14:	b538      	push	{r3, r4, r5, lr}
 801bd16:	ed2d 8b02 	vpush	{d8}
 801bd1a:	ec55 4b10 	vmov	r4, r5, d0
 801bd1e:	f000 f917 	bl	801bf50 <__ieee754_asin>
 801bd22:	4b16      	ldr	r3, [pc, #88]	; (801bd7c <asin+0x68>)
 801bd24:	eeb0 8a40 	vmov.f32	s16, s0
 801bd28:	eef0 8a60 	vmov.f32	s17, s1
 801bd2c:	f993 3000 	ldrsb.w	r3, [r3]
 801bd30:	3301      	adds	r3, #1
 801bd32:	d01c      	beq.n	801bd6e <asin+0x5a>
 801bd34:	4622      	mov	r2, r4
 801bd36:	462b      	mov	r3, r5
 801bd38:	4620      	mov	r0, r4
 801bd3a:	4629      	mov	r1, r5
 801bd3c:	f7e4 ff06 	bl	8000b4c <__aeabi_dcmpun>
 801bd40:	b9a8      	cbnz	r0, 801bd6e <asin+0x5a>
 801bd42:	ec45 4b10 	vmov	d0, r4, r5
 801bd46:	f002 ff7f 	bl	801ec48 <fabs>
 801bd4a:	4b0d      	ldr	r3, [pc, #52]	; (801bd80 <asin+0x6c>)
 801bd4c:	ec51 0b10 	vmov	r0, r1, d0
 801bd50:	2200      	movs	r2, #0
 801bd52:	f7e4 fef1 	bl	8000b38 <__aeabi_dcmpgt>
 801bd56:	b150      	cbz	r0, 801bd6e <asin+0x5a>
 801bd58:	f7fd fdfe 	bl	8019958 <__errno>
 801bd5c:	ecbd 8b02 	vpop	{d8}
 801bd60:	2321      	movs	r3, #33	; 0x21
 801bd62:	6003      	str	r3, [r0, #0]
 801bd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd68:	4806      	ldr	r0, [pc, #24]	; (801bd84 <asin+0x70>)
 801bd6a:	f7ff babd 	b.w	801b2e8 <nan>
 801bd6e:	eeb0 0a48 	vmov.f32	s0, s16
 801bd72:	eef0 0a68 	vmov.f32	s1, s17
 801bd76:	ecbd 8b02 	vpop	{d8}
 801bd7a:	bd38      	pop	{r3, r4, r5, pc}
 801bd7c:	20000368 	.word	0x20000368
 801bd80:	3ff00000 	.word	0x3ff00000
 801bd84:	08021e93 	.word	0x08021e93

0801bd88 <atan2>:
 801bd88:	f000 baf6 	b.w	801c378 <__ieee754_atan2>

0801bd8c <pow>:
 801bd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd90:	ec59 8b10 	vmov	r8, r9, d0
 801bd94:	ec57 6b11 	vmov	r6, r7, d1
 801bd98:	f000 fbba 	bl	801c510 <__ieee754_pow>
 801bd9c:	4b4e      	ldr	r3, [pc, #312]	; (801bed8 <pow+0x14c>)
 801bd9e:	f993 3000 	ldrsb.w	r3, [r3]
 801bda2:	3301      	adds	r3, #1
 801bda4:	ec55 4b10 	vmov	r4, r5, d0
 801bda8:	d015      	beq.n	801bdd6 <pow+0x4a>
 801bdaa:	4632      	mov	r2, r6
 801bdac:	463b      	mov	r3, r7
 801bdae:	4630      	mov	r0, r6
 801bdb0:	4639      	mov	r1, r7
 801bdb2:	f7e4 fecb 	bl	8000b4c <__aeabi_dcmpun>
 801bdb6:	b970      	cbnz	r0, 801bdd6 <pow+0x4a>
 801bdb8:	4642      	mov	r2, r8
 801bdba:	464b      	mov	r3, r9
 801bdbc:	4640      	mov	r0, r8
 801bdbe:	4649      	mov	r1, r9
 801bdc0:	f7e4 fec4 	bl	8000b4c <__aeabi_dcmpun>
 801bdc4:	2200      	movs	r2, #0
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	b148      	cbz	r0, 801bdde <pow+0x52>
 801bdca:	4630      	mov	r0, r6
 801bdcc:	4639      	mov	r1, r7
 801bdce:	f7e4 fe8b 	bl	8000ae8 <__aeabi_dcmpeq>
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d17d      	bne.n	801bed2 <pow+0x146>
 801bdd6:	ec45 4b10 	vmov	d0, r4, r5
 801bdda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bdde:	4640      	mov	r0, r8
 801bde0:	4649      	mov	r1, r9
 801bde2:	f7e4 fe81 	bl	8000ae8 <__aeabi_dcmpeq>
 801bde6:	b1e0      	cbz	r0, 801be22 <pow+0x96>
 801bde8:	2200      	movs	r2, #0
 801bdea:	2300      	movs	r3, #0
 801bdec:	4630      	mov	r0, r6
 801bdee:	4639      	mov	r1, r7
 801bdf0:	f7e4 fe7a 	bl	8000ae8 <__aeabi_dcmpeq>
 801bdf4:	2800      	cmp	r0, #0
 801bdf6:	d16c      	bne.n	801bed2 <pow+0x146>
 801bdf8:	ec47 6b10 	vmov	d0, r6, r7
 801bdfc:	f002 ff2d 	bl	801ec5a <finite>
 801be00:	2800      	cmp	r0, #0
 801be02:	d0e8      	beq.n	801bdd6 <pow+0x4a>
 801be04:	2200      	movs	r2, #0
 801be06:	2300      	movs	r3, #0
 801be08:	4630      	mov	r0, r6
 801be0a:	4639      	mov	r1, r7
 801be0c:	f7e4 fe76 	bl	8000afc <__aeabi_dcmplt>
 801be10:	2800      	cmp	r0, #0
 801be12:	d0e0      	beq.n	801bdd6 <pow+0x4a>
 801be14:	f7fd fda0 	bl	8019958 <__errno>
 801be18:	2321      	movs	r3, #33	; 0x21
 801be1a:	6003      	str	r3, [r0, #0]
 801be1c:	2400      	movs	r4, #0
 801be1e:	4d2f      	ldr	r5, [pc, #188]	; (801bedc <pow+0x150>)
 801be20:	e7d9      	b.n	801bdd6 <pow+0x4a>
 801be22:	ec45 4b10 	vmov	d0, r4, r5
 801be26:	f002 ff18 	bl	801ec5a <finite>
 801be2a:	bbb8      	cbnz	r0, 801be9c <pow+0x110>
 801be2c:	ec49 8b10 	vmov	d0, r8, r9
 801be30:	f002 ff13 	bl	801ec5a <finite>
 801be34:	b390      	cbz	r0, 801be9c <pow+0x110>
 801be36:	ec47 6b10 	vmov	d0, r6, r7
 801be3a:	f002 ff0e 	bl	801ec5a <finite>
 801be3e:	b368      	cbz	r0, 801be9c <pow+0x110>
 801be40:	4622      	mov	r2, r4
 801be42:	462b      	mov	r3, r5
 801be44:	4620      	mov	r0, r4
 801be46:	4629      	mov	r1, r5
 801be48:	f7e4 fe80 	bl	8000b4c <__aeabi_dcmpun>
 801be4c:	b160      	cbz	r0, 801be68 <pow+0xdc>
 801be4e:	f7fd fd83 	bl	8019958 <__errno>
 801be52:	2321      	movs	r3, #33	; 0x21
 801be54:	6003      	str	r3, [r0, #0]
 801be56:	2200      	movs	r2, #0
 801be58:	2300      	movs	r3, #0
 801be5a:	4610      	mov	r0, r2
 801be5c:	4619      	mov	r1, r3
 801be5e:	f7e4 fd05 	bl	800086c <__aeabi_ddiv>
 801be62:	4604      	mov	r4, r0
 801be64:	460d      	mov	r5, r1
 801be66:	e7b6      	b.n	801bdd6 <pow+0x4a>
 801be68:	f7fd fd76 	bl	8019958 <__errno>
 801be6c:	2322      	movs	r3, #34	; 0x22
 801be6e:	6003      	str	r3, [r0, #0]
 801be70:	2200      	movs	r2, #0
 801be72:	2300      	movs	r3, #0
 801be74:	4640      	mov	r0, r8
 801be76:	4649      	mov	r1, r9
 801be78:	f7e4 fe40 	bl	8000afc <__aeabi_dcmplt>
 801be7c:	2400      	movs	r4, #0
 801be7e:	b158      	cbz	r0, 801be98 <pow+0x10c>
 801be80:	ec47 6b10 	vmov	d0, r6, r7
 801be84:	f002 ff74 	bl	801ed70 <rint>
 801be88:	4632      	mov	r2, r6
 801be8a:	ec51 0b10 	vmov	r0, r1, d0
 801be8e:	463b      	mov	r3, r7
 801be90:	f7e4 fe2a 	bl	8000ae8 <__aeabi_dcmpeq>
 801be94:	2800      	cmp	r0, #0
 801be96:	d0c2      	beq.n	801be1e <pow+0x92>
 801be98:	4d11      	ldr	r5, [pc, #68]	; (801bee0 <pow+0x154>)
 801be9a:	e79c      	b.n	801bdd6 <pow+0x4a>
 801be9c:	2200      	movs	r2, #0
 801be9e:	2300      	movs	r3, #0
 801bea0:	4620      	mov	r0, r4
 801bea2:	4629      	mov	r1, r5
 801bea4:	f7e4 fe20 	bl	8000ae8 <__aeabi_dcmpeq>
 801bea8:	2800      	cmp	r0, #0
 801beaa:	d094      	beq.n	801bdd6 <pow+0x4a>
 801beac:	ec49 8b10 	vmov	d0, r8, r9
 801beb0:	f002 fed3 	bl	801ec5a <finite>
 801beb4:	2800      	cmp	r0, #0
 801beb6:	d08e      	beq.n	801bdd6 <pow+0x4a>
 801beb8:	ec47 6b10 	vmov	d0, r6, r7
 801bebc:	f002 fecd 	bl	801ec5a <finite>
 801bec0:	2800      	cmp	r0, #0
 801bec2:	d088      	beq.n	801bdd6 <pow+0x4a>
 801bec4:	f7fd fd48 	bl	8019958 <__errno>
 801bec8:	2322      	movs	r3, #34	; 0x22
 801beca:	6003      	str	r3, [r0, #0]
 801becc:	2400      	movs	r4, #0
 801bece:	2500      	movs	r5, #0
 801bed0:	e781      	b.n	801bdd6 <pow+0x4a>
 801bed2:	4d04      	ldr	r5, [pc, #16]	; (801bee4 <pow+0x158>)
 801bed4:	2400      	movs	r4, #0
 801bed6:	e77e      	b.n	801bdd6 <pow+0x4a>
 801bed8:	20000368 	.word	0x20000368
 801bedc:	fff00000 	.word	0xfff00000
 801bee0:	7ff00000 	.word	0x7ff00000
 801bee4:	3ff00000 	.word	0x3ff00000

0801bee8 <sqrt>:
 801bee8:	b538      	push	{r3, r4, r5, lr}
 801beea:	ed2d 8b02 	vpush	{d8}
 801beee:	ec55 4b10 	vmov	r4, r5, d0
 801bef2:	f001 fa3b 	bl	801d36c <__ieee754_sqrt>
 801bef6:	4b15      	ldr	r3, [pc, #84]	; (801bf4c <sqrt+0x64>)
 801bef8:	eeb0 8a40 	vmov.f32	s16, s0
 801befc:	eef0 8a60 	vmov.f32	s17, s1
 801bf00:	f993 3000 	ldrsb.w	r3, [r3]
 801bf04:	3301      	adds	r3, #1
 801bf06:	d019      	beq.n	801bf3c <sqrt+0x54>
 801bf08:	4622      	mov	r2, r4
 801bf0a:	462b      	mov	r3, r5
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	4629      	mov	r1, r5
 801bf10:	f7e4 fe1c 	bl	8000b4c <__aeabi_dcmpun>
 801bf14:	b990      	cbnz	r0, 801bf3c <sqrt+0x54>
 801bf16:	2200      	movs	r2, #0
 801bf18:	2300      	movs	r3, #0
 801bf1a:	4620      	mov	r0, r4
 801bf1c:	4629      	mov	r1, r5
 801bf1e:	f7e4 fded 	bl	8000afc <__aeabi_dcmplt>
 801bf22:	b158      	cbz	r0, 801bf3c <sqrt+0x54>
 801bf24:	f7fd fd18 	bl	8019958 <__errno>
 801bf28:	2321      	movs	r3, #33	; 0x21
 801bf2a:	6003      	str	r3, [r0, #0]
 801bf2c:	2200      	movs	r2, #0
 801bf2e:	2300      	movs	r3, #0
 801bf30:	4610      	mov	r0, r2
 801bf32:	4619      	mov	r1, r3
 801bf34:	f7e4 fc9a 	bl	800086c <__aeabi_ddiv>
 801bf38:	ec41 0b18 	vmov	d8, r0, r1
 801bf3c:	eeb0 0a48 	vmov.f32	s0, s16
 801bf40:	eef0 0a68 	vmov.f32	s1, s17
 801bf44:	ecbd 8b02 	vpop	{d8}
 801bf48:	bd38      	pop	{r3, r4, r5, pc}
 801bf4a:	bf00      	nop
 801bf4c:	20000368 	.word	0x20000368

0801bf50 <__ieee754_asin>:
 801bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf54:	ed2d 8b04 	vpush	{d8-d9}
 801bf58:	ec55 4b10 	vmov	r4, r5, d0
 801bf5c:	4bcc      	ldr	r3, [pc, #816]	; (801c290 <__ieee754_asin+0x340>)
 801bf5e:	b083      	sub	sp, #12
 801bf60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801bf64:	4598      	cmp	r8, r3
 801bf66:	9501      	str	r5, [sp, #4]
 801bf68:	dd35      	ble.n	801bfd6 <__ieee754_asin+0x86>
 801bf6a:	ee10 3a10 	vmov	r3, s0
 801bf6e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 801bf72:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 801bf76:	ea58 0303 	orrs.w	r3, r8, r3
 801bf7a:	d117      	bne.n	801bfac <__ieee754_asin+0x5c>
 801bf7c:	a3aa      	add	r3, pc, #680	; (adr r3, 801c228 <__ieee754_asin+0x2d8>)
 801bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf82:	ee10 0a10 	vmov	r0, s0
 801bf86:	4629      	mov	r1, r5
 801bf88:	f7e4 fb46 	bl	8000618 <__aeabi_dmul>
 801bf8c:	a3a8      	add	r3, pc, #672	; (adr r3, 801c230 <__ieee754_asin+0x2e0>)
 801bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf92:	4606      	mov	r6, r0
 801bf94:	460f      	mov	r7, r1
 801bf96:	4620      	mov	r0, r4
 801bf98:	4629      	mov	r1, r5
 801bf9a:	f7e4 fb3d 	bl	8000618 <__aeabi_dmul>
 801bf9e:	4602      	mov	r2, r0
 801bfa0:	460b      	mov	r3, r1
 801bfa2:	4630      	mov	r0, r6
 801bfa4:	4639      	mov	r1, r7
 801bfa6:	f7e4 f981 	bl	80002ac <__adddf3>
 801bfaa:	e00b      	b.n	801bfc4 <__ieee754_asin+0x74>
 801bfac:	ee10 2a10 	vmov	r2, s0
 801bfb0:	462b      	mov	r3, r5
 801bfb2:	ee10 0a10 	vmov	r0, s0
 801bfb6:	4629      	mov	r1, r5
 801bfb8:	f7e4 f976 	bl	80002a8 <__aeabi_dsub>
 801bfbc:	4602      	mov	r2, r0
 801bfbe:	460b      	mov	r3, r1
 801bfc0:	f7e4 fc54 	bl	800086c <__aeabi_ddiv>
 801bfc4:	4604      	mov	r4, r0
 801bfc6:	460d      	mov	r5, r1
 801bfc8:	ec45 4b10 	vmov	d0, r4, r5
 801bfcc:	b003      	add	sp, #12
 801bfce:	ecbd 8b04 	vpop	{d8-d9}
 801bfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfd6:	4baf      	ldr	r3, [pc, #700]	; (801c294 <__ieee754_asin+0x344>)
 801bfd8:	4598      	cmp	r8, r3
 801bfda:	dc11      	bgt.n	801c000 <__ieee754_asin+0xb0>
 801bfdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801bfe0:	f280 80ae 	bge.w	801c140 <__ieee754_asin+0x1f0>
 801bfe4:	a394      	add	r3, pc, #592	; (adr r3, 801c238 <__ieee754_asin+0x2e8>)
 801bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfea:	ee10 0a10 	vmov	r0, s0
 801bfee:	4629      	mov	r1, r5
 801bff0:	f7e4 f95c 	bl	80002ac <__adddf3>
 801bff4:	4ba8      	ldr	r3, [pc, #672]	; (801c298 <__ieee754_asin+0x348>)
 801bff6:	2200      	movs	r2, #0
 801bff8:	f7e4 fd9e 	bl	8000b38 <__aeabi_dcmpgt>
 801bffc:	2800      	cmp	r0, #0
 801bffe:	d1e3      	bne.n	801bfc8 <__ieee754_asin+0x78>
 801c000:	ec45 4b10 	vmov	d0, r4, r5
 801c004:	f002 fe20 	bl	801ec48 <fabs>
 801c008:	49a3      	ldr	r1, [pc, #652]	; (801c298 <__ieee754_asin+0x348>)
 801c00a:	ec53 2b10 	vmov	r2, r3, d0
 801c00e:	2000      	movs	r0, #0
 801c010:	f7e4 f94a 	bl	80002a8 <__aeabi_dsub>
 801c014:	4ba1      	ldr	r3, [pc, #644]	; (801c29c <__ieee754_asin+0x34c>)
 801c016:	2200      	movs	r2, #0
 801c018:	f7e4 fafe 	bl	8000618 <__aeabi_dmul>
 801c01c:	a388      	add	r3, pc, #544	; (adr r3, 801c240 <__ieee754_asin+0x2f0>)
 801c01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c022:	4604      	mov	r4, r0
 801c024:	460d      	mov	r5, r1
 801c026:	f7e4 faf7 	bl	8000618 <__aeabi_dmul>
 801c02a:	a387      	add	r3, pc, #540	; (adr r3, 801c248 <__ieee754_asin+0x2f8>)
 801c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c030:	f7e4 f93c 	bl	80002ac <__adddf3>
 801c034:	4622      	mov	r2, r4
 801c036:	462b      	mov	r3, r5
 801c038:	f7e4 faee 	bl	8000618 <__aeabi_dmul>
 801c03c:	a384      	add	r3, pc, #528	; (adr r3, 801c250 <__ieee754_asin+0x300>)
 801c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c042:	f7e4 f931 	bl	80002a8 <__aeabi_dsub>
 801c046:	4622      	mov	r2, r4
 801c048:	462b      	mov	r3, r5
 801c04a:	f7e4 fae5 	bl	8000618 <__aeabi_dmul>
 801c04e:	a382      	add	r3, pc, #520	; (adr r3, 801c258 <__ieee754_asin+0x308>)
 801c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c054:	f7e4 f92a 	bl	80002ac <__adddf3>
 801c058:	4622      	mov	r2, r4
 801c05a:	462b      	mov	r3, r5
 801c05c:	f7e4 fadc 	bl	8000618 <__aeabi_dmul>
 801c060:	a37f      	add	r3, pc, #508	; (adr r3, 801c260 <__ieee754_asin+0x310>)
 801c062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c066:	f7e4 f91f 	bl	80002a8 <__aeabi_dsub>
 801c06a:	4622      	mov	r2, r4
 801c06c:	462b      	mov	r3, r5
 801c06e:	f7e4 fad3 	bl	8000618 <__aeabi_dmul>
 801c072:	a37d      	add	r3, pc, #500	; (adr r3, 801c268 <__ieee754_asin+0x318>)
 801c074:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c078:	f7e4 f918 	bl	80002ac <__adddf3>
 801c07c:	4622      	mov	r2, r4
 801c07e:	462b      	mov	r3, r5
 801c080:	f7e4 faca 	bl	8000618 <__aeabi_dmul>
 801c084:	a37a      	add	r3, pc, #488	; (adr r3, 801c270 <__ieee754_asin+0x320>)
 801c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c08a:	ec41 0b18 	vmov	d8, r0, r1
 801c08e:	4620      	mov	r0, r4
 801c090:	4629      	mov	r1, r5
 801c092:	f7e4 fac1 	bl	8000618 <__aeabi_dmul>
 801c096:	a378      	add	r3, pc, #480	; (adr r3, 801c278 <__ieee754_asin+0x328>)
 801c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c09c:	f7e4 f904 	bl	80002a8 <__aeabi_dsub>
 801c0a0:	4622      	mov	r2, r4
 801c0a2:	462b      	mov	r3, r5
 801c0a4:	f7e4 fab8 	bl	8000618 <__aeabi_dmul>
 801c0a8:	a375      	add	r3, pc, #468	; (adr r3, 801c280 <__ieee754_asin+0x330>)
 801c0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ae:	f7e4 f8fd 	bl	80002ac <__adddf3>
 801c0b2:	4622      	mov	r2, r4
 801c0b4:	462b      	mov	r3, r5
 801c0b6:	f7e4 faaf 	bl	8000618 <__aeabi_dmul>
 801c0ba:	a373      	add	r3, pc, #460	; (adr r3, 801c288 <__ieee754_asin+0x338>)
 801c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0c0:	f7e4 f8f2 	bl	80002a8 <__aeabi_dsub>
 801c0c4:	4622      	mov	r2, r4
 801c0c6:	462b      	mov	r3, r5
 801c0c8:	f7e4 faa6 	bl	8000618 <__aeabi_dmul>
 801c0cc:	4b72      	ldr	r3, [pc, #456]	; (801c298 <__ieee754_asin+0x348>)
 801c0ce:	2200      	movs	r2, #0
 801c0d0:	f7e4 f8ec 	bl	80002ac <__adddf3>
 801c0d4:	ec45 4b10 	vmov	d0, r4, r5
 801c0d8:	4606      	mov	r6, r0
 801c0da:	460f      	mov	r7, r1
 801c0dc:	f001 f946 	bl	801d36c <__ieee754_sqrt>
 801c0e0:	4b6f      	ldr	r3, [pc, #444]	; (801c2a0 <__ieee754_asin+0x350>)
 801c0e2:	4598      	cmp	r8, r3
 801c0e4:	ec5b ab10 	vmov	sl, fp, d0
 801c0e8:	f340 80dc 	ble.w	801c2a4 <__ieee754_asin+0x354>
 801c0ec:	4632      	mov	r2, r6
 801c0ee:	463b      	mov	r3, r7
 801c0f0:	ec51 0b18 	vmov	r0, r1, d8
 801c0f4:	f7e4 fbba 	bl	800086c <__aeabi_ddiv>
 801c0f8:	4652      	mov	r2, sl
 801c0fa:	465b      	mov	r3, fp
 801c0fc:	f7e4 fa8c 	bl	8000618 <__aeabi_dmul>
 801c100:	4652      	mov	r2, sl
 801c102:	465b      	mov	r3, fp
 801c104:	f7e4 f8d2 	bl	80002ac <__adddf3>
 801c108:	4602      	mov	r2, r0
 801c10a:	460b      	mov	r3, r1
 801c10c:	f7e4 f8ce 	bl	80002ac <__adddf3>
 801c110:	a347      	add	r3, pc, #284	; (adr r3, 801c230 <__ieee754_asin+0x2e0>)
 801c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c116:	f7e4 f8c7 	bl	80002a8 <__aeabi_dsub>
 801c11a:	4602      	mov	r2, r0
 801c11c:	460b      	mov	r3, r1
 801c11e:	a142      	add	r1, pc, #264	; (adr r1, 801c228 <__ieee754_asin+0x2d8>)
 801c120:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c124:	f7e4 f8c0 	bl	80002a8 <__aeabi_dsub>
 801c128:	9b01      	ldr	r3, [sp, #4]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	bfdc      	itt	le
 801c12e:	4602      	movle	r2, r0
 801c130:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801c134:	4604      	mov	r4, r0
 801c136:	460d      	mov	r5, r1
 801c138:	bfdc      	itt	le
 801c13a:	4614      	movle	r4, r2
 801c13c:	461d      	movle	r5, r3
 801c13e:	e743      	b.n	801bfc8 <__ieee754_asin+0x78>
 801c140:	ee10 2a10 	vmov	r2, s0
 801c144:	ee10 0a10 	vmov	r0, s0
 801c148:	462b      	mov	r3, r5
 801c14a:	4629      	mov	r1, r5
 801c14c:	f7e4 fa64 	bl	8000618 <__aeabi_dmul>
 801c150:	a33b      	add	r3, pc, #236	; (adr r3, 801c240 <__ieee754_asin+0x2f0>)
 801c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c156:	4606      	mov	r6, r0
 801c158:	460f      	mov	r7, r1
 801c15a:	f7e4 fa5d 	bl	8000618 <__aeabi_dmul>
 801c15e:	a33a      	add	r3, pc, #232	; (adr r3, 801c248 <__ieee754_asin+0x2f8>)
 801c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c164:	f7e4 f8a2 	bl	80002ac <__adddf3>
 801c168:	4632      	mov	r2, r6
 801c16a:	463b      	mov	r3, r7
 801c16c:	f7e4 fa54 	bl	8000618 <__aeabi_dmul>
 801c170:	a337      	add	r3, pc, #220	; (adr r3, 801c250 <__ieee754_asin+0x300>)
 801c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c176:	f7e4 f897 	bl	80002a8 <__aeabi_dsub>
 801c17a:	4632      	mov	r2, r6
 801c17c:	463b      	mov	r3, r7
 801c17e:	f7e4 fa4b 	bl	8000618 <__aeabi_dmul>
 801c182:	a335      	add	r3, pc, #212	; (adr r3, 801c258 <__ieee754_asin+0x308>)
 801c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c188:	f7e4 f890 	bl	80002ac <__adddf3>
 801c18c:	4632      	mov	r2, r6
 801c18e:	463b      	mov	r3, r7
 801c190:	f7e4 fa42 	bl	8000618 <__aeabi_dmul>
 801c194:	a332      	add	r3, pc, #200	; (adr r3, 801c260 <__ieee754_asin+0x310>)
 801c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c19a:	f7e4 f885 	bl	80002a8 <__aeabi_dsub>
 801c19e:	4632      	mov	r2, r6
 801c1a0:	463b      	mov	r3, r7
 801c1a2:	f7e4 fa39 	bl	8000618 <__aeabi_dmul>
 801c1a6:	a330      	add	r3, pc, #192	; (adr r3, 801c268 <__ieee754_asin+0x318>)
 801c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ac:	f7e4 f87e 	bl	80002ac <__adddf3>
 801c1b0:	4632      	mov	r2, r6
 801c1b2:	463b      	mov	r3, r7
 801c1b4:	f7e4 fa30 	bl	8000618 <__aeabi_dmul>
 801c1b8:	a32d      	add	r3, pc, #180	; (adr r3, 801c270 <__ieee754_asin+0x320>)
 801c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1be:	4680      	mov	r8, r0
 801c1c0:	4689      	mov	r9, r1
 801c1c2:	4630      	mov	r0, r6
 801c1c4:	4639      	mov	r1, r7
 801c1c6:	f7e4 fa27 	bl	8000618 <__aeabi_dmul>
 801c1ca:	a32b      	add	r3, pc, #172	; (adr r3, 801c278 <__ieee754_asin+0x328>)
 801c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1d0:	f7e4 f86a 	bl	80002a8 <__aeabi_dsub>
 801c1d4:	4632      	mov	r2, r6
 801c1d6:	463b      	mov	r3, r7
 801c1d8:	f7e4 fa1e 	bl	8000618 <__aeabi_dmul>
 801c1dc:	a328      	add	r3, pc, #160	; (adr r3, 801c280 <__ieee754_asin+0x330>)
 801c1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1e2:	f7e4 f863 	bl	80002ac <__adddf3>
 801c1e6:	4632      	mov	r2, r6
 801c1e8:	463b      	mov	r3, r7
 801c1ea:	f7e4 fa15 	bl	8000618 <__aeabi_dmul>
 801c1ee:	a326      	add	r3, pc, #152	; (adr r3, 801c288 <__ieee754_asin+0x338>)
 801c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f4:	f7e4 f858 	bl	80002a8 <__aeabi_dsub>
 801c1f8:	4632      	mov	r2, r6
 801c1fa:	463b      	mov	r3, r7
 801c1fc:	f7e4 fa0c 	bl	8000618 <__aeabi_dmul>
 801c200:	4b25      	ldr	r3, [pc, #148]	; (801c298 <__ieee754_asin+0x348>)
 801c202:	2200      	movs	r2, #0
 801c204:	f7e4 f852 	bl	80002ac <__adddf3>
 801c208:	4602      	mov	r2, r0
 801c20a:	460b      	mov	r3, r1
 801c20c:	4640      	mov	r0, r8
 801c20e:	4649      	mov	r1, r9
 801c210:	f7e4 fb2c 	bl	800086c <__aeabi_ddiv>
 801c214:	4622      	mov	r2, r4
 801c216:	462b      	mov	r3, r5
 801c218:	f7e4 f9fe 	bl	8000618 <__aeabi_dmul>
 801c21c:	4602      	mov	r2, r0
 801c21e:	460b      	mov	r3, r1
 801c220:	4620      	mov	r0, r4
 801c222:	4629      	mov	r1, r5
 801c224:	e6bf      	b.n	801bfa6 <__ieee754_asin+0x56>
 801c226:	bf00      	nop
 801c228:	54442d18 	.word	0x54442d18
 801c22c:	3ff921fb 	.word	0x3ff921fb
 801c230:	33145c07 	.word	0x33145c07
 801c234:	3c91a626 	.word	0x3c91a626
 801c238:	8800759c 	.word	0x8800759c
 801c23c:	7e37e43c 	.word	0x7e37e43c
 801c240:	0dfdf709 	.word	0x0dfdf709
 801c244:	3f023de1 	.word	0x3f023de1
 801c248:	7501b288 	.word	0x7501b288
 801c24c:	3f49efe0 	.word	0x3f49efe0
 801c250:	b5688f3b 	.word	0xb5688f3b
 801c254:	3fa48228 	.word	0x3fa48228
 801c258:	0e884455 	.word	0x0e884455
 801c25c:	3fc9c155 	.word	0x3fc9c155
 801c260:	03eb6f7d 	.word	0x03eb6f7d
 801c264:	3fd4d612 	.word	0x3fd4d612
 801c268:	55555555 	.word	0x55555555
 801c26c:	3fc55555 	.word	0x3fc55555
 801c270:	b12e9282 	.word	0xb12e9282
 801c274:	3fb3b8c5 	.word	0x3fb3b8c5
 801c278:	1b8d0159 	.word	0x1b8d0159
 801c27c:	3fe6066c 	.word	0x3fe6066c
 801c280:	9c598ac8 	.word	0x9c598ac8
 801c284:	40002ae5 	.word	0x40002ae5
 801c288:	1c8a2d4b 	.word	0x1c8a2d4b
 801c28c:	40033a27 	.word	0x40033a27
 801c290:	3fefffff 	.word	0x3fefffff
 801c294:	3fdfffff 	.word	0x3fdfffff
 801c298:	3ff00000 	.word	0x3ff00000
 801c29c:	3fe00000 	.word	0x3fe00000
 801c2a0:	3fef3332 	.word	0x3fef3332
 801c2a4:	ee10 2a10 	vmov	r2, s0
 801c2a8:	ee10 0a10 	vmov	r0, s0
 801c2ac:	465b      	mov	r3, fp
 801c2ae:	4659      	mov	r1, fp
 801c2b0:	f7e3 fffc 	bl	80002ac <__adddf3>
 801c2b4:	4632      	mov	r2, r6
 801c2b6:	463b      	mov	r3, r7
 801c2b8:	ec41 0b19 	vmov	d9, r0, r1
 801c2bc:	ec51 0b18 	vmov	r0, r1, d8
 801c2c0:	f7e4 fad4 	bl	800086c <__aeabi_ddiv>
 801c2c4:	4602      	mov	r2, r0
 801c2c6:	460b      	mov	r3, r1
 801c2c8:	ec51 0b19 	vmov	r0, r1, d9
 801c2cc:	f7e4 f9a4 	bl	8000618 <__aeabi_dmul>
 801c2d0:	f04f 0800 	mov.w	r8, #0
 801c2d4:	4606      	mov	r6, r0
 801c2d6:	460f      	mov	r7, r1
 801c2d8:	4642      	mov	r2, r8
 801c2da:	465b      	mov	r3, fp
 801c2dc:	4640      	mov	r0, r8
 801c2de:	4659      	mov	r1, fp
 801c2e0:	f7e4 f99a 	bl	8000618 <__aeabi_dmul>
 801c2e4:	4602      	mov	r2, r0
 801c2e6:	460b      	mov	r3, r1
 801c2e8:	4620      	mov	r0, r4
 801c2ea:	4629      	mov	r1, r5
 801c2ec:	f7e3 ffdc 	bl	80002a8 <__aeabi_dsub>
 801c2f0:	4642      	mov	r2, r8
 801c2f2:	4604      	mov	r4, r0
 801c2f4:	460d      	mov	r5, r1
 801c2f6:	465b      	mov	r3, fp
 801c2f8:	4650      	mov	r0, sl
 801c2fa:	4659      	mov	r1, fp
 801c2fc:	f7e3 ffd6 	bl	80002ac <__adddf3>
 801c300:	4602      	mov	r2, r0
 801c302:	460b      	mov	r3, r1
 801c304:	4620      	mov	r0, r4
 801c306:	4629      	mov	r1, r5
 801c308:	f7e4 fab0 	bl	800086c <__aeabi_ddiv>
 801c30c:	4602      	mov	r2, r0
 801c30e:	460b      	mov	r3, r1
 801c310:	f7e3 ffcc 	bl	80002ac <__adddf3>
 801c314:	4602      	mov	r2, r0
 801c316:	460b      	mov	r3, r1
 801c318:	a113      	add	r1, pc, #76	; (adr r1, 801c368 <__ieee754_asin+0x418>)
 801c31a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c31e:	f7e3 ffc3 	bl	80002a8 <__aeabi_dsub>
 801c322:	4602      	mov	r2, r0
 801c324:	460b      	mov	r3, r1
 801c326:	4630      	mov	r0, r6
 801c328:	4639      	mov	r1, r7
 801c32a:	f7e3 ffbd 	bl	80002a8 <__aeabi_dsub>
 801c32e:	4642      	mov	r2, r8
 801c330:	4604      	mov	r4, r0
 801c332:	460d      	mov	r5, r1
 801c334:	465b      	mov	r3, fp
 801c336:	4640      	mov	r0, r8
 801c338:	4659      	mov	r1, fp
 801c33a:	f7e3 ffb7 	bl	80002ac <__adddf3>
 801c33e:	4602      	mov	r2, r0
 801c340:	460b      	mov	r3, r1
 801c342:	a10b      	add	r1, pc, #44	; (adr r1, 801c370 <__ieee754_asin+0x420>)
 801c344:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c348:	f7e3 ffae 	bl	80002a8 <__aeabi_dsub>
 801c34c:	4602      	mov	r2, r0
 801c34e:	460b      	mov	r3, r1
 801c350:	4620      	mov	r0, r4
 801c352:	4629      	mov	r1, r5
 801c354:	f7e3 ffa8 	bl	80002a8 <__aeabi_dsub>
 801c358:	4602      	mov	r2, r0
 801c35a:	460b      	mov	r3, r1
 801c35c:	a104      	add	r1, pc, #16	; (adr r1, 801c370 <__ieee754_asin+0x420>)
 801c35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c362:	e6df      	b.n	801c124 <__ieee754_asin+0x1d4>
 801c364:	f3af 8000 	nop.w
 801c368:	33145c07 	.word	0x33145c07
 801c36c:	3c91a626 	.word	0x3c91a626
 801c370:	54442d18 	.word	0x54442d18
 801c374:	3fe921fb 	.word	0x3fe921fb

0801c378 <__ieee754_atan2>:
 801c378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c37c:	ec57 6b11 	vmov	r6, r7, d1
 801c380:	4273      	negs	r3, r6
 801c382:	f8df e184 	ldr.w	lr, [pc, #388]	; 801c508 <__ieee754_atan2+0x190>
 801c386:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801c38a:	4333      	orrs	r3, r6
 801c38c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801c390:	4573      	cmp	r3, lr
 801c392:	ec51 0b10 	vmov	r0, r1, d0
 801c396:	ee11 8a10 	vmov	r8, s2
 801c39a:	d80a      	bhi.n	801c3b2 <__ieee754_atan2+0x3a>
 801c39c:	4244      	negs	r4, r0
 801c39e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c3a2:	4304      	orrs	r4, r0
 801c3a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801c3a8:	4574      	cmp	r4, lr
 801c3aa:	ee10 9a10 	vmov	r9, s0
 801c3ae:	468c      	mov	ip, r1
 801c3b0:	d907      	bls.n	801c3c2 <__ieee754_atan2+0x4a>
 801c3b2:	4632      	mov	r2, r6
 801c3b4:	463b      	mov	r3, r7
 801c3b6:	f7e3 ff79 	bl	80002ac <__adddf3>
 801c3ba:	ec41 0b10 	vmov	d0, r0, r1
 801c3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801c3c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c3ca:	4334      	orrs	r4, r6
 801c3cc:	d103      	bne.n	801c3d6 <__ieee754_atan2+0x5e>
 801c3ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3d2:	f002 ba99 	b.w	801e908 <atan>
 801c3d6:	17bc      	asrs	r4, r7, #30
 801c3d8:	f004 0402 	and.w	r4, r4, #2
 801c3dc:	ea53 0909 	orrs.w	r9, r3, r9
 801c3e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801c3e4:	d107      	bne.n	801c3f6 <__ieee754_atan2+0x7e>
 801c3e6:	2c02      	cmp	r4, #2
 801c3e8:	d060      	beq.n	801c4ac <__ieee754_atan2+0x134>
 801c3ea:	2c03      	cmp	r4, #3
 801c3ec:	d1e5      	bne.n	801c3ba <__ieee754_atan2+0x42>
 801c3ee:	a142      	add	r1, pc, #264	; (adr r1, 801c4f8 <__ieee754_atan2+0x180>)
 801c3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3f4:	e7e1      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c3f6:	ea52 0808 	orrs.w	r8, r2, r8
 801c3fa:	d106      	bne.n	801c40a <__ieee754_atan2+0x92>
 801c3fc:	f1bc 0f00 	cmp.w	ip, #0
 801c400:	da5f      	bge.n	801c4c2 <__ieee754_atan2+0x14a>
 801c402:	a13f      	add	r1, pc, #252	; (adr r1, 801c500 <__ieee754_atan2+0x188>)
 801c404:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c408:	e7d7      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c40a:	4572      	cmp	r2, lr
 801c40c:	d10f      	bne.n	801c42e <__ieee754_atan2+0xb6>
 801c40e:	4293      	cmp	r3, r2
 801c410:	f104 34ff 	add.w	r4, r4, #4294967295
 801c414:	d107      	bne.n	801c426 <__ieee754_atan2+0xae>
 801c416:	2c02      	cmp	r4, #2
 801c418:	d84c      	bhi.n	801c4b4 <__ieee754_atan2+0x13c>
 801c41a:	4b35      	ldr	r3, [pc, #212]	; (801c4f0 <__ieee754_atan2+0x178>)
 801c41c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801c420:	e9d4 0100 	ldrd	r0, r1, [r4]
 801c424:	e7c9      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c426:	2c02      	cmp	r4, #2
 801c428:	d848      	bhi.n	801c4bc <__ieee754_atan2+0x144>
 801c42a:	4b32      	ldr	r3, [pc, #200]	; (801c4f4 <__ieee754_atan2+0x17c>)
 801c42c:	e7f6      	b.n	801c41c <__ieee754_atan2+0xa4>
 801c42e:	4573      	cmp	r3, lr
 801c430:	d0e4      	beq.n	801c3fc <__ieee754_atan2+0x84>
 801c432:	1a9b      	subs	r3, r3, r2
 801c434:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801c438:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c43c:	da1e      	bge.n	801c47c <__ieee754_atan2+0x104>
 801c43e:	2f00      	cmp	r7, #0
 801c440:	da01      	bge.n	801c446 <__ieee754_atan2+0xce>
 801c442:	323c      	adds	r2, #60	; 0x3c
 801c444:	db1e      	blt.n	801c484 <__ieee754_atan2+0x10c>
 801c446:	4632      	mov	r2, r6
 801c448:	463b      	mov	r3, r7
 801c44a:	f7e4 fa0f 	bl	800086c <__aeabi_ddiv>
 801c44e:	ec41 0b10 	vmov	d0, r0, r1
 801c452:	f002 fbf9 	bl	801ec48 <fabs>
 801c456:	f002 fa57 	bl	801e908 <atan>
 801c45a:	ec51 0b10 	vmov	r0, r1, d0
 801c45e:	2c01      	cmp	r4, #1
 801c460:	d013      	beq.n	801c48a <__ieee754_atan2+0x112>
 801c462:	2c02      	cmp	r4, #2
 801c464:	d015      	beq.n	801c492 <__ieee754_atan2+0x11a>
 801c466:	2c00      	cmp	r4, #0
 801c468:	d0a7      	beq.n	801c3ba <__ieee754_atan2+0x42>
 801c46a:	a319      	add	r3, pc, #100	; (adr r3, 801c4d0 <__ieee754_atan2+0x158>)
 801c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c470:	f7e3 ff1a 	bl	80002a8 <__aeabi_dsub>
 801c474:	a318      	add	r3, pc, #96	; (adr r3, 801c4d8 <__ieee754_atan2+0x160>)
 801c476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c47a:	e014      	b.n	801c4a6 <__ieee754_atan2+0x12e>
 801c47c:	a118      	add	r1, pc, #96	; (adr r1, 801c4e0 <__ieee754_atan2+0x168>)
 801c47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c482:	e7ec      	b.n	801c45e <__ieee754_atan2+0xe6>
 801c484:	2000      	movs	r0, #0
 801c486:	2100      	movs	r1, #0
 801c488:	e7e9      	b.n	801c45e <__ieee754_atan2+0xe6>
 801c48a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c48e:	4619      	mov	r1, r3
 801c490:	e793      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c492:	a30f      	add	r3, pc, #60	; (adr r3, 801c4d0 <__ieee754_atan2+0x158>)
 801c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c498:	f7e3 ff06 	bl	80002a8 <__aeabi_dsub>
 801c49c:	4602      	mov	r2, r0
 801c49e:	460b      	mov	r3, r1
 801c4a0:	a10d      	add	r1, pc, #52	; (adr r1, 801c4d8 <__ieee754_atan2+0x160>)
 801c4a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4a6:	f7e3 feff 	bl	80002a8 <__aeabi_dsub>
 801c4aa:	e786      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c4ac:	a10a      	add	r1, pc, #40	; (adr r1, 801c4d8 <__ieee754_atan2+0x160>)
 801c4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4b2:	e782      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c4b4:	a10c      	add	r1, pc, #48	; (adr r1, 801c4e8 <__ieee754_atan2+0x170>)
 801c4b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4ba:	e77e      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c4bc:	2000      	movs	r0, #0
 801c4be:	2100      	movs	r1, #0
 801c4c0:	e77b      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c4c2:	a107      	add	r1, pc, #28	; (adr r1, 801c4e0 <__ieee754_atan2+0x168>)
 801c4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4c8:	e777      	b.n	801c3ba <__ieee754_atan2+0x42>
 801c4ca:	bf00      	nop
 801c4cc:	f3af 8000 	nop.w
 801c4d0:	33145c07 	.word	0x33145c07
 801c4d4:	3ca1a626 	.word	0x3ca1a626
 801c4d8:	54442d18 	.word	0x54442d18
 801c4dc:	400921fb 	.word	0x400921fb
 801c4e0:	54442d18 	.word	0x54442d18
 801c4e4:	3ff921fb 	.word	0x3ff921fb
 801c4e8:	54442d18 	.word	0x54442d18
 801c4ec:	3fe921fb 	.word	0x3fe921fb
 801c4f0:	08022188 	.word	0x08022188
 801c4f4:	080221a0 	.word	0x080221a0
 801c4f8:	54442d18 	.word	0x54442d18
 801c4fc:	c00921fb 	.word	0xc00921fb
 801c500:	54442d18 	.word	0x54442d18
 801c504:	bff921fb 	.word	0xbff921fb
 801c508:	7ff00000 	.word	0x7ff00000
 801c50c:	00000000 	.word	0x00000000

0801c510 <__ieee754_pow>:
 801c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c514:	ed2d 8b06 	vpush	{d8-d10}
 801c518:	b08d      	sub	sp, #52	; 0x34
 801c51a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801c51e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801c522:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801c526:	ea56 0100 	orrs.w	r1, r6, r0
 801c52a:	ec53 2b10 	vmov	r2, r3, d0
 801c52e:	f000 84d1 	beq.w	801ced4 <__ieee754_pow+0x9c4>
 801c532:	497f      	ldr	r1, [pc, #508]	; (801c730 <__ieee754_pow+0x220>)
 801c534:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801c538:	428c      	cmp	r4, r1
 801c53a:	ee10 8a10 	vmov	r8, s0
 801c53e:	4699      	mov	r9, r3
 801c540:	dc09      	bgt.n	801c556 <__ieee754_pow+0x46>
 801c542:	d103      	bne.n	801c54c <__ieee754_pow+0x3c>
 801c544:	b97a      	cbnz	r2, 801c566 <__ieee754_pow+0x56>
 801c546:	42a6      	cmp	r6, r4
 801c548:	dd02      	ble.n	801c550 <__ieee754_pow+0x40>
 801c54a:	e00c      	b.n	801c566 <__ieee754_pow+0x56>
 801c54c:	428e      	cmp	r6, r1
 801c54e:	dc02      	bgt.n	801c556 <__ieee754_pow+0x46>
 801c550:	428e      	cmp	r6, r1
 801c552:	d110      	bne.n	801c576 <__ieee754_pow+0x66>
 801c554:	b178      	cbz	r0, 801c576 <__ieee754_pow+0x66>
 801c556:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c55a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c55e:	ea54 0308 	orrs.w	r3, r4, r8
 801c562:	f000 84b7 	beq.w	801ced4 <__ieee754_pow+0x9c4>
 801c566:	4873      	ldr	r0, [pc, #460]	; (801c734 <__ieee754_pow+0x224>)
 801c568:	b00d      	add	sp, #52	; 0x34
 801c56a:	ecbd 8b06 	vpop	{d8-d10}
 801c56e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c572:	f7fe beb9 	b.w	801b2e8 <nan>
 801c576:	f1b9 0f00 	cmp.w	r9, #0
 801c57a:	da36      	bge.n	801c5ea <__ieee754_pow+0xda>
 801c57c:	496e      	ldr	r1, [pc, #440]	; (801c738 <__ieee754_pow+0x228>)
 801c57e:	428e      	cmp	r6, r1
 801c580:	dc51      	bgt.n	801c626 <__ieee754_pow+0x116>
 801c582:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801c586:	428e      	cmp	r6, r1
 801c588:	f340 84af 	ble.w	801ceea <__ieee754_pow+0x9da>
 801c58c:	1531      	asrs	r1, r6, #20
 801c58e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c592:	2914      	cmp	r1, #20
 801c594:	dd0f      	ble.n	801c5b6 <__ieee754_pow+0xa6>
 801c596:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801c59a:	fa20 fc01 	lsr.w	ip, r0, r1
 801c59e:	fa0c f101 	lsl.w	r1, ip, r1
 801c5a2:	4281      	cmp	r1, r0
 801c5a4:	f040 84a1 	bne.w	801ceea <__ieee754_pow+0x9da>
 801c5a8:	f00c 0c01 	and.w	ip, ip, #1
 801c5ac:	f1cc 0102 	rsb	r1, ip, #2
 801c5b0:	9100      	str	r1, [sp, #0]
 801c5b2:	b180      	cbz	r0, 801c5d6 <__ieee754_pow+0xc6>
 801c5b4:	e059      	b.n	801c66a <__ieee754_pow+0x15a>
 801c5b6:	2800      	cmp	r0, #0
 801c5b8:	d155      	bne.n	801c666 <__ieee754_pow+0x156>
 801c5ba:	f1c1 0114 	rsb	r1, r1, #20
 801c5be:	fa46 fc01 	asr.w	ip, r6, r1
 801c5c2:	fa0c f101 	lsl.w	r1, ip, r1
 801c5c6:	42b1      	cmp	r1, r6
 801c5c8:	f040 848c 	bne.w	801cee4 <__ieee754_pow+0x9d4>
 801c5cc:	f00c 0c01 	and.w	ip, ip, #1
 801c5d0:	f1cc 0102 	rsb	r1, ip, #2
 801c5d4:	9100      	str	r1, [sp, #0]
 801c5d6:	4959      	ldr	r1, [pc, #356]	; (801c73c <__ieee754_pow+0x22c>)
 801c5d8:	428e      	cmp	r6, r1
 801c5da:	d12d      	bne.n	801c638 <__ieee754_pow+0x128>
 801c5dc:	2f00      	cmp	r7, #0
 801c5de:	da79      	bge.n	801c6d4 <__ieee754_pow+0x1c4>
 801c5e0:	4956      	ldr	r1, [pc, #344]	; (801c73c <__ieee754_pow+0x22c>)
 801c5e2:	2000      	movs	r0, #0
 801c5e4:	f7e4 f942 	bl	800086c <__aeabi_ddiv>
 801c5e8:	e016      	b.n	801c618 <__ieee754_pow+0x108>
 801c5ea:	2100      	movs	r1, #0
 801c5ec:	9100      	str	r1, [sp, #0]
 801c5ee:	2800      	cmp	r0, #0
 801c5f0:	d13b      	bne.n	801c66a <__ieee754_pow+0x15a>
 801c5f2:	494f      	ldr	r1, [pc, #316]	; (801c730 <__ieee754_pow+0x220>)
 801c5f4:	428e      	cmp	r6, r1
 801c5f6:	d1ee      	bne.n	801c5d6 <__ieee754_pow+0xc6>
 801c5f8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801c5fc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801c600:	ea53 0308 	orrs.w	r3, r3, r8
 801c604:	f000 8466 	beq.w	801ced4 <__ieee754_pow+0x9c4>
 801c608:	4b4d      	ldr	r3, [pc, #308]	; (801c740 <__ieee754_pow+0x230>)
 801c60a:	429c      	cmp	r4, r3
 801c60c:	dd0d      	ble.n	801c62a <__ieee754_pow+0x11a>
 801c60e:	2f00      	cmp	r7, #0
 801c610:	f280 8464 	bge.w	801cedc <__ieee754_pow+0x9cc>
 801c614:	2000      	movs	r0, #0
 801c616:	2100      	movs	r1, #0
 801c618:	ec41 0b10 	vmov	d0, r0, r1
 801c61c:	b00d      	add	sp, #52	; 0x34
 801c61e:	ecbd 8b06 	vpop	{d8-d10}
 801c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c626:	2102      	movs	r1, #2
 801c628:	e7e0      	b.n	801c5ec <__ieee754_pow+0xdc>
 801c62a:	2f00      	cmp	r7, #0
 801c62c:	daf2      	bge.n	801c614 <__ieee754_pow+0x104>
 801c62e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801c632:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801c636:	e7ef      	b.n	801c618 <__ieee754_pow+0x108>
 801c638:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801c63c:	d104      	bne.n	801c648 <__ieee754_pow+0x138>
 801c63e:	4610      	mov	r0, r2
 801c640:	4619      	mov	r1, r3
 801c642:	f7e3 ffe9 	bl	8000618 <__aeabi_dmul>
 801c646:	e7e7      	b.n	801c618 <__ieee754_pow+0x108>
 801c648:	493e      	ldr	r1, [pc, #248]	; (801c744 <__ieee754_pow+0x234>)
 801c64a:	428f      	cmp	r7, r1
 801c64c:	d10d      	bne.n	801c66a <__ieee754_pow+0x15a>
 801c64e:	f1b9 0f00 	cmp.w	r9, #0
 801c652:	db0a      	blt.n	801c66a <__ieee754_pow+0x15a>
 801c654:	ec43 2b10 	vmov	d0, r2, r3
 801c658:	b00d      	add	sp, #52	; 0x34
 801c65a:	ecbd 8b06 	vpop	{d8-d10}
 801c65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c662:	f000 be83 	b.w	801d36c <__ieee754_sqrt>
 801c666:	2100      	movs	r1, #0
 801c668:	9100      	str	r1, [sp, #0]
 801c66a:	ec43 2b10 	vmov	d0, r2, r3
 801c66e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c672:	f002 fae9 	bl	801ec48 <fabs>
 801c676:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c67a:	ec51 0b10 	vmov	r0, r1, d0
 801c67e:	f1b8 0f00 	cmp.w	r8, #0
 801c682:	d12a      	bne.n	801c6da <__ieee754_pow+0x1ca>
 801c684:	b12c      	cbz	r4, 801c692 <__ieee754_pow+0x182>
 801c686:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801c73c <__ieee754_pow+0x22c>
 801c68a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801c68e:	45e6      	cmp	lr, ip
 801c690:	d123      	bne.n	801c6da <__ieee754_pow+0x1ca>
 801c692:	2f00      	cmp	r7, #0
 801c694:	da05      	bge.n	801c6a2 <__ieee754_pow+0x192>
 801c696:	4602      	mov	r2, r0
 801c698:	460b      	mov	r3, r1
 801c69a:	2000      	movs	r0, #0
 801c69c:	4927      	ldr	r1, [pc, #156]	; (801c73c <__ieee754_pow+0x22c>)
 801c69e:	f7e4 f8e5 	bl	800086c <__aeabi_ddiv>
 801c6a2:	f1b9 0f00 	cmp.w	r9, #0
 801c6a6:	dab7      	bge.n	801c618 <__ieee754_pow+0x108>
 801c6a8:	9b00      	ldr	r3, [sp, #0]
 801c6aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801c6ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801c6b2:	4323      	orrs	r3, r4
 801c6b4:	d108      	bne.n	801c6c8 <__ieee754_pow+0x1b8>
 801c6b6:	4602      	mov	r2, r0
 801c6b8:	460b      	mov	r3, r1
 801c6ba:	4610      	mov	r0, r2
 801c6bc:	4619      	mov	r1, r3
 801c6be:	f7e3 fdf3 	bl	80002a8 <__aeabi_dsub>
 801c6c2:	4602      	mov	r2, r0
 801c6c4:	460b      	mov	r3, r1
 801c6c6:	e78d      	b.n	801c5e4 <__ieee754_pow+0xd4>
 801c6c8:	9b00      	ldr	r3, [sp, #0]
 801c6ca:	2b01      	cmp	r3, #1
 801c6cc:	d1a4      	bne.n	801c618 <__ieee754_pow+0x108>
 801c6ce:	4602      	mov	r2, r0
 801c6d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c6d4:	4610      	mov	r0, r2
 801c6d6:	4619      	mov	r1, r3
 801c6d8:	e79e      	b.n	801c618 <__ieee754_pow+0x108>
 801c6da:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801c6de:	f10c 35ff 	add.w	r5, ip, #4294967295
 801c6e2:	950a      	str	r5, [sp, #40]	; 0x28
 801c6e4:	9d00      	ldr	r5, [sp, #0]
 801c6e6:	46ac      	mov	ip, r5
 801c6e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c6ea:	ea5c 0505 	orrs.w	r5, ip, r5
 801c6ee:	d0e4      	beq.n	801c6ba <__ieee754_pow+0x1aa>
 801c6f0:	4b15      	ldr	r3, [pc, #84]	; (801c748 <__ieee754_pow+0x238>)
 801c6f2:	429e      	cmp	r6, r3
 801c6f4:	f340 80fc 	ble.w	801c8f0 <__ieee754_pow+0x3e0>
 801c6f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801c6fc:	429e      	cmp	r6, r3
 801c6fe:	4b10      	ldr	r3, [pc, #64]	; (801c740 <__ieee754_pow+0x230>)
 801c700:	dd07      	ble.n	801c712 <__ieee754_pow+0x202>
 801c702:	429c      	cmp	r4, r3
 801c704:	dc0a      	bgt.n	801c71c <__ieee754_pow+0x20c>
 801c706:	2f00      	cmp	r7, #0
 801c708:	da84      	bge.n	801c614 <__ieee754_pow+0x104>
 801c70a:	a307      	add	r3, pc, #28	; (adr r3, 801c728 <__ieee754_pow+0x218>)
 801c70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c710:	e795      	b.n	801c63e <__ieee754_pow+0x12e>
 801c712:	429c      	cmp	r4, r3
 801c714:	dbf7      	blt.n	801c706 <__ieee754_pow+0x1f6>
 801c716:	4b09      	ldr	r3, [pc, #36]	; (801c73c <__ieee754_pow+0x22c>)
 801c718:	429c      	cmp	r4, r3
 801c71a:	dd17      	ble.n	801c74c <__ieee754_pow+0x23c>
 801c71c:	2f00      	cmp	r7, #0
 801c71e:	dcf4      	bgt.n	801c70a <__ieee754_pow+0x1fa>
 801c720:	e778      	b.n	801c614 <__ieee754_pow+0x104>
 801c722:	bf00      	nop
 801c724:	f3af 8000 	nop.w
 801c728:	8800759c 	.word	0x8800759c
 801c72c:	7e37e43c 	.word	0x7e37e43c
 801c730:	7ff00000 	.word	0x7ff00000
 801c734:	08021e93 	.word	0x08021e93
 801c738:	433fffff 	.word	0x433fffff
 801c73c:	3ff00000 	.word	0x3ff00000
 801c740:	3fefffff 	.word	0x3fefffff
 801c744:	3fe00000 	.word	0x3fe00000
 801c748:	41e00000 	.word	0x41e00000
 801c74c:	4b64      	ldr	r3, [pc, #400]	; (801c8e0 <__ieee754_pow+0x3d0>)
 801c74e:	2200      	movs	r2, #0
 801c750:	f7e3 fdaa 	bl	80002a8 <__aeabi_dsub>
 801c754:	a356      	add	r3, pc, #344	; (adr r3, 801c8b0 <__ieee754_pow+0x3a0>)
 801c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c75a:	4604      	mov	r4, r0
 801c75c:	460d      	mov	r5, r1
 801c75e:	f7e3 ff5b 	bl	8000618 <__aeabi_dmul>
 801c762:	a355      	add	r3, pc, #340	; (adr r3, 801c8b8 <__ieee754_pow+0x3a8>)
 801c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c768:	4606      	mov	r6, r0
 801c76a:	460f      	mov	r7, r1
 801c76c:	4620      	mov	r0, r4
 801c76e:	4629      	mov	r1, r5
 801c770:	f7e3 ff52 	bl	8000618 <__aeabi_dmul>
 801c774:	4b5b      	ldr	r3, [pc, #364]	; (801c8e4 <__ieee754_pow+0x3d4>)
 801c776:	4682      	mov	sl, r0
 801c778:	468b      	mov	fp, r1
 801c77a:	2200      	movs	r2, #0
 801c77c:	4620      	mov	r0, r4
 801c77e:	4629      	mov	r1, r5
 801c780:	f7e3 ff4a 	bl	8000618 <__aeabi_dmul>
 801c784:	4602      	mov	r2, r0
 801c786:	460b      	mov	r3, r1
 801c788:	a14d      	add	r1, pc, #308	; (adr r1, 801c8c0 <__ieee754_pow+0x3b0>)
 801c78a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c78e:	f7e3 fd8b 	bl	80002a8 <__aeabi_dsub>
 801c792:	4622      	mov	r2, r4
 801c794:	462b      	mov	r3, r5
 801c796:	f7e3 ff3f 	bl	8000618 <__aeabi_dmul>
 801c79a:	4602      	mov	r2, r0
 801c79c:	460b      	mov	r3, r1
 801c79e:	2000      	movs	r0, #0
 801c7a0:	4951      	ldr	r1, [pc, #324]	; (801c8e8 <__ieee754_pow+0x3d8>)
 801c7a2:	f7e3 fd81 	bl	80002a8 <__aeabi_dsub>
 801c7a6:	4622      	mov	r2, r4
 801c7a8:	4680      	mov	r8, r0
 801c7aa:	4689      	mov	r9, r1
 801c7ac:	462b      	mov	r3, r5
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	4629      	mov	r1, r5
 801c7b2:	f7e3 ff31 	bl	8000618 <__aeabi_dmul>
 801c7b6:	4602      	mov	r2, r0
 801c7b8:	460b      	mov	r3, r1
 801c7ba:	4640      	mov	r0, r8
 801c7bc:	4649      	mov	r1, r9
 801c7be:	f7e3 ff2b 	bl	8000618 <__aeabi_dmul>
 801c7c2:	a341      	add	r3, pc, #260	; (adr r3, 801c8c8 <__ieee754_pow+0x3b8>)
 801c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7c8:	f7e3 ff26 	bl	8000618 <__aeabi_dmul>
 801c7cc:	4602      	mov	r2, r0
 801c7ce:	460b      	mov	r3, r1
 801c7d0:	4650      	mov	r0, sl
 801c7d2:	4659      	mov	r1, fp
 801c7d4:	f7e3 fd68 	bl	80002a8 <__aeabi_dsub>
 801c7d8:	4602      	mov	r2, r0
 801c7da:	460b      	mov	r3, r1
 801c7dc:	4680      	mov	r8, r0
 801c7de:	4689      	mov	r9, r1
 801c7e0:	4630      	mov	r0, r6
 801c7e2:	4639      	mov	r1, r7
 801c7e4:	f7e3 fd62 	bl	80002ac <__adddf3>
 801c7e8:	2400      	movs	r4, #0
 801c7ea:	4632      	mov	r2, r6
 801c7ec:	463b      	mov	r3, r7
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	460d      	mov	r5, r1
 801c7f2:	f7e3 fd59 	bl	80002a8 <__aeabi_dsub>
 801c7f6:	4602      	mov	r2, r0
 801c7f8:	460b      	mov	r3, r1
 801c7fa:	4640      	mov	r0, r8
 801c7fc:	4649      	mov	r1, r9
 801c7fe:	f7e3 fd53 	bl	80002a8 <__aeabi_dsub>
 801c802:	9b00      	ldr	r3, [sp, #0]
 801c804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c806:	3b01      	subs	r3, #1
 801c808:	4313      	orrs	r3, r2
 801c80a:	4682      	mov	sl, r0
 801c80c:	468b      	mov	fp, r1
 801c80e:	f040 81f1 	bne.w	801cbf4 <__ieee754_pow+0x6e4>
 801c812:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801c8d0 <__ieee754_pow+0x3c0>
 801c816:	eeb0 8a47 	vmov.f32	s16, s14
 801c81a:	eef0 8a67 	vmov.f32	s17, s15
 801c81e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801c822:	2600      	movs	r6, #0
 801c824:	4632      	mov	r2, r6
 801c826:	463b      	mov	r3, r7
 801c828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c82c:	f7e3 fd3c 	bl	80002a8 <__aeabi_dsub>
 801c830:	4622      	mov	r2, r4
 801c832:	462b      	mov	r3, r5
 801c834:	f7e3 fef0 	bl	8000618 <__aeabi_dmul>
 801c838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c83c:	4680      	mov	r8, r0
 801c83e:	4689      	mov	r9, r1
 801c840:	4650      	mov	r0, sl
 801c842:	4659      	mov	r1, fp
 801c844:	f7e3 fee8 	bl	8000618 <__aeabi_dmul>
 801c848:	4602      	mov	r2, r0
 801c84a:	460b      	mov	r3, r1
 801c84c:	4640      	mov	r0, r8
 801c84e:	4649      	mov	r1, r9
 801c850:	f7e3 fd2c 	bl	80002ac <__adddf3>
 801c854:	4632      	mov	r2, r6
 801c856:	463b      	mov	r3, r7
 801c858:	4680      	mov	r8, r0
 801c85a:	4689      	mov	r9, r1
 801c85c:	4620      	mov	r0, r4
 801c85e:	4629      	mov	r1, r5
 801c860:	f7e3 feda 	bl	8000618 <__aeabi_dmul>
 801c864:	460b      	mov	r3, r1
 801c866:	4604      	mov	r4, r0
 801c868:	460d      	mov	r5, r1
 801c86a:	4602      	mov	r2, r0
 801c86c:	4649      	mov	r1, r9
 801c86e:	4640      	mov	r0, r8
 801c870:	f7e3 fd1c 	bl	80002ac <__adddf3>
 801c874:	4b1d      	ldr	r3, [pc, #116]	; (801c8ec <__ieee754_pow+0x3dc>)
 801c876:	4299      	cmp	r1, r3
 801c878:	ec45 4b19 	vmov	d9, r4, r5
 801c87c:	4606      	mov	r6, r0
 801c87e:	460f      	mov	r7, r1
 801c880:	468b      	mov	fp, r1
 801c882:	f340 82fe 	ble.w	801ce82 <__ieee754_pow+0x972>
 801c886:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801c88a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801c88e:	4303      	orrs	r3, r0
 801c890:	f000 81f0 	beq.w	801cc74 <__ieee754_pow+0x764>
 801c894:	a310      	add	r3, pc, #64	; (adr r3, 801c8d8 <__ieee754_pow+0x3c8>)
 801c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c89a:	ec51 0b18 	vmov	r0, r1, d8
 801c89e:	f7e3 febb 	bl	8000618 <__aeabi_dmul>
 801c8a2:	a30d      	add	r3, pc, #52	; (adr r3, 801c8d8 <__ieee754_pow+0x3c8>)
 801c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a8:	e6cb      	b.n	801c642 <__ieee754_pow+0x132>
 801c8aa:	bf00      	nop
 801c8ac:	f3af 8000 	nop.w
 801c8b0:	60000000 	.word	0x60000000
 801c8b4:	3ff71547 	.word	0x3ff71547
 801c8b8:	f85ddf44 	.word	0xf85ddf44
 801c8bc:	3e54ae0b 	.word	0x3e54ae0b
 801c8c0:	55555555 	.word	0x55555555
 801c8c4:	3fd55555 	.word	0x3fd55555
 801c8c8:	652b82fe 	.word	0x652b82fe
 801c8cc:	3ff71547 	.word	0x3ff71547
 801c8d0:	00000000 	.word	0x00000000
 801c8d4:	bff00000 	.word	0xbff00000
 801c8d8:	8800759c 	.word	0x8800759c
 801c8dc:	7e37e43c 	.word	0x7e37e43c
 801c8e0:	3ff00000 	.word	0x3ff00000
 801c8e4:	3fd00000 	.word	0x3fd00000
 801c8e8:	3fe00000 	.word	0x3fe00000
 801c8ec:	408fffff 	.word	0x408fffff
 801c8f0:	4bd7      	ldr	r3, [pc, #860]	; (801cc50 <__ieee754_pow+0x740>)
 801c8f2:	ea03 0309 	and.w	r3, r3, r9
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	b92b      	cbnz	r3, 801c906 <__ieee754_pow+0x3f6>
 801c8fa:	4bd6      	ldr	r3, [pc, #856]	; (801cc54 <__ieee754_pow+0x744>)
 801c8fc:	f7e3 fe8c 	bl	8000618 <__aeabi_dmul>
 801c900:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801c904:	460c      	mov	r4, r1
 801c906:	1523      	asrs	r3, r4, #20
 801c908:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c90c:	4413      	add	r3, r2
 801c90e:	9309      	str	r3, [sp, #36]	; 0x24
 801c910:	4bd1      	ldr	r3, [pc, #836]	; (801cc58 <__ieee754_pow+0x748>)
 801c912:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c916:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801c91a:	429c      	cmp	r4, r3
 801c91c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801c920:	dd08      	ble.n	801c934 <__ieee754_pow+0x424>
 801c922:	4bce      	ldr	r3, [pc, #824]	; (801cc5c <__ieee754_pow+0x74c>)
 801c924:	429c      	cmp	r4, r3
 801c926:	f340 8163 	ble.w	801cbf0 <__ieee754_pow+0x6e0>
 801c92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c92c:	3301      	adds	r3, #1
 801c92e:	9309      	str	r3, [sp, #36]	; 0x24
 801c930:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801c934:	2400      	movs	r4, #0
 801c936:	00e3      	lsls	r3, r4, #3
 801c938:	930b      	str	r3, [sp, #44]	; 0x2c
 801c93a:	4bc9      	ldr	r3, [pc, #804]	; (801cc60 <__ieee754_pow+0x750>)
 801c93c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c940:	ed93 7b00 	vldr	d7, [r3]
 801c944:	4629      	mov	r1, r5
 801c946:	ec53 2b17 	vmov	r2, r3, d7
 801c94a:	eeb0 8a47 	vmov.f32	s16, s14
 801c94e:	eef0 8a67 	vmov.f32	s17, s15
 801c952:	4682      	mov	sl, r0
 801c954:	f7e3 fca8 	bl	80002a8 <__aeabi_dsub>
 801c958:	4652      	mov	r2, sl
 801c95a:	4606      	mov	r6, r0
 801c95c:	460f      	mov	r7, r1
 801c95e:	462b      	mov	r3, r5
 801c960:	ec51 0b18 	vmov	r0, r1, d8
 801c964:	f7e3 fca2 	bl	80002ac <__adddf3>
 801c968:	4602      	mov	r2, r0
 801c96a:	460b      	mov	r3, r1
 801c96c:	2000      	movs	r0, #0
 801c96e:	49bd      	ldr	r1, [pc, #756]	; (801cc64 <__ieee754_pow+0x754>)
 801c970:	f7e3 ff7c 	bl	800086c <__aeabi_ddiv>
 801c974:	ec41 0b19 	vmov	d9, r0, r1
 801c978:	4602      	mov	r2, r0
 801c97a:	460b      	mov	r3, r1
 801c97c:	4630      	mov	r0, r6
 801c97e:	4639      	mov	r1, r7
 801c980:	f7e3 fe4a 	bl	8000618 <__aeabi_dmul>
 801c984:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c988:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c98c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801c990:	2300      	movs	r3, #0
 801c992:	9304      	str	r3, [sp, #16]
 801c994:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c998:	46ab      	mov	fp, r5
 801c99a:	106d      	asrs	r5, r5, #1
 801c99c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801c9a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801c9a4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	4640      	mov	r0, r8
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	4614      	mov	r4, r2
 801c9b0:	461d      	mov	r5, r3
 801c9b2:	f7e3 fe31 	bl	8000618 <__aeabi_dmul>
 801c9b6:	4602      	mov	r2, r0
 801c9b8:	460b      	mov	r3, r1
 801c9ba:	4630      	mov	r0, r6
 801c9bc:	4639      	mov	r1, r7
 801c9be:	f7e3 fc73 	bl	80002a8 <__aeabi_dsub>
 801c9c2:	ec53 2b18 	vmov	r2, r3, d8
 801c9c6:	4606      	mov	r6, r0
 801c9c8:	460f      	mov	r7, r1
 801c9ca:	4620      	mov	r0, r4
 801c9cc:	4629      	mov	r1, r5
 801c9ce:	f7e3 fc6b 	bl	80002a8 <__aeabi_dsub>
 801c9d2:	4602      	mov	r2, r0
 801c9d4:	460b      	mov	r3, r1
 801c9d6:	4650      	mov	r0, sl
 801c9d8:	4659      	mov	r1, fp
 801c9da:	f7e3 fc65 	bl	80002a8 <__aeabi_dsub>
 801c9de:	4642      	mov	r2, r8
 801c9e0:	464b      	mov	r3, r9
 801c9e2:	f7e3 fe19 	bl	8000618 <__aeabi_dmul>
 801c9e6:	4602      	mov	r2, r0
 801c9e8:	460b      	mov	r3, r1
 801c9ea:	4630      	mov	r0, r6
 801c9ec:	4639      	mov	r1, r7
 801c9ee:	f7e3 fc5b 	bl	80002a8 <__aeabi_dsub>
 801c9f2:	ec53 2b19 	vmov	r2, r3, d9
 801c9f6:	f7e3 fe0f 	bl	8000618 <__aeabi_dmul>
 801c9fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c9fe:	ec41 0b18 	vmov	d8, r0, r1
 801ca02:	4610      	mov	r0, r2
 801ca04:	4619      	mov	r1, r3
 801ca06:	f7e3 fe07 	bl	8000618 <__aeabi_dmul>
 801ca0a:	a37d      	add	r3, pc, #500	; (adr r3, 801cc00 <__ieee754_pow+0x6f0>)
 801ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca10:	4604      	mov	r4, r0
 801ca12:	460d      	mov	r5, r1
 801ca14:	f7e3 fe00 	bl	8000618 <__aeabi_dmul>
 801ca18:	a37b      	add	r3, pc, #492	; (adr r3, 801cc08 <__ieee754_pow+0x6f8>)
 801ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca1e:	f7e3 fc45 	bl	80002ac <__adddf3>
 801ca22:	4622      	mov	r2, r4
 801ca24:	462b      	mov	r3, r5
 801ca26:	f7e3 fdf7 	bl	8000618 <__aeabi_dmul>
 801ca2a:	a379      	add	r3, pc, #484	; (adr r3, 801cc10 <__ieee754_pow+0x700>)
 801ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca30:	f7e3 fc3c 	bl	80002ac <__adddf3>
 801ca34:	4622      	mov	r2, r4
 801ca36:	462b      	mov	r3, r5
 801ca38:	f7e3 fdee 	bl	8000618 <__aeabi_dmul>
 801ca3c:	a376      	add	r3, pc, #472	; (adr r3, 801cc18 <__ieee754_pow+0x708>)
 801ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca42:	f7e3 fc33 	bl	80002ac <__adddf3>
 801ca46:	4622      	mov	r2, r4
 801ca48:	462b      	mov	r3, r5
 801ca4a:	f7e3 fde5 	bl	8000618 <__aeabi_dmul>
 801ca4e:	a374      	add	r3, pc, #464	; (adr r3, 801cc20 <__ieee754_pow+0x710>)
 801ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca54:	f7e3 fc2a 	bl	80002ac <__adddf3>
 801ca58:	4622      	mov	r2, r4
 801ca5a:	462b      	mov	r3, r5
 801ca5c:	f7e3 fddc 	bl	8000618 <__aeabi_dmul>
 801ca60:	a371      	add	r3, pc, #452	; (adr r3, 801cc28 <__ieee754_pow+0x718>)
 801ca62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca66:	f7e3 fc21 	bl	80002ac <__adddf3>
 801ca6a:	4622      	mov	r2, r4
 801ca6c:	4606      	mov	r6, r0
 801ca6e:	460f      	mov	r7, r1
 801ca70:	462b      	mov	r3, r5
 801ca72:	4620      	mov	r0, r4
 801ca74:	4629      	mov	r1, r5
 801ca76:	f7e3 fdcf 	bl	8000618 <__aeabi_dmul>
 801ca7a:	4602      	mov	r2, r0
 801ca7c:	460b      	mov	r3, r1
 801ca7e:	4630      	mov	r0, r6
 801ca80:	4639      	mov	r1, r7
 801ca82:	f7e3 fdc9 	bl	8000618 <__aeabi_dmul>
 801ca86:	4642      	mov	r2, r8
 801ca88:	4604      	mov	r4, r0
 801ca8a:	460d      	mov	r5, r1
 801ca8c:	464b      	mov	r3, r9
 801ca8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ca92:	f7e3 fc0b 	bl	80002ac <__adddf3>
 801ca96:	ec53 2b18 	vmov	r2, r3, d8
 801ca9a:	f7e3 fdbd 	bl	8000618 <__aeabi_dmul>
 801ca9e:	4622      	mov	r2, r4
 801caa0:	462b      	mov	r3, r5
 801caa2:	f7e3 fc03 	bl	80002ac <__adddf3>
 801caa6:	4642      	mov	r2, r8
 801caa8:	4682      	mov	sl, r0
 801caaa:	468b      	mov	fp, r1
 801caac:	464b      	mov	r3, r9
 801caae:	4640      	mov	r0, r8
 801cab0:	4649      	mov	r1, r9
 801cab2:	f7e3 fdb1 	bl	8000618 <__aeabi_dmul>
 801cab6:	4b6c      	ldr	r3, [pc, #432]	; (801cc68 <__ieee754_pow+0x758>)
 801cab8:	2200      	movs	r2, #0
 801caba:	4606      	mov	r6, r0
 801cabc:	460f      	mov	r7, r1
 801cabe:	f7e3 fbf5 	bl	80002ac <__adddf3>
 801cac2:	4652      	mov	r2, sl
 801cac4:	465b      	mov	r3, fp
 801cac6:	f7e3 fbf1 	bl	80002ac <__adddf3>
 801caca:	9c04      	ldr	r4, [sp, #16]
 801cacc:	460d      	mov	r5, r1
 801cace:	4622      	mov	r2, r4
 801cad0:	460b      	mov	r3, r1
 801cad2:	4640      	mov	r0, r8
 801cad4:	4649      	mov	r1, r9
 801cad6:	f7e3 fd9f 	bl	8000618 <__aeabi_dmul>
 801cada:	4b63      	ldr	r3, [pc, #396]	; (801cc68 <__ieee754_pow+0x758>)
 801cadc:	4680      	mov	r8, r0
 801cade:	4689      	mov	r9, r1
 801cae0:	2200      	movs	r2, #0
 801cae2:	4620      	mov	r0, r4
 801cae4:	4629      	mov	r1, r5
 801cae6:	f7e3 fbdf 	bl	80002a8 <__aeabi_dsub>
 801caea:	4632      	mov	r2, r6
 801caec:	463b      	mov	r3, r7
 801caee:	f7e3 fbdb 	bl	80002a8 <__aeabi_dsub>
 801caf2:	4602      	mov	r2, r0
 801caf4:	460b      	mov	r3, r1
 801caf6:	4650      	mov	r0, sl
 801caf8:	4659      	mov	r1, fp
 801cafa:	f7e3 fbd5 	bl	80002a8 <__aeabi_dsub>
 801cafe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cb02:	f7e3 fd89 	bl	8000618 <__aeabi_dmul>
 801cb06:	4622      	mov	r2, r4
 801cb08:	4606      	mov	r6, r0
 801cb0a:	460f      	mov	r7, r1
 801cb0c:	462b      	mov	r3, r5
 801cb0e:	ec51 0b18 	vmov	r0, r1, d8
 801cb12:	f7e3 fd81 	bl	8000618 <__aeabi_dmul>
 801cb16:	4602      	mov	r2, r0
 801cb18:	460b      	mov	r3, r1
 801cb1a:	4630      	mov	r0, r6
 801cb1c:	4639      	mov	r1, r7
 801cb1e:	f7e3 fbc5 	bl	80002ac <__adddf3>
 801cb22:	4606      	mov	r6, r0
 801cb24:	460f      	mov	r7, r1
 801cb26:	4602      	mov	r2, r0
 801cb28:	460b      	mov	r3, r1
 801cb2a:	4640      	mov	r0, r8
 801cb2c:	4649      	mov	r1, r9
 801cb2e:	f7e3 fbbd 	bl	80002ac <__adddf3>
 801cb32:	9c04      	ldr	r4, [sp, #16]
 801cb34:	a33e      	add	r3, pc, #248	; (adr r3, 801cc30 <__ieee754_pow+0x720>)
 801cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb3a:	4620      	mov	r0, r4
 801cb3c:	460d      	mov	r5, r1
 801cb3e:	f7e3 fd6b 	bl	8000618 <__aeabi_dmul>
 801cb42:	4642      	mov	r2, r8
 801cb44:	ec41 0b18 	vmov	d8, r0, r1
 801cb48:	464b      	mov	r3, r9
 801cb4a:	4620      	mov	r0, r4
 801cb4c:	4629      	mov	r1, r5
 801cb4e:	f7e3 fbab 	bl	80002a8 <__aeabi_dsub>
 801cb52:	4602      	mov	r2, r0
 801cb54:	460b      	mov	r3, r1
 801cb56:	4630      	mov	r0, r6
 801cb58:	4639      	mov	r1, r7
 801cb5a:	f7e3 fba5 	bl	80002a8 <__aeabi_dsub>
 801cb5e:	a336      	add	r3, pc, #216	; (adr r3, 801cc38 <__ieee754_pow+0x728>)
 801cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb64:	f7e3 fd58 	bl	8000618 <__aeabi_dmul>
 801cb68:	a335      	add	r3, pc, #212	; (adr r3, 801cc40 <__ieee754_pow+0x730>)
 801cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb6e:	4606      	mov	r6, r0
 801cb70:	460f      	mov	r7, r1
 801cb72:	4620      	mov	r0, r4
 801cb74:	4629      	mov	r1, r5
 801cb76:	f7e3 fd4f 	bl	8000618 <__aeabi_dmul>
 801cb7a:	4602      	mov	r2, r0
 801cb7c:	460b      	mov	r3, r1
 801cb7e:	4630      	mov	r0, r6
 801cb80:	4639      	mov	r1, r7
 801cb82:	f7e3 fb93 	bl	80002ac <__adddf3>
 801cb86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cb88:	4b38      	ldr	r3, [pc, #224]	; (801cc6c <__ieee754_pow+0x75c>)
 801cb8a:	4413      	add	r3, r2
 801cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb90:	f7e3 fb8c 	bl	80002ac <__adddf3>
 801cb94:	4682      	mov	sl, r0
 801cb96:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cb98:	468b      	mov	fp, r1
 801cb9a:	f7e3 fcd3 	bl	8000544 <__aeabi_i2d>
 801cb9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cba0:	4b33      	ldr	r3, [pc, #204]	; (801cc70 <__ieee754_pow+0x760>)
 801cba2:	4413      	add	r3, r2
 801cba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801cba8:	4606      	mov	r6, r0
 801cbaa:	460f      	mov	r7, r1
 801cbac:	4652      	mov	r2, sl
 801cbae:	465b      	mov	r3, fp
 801cbb0:	ec51 0b18 	vmov	r0, r1, d8
 801cbb4:	f7e3 fb7a 	bl	80002ac <__adddf3>
 801cbb8:	4642      	mov	r2, r8
 801cbba:	464b      	mov	r3, r9
 801cbbc:	f7e3 fb76 	bl	80002ac <__adddf3>
 801cbc0:	4632      	mov	r2, r6
 801cbc2:	463b      	mov	r3, r7
 801cbc4:	f7e3 fb72 	bl	80002ac <__adddf3>
 801cbc8:	9c04      	ldr	r4, [sp, #16]
 801cbca:	4632      	mov	r2, r6
 801cbcc:	463b      	mov	r3, r7
 801cbce:	4620      	mov	r0, r4
 801cbd0:	460d      	mov	r5, r1
 801cbd2:	f7e3 fb69 	bl	80002a8 <__aeabi_dsub>
 801cbd6:	4642      	mov	r2, r8
 801cbd8:	464b      	mov	r3, r9
 801cbda:	f7e3 fb65 	bl	80002a8 <__aeabi_dsub>
 801cbde:	ec53 2b18 	vmov	r2, r3, d8
 801cbe2:	f7e3 fb61 	bl	80002a8 <__aeabi_dsub>
 801cbe6:	4602      	mov	r2, r0
 801cbe8:	460b      	mov	r3, r1
 801cbea:	4650      	mov	r0, sl
 801cbec:	4659      	mov	r1, fp
 801cbee:	e606      	b.n	801c7fe <__ieee754_pow+0x2ee>
 801cbf0:	2401      	movs	r4, #1
 801cbf2:	e6a0      	b.n	801c936 <__ieee754_pow+0x426>
 801cbf4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801cc48 <__ieee754_pow+0x738>
 801cbf8:	e60d      	b.n	801c816 <__ieee754_pow+0x306>
 801cbfa:	bf00      	nop
 801cbfc:	f3af 8000 	nop.w
 801cc00:	4a454eef 	.word	0x4a454eef
 801cc04:	3fca7e28 	.word	0x3fca7e28
 801cc08:	93c9db65 	.word	0x93c9db65
 801cc0c:	3fcd864a 	.word	0x3fcd864a
 801cc10:	a91d4101 	.word	0xa91d4101
 801cc14:	3fd17460 	.word	0x3fd17460
 801cc18:	518f264d 	.word	0x518f264d
 801cc1c:	3fd55555 	.word	0x3fd55555
 801cc20:	db6fabff 	.word	0xdb6fabff
 801cc24:	3fdb6db6 	.word	0x3fdb6db6
 801cc28:	33333303 	.word	0x33333303
 801cc2c:	3fe33333 	.word	0x3fe33333
 801cc30:	e0000000 	.word	0xe0000000
 801cc34:	3feec709 	.word	0x3feec709
 801cc38:	dc3a03fd 	.word	0xdc3a03fd
 801cc3c:	3feec709 	.word	0x3feec709
 801cc40:	145b01f5 	.word	0x145b01f5
 801cc44:	be3e2fe0 	.word	0xbe3e2fe0
 801cc48:	00000000 	.word	0x00000000
 801cc4c:	3ff00000 	.word	0x3ff00000
 801cc50:	7ff00000 	.word	0x7ff00000
 801cc54:	43400000 	.word	0x43400000
 801cc58:	0003988e 	.word	0x0003988e
 801cc5c:	000bb679 	.word	0x000bb679
 801cc60:	080221b8 	.word	0x080221b8
 801cc64:	3ff00000 	.word	0x3ff00000
 801cc68:	40080000 	.word	0x40080000
 801cc6c:	080221d8 	.word	0x080221d8
 801cc70:	080221c8 	.word	0x080221c8
 801cc74:	a3b5      	add	r3, pc, #724	; (adr r3, 801cf4c <__ieee754_pow+0xa3c>)
 801cc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc7a:	4640      	mov	r0, r8
 801cc7c:	4649      	mov	r1, r9
 801cc7e:	f7e3 fb15 	bl	80002ac <__adddf3>
 801cc82:	4622      	mov	r2, r4
 801cc84:	ec41 0b1a 	vmov	d10, r0, r1
 801cc88:	462b      	mov	r3, r5
 801cc8a:	4630      	mov	r0, r6
 801cc8c:	4639      	mov	r1, r7
 801cc8e:	f7e3 fb0b 	bl	80002a8 <__aeabi_dsub>
 801cc92:	4602      	mov	r2, r0
 801cc94:	460b      	mov	r3, r1
 801cc96:	ec51 0b1a 	vmov	r0, r1, d10
 801cc9a:	f7e3 ff4d 	bl	8000b38 <__aeabi_dcmpgt>
 801cc9e:	2800      	cmp	r0, #0
 801cca0:	f47f adf8 	bne.w	801c894 <__ieee754_pow+0x384>
 801cca4:	4aa4      	ldr	r2, [pc, #656]	; (801cf38 <__ieee754_pow+0xa28>)
 801cca6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ccaa:	4293      	cmp	r3, r2
 801ccac:	f340 810b 	ble.w	801cec6 <__ieee754_pow+0x9b6>
 801ccb0:	151b      	asrs	r3, r3, #20
 801ccb2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ccb6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ccba:	fa4a f303 	asr.w	r3, sl, r3
 801ccbe:	445b      	add	r3, fp
 801ccc0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801ccc4:	4e9d      	ldr	r6, [pc, #628]	; (801cf3c <__ieee754_pow+0xa2c>)
 801ccc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801ccca:	4116      	asrs	r6, r2
 801cccc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801ccd0:	2000      	movs	r0, #0
 801ccd2:	ea23 0106 	bic.w	r1, r3, r6
 801ccd6:	f1c2 0214 	rsb	r2, r2, #20
 801ccda:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ccde:	fa4a fa02 	asr.w	sl, sl, r2
 801cce2:	f1bb 0f00 	cmp.w	fp, #0
 801cce6:	4602      	mov	r2, r0
 801cce8:	460b      	mov	r3, r1
 801ccea:	4620      	mov	r0, r4
 801ccec:	4629      	mov	r1, r5
 801ccee:	bfb8      	it	lt
 801ccf0:	f1ca 0a00 	rsblt	sl, sl, #0
 801ccf4:	f7e3 fad8 	bl	80002a8 <__aeabi_dsub>
 801ccf8:	ec41 0b19 	vmov	d9, r0, r1
 801ccfc:	4642      	mov	r2, r8
 801ccfe:	464b      	mov	r3, r9
 801cd00:	ec51 0b19 	vmov	r0, r1, d9
 801cd04:	f7e3 fad2 	bl	80002ac <__adddf3>
 801cd08:	2400      	movs	r4, #0
 801cd0a:	a379      	add	r3, pc, #484	; (adr r3, 801cef0 <__ieee754_pow+0x9e0>)
 801cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd10:	4620      	mov	r0, r4
 801cd12:	460d      	mov	r5, r1
 801cd14:	f7e3 fc80 	bl	8000618 <__aeabi_dmul>
 801cd18:	ec53 2b19 	vmov	r2, r3, d9
 801cd1c:	4606      	mov	r6, r0
 801cd1e:	460f      	mov	r7, r1
 801cd20:	4620      	mov	r0, r4
 801cd22:	4629      	mov	r1, r5
 801cd24:	f7e3 fac0 	bl	80002a8 <__aeabi_dsub>
 801cd28:	4602      	mov	r2, r0
 801cd2a:	460b      	mov	r3, r1
 801cd2c:	4640      	mov	r0, r8
 801cd2e:	4649      	mov	r1, r9
 801cd30:	f7e3 faba 	bl	80002a8 <__aeabi_dsub>
 801cd34:	a370      	add	r3, pc, #448	; (adr r3, 801cef8 <__ieee754_pow+0x9e8>)
 801cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd3a:	f7e3 fc6d 	bl	8000618 <__aeabi_dmul>
 801cd3e:	a370      	add	r3, pc, #448	; (adr r3, 801cf00 <__ieee754_pow+0x9f0>)
 801cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd44:	4680      	mov	r8, r0
 801cd46:	4689      	mov	r9, r1
 801cd48:	4620      	mov	r0, r4
 801cd4a:	4629      	mov	r1, r5
 801cd4c:	f7e3 fc64 	bl	8000618 <__aeabi_dmul>
 801cd50:	4602      	mov	r2, r0
 801cd52:	460b      	mov	r3, r1
 801cd54:	4640      	mov	r0, r8
 801cd56:	4649      	mov	r1, r9
 801cd58:	f7e3 faa8 	bl	80002ac <__adddf3>
 801cd5c:	4604      	mov	r4, r0
 801cd5e:	460d      	mov	r5, r1
 801cd60:	4602      	mov	r2, r0
 801cd62:	460b      	mov	r3, r1
 801cd64:	4630      	mov	r0, r6
 801cd66:	4639      	mov	r1, r7
 801cd68:	f7e3 faa0 	bl	80002ac <__adddf3>
 801cd6c:	4632      	mov	r2, r6
 801cd6e:	463b      	mov	r3, r7
 801cd70:	4680      	mov	r8, r0
 801cd72:	4689      	mov	r9, r1
 801cd74:	f7e3 fa98 	bl	80002a8 <__aeabi_dsub>
 801cd78:	4602      	mov	r2, r0
 801cd7a:	460b      	mov	r3, r1
 801cd7c:	4620      	mov	r0, r4
 801cd7e:	4629      	mov	r1, r5
 801cd80:	f7e3 fa92 	bl	80002a8 <__aeabi_dsub>
 801cd84:	4642      	mov	r2, r8
 801cd86:	4606      	mov	r6, r0
 801cd88:	460f      	mov	r7, r1
 801cd8a:	464b      	mov	r3, r9
 801cd8c:	4640      	mov	r0, r8
 801cd8e:	4649      	mov	r1, r9
 801cd90:	f7e3 fc42 	bl	8000618 <__aeabi_dmul>
 801cd94:	a35c      	add	r3, pc, #368	; (adr r3, 801cf08 <__ieee754_pow+0x9f8>)
 801cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd9a:	4604      	mov	r4, r0
 801cd9c:	460d      	mov	r5, r1
 801cd9e:	f7e3 fc3b 	bl	8000618 <__aeabi_dmul>
 801cda2:	a35b      	add	r3, pc, #364	; (adr r3, 801cf10 <__ieee754_pow+0xa00>)
 801cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cda8:	f7e3 fa7e 	bl	80002a8 <__aeabi_dsub>
 801cdac:	4622      	mov	r2, r4
 801cdae:	462b      	mov	r3, r5
 801cdb0:	f7e3 fc32 	bl	8000618 <__aeabi_dmul>
 801cdb4:	a358      	add	r3, pc, #352	; (adr r3, 801cf18 <__ieee754_pow+0xa08>)
 801cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdba:	f7e3 fa77 	bl	80002ac <__adddf3>
 801cdbe:	4622      	mov	r2, r4
 801cdc0:	462b      	mov	r3, r5
 801cdc2:	f7e3 fc29 	bl	8000618 <__aeabi_dmul>
 801cdc6:	a356      	add	r3, pc, #344	; (adr r3, 801cf20 <__ieee754_pow+0xa10>)
 801cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdcc:	f7e3 fa6c 	bl	80002a8 <__aeabi_dsub>
 801cdd0:	4622      	mov	r2, r4
 801cdd2:	462b      	mov	r3, r5
 801cdd4:	f7e3 fc20 	bl	8000618 <__aeabi_dmul>
 801cdd8:	a353      	add	r3, pc, #332	; (adr r3, 801cf28 <__ieee754_pow+0xa18>)
 801cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdde:	f7e3 fa65 	bl	80002ac <__adddf3>
 801cde2:	4622      	mov	r2, r4
 801cde4:	462b      	mov	r3, r5
 801cde6:	f7e3 fc17 	bl	8000618 <__aeabi_dmul>
 801cdea:	4602      	mov	r2, r0
 801cdec:	460b      	mov	r3, r1
 801cdee:	4640      	mov	r0, r8
 801cdf0:	4649      	mov	r1, r9
 801cdf2:	f7e3 fa59 	bl	80002a8 <__aeabi_dsub>
 801cdf6:	4604      	mov	r4, r0
 801cdf8:	460d      	mov	r5, r1
 801cdfa:	4602      	mov	r2, r0
 801cdfc:	460b      	mov	r3, r1
 801cdfe:	4640      	mov	r0, r8
 801ce00:	4649      	mov	r1, r9
 801ce02:	f7e3 fc09 	bl	8000618 <__aeabi_dmul>
 801ce06:	2200      	movs	r2, #0
 801ce08:	ec41 0b19 	vmov	d9, r0, r1
 801ce0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ce10:	4620      	mov	r0, r4
 801ce12:	4629      	mov	r1, r5
 801ce14:	f7e3 fa48 	bl	80002a8 <__aeabi_dsub>
 801ce18:	4602      	mov	r2, r0
 801ce1a:	460b      	mov	r3, r1
 801ce1c:	ec51 0b19 	vmov	r0, r1, d9
 801ce20:	f7e3 fd24 	bl	800086c <__aeabi_ddiv>
 801ce24:	4632      	mov	r2, r6
 801ce26:	4604      	mov	r4, r0
 801ce28:	460d      	mov	r5, r1
 801ce2a:	463b      	mov	r3, r7
 801ce2c:	4640      	mov	r0, r8
 801ce2e:	4649      	mov	r1, r9
 801ce30:	f7e3 fbf2 	bl	8000618 <__aeabi_dmul>
 801ce34:	4632      	mov	r2, r6
 801ce36:	463b      	mov	r3, r7
 801ce38:	f7e3 fa38 	bl	80002ac <__adddf3>
 801ce3c:	4602      	mov	r2, r0
 801ce3e:	460b      	mov	r3, r1
 801ce40:	4620      	mov	r0, r4
 801ce42:	4629      	mov	r1, r5
 801ce44:	f7e3 fa30 	bl	80002a8 <__aeabi_dsub>
 801ce48:	4642      	mov	r2, r8
 801ce4a:	464b      	mov	r3, r9
 801ce4c:	f7e3 fa2c 	bl	80002a8 <__aeabi_dsub>
 801ce50:	460b      	mov	r3, r1
 801ce52:	4602      	mov	r2, r0
 801ce54:	493a      	ldr	r1, [pc, #232]	; (801cf40 <__ieee754_pow+0xa30>)
 801ce56:	2000      	movs	r0, #0
 801ce58:	f7e3 fa26 	bl	80002a8 <__aeabi_dsub>
 801ce5c:	e9cd 0100 	strd	r0, r1, [sp]
 801ce60:	9b01      	ldr	r3, [sp, #4]
 801ce62:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ce66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ce6a:	da2f      	bge.n	801cecc <__ieee754_pow+0x9bc>
 801ce6c:	4650      	mov	r0, sl
 801ce6e:	ed9d 0b00 	vldr	d0, [sp]
 801ce72:	f002 f809 	bl	801ee88 <scalbn>
 801ce76:	ec51 0b10 	vmov	r0, r1, d0
 801ce7a:	ec53 2b18 	vmov	r2, r3, d8
 801ce7e:	f7ff bbe0 	b.w	801c642 <__ieee754_pow+0x132>
 801ce82:	4b30      	ldr	r3, [pc, #192]	; (801cf44 <__ieee754_pow+0xa34>)
 801ce84:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ce88:	429e      	cmp	r6, r3
 801ce8a:	f77f af0b 	ble.w	801cca4 <__ieee754_pow+0x794>
 801ce8e:	4b2e      	ldr	r3, [pc, #184]	; (801cf48 <__ieee754_pow+0xa38>)
 801ce90:	440b      	add	r3, r1
 801ce92:	4303      	orrs	r3, r0
 801ce94:	d00b      	beq.n	801ceae <__ieee754_pow+0x99e>
 801ce96:	a326      	add	r3, pc, #152	; (adr r3, 801cf30 <__ieee754_pow+0xa20>)
 801ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce9c:	ec51 0b18 	vmov	r0, r1, d8
 801cea0:	f7e3 fbba 	bl	8000618 <__aeabi_dmul>
 801cea4:	a322      	add	r3, pc, #136	; (adr r3, 801cf30 <__ieee754_pow+0xa20>)
 801cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceaa:	f7ff bbca 	b.w	801c642 <__ieee754_pow+0x132>
 801ceae:	4622      	mov	r2, r4
 801ceb0:	462b      	mov	r3, r5
 801ceb2:	f7e3 f9f9 	bl	80002a8 <__aeabi_dsub>
 801ceb6:	4642      	mov	r2, r8
 801ceb8:	464b      	mov	r3, r9
 801ceba:	f7e3 fe33 	bl	8000b24 <__aeabi_dcmpge>
 801cebe:	2800      	cmp	r0, #0
 801cec0:	f43f aef0 	beq.w	801cca4 <__ieee754_pow+0x794>
 801cec4:	e7e7      	b.n	801ce96 <__ieee754_pow+0x986>
 801cec6:	f04f 0a00 	mov.w	sl, #0
 801ceca:	e717      	b.n	801ccfc <__ieee754_pow+0x7ec>
 801cecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ced0:	4619      	mov	r1, r3
 801ced2:	e7d2      	b.n	801ce7a <__ieee754_pow+0x96a>
 801ced4:	491a      	ldr	r1, [pc, #104]	; (801cf40 <__ieee754_pow+0xa30>)
 801ced6:	2000      	movs	r0, #0
 801ced8:	f7ff bb9e 	b.w	801c618 <__ieee754_pow+0x108>
 801cedc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801cee0:	f7ff bb9a 	b.w	801c618 <__ieee754_pow+0x108>
 801cee4:	9000      	str	r0, [sp, #0]
 801cee6:	f7ff bb76 	b.w	801c5d6 <__ieee754_pow+0xc6>
 801ceea:	2100      	movs	r1, #0
 801ceec:	f7ff bb60 	b.w	801c5b0 <__ieee754_pow+0xa0>
 801cef0:	00000000 	.word	0x00000000
 801cef4:	3fe62e43 	.word	0x3fe62e43
 801cef8:	fefa39ef 	.word	0xfefa39ef
 801cefc:	3fe62e42 	.word	0x3fe62e42
 801cf00:	0ca86c39 	.word	0x0ca86c39
 801cf04:	be205c61 	.word	0xbe205c61
 801cf08:	72bea4d0 	.word	0x72bea4d0
 801cf0c:	3e663769 	.word	0x3e663769
 801cf10:	c5d26bf1 	.word	0xc5d26bf1
 801cf14:	3ebbbd41 	.word	0x3ebbbd41
 801cf18:	af25de2c 	.word	0xaf25de2c
 801cf1c:	3f11566a 	.word	0x3f11566a
 801cf20:	16bebd93 	.word	0x16bebd93
 801cf24:	3f66c16c 	.word	0x3f66c16c
 801cf28:	5555553e 	.word	0x5555553e
 801cf2c:	3fc55555 	.word	0x3fc55555
 801cf30:	c2f8f359 	.word	0xc2f8f359
 801cf34:	01a56e1f 	.word	0x01a56e1f
 801cf38:	3fe00000 	.word	0x3fe00000
 801cf3c:	000fffff 	.word	0x000fffff
 801cf40:	3ff00000 	.word	0x3ff00000
 801cf44:	4090cbff 	.word	0x4090cbff
 801cf48:	3f6f3400 	.word	0x3f6f3400
 801cf4c:	652b82fe 	.word	0x652b82fe
 801cf50:	3c971547 	.word	0x3c971547
 801cf54:	00000000 	.word	0x00000000

0801cf58 <__ieee754_rem_pio2>:
 801cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf5c:	ed2d 8b02 	vpush	{d8}
 801cf60:	ec55 4b10 	vmov	r4, r5, d0
 801cf64:	4bca      	ldr	r3, [pc, #808]	; (801d290 <__ieee754_rem_pio2+0x338>)
 801cf66:	b08b      	sub	sp, #44	; 0x2c
 801cf68:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801cf6c:	4598      	cmp	r8, r3
 801cf6e:	4682      	mov	sl, r0
 801cf70:	9502      	str	r5, [sp, #8]
 801cf72:	dc08      	bgt.n	801cf86 <__ieee754_rem_pio2+0x2e>
 801cf74:	2200      	movs	r2, #0
 801cf76:	2300      	movs	r3, #0
 801cf78:	ed80 0b00 	vstr	d0, [r0]
 801cf7c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801cf80:	f04f 0b00 	mov.w	fp, #0
 801cf84:	e028      	b.n	801cfd8 <__ieee754_rem_pio2+0x80>
 801cf86:	4bc3      	ldr	r3, [pc, #780]	; (801d294 <__ieee754_rem_pio2+0x33c>)
 801cf88:	4598      	cmp	r8, r3
 801cf8a:	dc78      	bgt.n	801d07e <__ieee754_rem_pio2+0x126>
 801cf8c:	9b02      	ldr	r3, [sp, #8]
 801cf8e:	4ec2      	ldr	r6, [pc, #776]	; (801d298 <__ieee754_rem_pio2+0x340>)
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	ee10 0a10 	vmov	r0, s0
 801cf96:	a3b0      	add	r3, pc, #704	; (adr r3, 801d258 <__ieee754_rem_pio2+0x300>)
 801cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf9c:	4629      	mov	r1, r5
 801cf9e:	dd39      	ble.n	801d014 <__ieee754_rem_pio2+0xbc>
 801cfa0:	f7e3 f982 	bl	80002a8 <__aeabi_dsub>
 801cfa4:	45b0      	cmp	r8, r6
 801cfa6:	4604      	mov	r4, r0
 801cfa8:	460d      	mov	r5, r1
 801cfaa:	d01b      	beq.n	801cfe4 <__ieee754_rem_pio2+0x8c>
 801cfac:	a3ac      	add	r3, pc, #688	; (adr r3, 801d260 <__ieee754_rem_pio2+0x308>)
 801cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfb2:	f7e3 f979 	bl	80002a8 <__aeabi_dsub>
 801cfb6:	4602      	mov	r2, r0
 801cfb8:	460b      	mov	r3, r1
 801cfba:	e9ca 2300 	strd	r2, r3, [sl]
 801cfbe:	4620      	mov	r0, r4
 801cfc0:	4629      	mov	r1, r5
 801cfc2:	f7e3 f971 	bl	80002a8 <__aeabi_dsub>
 801cfc6:	a3a6      	add	r3, pc, #664	; (adr r3, 801d260 <__ieee754_rem_pio2+0x308>)
 801cfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfcc:	f7e3 f96c 	bl	80002a8 <__aeabi_dsub>
 801cfd0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801cfd4:	f04f 0b01 	mov.w	fp, #1
 801cfd8:	4658      	mov	r0, fp
 801cfda:	b00b      	add	sp, #44	; 0x2c
 801cfdc:	ecbd 8b02 	vpop	{d8}
 801cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfe4:	a3a0      	add	r3, pc, #640	; (adr r3, 801d268 <__ieee754_rem_pio2+0x310>)
 801cfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfea:	f7e3 f95d 	bl	80002a8 <__aeabi_dsub>
 801cfee:	a3a0      	add	r3, pc, #640	; (adr r3, 801d270 <__ieee754_rem_pio2+0x318>)
 801cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cff4:	4604      	mov	r4, r0
 801cff6:	460d      	mov	r5, r1
 801cff8:	f7e3 f956 	bl	80002a8 <__aeabi_dsub>
 801cffc:	4602      	mov	r2, r0
 801cffe:	460b      	mov	r3, r1
 801d000:	e9ca 2300 	strd	r2, r3, [sl]
 801d004:	4620      	mov	r0, r4
 801d006:	4629      	mov	r1, r5
 801d008:	f7e3 f94e 	bl	80002a8 <__aeabi_dsub>
 801d00c:	a398      	add	r3, pc, #608	; (adr r3, 801d270 <__ieee754_rem_pio2+0x318>)
 801d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d012:	e7db      	b.n	801cfcc <__ieee754_rem_pio2+0x74>
 801d014:	f7e3 f94a 	bl	80002ac <__adddf3>
 801d018:	45b0      	cmp	r8, r6
 801d01a:	4604      	mov	r4, r0
 801d01c:	460d      	mov	r5, r1
 801d01e:	d016      	beq.n	801d04e <__ieee754_rem_pio2+0xf6>
 801d020:	a38f      	add	r3, pc, #572	; (adr r3, 801d260 <__ieee754_rem_pio2+0x308>)
 801d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d026:	f7e3 f941 	bl	80002ac <__adddf3>
 801d02a:	4602      	mov	r2, r0
 801d02c:	460b      	mov	r3, r1
 801d02e:	e9ca 2300 	strd	r2, r3, [sl]
 801d032:	4620      	mov	r0, r4
 801d034:	4629      	mov	r1, r5
 801d036:	f7e3 f937 	bl	80002a8 <__aeabi_dsub>
 801d03a:	a389      	add	r3, pc, #548	; (adr r3, 801d260 <__ieee754_rem_pio2+0x308>)
 801d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d040:	f7e3 f934 	bl	80002ac <__adddf3>
 801d044:	f04f 3bff 	mov.w	fp, #4294967295
 801d048:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801d04c:	e7c4      	b.n	801cfd8 <__ieee754_rem_pio2+0x80>
 801d04e:	a386      	add	r3, pc, #536	; (adr r3, 801d268 <__ieee754_rem_pio2+0x310>)
 801d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d054:	f7e3 f92a 	bl	80002ac <__adddf3>
 801d058:	a385      	add	r3, pc, #532	; (adr r3, 801d270 <__ieee754_rem_pio2+0x318>)
 801d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d05e:	4604      	mov	r4, r0
 801d060:	460d      	mov	r5, r1
 801d062:	f7e3 f923 	bl	80002ac <__adddf3>
 801d066:	4602      	mov	r2, r0
 801d068:	460b      	mov	r3, r1
 801d06a:	e9ca 2300 	strd	r2, r3, [sl]
 801d06e:	4620      	mov	r0, r4
 801d070:	4629      	mov	r1, r5
 801d072:	f7e3 f919 	bl	80002a8 <__aeabi_dsub>
 801d076:	a37e      	add	r3, pc, #504	; (adr r3, 801d270 <__ieee754_rem_pio2+0x318>)
 801d078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d07c:	e7e0      	b.n	801d040 <__ieee754_rem_pio2+0xe8>
 801d07e:	4b87      	ldr	r3, [pc, #540]	; (801d29c <__ieee754_rem_pio2+0x344>)
 801d080:	4598      	cmp	r8, r3
 801d082:	f300 80d9 	bgt.w	801d238 <__ieee754_rem_pio2+0x2e0>
 801d086:	f001 fddf 	bl	801ec48 <fabs>
 801d08a:	ec55 4b10 	vmov	r4, r5, d0
 801d08e:	ee10 0a10 	vmov	r0, s0
 801d092:	a379      	add	r3, pc, #484	; (adr r3, 801d278 <__ieee754_rem_pio2+0x320>)
 801d094:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d098:	4629      	mov	r1, r5
 801d09a:	f7e3 fabd 	bl	8000618 <__aeabi_dmul>
 801d09e:	4b80      	ldr	r3, [pc, #512]	; (801d2a0 <__ieee754_rem_pio2+0x348>)
 801d0a0:	2200      	movs	r2, #0
 801d0a2:	f7e3 f903 	bl	80002ac <__adddf3>
 801d0a6:	f7e3 fd67 	bl	8000b78 <__aeabi_d2iz>
 801d0aa:	4683      	mov	fp, r0
 801d0ac:	f7e3 fa4a 	bl	8000544 <__aeabi_i2d>
 801d0b0:	4602      	mov	r2, r0
 801d0b2:	460b      	mov	r3, r1
 801d0b4:	ec43 2b18 	vmov	d8, r2, r3
 801d0b8:	a367      	add	r3, pc, #412	; (adr r3, 801d258 <__ieee754_rem_pio2+0x300>)
 801d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0be:	f7e3 faab 	bl	8000618 <__aeabi_dmul>
 801d0c2:	4602      	mov	r2, r0
 801d0c4:	460b      	mov	r3, r1
 801d0c6:	4620      	mov	r0, r4
 801d0c8:	4629      	mov	r1, r5
 801d0ca:	f7e3 f8ed 	bl	80002a8 <__aeabi_dsub>
 801d0ce:	a364      	add	r3, pc, #400	; (adr r3, 801d260 <__ieee754_rem_pio2+0x308>)
 801d0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0d4:	4606      	mov	r6, r0
 801d0d6:	460f      	mov	r7, r1
 801d0d8:	ec51 0b18 	vmov	r0, r1, d8
 801d0dc:	f7e3 fa9c 	bl	8000618 <__aeabi_dmul>
 801d0e0:	f1bb 0f1f 	cmp.w	fp, #31
 801d0e4:	4604      	mov	r4, r0
 801d0e6:	460d      	mov	r5, r1
 801d0e8:	dc0d      	bgt.n	801d106 <__ieee754_rem_pio2+0x1ae>
 801d0ea:	4b6e      	ldr	r3, [pc, #440]	; (801d2a4 <__ieee754_rem_pio2+0x34c>)
 801d0ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 801d0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d0f4:	4543      	cmp	r3, r8
 801d0f6:	d006      	beq.n	801d106 <__ieee754_rem_pio2+0x1ae>
 801d0f8:	4622      	mov	r2, r4
 801d0fa:	462b      	mov	r3, r5
 801d0fc:	4630      	mov	r0, r6
 801d0fe:	4639      	mov	r1, r7
 801d100:	f7e3 f8d2 	bl	80002a8 <__aeabi_dsub>
 801d104:	e00f      	b.n	801d126 <__ieee754_rem_pio2+0x1ce>
 801d106:	462b      	mov	r3, r5
 801d108:	4622      	mov	r2, r4
 801d10a:	4630      	mov	r0, r6
 801d10c:	4639      	mov	r1, r7
 801d10e:	f7e3 f8cb 	bl	80002a8 <__aeabi_dsub>
 801d112:	ea4f 5328 	mov.w	r3, r8, asr #20
 801d116:	9303      	str	r3, [sp, #12]
 801d118:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d11c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 801d120:	f1b8 0f10 	cmp.w	r8, #16
 801d124:	dc02      	bgt.n	801d12c <__ieee754_rem_pio2+0x1d4>
 801d126:	e9ca 0100 	strd	r0, r1, [sl]
 801d12a:	e039      	b.n	801d1a0 <__ieee754_rem_pio2+0x248>
 801d12c:	a34e      	add	r3, pc, #312	; (adr r3, 801d268 <__ieee754_rem_pio2+0x310>)
 801d12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d132:	ec51 0b18 	vmov	r0, r1, d8
 801d136:	f7e3 fa6f 	bl	8000618 <__aeabi_dmul>
 801d13a:	4604      	mov	r4, r0
 801d13c:	460d      	mov	r5, r1
 801d13e:	4602      	mov	r2, r0
 801d140:	460b      	mov	r3, r1
 801d142:	4630      	mov	r0, r6
 801d144:	4639      	mov	r1, r7
 801d146:	f7e3 f8af 	bl	80002a8 <__aeabi_dsub>
 801d14a:	4602      	mov	r2, r0
 801d14c:	460b      	mov	r3, r1
 801d14e:	4680      	mov	r8, r0
 801d150:	4689      	mov	r9, r1
 801d152:	4630      	mov	r0, r6
 801d154:	4639      	mov	r1, r7
 801d156:	f7e3 f8a7 	bl	80002a8 <__aeabi_dsub>
 801d15a:	4622      	mov	r2, r4
 801d15c:	462b      	mov	r3, r5
 801d15e:	f7e3 f8a3 	bl	80002a8 <__aeabi_dsub>
 801d162:	a343      	add	r3, pc, #268	; (adr r3, 801d270 <__ieee754_rem_pio2+0x318>)
 801d164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d168:	4604      	mov	r4, r0
 801d16a:	460d      	mov	r5, r1
 801d16c:	ec51 0b18 	vmov	r0, r1, d8
 801d170:	f7e3 fa52 	bl	8000618 <__aeabi_dmul>
 801d174:	4622      	mov	r2, r4
 801d176:	462b      	mov	r3, r5
 801d178:	f7e3 f896 	bl	80002a8 <__aeabi_dsub>
 801d17c:	4602      	mov	r2, r0
 801d17e:	460b      	mov	r3, r1
 801d180:	4604      	mov	r4, r0
 801d182:	460d      	mov	r5, r1
 801d184:	4640      	mov	r0, r8
 801d186:	4649      	mov	r1, r9
 801d188:	f7e3 f88e 	bl	80002a8 <__aeabi_dsub>
 801d18c:	9a03      	ldr	r2, [sp, #12]
 801d18e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801d192:	1ad3      	subs	r3, r2, r3
 801d194:	2b31      	cmp	r3, #49	; 0x31
 801d196:	dc24      	bgt.n	801d1e2 <__ieee754_rem_pio2+0x28a>
 801d198:	e9ca 0100 	strd	r0, r1, [sl]
 801d19c:	4646      	mov	r6, r8
 801d19e:	464f      	mov	r7, r9
 801d1a0:	e9da 8900 	ldrd	r8, r9, [sl]
 801d1a4:	4630      	mov	r0, r6
 801d1a6:	4642      	mov	r2, r8
 801d1a8:	464b      	mov	r3, r9
 801d1aa:	4639      	mov	r1, r7
 801d1ac:	f7e3 f87c 	bl	80002a8 <__aeabi_dsub>
 801d1b0:	462b      	mov	r3, r5
 801d1b2:	4622      	mov	r2, r4
 801d1b4:	f7e3 f878 	bl	80002a8 <__aeabi_dsub>
 801d1b8:	9b02      	ldr	r3, [sp, #8]
 801d1ba:	2b00      	cmp	r3, #0
 801d1bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801d1c0:	f6bf af0a 	bge.w	801cfd8 <__ieee754_rem_pio2+0x80>
 801d1c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801d1c8:	f8ca 3004 	str.w	r3, [sl, #4]
 801d1cc:	f8ca 8000 	str.w	r8, [sl]
 801d1d0:	f8ca 0008 	str.w	r0, [sl, #8]
 801d1d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d1d8:	f8ca 300c 	str.w	r3, [sl, #12]
 801d1dc:	f1cb 0b00 	rsb	fp, fp, #0
 801d1e0:	e6fa      	b.n	801cfd8 <__ieee754_rem_pio2+0x80>
 801d1e2:	a327      	add	r3, pc, #156	; (adr r3, 801d280 <__ieee754_rem_pio2+0x328>)
 801d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1e8:	ec51 0b18 	vmov	r0, r1, d8
 801d1ec:	f7e3 fa14 	bl	8000618 <__aeabi_dmul>
 801d1f0:	4604      	mov	r4, r0
 801d1f2:	460d      	mov	r5, r1
 801d1f4:	4602      	mov	r2, r0
 801d1f6:	460b      	mov	r3, r1
 801d1f8:	4640      	mov	r0, r8
 801d1fa:	4649      	mov	r1, r9
 801d1fc:	f7e3 f854 	bl	80002a8 <__aeabi_dsub>
 801d200:	4602      	mov	r2, r0
 801d202:	460b      	mov	r3, r1
 801d204:	4606      	mov	r6, r0
 801d206:	460f      	mov	r7, r1
 801d208:	4640      	mov	r0, r8
 801d20a:	4649      	mov	r1, r9
 801d20c:	f7e3 f84c 	bl	80002a8 <__aeabi_dsub>
 801d210:	4622      	mov	r2, r4
 801d212:	462b      	mov	r3, r5
 801d214:	f7e3 f848 	bl	80002a8 <__aeabi_dsub>
 801d218:	a31b      	add	r3, pc, #108	; (adr r3, 801d288 <__ieee754_rem_pio2+0x330>)
 801d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d21e:	4604      	mov	r4, r0
 801d220:	460d      	mov	r5, r1
 801d222:	ec51 0b18 	vmov	r0, r1, d8
 801d226:	f7e3 f9f7 	bl	8000618 <__aeabi_dmul>
 801d22a:	4622      	mov	r2, r4
 801d22c:	462b      	mov	r3, r5
 801d22e:	f7e3 f83b 	bl	80002a8 <__aeabi_dsub>
 801d232:	4604      	mov	r4, r0
 801d234:	460d      	mov	r5, r1
 801d236:	e75f      	b.n	801d0f8 <__ieee754_rem_pio2+0x1a0>
 801d238:	4b1b      	ldr	r3, [pc, #108]	; (801d2a8 <__ieee754_rem_pio2+0x350>)
 801d23a:	4598      	cmp	r8, r3
 801d23c:	dd36      	ble.n	801d2ac <__ieee754_rem_pio2+0x354>
 801d23e:	ee10 2a10 	vmov	r2, s0
 801d242:	462b      	mov	r3, r5
 801d244:	4620      	mov	r0, r4
 801d246:	4629      	mov	r1, r5
 801d248:	f7e3 f82e 	bl	80002a8 <__aeabi_dsub>
 801d24c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801d250:	e9ca 0100 	strd	r0, r1, [sl]
 801d254:	e694      	b.n	801cf80 <__ieee754_rem_pio2+0x28>
 801d256:	bf00      	nop
 801d258:	54400000 	.word	0x54400000
 801d25c:	3ff921fb 	.word	0x3ff921fb
 801d260:	1a626331 	.word	0x1a626331
 801d264:	3dd0b461 	.word	0x3dd0b461
 801d268:	1a600000 	.word	0x1a600000
 801d26c:	3dd0b461 	.word	0x3dd0b461
 801d270:	2e037073 	.word	0x2e037073
 801d274:	3ba3198a 	.word	0x3ba3198a
 801d278:	6dc9c883 	.word	0x6dc9c883
 801d27c:	3fe45f30 	.word	0x3fe45f30
 801d280:	2e000000 	.word	0x2e000000
 801d284:	3ba3198a 	.word	0x3ba3198a
 801d288:	252049c1 	.word	0x252049c1
 801d28c:	397b839a 	.word	0x397b839a
 801d290:	3fe921fb 	.word	0x3fe921fb
 801d294:	4002d97b 	.word	0x4002d97b
 801d298:	3ff921fb 	.word	0x3ff921fb
 801d29c:	413921fb 	.word	0x413921fb
 801d2a0:	3fe00000 	.word	0x3fe00000
 801d2a4:	080221e8 	.word	0x080221e8
 801d2a8:	7fefffff 	.word	0x7fefffff
 801d2ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 801d2b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801d2b4:	ee10 0a10 	vmov	r0, s0
 801d2b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801d2bc:	ee10 6a10 	vmov	r6, s0
 801d2c0:	460f      	mov	r7, r1
 801d2c2:	f7e3 fc59 	bl	8000b78 <__aeabi_d2iz>
 801d2c6:	f7e3 f93d 	bl	8000544 <__aeabi_i2d>
 801d2ca:	4602      	mov	r2, r0
 801d2cc:	460b      	mov	r3, r1
 801d2ce:	4630      	mov	r0, r6
 801d2d0:	4639      	mov	r1, r7
 801d2d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801d2d6:	f7e2 ffe7 	bl	80002a8 <__aeabi_dsub>
 801d2da:	4b22      	ldr	r3, [pc, #136]	; (801d364 <__ieee754_rem_pio2+0x40c>)
 801d2dc:	2200      	movs	r2, #0
 801d2de:	f7e3 f99b 	bl	8000618 <__aeabi_dmul>
 801d2e2:	460f      	mov	r7, r1
 801d2e4:	4606      	mov	r6, r0
 801d2e6:	f7e3 fc47 	bl	8000b78 <__aeabi_d2iz>
 801d2ea:	f7e3 f92b 	bl	8000544 <__aeabi_i2d>
 801d2ee:	4602      	mov	r2, r0
 801d2f0:	460b      	mov	r3, r1
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	4639      	mov	r1, r7
 801d2f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d2fa:	f7e2 ffd5 	bl	80002a8 <__aeabi_dsub>
 801d2fe:	4b19      	ldr	r3, [pc, #100]	; (801d364 <__ieee754_rem_pio2+0x40c>)
 801d300:	2200      	movs	r2, #0
 801d302:	f7e3 f989 	bl	8000618 <__aeabi_dmul>
 801d306:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801d30a:	ad04      	add	r5, sp, #16
 801d30c:	f04f 0803 	mov.w	r8, #3
 801d310:	46a9      	mov	r9, r5
 801d312:	2600      	movs	r6, #0
 801d314:	2700      	movs	r7, #0
 801d316:	4632      	mov	r2, r6
 801d318:	463b      	mov	r3, r7
 801d31a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801d31e:	46c3      	mov	fp, r8
 801d320:	3d08      	subs	r5, #8
 801d322:	f108 38ff 	add.w	r8, r8, #4294967295
 801d326:	f7e3 fbdf 	bl	8000ae8 <__aeabi_dcmpeq>
 801d32a:	2800      	cmp	r0, #0
 801d32c:	d1f3      	bne.n	801d316 <__ieee754_rem_pio2+0x3be>
 801d32e:	4b0e      	ldr	r3, [pc, #56]	; (801d368 <__ieee754_rem_pio2+0x410>)
 801d330:	9301      	str	r3, [sp, #4]
 801d332:	2302      	movs	r3, #2
 801d334:	9300      	str	r3, [sp, #0]
 801d336:	4622      	mov	r2, r4
 801d338:	465b      	mov	r3, fp
 801d33a:	4651      	mov	r1, sl
 801d33c:	4648      	mov	r0, r9
 801d33e:	f000 facf 	bl	801d8e0 <__kernel_rem_pio2>
 801d342:	9b02      	ldr	r3, [sp, #8]
 801d344:	2b00      	cmp	r3, #0
 801d346:	4683      	mov	fp, r0
 801d348:	f6bf ae46 	bge.w	801cfd8 <__ieee754_rem_pio2+0x80>
 801d34c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d350:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d354:	f8ca 3004 	str.w	r3, [sl, #4]
 801d358:	f8da 300c 	ldr.w	r3, [sl, #12]
 801d35c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801d360:	e73a      	b.n	801d1d8 <__ieee754_rem_pio2+0x280>
 801d362:	bf00      	nop
 801d364:	41700000 	.word	0x41700000
 801d368:	08022268 	.word	0x08022268

0801d36c <__ieee754_sqrt>:
 801d36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d370:	ec55 4b10 	vmov	r4, r5, d0
 801d374:	4e56      	ldr	r6, [pc, #344]	; (801d4d0 <__ieee754_sqrt+0x164>)
 801d376:	43ae      	bics	r6, r5
 801d378:	ee10 0a10 	vmov	r0, s0
 801d37c:	ee10 3a10 	vmov	r3, s0
 801d380:	4629      	mov	r1, r5
 801d382:	462a      	mov	r2, r5
 801d384:	d110      	bne.n	801d3a8 <__ieee754_sqrt+0x3c>
 801d386:	ee10 2a10 	vmov	r2, s0
 801d38a:	462b      	mov	r3, r5
 801d38c:	f7e3 f944 	bl	8000618 <__aeabi_dmul>
 801d390:	4602      	mov	r2, r0
 801d392:	460b      	mov	r3, r1
 801d394:	4620      	mov	r0, r4
 801d396:	4629      	mov	r1, r5
 801d398:	f7e2 ff88 	bl	80002ac <__adddf3>
 801d39c:	4604      	mov	r4, r0
 801d39e:	460d      	mov	r5, r1
 801d3a0:	ec45 4b10 	vmov	d0, r4, r5
 801d3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3a8:	2d00      	cmp	r5, #0
 801d3aa:	dc10      	bgt.n	801d3ce <__ieee754_sqrt+0x62>
 801d3ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d3b0:	4330      	orrs	r0, r6
 801d3b2:	d0f5      	beq.n	801d3a0 <__ieee754_sqrt+0x34>
 801d3b4:	b15d      	cbz	r5, 801d3ce <__ieee754_sqrt+0x62>
 801d3b6:	ee10 2a10 	vmov	r2, s0
 801d3ba:	462b      	mov	r3, r5
 801d3bc:	ee10 0a10 	vmov	r0, s0
 801d3c0:	f7e2 ff72 	bl	80002a8 <__aeabi_dsub>
 801d3c4:	4602      	mov	r2, r0
 801d3c6:	460b      	mov	r3, r1
 801d3c8:	f7e3 fa50 	bl	800086c <__aeabi_ddiv>
 801d3cc:	e7e6      	b.n	801d39c <__ieee754_sqrt+0x30>
 801d3ce:	1509      	asrs	r1, r1, #20
 801d3d0:	d076      	beq.n	801d4c0 <__ieee754_sqrt+0x154>
 801d3d2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d3d6:	07ce      	lsls	r6, r1, #31
 801d3d8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801d3dc:	bf5e      	ittt	pl
 801d3de:	0fda      	lsrpl	r2, r3, #31
 801d3e0:	005b      	lslpl	r3, r3, #1
 801d3e2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801d3e6:	0fda      	lsrs	r2, r3, #31
 801d3e8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801d3ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d3f0:	2000      	movs	r0, #0
 801d3f2:	106d      	asrs	r5, r5, #1
 801d3f4:	005b      	lsls	r3, r3, #1
 801d3f6:	f04f 0e16 	mov.w	lr, #22
 801d3fa:	4684      	mov	ip, r0
 801d3fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d400:	eb0c 0401 	add.w	r4, ip, r1
 801d404:	4294      	cmp	r4, r2
 801d406:	bfde      	ittt	le
 801d408:	1b12      	suble	r2, r2, r4
 801d40a:	eb04 0c01 	addle.w	ip, r4, r1
 801d40e:	1840      	addle	r0, r0, r1
 801d410:	0052      	lsls	r2, r2, #1
 801d412:	f1be 0e01 	subs.w	lr, lr, #1
 801d416:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801d41a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d41e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d422:	d1ed      	bne.n	801d400 <__ieee754_sqrt+0x94>
 801d424:	4671      	mov	r1, lr
 801d426:	2720      	movs	r7, #32
 801d428:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801d42c:	4562      	cmp	r2, ip
 801d42e:	eb04 060e 	add.w	r6, r4, lr
 801d432:	dc02      	bgt.n	801d43a <__ieee754_sqrt+0xce>
 801d434:	d113      	bne.n	801d45e <__ieee754_sqrt+0xf2>
 801d436:	429e      	cmp	r6, r3
 801d438:	d811      	bhi.n	801d45e <__ieee754_sqrt+0xf2>
 801d43a:	2e00      	cmp	r6, #0
 801d43c:	eb06 0e04 	add.w	lr, r6, r4
 801d440:	da43      	bge.n	801d4ca <__ieee754_sqrt+0x15e>
 801d442:	f1be 0f00 	cmp.w	lr, #0
 801d446:	db40      	blt.n	801d4ca <__ieee754_sqrt+0x15e>
 801d448:	f10c 0801 	add.w	r8, ip, #1
 801d44c:	eba2 020c 	sub.w	r2, r2, ip
 801d450:	429e      	cmp	r6, r3
 801d452:	bf88      	it	hi
 801d454:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d458:	1b9b      	subs	r3, r3, r6
 801d45a:	4421      	add	r1, r4
 801d45c:	46c4      	mov	ip, r8
 801d45e:	0052      	lsls	r2, r2, #1
 801d460:	3f01      	subs	r7, #1
 801d462:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801d466:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d46a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d46e:	d1dd      	bne.n	801d42c <__ieee754_sqrt+0xc0>
 801d470:	4313      	orrs	r3, r2
 801d472:	d006      	beq.n	801d482 <__ieee754_sqrt+0x116>
 801d474:	1c4c      	adds	r4, r1, #1
 801d476:	bf13      	iteet	ne
 801d478:	3101      	addne	r1, #1
 801d47a:	3001      	addeq	r0, #1
 801d47c:	4639      	moveq	r1, r7
 801d47e:	f021 0101 	bicne.w	r1, r1, #1
 801d482:	1043      	asrs	r3, r0, #1
 801d484:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d488:	0849      	lsrs	r1, r1, #1
 801d48a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d48e:	07c2      	lsls	r2, r0, #31
 801d490:	bf48      	it	mi
 801d492:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801d496:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801d49a:	460c      	mov	r4, r1
 801d49c:	463d      	mov	r5, r7
 801d49e:	e77f      	b.n	801d3a0 <__ieee754_sqrt+0x34>
 801d4a0:	0ada      	lsrs	r2, r3, #11
 801d4a2:	3815      	subs	r0, #21
 801d4a4:	055b      	lsls	r3, r3, #21
 801d4a6:	2a00      	cmp	r2, #0
 801d4a8:	d0fa      	beq.n	801d4a0 <__ieee754_sqrt+0x134>
 801d4aa:	02d7      	lsls	r7, r2, #11
 801d4ac:	d50a      	bpl.n	801d4c4 <__ieee754_sqrt+0x158>
 801d4ae:	f1c1 0420 	rsb	r4, r1, #32
 801d4b2:	fa23 f404 	lsr.w	r4, r3, r4
 801d4b6:	1e4d      	subs	r5, r1, #1
 801d4b8:	408b      	lsls	r3, r1
 801d4ba:	4322      	orrs	r2, r4
 801d4bc:	1b41      	subs	r1, r0, r5
 801d4be:	e788      	b.n	801d3d2 <__ieee754_sqrt+0x66>
 801d4c0:	4608      	mov	r0, r1
 801d4c2:	e7f0      	b.n	801d4a6 <__ieee754_sqrt+0x13a>
 801d4c4:	0052      	lsls	r2, r2, #1
 801d4c6:	3101      	adds	r1, #1
 801d4c8:	e7ef      	b.n	801d4aa <__ieee754_sqrt+0x13e>
 801d4ca:	46e0      	mov	r8, ip
 801d4cc:	e7be      	b.n	801d44c <__ieee754_sqrt+0xe0>
 801d4ce:	bf00      	nop
 801d4d0:	7ff00000 	.word	0x7ff00000

0801d4d4 <__ieee754_rem_pio2f>:
 801d4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4d6:	ee10 6a10 	vmov	r6, s0
 801d4da:	4b8e      	ldr	r3, [pc, #568]	; (801d714 <__ieee754_rem_pio2f+0x240>)
 801d4dc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801d4e0:	429d      	cmp	r5, r3
 801d4e2:	b087      	sub	sp, #28
 801d4e4:	eef0 7a40 	vmov.f32	s15, s0
 801d4e8:	4604      	mov	r4, r0
 801d4ea:	dc05      	bgt.n	801d4f8 <__ieee754_rem_pio2f+0x24>
 801d4ec:	2300      	movs	r3, #0
 801d4ee:	ed80 0a00 	vstr	s0, [r0]
 801d4f2:	6043      	str	r3, [r0, #4]
 801d4f4:	2000      	movs	r0, #0
 801d4f6:	e01a      	b.n	801d52e <__ieee754_rem_pio2f+0x5a>
 801d4f8:	4b87      	ldr	r3, [pc, #540]	; (801d718 <__ieee754_rem_pio2f+0x244>)
 801d4fa:	429d      	cmp	r5, r3
 801d4fc:	dc46      	bgt.n	801d58c <__ieee754_rem_pio2f+0xb8>
 801d4fe:	2e00      	cmp	r6, #0
 801d500:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801d71c <__ieee754_rem_pio2f+0x248>
 801d504:	4b86      	ldr	r3, [pc, #536]	; (801d720 <__ieee754_rem_pio2f+0x24c>)
 801d506:	f025 050f 	bic.w	r5, r5, #15
 801d50a:	dd1f      	ble.n	801d54c <__ieee754_rem_pio2f+0x78>
 801d50c:	429d      	cmp	r5, r3
 801d50e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d512:	d00e      	beq.n	801d532 <__ieee754_rem_pio2f+0x5e>
 801d514:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801d724 <__ieee754_rem_pio2f+0x250>
 801d518:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801d51c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d520:	ed80 0a00 	vstr	s0, [r0]
 801d524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d528:	2001      	movs	r0, #1
 801d52a:	edc4 7a01 	vstr	s15, [r4, #4]
 801d52e:	b007      	add	sp, #28
 801d530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d532:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801d728 <__ieee754_rem_pio2f+0x254>
 801d536:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801d72c <__ieee754_rem_pio2f+0x258>
 801d53a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d53e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801d542:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d546:	edc0 6a00 	vstr	s13, [r0]
 801d54a:	e7eb      	b.n	801d524 <__ieee754_rem_pio2f+0x50>
 801d54c:	429d      	cmp	r5, r3
 801d54e:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d552:	d00e      	beq.n	801d572 <__ieee754_rem_pio2f+0x9e>
 801d554:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801d724 <__ieee754_rem_pio2f+0x250>
 801d558:	ee37 0a87 	vadd.f32	s0, s15, s14
 801d55c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d560:	ed80 0a00 	vstr	s0, [r0]
 801d564:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d568:	f04f 30ff 	mov.w	r0, #4294967295
 801d56c:	edc4 7a01 	vstr	s15, [r4, #4]
 801d570:	e7dd      	b.n	801d52e <__ieee754_rem_pio2f+0x5a>
 801d572:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801d728 <__ieee754_rem_pio2f+0x254>
 801d576:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801d72c <__ieee754_rem_pio2f+0x258>
 801d57a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d57e:	ee77 6a87 	vadd.f32	s13, s15, s14
 801d582:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d586:	edc0 6a00 	vstr	s13, [r0]
 801d58a:	e7eb      	b.n	801d564 <__ieee754_rem_pio2f+0x90>
 801d58c:	4b68      	ldr	r3, [pc, #416]	; (801d730 <__ieee754_rem_pio2f+0x25c>)
 801d58e:	429d      	cmp	r5, r3
 801d590:	dc72      	bgt.n	801d678 <__ieee754_rem_pio2f+0x1a4>
 801d592:	f7fe fb4d 	bl	801bc30 <fabsf>
 801d596:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801d734 <__ieee754_rem_pio2f+0x260>
 801d59a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d59e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d5a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d5a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d5aa:	ee17 0a90 	vmov	r0, s15
 801d5ae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801d71c <__ieee754_rem_pio2f+0x248>
 801d5b2:	eea7 0a67 	vfms.f32	s0, s14, s15
 801d5b6:	281f      	cmp	r0, #31
 801d5b8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801d724 <__ieee754_rem_pio2f+0x250>
 801d5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d5c0:	eeb1 6a47 	vneg.f32	s12, s14
 801d5c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d5c8:	ee16 2a90 	vmov	r2, s13
 801d5cc:	dc1c      	bgt.n	801d608 <__ieee754_rem_pio2f+0x134>
 801d5ce:	495a      	ldr	r1, [pc, #360]	; (801d738 <__ieee754_rem_pio2f+0x264>)
 801d5d0:	1e47      	subs	r7, r0, #1
 801d5d2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801d5d6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801d5da:	428b      	cmp	r3, r1
 801d5dc:	d014      	beq.n	801d608 <__ieee754_rem_pio2f+0x134>
 801d5de:	6022      	str	r2, [r4, #0]
 801d5e0:	ed94 7a00 	vldr	s14, [r4]
 801d5e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d5e8:	2e00      	cmp	r6, #0
 801d5ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d5ee:	ed84 0a01 	vstr	s0, [r4, #4]
 801d5f2:	da9c      	bge.n	801d52e <__ieee754_rem_pio2f+0x5a>
 801d5f4:	eeb1 7a47 	vneg.f32	s14, s14
 801d5f8:	eeb1 0a40 	vneg.f32	s0, s0
 801d5fc:	ed84 7a00 	vstr	s14, [r4]
 801d600:	ed84 0a01 	vstr	s0, [r4, #4]
 801d604:	4240      	negs	r0, r0
 801d606:	e792      	b.n	801d52e <__ieee754_rem_pio2f+0x5a>
 801d608:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801d60c:	15eb      	asrs	r3, r5, #23
 801d60e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801d612:	2d08      	cmp	r5, #8
 801d614:	dde3      	ble.n	801d5de <__ieee754_rem_pio2f+0x10a>
 801d616:	eddf 7a44 	vldr	s15, [pc, #272]	; 801d728 <__ieee754_rem_pio2f+0x254>
 801d61a:	eef0 6a40 	vmov.f32	s13, s0
 801d61e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d622:	ee30 0a66 	vsub.f32	s0, s0, s13
 801d626:	eea6 0a27 	vfma.f32	s0, s12, s15
 801d62a:	eddf 7a40 	vldr	s15, [pc, #256]	; 801d72c <__ieee754_rem_pio2f+0x258>
 801d62e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801d632:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801d636:	eef0 7a40 	vmov.f32	s15, s0
 801d63a:	ee15 2a90 	vmov	r2, s11
 801d63e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801d642:	1a5b      	subs	r3, r3, r1
 801d644:	2b19      	cmp	r3, #25
 801d646:	dc04      	bgt.n	801d652 <__ieee754_rem_pio2f+0x17e>
 801d648:	edc4 5a00 	vstr	s11, [r4]
 801d64c:	eeb0 0a66 	vmov.f32	s0, s13
 801d650:	e7c6      	b.n	801d5e0 <__ieee754_rem_pio2f+0x10c>
 801d652:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801d73c <__ieee754_rem_pio2f+0x268>
 801d656:	eeb0 0a66 	vmov.f32	s0, s13
 801d65a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801d65e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801d662:	eddf 6a37 	vldr	s13, [pc, #220]	; 801d740 <__ieee754_rem_pio2f+0x26c>
 801d666:	eee6 7a25 	vfma.f32	s15, s12, s11
 801d66a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801d66e:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d672:	ed84 7a00 	vstr	s14, [r4]
 801d676:	e7b3      	b.n	801d5e0 <__ieee754_rem_pio2f+0x10c>
 801d678:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801d67c:	db06      	blt.n	801d68c <__ieee754_rem_pio2f+0x1b8>
 801d67e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d682:	edc0 7a01 	vstr	s15, [r0, #4]
 801d686:	edc0 7a00 	vstr	s15, [r0]
 801d68a:	e733      	b.n	801d4f4 <__ieee754_rem_pio2f+0x20>
 801d68c:	15ea      	asrs	r2, r5, #23
 801d68e:	3a86      	subs	r2, #134	; 0x86
 801d690:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801d694:	ee07 3a90 	vmov	s15, r3
 801d698:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801d69c:	eddf 6a29 	vldr	s13, [pc, #164]	; 801d744 <__ieee754_rem_pio2f+0x270>
 801d6a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d6a8:	ed8d 7a03 	vstr	s14, [sp, #12]
 801d6ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d6b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801d6b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d6bc:	ed8d 7a04 	vstr	s14, [sp, #16]
 801d6c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d6c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6cc:	edcd 7a05 	vstr	s15, [sp, #20]
 801d6d0:	d11e      	bne.n	801d710 <__ieee754_rem_pio2f+0x23c>
 801d6d2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801d6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6da:	bf14      	ite	ne
 801d6dc:	2302      	movne	r3, #2
 801d6de:	2301      	moveq	r3, #1
 801d6e0:	4919      	ldr	r1, [pc, #100]	; (801d748 <__ieee754_rem_pio2f+0x274>)
 801d6e2:	9101      	str	r1, [sp, #4]
 801d6e4:	2102      	movs	r1, #2
 801d6e6:	9100      	str	r1, [sp, #0]
 801d6e8:	a803      	add	r0, sp, #12
 801d6ea:	4621      	mov	r1, r4
 801d6ec:	f000 fd56 	bl	801e19c <__kernel_rem_pio2f>
 801d6f0:	2e00      	cmp	r6, #0
 801d6f2:	f6bf af1c 	bge.w	801d52e <__ieee754_rem_pio2f+0x5a>
 801d6f6:	edd4 7a00 	vldr	s15, [r4]
 801d6fa:	eef1 7a67 	vneg.f32	s15, s15
 801d6fe:	edc4 7a00 	vstr	s15, [r4]
 801d702:	edd4 7a01 	vldr	s15, [r4, #4]
 801d706:	eef1 7a67 	vneg.f32	s15, s15
 801d70a:	edc4 7a01 	vstr	s15, [r4, #4]
 801d70e:	e779      	b.n	801d604 <__ieee754_rem_pio2f+0x130>
 801d710:	2303      	movs	r3, #3
 801d712:	e7e5      	b.n	801d6e0 <__ieee754_rem_pio2f+0x20c>
 801d714:	3f490fd8 	.word	0x3f490fd8
 801d718:	4016cbe3 	.word	0x4016cbe3
 801d71c:	3fc90f80 	.word	0x3fc90f80
 801d720:	3fc90fd0 	.word	0x3fc90fd0
 801d724:	37354443 	.word	0x37354443
 801d728:	37354400 	.word	0x37354400
 801d72c:	2e85a308 	.word	0x2e85a308
 801d730:	43490f80 	.word	0x43490f80
 801d734:	3f22f984 	.word	0x3f22f984
 801d738:	08022370 	.word	0x08022370
 801d73c:	2e85a300 	.word	0x2e85a300
 801d740:	248d3132 	.word	0x248d3132
 801d744:	43800000 	.word	0x43800000
 801d748:	080223f0 	.word	0x080223f0
 801d74c:	00000000 	.word	0x00000000

0801d750 <__kernel_cos>:
 801d750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d754:	ec57 6b10 	vmov	r6, r7, d0
 801d758:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801d75c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801d760:	ed8d 1b00 	vstr	d1, [sp]
 801d764:	da07      	bge.n	801d776 <__kernel_cos+0x26>
 801d766:	ee10 0a10 	vmov	r0, s0
 801d76a:	4639      	mov	r1, r7
 801d76c:	f7e3 fa04 	bl	8000b78 <__aeabi_d2iz>
 801d770:	2800      	cmp	r0, #0
 801d772:	f000 8088 	beq.w	801d886 <__kernel_cos+0x136>
 801d776:	4632      	mov	r2, r6
 801d778:	463b      	mov	r3, r7
 801d77a:	4630      	mov	r0, r6
 801d77c:	4639      	mov	r1, r7
 801d77e:	f7e2 ff4b 	bl	8000618 <__aeabi_dmul>
 801d782:	4b51      	ldr	r3, [pc, #324]	; (801d8c8 <__kernel_cos+0x178>)
 801d784:	2200      	movs	r2, #0
 801d786:	4604      	mov	r4, r0
 801d788:	460d      	mov	r5, r1
 801d78a:	f7e2 ff45 	bl	8000618 <__aeabi_dmul>
 801d78e:	a340      	add	r3, pc, #256	; (adr r3, 801d890 <__kernel_cos+0x140>)
 801d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d794:	4682      	mov	sl, r0
 801d796:	468b      	mov	fp, r1
 801d798:	4620      	mov	r0, r4
 801d79a:	4629      	mov	r1, r5
 801d79c:	f7e2 ff3c 	bl	8000618 <__aeabi_dmul>
 801d7a0:	a33d      	add	r3, pc, #244	; (adr r3, 801d898 <__kernel_cos+0x148>)
 801d7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7a6:	f7e2 fd81 	bl	80002ac <__adddf3>
 801d7aa:	4622      	mov	r2, r4
 801d7ac:	462b      	mov	r3, r5
 801d7ae:	f7e2 ff33 	bl	8000618 <__aeabi_dmul>
 801d7b2:	a33b      	add	r3, pc, #236	; (adr r3, 801d8a0 <__kernel_cos+0x150>)
 801d7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b8:	f7e2 fd76 	bl	80002a8 <__aeabi_dsub>
 801d7bc:	4622      	mov	r2, r4
 801d7be:	462b      	mov	r3, r5
 801d7c0:	f7e2 ff2a 	bl	8000618 <__aeabi_dmul>
 801d7c4:	a338      	add	r3, pc, #224	; (adr r3, 801d8a8 <__kernel_cos+0x158>)
 801d7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7ca:	f7e2 fd6f 	bl	80002ac <__adddf3>
 801d7ce:	4622      	mov	r2, r4
 801d7d0:	462b      	mov	r3, r5
 801d7d2:	f7e2 ff21 	bl	8000618 <__aeabi_dmul>
 801d7d6:	a336      	add	r3, pc, #216	; (adr r3, 801d8b0 <__kernel_cos+0x160>)
 801d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7dc:	f7e2 fd64 	bl	80002a8 <__aeabi_dsub>
 801d7e0:	4622      	mov	r2, r4
 801d7e2:	462b      	mov	r3, r5
 801d7e4:	f7e2 ff18 	bl	8000618 <__aeabi_dmul>
 801d7e8:	a333      	add	r3, pc, #204	; (adr r3, 801d8b8 <__kernel_cos+0x168>)
 801d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7ee:	f7e2 fd5d 	bl	80002ac <__adddf3>
 801d7f2:	4622      	mov	r2, r4
 801d7f4:	462b      	mov	r3, r5
 801d7f6:	f7e2 ff0f 	bl	8000618 <__aeabi_dmul>
 801d7fa:	4622      	mov	r2, r4
 801d7fc:	462b      	mov	r3, r5
 801d7fe:	f7e2 ff0b 	bl	8000618 <__aeabi_dmul>
 801d802:	e9dd 2300 	ldrd	r2, r3, [sp]
 801d806:	4604      	mov	r4, r0
 801d808:	460d      	mov	r5, r1
 801d80a:	4630      	mov	r0, r6
 801d80c:	4639      	mov	r1, r7
 801d80e:	f7e2 ff03 	bl	8000618 <__aeabi_dmul>
 801d812:	460b      	mov	r3, r1
 801d814:	4602      	mov	r2, r0
 801d816:	4629      	mov	r1, r5
 801d818:	4620      	mov	r0, r4
 801d81a:	f7e2 fd45 	bl	80002a8 <__aeabi_dsub>
 801d81e:	4b2b      	ldr	r3, [pc, #172]	; (801d8cc <__kernel_cos+0x17c>)
 801d820:	4598      	cmp	r8, r3
 801d822:	4606      	mov	r6, r0
 801d824:	460f      	mov	r7, r1
 801d826:	dc10      	bgt.n	801d84a <__kernel_cos+0xfa>
 801d828:	4602      	mov	r2, r0
 801d82a:	460b      	mov	r3, r1
 801d82c:	4650      	mov	r0, sl
 801d82e:	4659      	mov	r1, fp
 801d830:	f7e2 fd3a 	bl	80002a8 <__aeabi_dsub>
 801d834:	460b      	mov	r3, r1
 801d836:	4926      	ldr	r1, [pc, #152]	; (801d8d0 <__kernel_cos+0x180>)
 801d838:	4602      	mov	r2, r0
 801d83a:	2000      	movs	r0, #0
 801d83c:	f7e2 fd34 	bl	80002a8 <__aeabi_dsub>
 801d840:	ec41 0b10 	vmov	d0, r0, r1
 801d844:	b003      	add	sp, #12
 801d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d84a:	4b22      	ldr	r3, [pc, #136]	; (801d8d4 <__kernel_cos+0x184>)
 801d84c:	4920      	ldr	r1, [pc, #128]	; (801d8d0 <__kernel_cos+0x180>)
 801d84e:	4598      	cmp	r8, r3
 801d850:	bfcc      	ite	gt
 801d852:	4d21      	ldrgt	r5, [pc, #132]	; (801d8d8 <__kernel_cos+0x188>)
 801d854:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801d858:	2400      	movs	r4, #0
 801d85a:	4622      	mov	r2, r4
 801d85c:	462b      	mov	r3, r5
 801d85e:	2000      	movs	r0, #0
 801d860:	f7e2 fd22 	bl	80002a8 <__aeabi_dsub>
 801d864:	4622      	mov	r2, r4
 801d866:	4680      	mov	r8, r0
 801d868:	4689      	mov	r9, r1
 801d86a:	462b      	mov	r3, r5
 801d86c:	4650      	mov	r0, sl
 801d86e:	4659      	mov	r1, fp
 801d870:	f7e2 fd1a 	bl	80002a8 <__aeabi_dsub>
 801d874:	4632      	mov	r2, r6
 801d876:	463b      	mov	r3, r7
 801d878:	f7e2 fd16 	bl	80002a8 <__aeabi_dsub>
 801d87c:	4602      	mov	r2, r0
 801d87e:	460b      	mov	r3, r1
 801d880:	4640      	mov	r0, r8
 801d882:	4649      	mov	r1, r9
 801d884:	e7da      	b.n	801d83c <__kernel_cos+0xec>
 801d886:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801d8c0 <__kernel_cos+0x170>
 801d88a:	e7db      	b.n	801d844 <__kernel_cos+0xf4>
 801d88c:	f3af 8000 	nop.w
 801d890:	be8838d4 	.word	0xbe8838d4
 801d894:	bda8fae9 	.word	0xbda8fae9
 801d898:	bdb4b1c4 	.word	0xbdb4b1c4
 801d89c:	3e21ee9e 	.word	0x3e21ee9e
 801d8a0:	809c52ad 	.word	0x809c52ad
 801d8a4:	3e927e4f 	.word	0x3e927e4f
 801d8a8:	19cb1590 	.word	0x19cb1590
 801d8ac:	3efa01a0 	.word	0x3efa01a0
 801d8b0:	16c15177 	.word	0x16c15177
 801d8b4:	3f56c16c 	.word	0x3f56c16c
 801d8b8:	5555554c 	.word	0x5555554c
 801d8bc:	3fa55555 	.word	0x3fa55555
 801d8c0:	00000000 	.word	0x00000000
 801d8c4:	3ff00000 	.word	0x3ff00000
 801d8c8:	3fe00000 	.word	0x3fe00000
 801d8cc:	3fd33332 	.word	0x3fd33332
 801d8d0:	3ff00000 	.word	0x3ff00000
 801d8d4:	3fe90000 	.word	0x3fe90000
 801d8d8:	3fd20000 	.word	0x3fd20000
 801d8dc:	00000000 	.word	0x00000000

0801d8e0 <__kernel_rem_pio2>:
 801d8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8e4:	ed2d 8b02 	vpush	{d8}
 801d8e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801d8ec:	f112 0f14 	cmn.w	r2, #20
 801d8f0:	9308      	str	r3, [sp, #32]
 801d8f2:	9101      	str	r1, [sp, #4]
 801d8f4:	4bc6      	ldr	r3, [pc, #792]	; (801dc10 <__kernel_rem_pio2+0x330>)
 801d8f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801d8f8:	9009      	str	r0, [sp, #36]	; 0x24
 801d8fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d8fe:	9304      	str	r3, [sp, #16]
 801d900:	9b08      	ldr	r3, [sp, #32]
 801d902:	f103 33ff 	add.w	r3, r3, #4294967295
 801d906:	bfa8      	it	ge
 801d908:	1ed4      	subge	r4, r2, #3
 801d90a:	9306      	str	r3, [sp, #24]
 801d90c:	bfb2      	itee	lt
 801d90e:	2400      	movlt	r4, #0
 801d910:	2318      	movge	r3, #24
 801d912:	fb94 f4f3 	sdivge	r4, r4, r3
 801d916:	f06f 0317 	mvn.w	r3, #23
 801d91a:	fb04 3303 	mla	r3, r4, r3, r3
 801d91e:	eb03 0a02 	add.w	sl, r3, r2
 801d922:	9b04      	ldr	r3, [sp, #16]
 801d924:	9a06      	ldr	r2, [sp, #24]
 801d926:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801dc00 <__kernel_rem_pio2+0x320>
 801d92a:	eb03 0802 	add.w	r8, r3, r2
 801d92e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801d930:	1aa7      	subs	r7, r4, r2
 801d932:	ae20      	add	r6, sp, #128	; 0x80
 801d934:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801d938:	2500      	movs	r5, #0
 801d93a:	4545      	cmp	r5, r8
 801d93c:	dd18      	ble.n	801d970 <__kernel_rem_pio2+0x90>
 801d93e:	9b08      	ldr	r3, [sp, #32]
 801d940:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d944:	aa20      	add	r2, sp, #128	; 0x80
 801d946:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801dc00 <__kernel_rem_pio2+0x320>
 801d94a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801d94e:	f1c3 0301 	rsb	r3, r3, #1
 801d952:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801d956:	9307      	str	r3, [sp, #28]
 801d958:	9b07      	ldr	r3, [sp, #28]
 801d95a:	9a04      	ldr	r2, [sp, #16]
 801d95c:	4443      	add	r3, r8
 801d95e:	429a      	cmp	r2, r3
 801d960:	db2f      	blt.n	801d9c2 <__kernel_rem_pio2+0xe2>
 801d962:	ed8d 8b02 	vstr	d8, [sp, #8]
 801d966:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d96a:	462f      	mov	r7, r5
 801d96c:	2600      	movs	r6, #0
 801d96e:	e01b      	b.n	801d9a8 <__kernel_rem_pio2+0xc8>
 801d970:	42ef      	cmn	r7, r5
 801d972:	d407      	bmi.n	801d984 <__kernel_rem_pio2+0xa4>
 801d974:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801d978:	f7e2 fde4 	bl	8000544 <__aeabi_i2d>
 801d97c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801d980:	3501      	adds	r5, #1
 801d982:	e7da      	b.n	801d93a <__kernel_rem_pio2+0x5a>
 801d984:	ec51 0b18 	vmov	r0, r1, d8
 801d988:	e7f8      	b.n	801d97c <__kernel_rem_pio2+0x9c>
 801d98a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d98e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801d992:	f7e2 fe41 	bl	8000618 <__aeabi_dmul>
 801d996:	4602      	mov	r2, r0
 801d998:	460b      	mov	r3, r1
 801d99a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d99e:	f7e2 fc85 	bl	80002ac <__adddf3>
 801d9a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d9a6:	3601      	adds	r6, #1
 801d9a8:	9b06      	ldr	r3, [sp, #24]
 801d9aa:	429e      	cmp	r6, r3
 801d9ac:	f1a7 0708 	sub.w	r7, r7, #8
 801d9b0:	ddeb      	ble.n	801d98a <__kernel_rem_pio2+0xaa>
 801d9b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d9b6:	3508      	adds	r5, #8
 801d9b8:	ecab 7b02 	vstmia	fp!, {d7}
 801d9bc:	f108 0801 	add.w	r8, r8, #1
 801d9c0:	e7ca      	b.n	801d958 <__kernel_rem_pio2+0x78>
 801d9c2:	9b04      	ldr	r3, [sp, #16]
 801d9c4:	aa0c      	add	r2, sp, #48	; 0x30
 801d9c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d9ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801d9cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801d9ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801d9d2:	9c04      	ldr	r4, [sp, #16]
 801d9d4:	930a      	str	r3, [sp, #40]	; 0x28
 801d9d6:	ab98      	add	r3, sp, #608	; 0x260
 801d9d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d9dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801d9e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 801d9e4:	f8cd b008 	str.w	fp, [sp, #8]
 801d9e8:	4625      	mov	r5, r4
 801d9ea:	2d00      	cmp	r5, #0
 801d9ec:	dc78      	bgt.n	801dae0 <__kernel_rem_pio2+0x200>
 801d9ee:	ec47 6b10 	vmov	d0, r6, r7
 801d9f2:	4650      	mov	r0, sl
 801d9f4:	f001 fa48 	bl	801ee88 <scalbn>
 801d9f8:	ec57 6b10 	vmov	r6, r7, d0
 801d9fc:	2200      	movs	r2, #0
 801d9fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801da02:	ee10 0a10 	vmov	r0, s0
 801da06:	4639      	mov	r1, r7
 801da08:	f7e2 fe06 	bl	8000618 <__aeabi_dmul>
 801da0c:	ec41 0b10 	vmov	d0, r0, r1
 801da10:	f001 f92e 	bl	801ec70 <floor>
 801da14:	4b7f      	ldr	r3, [pc, #508]	; (801dc14 <__kernel_rem_pio2+0x334>)
 801da16:	ec51 0b10 	vmov	r0, r1, d0
 801da1a:	2200      	movs	r2, #0
 801da1c:	f7e2 fdfc 	bl	8000618 <__aeabi_dmul>
 801da20:	4602      	mov	r2, r0
 801da22:	460b      	mov	r3, r1
 801da24:	4630      	mov	r0, r6
 801da26:	4639      	mov	r1, r7
 801da28:	f7e2 fc3e 	bl	80002a8 <__aeabi_dsub>
 801da2c:	460f      	mov	r7, r1
 801da2e:	4606      	mov	r6, r0
 801da30:	f7e3 f8a2 	bl	8000b78 <__aeabi_d2iz>
 801da34:	9007      	str	r0, [sp, #28]
 801da36:	f7e2 fd85 	bl	8000544 <__aeabi_i2d>
 801da3a:	4602      	mov	r2, r0
 801da3c:	460b      	mov	r3, r1
 801da3e:	4630      	mov	r0, r6
 801da40:	4639      	mov	r1, r7
 801da42:	f7e2 fc31 	bl	80002a8 <__aeabi_dsub>
 801da46:	f1ba 0f00 	cmp.w	sl, #0
 801da4a:	4606      	mov	r6, r0
 801da4c:	460f      	mov	r7, r1
 801da4e:	dd70      	ble.n	801db32 <__kernel_rem_pio2+0x252>
 801da50:	1e62      	subs	r2, r4, #1
 801da52:	ab0c      	add	r3, sp, #48	; 0x30
 801da54:	9d07      	ldr	r5, [sp, #28]
 801da56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801da5a:	f1ca 0118 	rsb	r1, sl, #24
 801da5e:	fa40 f301 	asr.w	r3, r0, r1
 801da62:	441d      	add	r5, r3
 801da64:	408b      	lsls	r3, r1
 801da66:	1ac0      	subs	r0, r0, r3
 801da68:	ab0c      	add	r3, sp, #48	; 0x30
 801da6a:	9507      	str	r5, [sp, #28]
 801da6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801da70:	f1ca 0317 	rsb	r3, sl, #23
 801da74:	fa40 f303 	asr.w	r3, r0, r3
 801da78:	9302      	str	r3, [sp, #8]
 801da7a:	9b02      	ldr	r3, [sp, #8]
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	dd66      	ble.n	801db4e <__kernel_rem_pio2+0x26e>
 801da80:	9b07      	ldr	r3, [sp, #28]
 801da82:	2200      	movs	r2, #0
 801da84:	3301      	adds	r3, #1
 801da86:	9307      	str	r3, [sp, #28]
 801da88:	4615      	mov	r5, r2
 801da8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801da8e:	4294      	cmp	r4, r2
 801da90:	f300 8099 	bgt.w	801dbc6 <__kernel_rem_pio2+0x2e6>
 801da94:	f1ba 0f00 	cmp.w	sl, #0
 801da98:	dd07      	ble.n	801daaa <__kernel_rem_pio2+0x1ca>
 801da9a:	f1ba 0f01 	cmp.w	sl, #1
 801da9e:	f000 80a5 	beq.w	801dbec <__kernel_rem_pio2+0x30c>
 801daa2:	f1ba 0f02 	cmp.w	sl, #2
 801daa6:	f000 80c1 	beq.w	801dc2c <__kernel_rem_pio2+0x34c>
 801daaa:	9b02      	ldr	r3, [sp, #8]
 801daac:	2b02      	cmp	r3, #2
 801daae:	d14e      	bne.n	801db4e <__kernel_rem_pio2+0x26e>
 801dab0:	4632      	mov	r2, r6
 801dab2:	463b      	mov	r3, r7
 801dab4:	4958      	ldr	r1, [pc, #352]	; (801dc18 <__kernel_rem_pio2+0x338>)
 801dab6:	2000      	movs	r0, #0
 801dab8:	f7e2 fbf6 	bl	80002a8 <__aeabi_dsub>
 801dabc:	4606      	mov	r6, r0
 801dabe:	460f      	mov	r7, r1
 801dac0:	2d00      	cmp	r5, #0
 801dac2:	d044      	beq.n	801db4e <__kernel_rem_pio2+0x26e>
 801dac4:	4650      	mov	r0, sl
 801dac6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801dc08 <__kernel_rem_pio2+0x328>
 801daca:	f001 f9dd 	bl	801ee88 <scalbn>
 801dace:	4630      	mov	r0, r6
 801dad0:	4639      	mov	r1, r7
 801dad2:	ec53 2b10 	vmov	r2, r3, d0
 801dad6:	f7e2 fbe7 	bl	80002a8 <__aeabi_dsub>
 801dada:	4606      	mov	r6, r0
 801dadc:	460f      	mov	r7, r1
 801dade:	e036      	b.n	801db4e <__kernel_rem_pio2+0x26e>
 801dae0:	4b4e      	ldr	r3, [pc, #312]	; (801dc1c <__kernel_rem_pio2+0x33c>)
 801dae2:	2200      	movs	r2, #0
 801dae4:	4630      	mov	r0, r6
 801dae6:	4639      	mov	r1, r7
 801dae8:	f7e2 fd96 	bl	8000618 <__aeabi_dmul>
 801daec:	f7e3 f844 	bl	8000b78 <__aeabi_d2iz>
 801daf0:	f7e2 fd28 	bl	8000544 <__aeabi_i2d>
 801daf4:	4b4a      	ldr	r3, [pc, #296]	; (801dc20 <__kernel_rem_pio2+0x340>)
 801daf6:	2200      	movs	r2, #0
 801daf8:	4680      	mov	r8, r0
 801dafa:	4689      	mov	r9, r1
 801dafc:	f7e2 fd8c 	bl	8000618 <__aeabi_dmul>
 801db00:	4602      	mov	r2, r0
 801db02:	460b      	mov	r3, r1
 801db04:	4630      	mov	r0, r6
 801db06:	4639      	mov	r1, r7
 801db08:	f7e2 fbce 	bl	80002a8 <__aeabi_dsub>
 801db0c:	f7e3 f834 	bl	8000b78 <__aeabi_d2iz>
 801db10:	9b02      	ldr	r3, [sp, #8]
 801db12:	f843 0b04 	str.w	r0, [r3], #4
 801db16:	3d01      	subs	r5, #1
 801db18:	9302      	str	r3, [sp, #8]
 801db1a:	ab70      	add	r3, sp, #448	; 0x1c0
 801db1c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db24:	4640      	mov	r0, r8
 801db26:	4649      	mov	r1, r9
 801db28:	f7e2 fbc0 	bl	80002ac <__adddf3>
 801db2c:	4606      	mov	r6, r0
 801db2e:	460f      	mov	r7, r1
 801db30:	e75b      	b.n	801d9ea <__kernel_rem_pio2+0x10a>
 801db32:	d105      	bne.n	801db40 <__kernel_rem_pio2+0x260>
 801db34:	1e63      	subs	r3, r4, #1
 801db36:	aa0c      	add	r2, sp, #48	; 0x30
 801db38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801db3c:	15c3      	asrs	r3, r0, #23
 801db3e:	e79b      	b.n	801da78 <__kernel_rem_pio2+0x198>
 801db40:	4b38      	ldr	r3, [pc, #224]	; (801dc24 <__kernel_rem_pio2+0x344>)
 801db42:	2200      	movs	r2, #0
 801db44:	f7e2 ffee 	bl	8000b24 <__aeabi_dcmpge>
 801db48:	2800      	cmp	r0, #0
 801db4a:	d139      	bne.n	801dbc0 <__kernel_rem_pio2+0x2e0>
 801db4c:	9002      	str	r0, [sp, #8]
 801db4e:	2200      	movs	r2, #0
 801db50:	2300      	movs	r3, #0
 801db52:	4630      	mov	r0, r6
 801db54:	4639      	mov	r1, r7
 801db56:	f7e2 ffc7 	bl	8000ae8 <__aeabi_dcmpeq>
 801db5a:	2800      	cmp	r0, #0
 801db5c:	f000 80b4 	beq.w	801dcc8 <__kernel_rem_pio2+0x3e8>
 801db60:	f104 3bff 	add.w	fp, r4, #4294967295
 801db64:	465b      	mov	r3, fp
 801db66:	2200      	movs	r2, #0
 801db68:	9904      	ldr	r1, [sp, #16]
 801db6a:	428b      	cmp	r3, r1
 801db6c:	da65      	bge.n	801dc3a <__kernel_rem_pio2+0x35a>
 801db6e:	2a00      	cmp	r2, #0
 801db70:	d07b      	beq.n	801dc6a <__kernel_rem_pio2+0x38a>
 801db72:	ab0c      	add	r3, sp, #48	; 0x30
 801db74:	f1aa 0a18 	sub.w	sl, sl, #24
 801db78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	f000 80a0 	beq.w	801dcc2 <__kernel_rem_pio2+0x3e2>
 801db82:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801dc08 <__kernel_rem_pio2+0x328>
 801db86:	4650      	mov	r0, sl
 801db88:	f001 f97e 	bl	801ee88 <scalbn>
 801db8c:	4f23      	ldr	r7, [pc, #140]	; (801dc1c <__kernel_rem_pio2+0x33c>)
 801db8e:	ec55 4b10 	vmov	r4, r5, d0
 801db92:	46d8      	mov	r8, fp
 801db94:	2600      	movs	r6, #0
 801db96:	f1b8 0f00 	cmp.w	r8, #0
 801db9a:	f280 80cf 	bge.w	801dd3c <__kernel_rem_pio2+0x45c>
 801db9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801dc00 <__kernel_rem_pio2+0x320>
 801dba2:	465f      	mov	r7, fp
 801dba4:	f04f 0800 	mov.w	r8, #0
 801dba8:	2f00      	cmp	r7, #0
 801dbaa:	f2c0 80fd 	blt.w	801dda8 <__kernel_rem_pio2+0x4c8>
 801dbae:	ab70      	add	r3, sp, #448	; 0x1c0
 801dbb0:	f8df a074 	ldr.w	sl, [pc, #116]	; 801dc28 <__kernel_rem_pio2+0x348>
 801dbb4:	ec55 4b18 	vmov	r4, r5, d8
 801dbb8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801dbbc:	2600      	movs	r6, #0
 801dbbe:	e0e5      	b.n	801dd8c <__kernel_rem_pio2+0x4ac>
 801dbc0:	2302      	movs	r3, #2
 801dbc2:	9302      	str	r3, [sp, #8]
 801dbc4:	e75c      	b.n	801da80 <__kernel_rem_pio2+0x1a0>
 801dbc6:	f8db 3000 	ldr.w	r3, [fp]
 801dbca:	b955      	cbnz	r5, 801dbe2 <__kernel_rem_pio2+0x302>
 801dbcc:	b123      	cbz	r3, 801dbd8 <__kernel_rem_pio2+0x2f8>
 801dbce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801dbd2:	f8cb 3000 	str.w	r3, [fp]
 801dbd6:	2301      	movs	r3, #1
 801dbd8:	3201      	adds	r2, #1
 801dbda:	f10b 0b04 	add.w	fp, fp, #4
 801dbde:	461d      	mov	r5, r3
 801dbe0:	e755      	b.n	801da8e <__kernel_rem_pio2+0x1ae>
 801dbe2:	1acb      	subs	r3, r1, r3
 801dbe4:	f8cb 3000 	str.w	r3, [fp]
 801dbe8:	462b      	mov	r3, r5
 801dbea:	e7f5      	b.n	801dbd8 <__kernel_rem_pio2+0x2f8>
 801dbec:	1e62      	subs	r2, r4, #1
 801dbee:	ab0c      	add	r3, sp, #48	; 0x30
 801dbf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dbf4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801dbf8:	a90c      	add	r1, sp, #48	; 0x30
 801dbfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801dbfe:	e754      	b.n	801daaa <__kernel_rem_pio2+0x1ca>
	...
 801dc0c:	3ff00000 	.word	0x3ff00000
 801dc10:	08022748 	.word	0x08022748
 801dc14:	40200000 	.word	0x40200000
 801dc18:	3ff00000 	.word	0x3ff00000
 801dc1c:	3e700000 	.word	0x3e700000
 801dc20:	41700000 	.word	0x41700000
 801dc24:	3fe00000 	.word	0x3fe00000
 801dc28:	08022708 	.word	0x08022708
 801dc2c:	1e62      	subs	r2, r4, #1
 801dc2e:	ab0c      	add	r3, sp, #48	; 0x30
 801dc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801dc34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801dc38:	e7de      	b.n	801dbf8 <__kernel_rem_pio2+0x318>
 801dc3a:	a90c      	add	r1, sp, #48	; 0x30
 801dc3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801dc40:	3b01      	subs	r3, #1
 801dc42:	430a      	orrs	r2, r1
 801dc44:	e790      	b.n	801db68 <__kernel_rem_pio2+0x288>
 801dc46:	3301      	adds	r3, #1
 801dc48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801dc4c:	2900      	cmp	r1, #0
 801dc4e:	d0fa      	beq.n	801dc46 <__kernel_rem_pio2+0x366>
 801dc50:	9a08      	ldr	r2, [sp, #32]
 801dc52:	18e3      	adds	r3, r4, r3
 801dc54:	18a6      	adds	r6, r4, r2
 801dc56:	aa20      	add	r2, sp, #128	; 0x80
 801dc58:	1c65      	adds	r5, r4, #1
 801dc5a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801dc5e:	9302      	str	r3, [sp, #8]
 801dc60:	9b02      	ldr	r3, [sp, #8]
 801dc62:	42ab      	cmp	r3, r5
 801dc64:	da04      	bge.n	801dc70 <__kernel_rem_pio2+0x390>
 801dc66:	461c      	mov	r4, r3
 801dc68:	e6b5      	b.n	801d9d6 <__kernel_rem_pio2+0xf6>
 801dc6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801dc6c:	2301      	movs	r3, #1
 801dc6e:	e7eb      	b.n	801dc48 <__kernel_rem_pio2+0x368>
 801dc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dc76:	f7e2 fc65 	bl	8000544 <__aeabi_i2d>
 801dc7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801dc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc80:	46b3      	mov	fp, r6
 801dc82:	461c      	mov	r4, r3
 801dc84:	2700      	movs	r7, #0
 801dc86:	f04f 0800 	mov.w	r8, #0
 801dc8a:	f04f 0900 	mov.w	r9, #0
 801dc8e:	9b06      	ldr	r3, [sp, #24]
 801dc90:	429f      	cmp	r7, r3
 801dc92:	dd06      	ble.n	801dca2 <__kernel_rem_pio2+0x3c2>
 801dc94:	ab70      	add	r3, sp, #448	; 0x1c0
 801dc96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801dc9a:	e9c3 8900 	strd	r8, r9, [r3]
 801dc9e:	3501      	adds	r5, #1
 801dca0:	e7de      	b.n	801dc60 <__kernel_rem_pio2+0x380>
 801dca2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801dca6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801dcaa:	f7e2 fcb5 	bl	8000618 <__aeabi_dmul>
 801dcae:	4602      	mov	r2, r0
 801dcb0:	460b      	mov	r3, r1
 801dcb2:	4640      	mov	r0, r8
 801dcb4:	4649      	mov	r1, r9
 801dcb6:	f7e2 faf9 	bl	80002ac <__adddf3>
 801dcba:	3701      	adds	r7, #1
 801dcbc:	4680      	mov	r8, r0
 801dcbe:	4689      	mov	r9, r1
 801dcc0:	e7e5      	b.n	801dc8e <__kernel_rem_pio2+0x3ae>
 801dcc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dcc6:	e754      	b.n	801db72 <__kernel_rem_pio2+0x292>
 801dcc8:	ec47 6b10 	vmov	d0, r6, r7
 801dccc:	f1ca 0000 	rsb	r0, sl, #0
 801dcd0:	f001 f8da 	bl	801ee88 <scalbn>
 801dcd4:	ec57 6b10 	vmov	r6, r7, d0
 801dcd8:	4b9f      	ldr	r3, [pc, #636]	; (801df58 <__kernel_rem_pio2+0x678>)
 801dcda:	ee10 0a10 	vmov	r0, s0
 801dcde:	2200      	movs	r2, #0
 801dce0:	4639      	mov	r1, r7
 801dce2:	f7e2 ff1f 	bl	8000b24 <__aeabi_dcmpge>
 801dce6:	b300      	cbz	r0, 801dd2a <__kernel_rem_pio2+0x44a>
 801dce8:	4b9c      	ldr	r3, [pc, #624]	; (801df5c <__kernel_rem_pio2+0x67c>)
 801dcea:	2200      	movs	r2, #0
 801dcec:	4630      	mov	r0, r6
 801dcee:	4639      	mov	r1, r7
 801dcf0:	f7e2 fc92 	bl	8000618 <__aeabi_dmul>
 801dcf4:	f7e2 ff40 	bl	8000b78 <__aeabi_d2iz>
 801dcf8:	4605      	mov	r5, r0
 801dcfa:	f7e2 fc23 	bl	8000544 <__aeabi_i2d>
 801dcfe:	4b96      	ldr	r3, [pc, #600]	; (801df58 <__kernel_rem_pio2+0x678>)
 801dd00:	2200      	movs	r2, #0
 801dd02:	f7e2 fc89 	bl	8000618 <__aeabi_dmul>
 801dd06:	460b      	mov	r3, r1
 801dd08:	4602      	mov	r2, r0
 801dd0a:	4639      	mov	r1, r7
 801dd0c:	4630      	mov	r0, r6
 801dd0e:	f7e2 facb 	bl	80002a8 <__aeabi_dsub>
 801dd12:	f7e2 ff31 	bl	8000b78 <__aeabi_d2iz>
 801dd16:	f104 0b01 	add.w	fp, r4, #1
 801dd1a:	ab0c      	add	r3, sp, #48	; 0x30
 801dd1c:	f10a 0a18 	add.w	sl, sl, #24
 801dd20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801dd24:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801dd28:	e72b      	b.n	801db82 <__kernel_rem_pio2+0x2a2>
 801dd2a:	4630      	mov	r0, r6
 801dd2c:	4639      	mov	r1, r7
 801dd2e:	f7e2 ff23 	bl	8000b78 <__aeabi_d2iz>
 801dd32:	ab0c      	add	r3, sp, #48	; 0x30
 801dd34:	46a3      	mov	fp, r4
 801dd36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801dd3a:	e722      	b.n	801db82 <__kernel_rem_pio2+0x2a2>
 801dd3c:	ab70      	add	r3, sp, #448	; 0x1c0
 801dd3e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801dd42:	ab0c      	add	r3, sp, #48	; 0x30
 801dd44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801dd48:	f7e2 fbfc 	bl	8000544 <__aeabi_i2d>
 801dd4c:	4622      	mov	r2, r4
 801dd4e:	462b      	mov	r3, r5
 801dd50:	f7e2 fc62 	bl	8000618 <__aeabi_dmul>
 801dd54:	4632      	mov	r2, r6
 801dd56:	e9c9 0100 	strd	r0, r1, [r9]
 801dd5a:	463b      	mov	r3, r7
 801dd5c:	4620      	mov	r0, r4
 801dd5e:	4629      	mov	r1, r5
 801dd60:	f7e2 fc5a 	bl	8000618 <__aeabi_dmul>
 801dd64:	f108 38ff 	add.w	r8, r8, #4294967295
 801dd68:	4604      	mov	r4, r0
 801dd6a:	460d      	mov	r5, r1
 801dd6c:	e713      	b.n	801db96 <__kernel_rem_pio2+0x2b6>
 801dd6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801dd72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801dd76:	f7e2 fc4f 	bl	8000618 <__aeabi_dmul>
 801dd7a:	4602      	mov	r2, r0
 801dd7c:	460b      	mov	r3, r1
 801dd7e:	4620      	mov	r0, r4
 801dd80:	4629      	mov	r1, r5
 801dd82:	f7e2 fa93 	bl	80002ac <__adddf3>
 801dd86:	3601      	adds	r6, #1
 801dd88:	4604      	mov	r4, r0
 801dd8a:	460d      	mov	r5, r1
 801dd8c:	9b04      	ldr	r3, [sp, #16]
 801dd8e:	429e      	cmp	r6, r3
 801dd90:	dc01      	bgt.n	801dd96 <__kernel_rem_pio2+0x4b6>
 801dd92:	45b0      	cmp	r8, r6
 801dd94:	daeb      	bge.n	801dd6e <__kernel_rem_pio2+0x48e>
 801dd96:	ab48      	add	r3, sp, #288	; 0x120
 801dd98:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801dd9c:	e9c3 4500 	strd	r4, r5, [r3]
 801dda0:	3f01      	subs	r7, #1
 801dda2:	f108 0801 	add.w	r8, r8, #1
 801dda6:	e6ff      	b.n	801dba8 <__kernel_rem_pio2+0x2c8>
 801dda8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801ddaa:	2b02      	cmp	r3, #2
 801ddac:	dc0b      	bgt.n	801ddc6 <__kernel_rem_pio2+0x4e6>
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	dc6e      	bgt.n	801de90 <__kernel_rem_pio2+0x5b0>
 801ddb2:	d045      	beq.n	801de40 <__kernel_rem_pio2+0x560>
 801ddb4:	9b07      	ldr	r3, [sp, #28]
 801ddb6:	f003 0007 	and.w	r0, r3, #7
 801ddba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801ddbe:	ecbd 8b02 	vpop	{d8}
 801ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801ddc8:	2b03      	cmp	r3, #3
 801ddca:	d1f3      	bne.n	801ddb4 <__kernel_rem_pio2+0x4d4>
 801ddcc:	ab48      	add	r3, sp, #288	; 0x120
 801ddce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801ddd2:	46d0      	mov	r8, sl
 801ddd4:	46d9      	mov	r9, fp
 801ddd6:	f1b9 0f00 	cmp.w	r9, #0
 801ddda:	f1a8 0808 	sub.w	r8, r8, #8
 801ddde:	dc64      	bgt.n	801deaa <__kernel_rem_pio2+0x5ca>
 801dde0:	465c      	mov	r4, fp
 801dde2:	2c01      	cmp	r4, #1
 801dde4:	f1aa 0a08 	sub.w	sl, sl, #8
 801dde8:	dc7e      	bgt.n	801dee8 <__kernel_rem_pio2+0x608>
 801ddea:	2000      	movs	r0, #0
 801ddec:	2100      	movs	r1, #0
 801ddee:	f1bb 0f01 	cmp.w	fp, #1
 801ddf2:	f300 8097 	bgt.w	801df24 <__kernel_rem_pio2+0x644>
 801ddf6:	9b02      	ldr	r3, [sp, #8]
 801ddf8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801ddfc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801de00:	2b00      	cmp	r3, #0
 801de02:	f040 8099 	bne.w	801df38 <__kernel_rem_pio2+0x658>
 801de06:	9b01      	ldr	r3, [sp, #4]
 801de08:	e9c3 5600 	strd	r5, r6, [r3]
 801de0c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801de10:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801de14:	e7ce      	b.n	801ddb4 <__kernel_rem_pio2+0x4d4>
 801de16:	ab48      	add	r3, sp, #288	; 0x120
 801de18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de20:	f7e2 fa44 	bl	80002ac <__adddf3>
 801de24:	f10b 3bff 	add.w	fp, fp, #4294967295
 801de28:	f1bb 0f00 	cmp.w	fp, #0
 801de2c:	daf3      	bge.n	801de16 <__kernel_rem_pio2+0x536>
 801de2e:	9b02      	ldr	r3, [sp, #8]
 801de30:	b113      	cbz	r3, 801de38 <__kernel_rem_pio2+0x558>
 801de32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801de36:	4619      	mov	r1, r3
 801de38:	9b01      	ldr	r3, [sp, #4]
 801de3a:	e9c3 0100 	strd	r0, r1, [r3]
 801de3e:	e7b9      	b.n	801ddb4 <__kernel_rem_pio2+0x4d4>
 801de40:	2000      	movs	r0, #0
 801de42:	2100      	movs	r1, #0
 801de44:	e7f0      	b.n	801de28 <__kernel_rem_pio2+0x548>
 801de46:	ab48      	add	r3, sp, #288	; 0x120
 801de48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de50:	f7e2 fa2c 	bl	80002ac <__adddf3>
 801de54:	3c01      	subs	r4, #1
 801de56:	2c00      	cmp	r4, #0
 801de58:	daf5      	bge.n	801de46 <__kernel_rem_pio2+0x566>
 801de5a:	9b02      	ldr	r3, [sp, #8]
 801de5c:	b1e3      	cbz	r3, 801de98 <__kernel_rem_pio2+0x5b8>
 801de5e:	4602      	mov	r2, r0
 801de60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801de64:	9c01      	ldr	r4, [sp, #4]
 801de66:	e9c4 2300 	strd	r2, r3, [r4]
 801de6a:	4602      	mov	r2, r0
 801de6c:	460b      	mov	r3, r1
 801de6e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801de72:	f7e2 fa19 	bl	80002a8 <__aeabi_dsub>
 801de76:	ad4a      	add	r5, sp, #296	; 0x128
 801de78:	2401      	movs	r4, #1
 801de7a:	45a3      	cmp	fp, r4
 801de7c:	da0f      	bge.n	801de9e <__kernel_rem_pio2+0x5be>
 801de7e:	9b02      	ldr	r3, [sp, #8]
 801de80:	b113      	cbz	r3, 801de88 <__kernel_rem_pio2+0x5a8>
 801de82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801de86:	4619      	mov	r1, r3
 801de88:	9b01      	ldr	r3, [sp, #4]
 801de8a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801de8e:	e791      	b.n	801ddb4 <__kernel_rem_pio2+0x4d4>
 801de90:	465c      	mov	r4, fp
 801de92:	2000      	movs	r0, #0
 801de94:	2100      	movs	r1, #0
 801de96:	e7de      	b.n	801de56 <__kernel_rem_pio2+0x576>
 801de98:	4602      	mov	r2, r0
 801de9a:	460b      	mov	r3, r1
 801de9c:	e7e2      	b.n	801de64 <__kernel_rem_pio2+0x584>
 801de9e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801dea2:	f7e2 fa03 	bl	80002ac <__adddf3>
 801dea6:	3401      	adds	r4, #1
 801dea8:	e7e7      	b.n	801de7a <__kernel_rem_pio2+0x59a>
 801deaa:	e9d8 4500 	ldrd	r4, r5, [r8]
 801deae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801deb2:	4620      	mov	r0, r4
 801deb4:	4632      	mov	r2, r6
 801deb6:	463b      	mov	r3, r7
 801deb8:	4629      	mov	r1, r5
 801deba:	f7e2 f9f7 	bl	80002ac <__adddf3>
 801debe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801dec2:	4602      	mov	r2, r0
 801dec4:	460b      	mov	r3, r1
 801dec6:	4620      	mov	r0, r4
 801dec8:	4629      	mov	r1, r5
 801deca:	f7e2 f9ed 	bl	80002a8 <__aeabi_dsub>
 801dece:	4632      	mov	r2, r6
 801ded0:	463b      	mov	r3, r7
 801ded2:	f7e2 f9eb 	bl	80002ac <__adddf3>
 801ded6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801deda:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801dede:	ed88 7b00 	vstr	d7, [r8]
 801dee2:	f109 39ff 	add.w	r9, r9, #4294967295
 801dee6:	e776      	b.n	801ddd6 <__kernel_rem_pio2+0x4f6>
 801dee8:	e9da 8900 	ldrd	r8, r9, [sl]
 801deec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801def0:	4640      	mov	r0, r8
 801def2:	4632      	mov	r2, r6
 801def4:	463b      	mov	r3, r7
 801def6:	4649      	mov	r1, r9
 801def8:	f7e2 f9d8 	bl	80002ac <__adddf3>
 801defc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801df00:	4602      	mov	r2, r0
 801df02:	460b      	mov	r3, r1
 801df04:	4640      	mov	r0, r8
 801df06:	4649      	mov	r1, r9
 801df08:	f7e2 f9ce 	bl	80002a8 <__aeabi_dsub>
 801df0c:	4632      	mov	r2, r6
 801df0e:	463b      	mov	r3, r7
 801df10:	f7e2 f9cc 	bl	80002ac <__adddf3>
 801df14:	ed9d 7b04 	vldr	d7, [sp, #16]
 801df18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801df1c:	ed8a 7b00 	vstr	d7, [sl]
 801df20:	3c01      	subs	r4, #1
 801df22:	e75e      	b.n	801dde2 <__kernel_rem_pio2+0x502>
 801df24:	ab48      	add	r3, sp, #288	; 0x120
 801df26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801df2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df2e:	f7e2 f9bd 	bl	80002ac <__adddf3>
 801df32:	f10b 3bff 	add.w	fp, fp, #4294967295
 801df36:	e75a      	b.n	801ddee <__kernel_rem_pio2+0x50e>
 801df38:	9b01      	ldr	r3, [sp, #4]
 801df3a:	9a01      	ldr	r2, [sp, #4]
 801df3c:	601d      	str	r5, [r3, #0]
 801df3e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801df42:	605c      	str	r4, [r3, #4]
 801df44:	609f      	str	r7, [r3, #8]
 801df46:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801df4a:	60d3      	str	r3, [r2, #12]
 801df4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801df50:	6110      	str	r0, [r2, #16]
 801df52:	6153      	str	r3, [r2, #20]
 801df54:	e72e      	b.n	801ddb4 <__kernel_rem_pio2+0x4d4>
 801df56:	bf00      	nop
 801df58:	41700000 	.word	0x41700000
 801df5c:	3e700000 	.word	0x3e700000

0801df60 <__kernel_sin>:
 801df60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df64:	ed2d 8b04 	vpush	{d8-d9}
 801df68:	eeb0 8a41 	vmov.f32	s16, s2
 801df6c:	eef0 8a61 	vmov.f32	s17, s3
 801df70:	ec55 4b10 	vmov	r4, r5, d0
 801df74:	b083      	sub	sp, #12
 801df76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801df7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801df7e:	9001      	str	r0, [sp, #4]
 801df80:	da06      	bge.n	801df90 <__kernel_sin+0x30>
 801df82:	ee10 0a10 	vmov	r0, s0
 801df86:	4629      	mov	r1, r5
 801df88:	f7e2 fdf6 	bl	8000b78 <__aeabi_d2iz>
 801df8c:	2800      	cmp	r0, #0
 801df8e:	d051      	beq.n	801e034 <__kernel_sin+0xd4>
 801df90:	4622      	mov	r2, r4
 801df92:	462b      	mov	r3, r5
 801df94:	4620      	mov	r0, r4
 801df96:	4629      	mov	r1, r5
 801df98:	f7e2 fb3e 	bl	8000618 <__aeabi_dmul>
 801df9c:	4682      	mov	sl, r0
 801df9e:	468b      	mov	fp, r1
 801dfa0:	4602      	mov	r2, r0
 801dfa2:	460b      	mov	r3, r1
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	4629      	mov	r1, r5
 801dfa8:	f7e2 fb36 	bl	8000618 <__aeabi_dmul>
 801dfac:	a341      	add	r3, pc, #260	; (adr r3, 801e0b4 <__kernel_sin+0x154>)
 801dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfb2:	4680      	mov	r8, r0
 801dfb4:	4689      	mov	r9, r1
 801dfb6:	4650      	mov	r0, sl
 801dfb8:	4659      	mov	r1, fp
 801dfba:	f7e2 fb2d 	bl	8000618 <__aeabi_dmul>
 801dfbe:	a33f      	add	r3, pc, #252	; (adr r3, 801e0bc <__kernel_sin+0x15c>)
 801dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfc4:	f7e2 f970 	bl	80002a8 <__aeabi_dsub>
 801dfc8:	4652      	mov	r2, sl
 801dfca:	465b      	mov	r3, fp
 801dfcc:	f7e2 fb24 	bl	8000618 <__aeabi_dmul>
 801dfd0:	a33c      	add	r3, pc, #240	; (adr r3, 801e0c4 <__kernel_sin+0x164>)
 801dfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfd6:	f7e2 f969 	bl	80002ac <__adddf3>
 801dfda:	4652      	mov	r2, sl
 801dfdc:	465b      	mov	r3, fp
 801dfde:	f7e2 fb1b 	bl	8000618 <__aeabi_dmul>
 801dfe2:	a33a      	add	r3, pc, #232	; (adr r3, 801e0cc <__kernel_sin+0x16c>)
 801dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfe8:	f7e2 f95e 	bl	80002a8 <__aeabi_dsub>
 801dfec:	4652      	mov	r2, sl
 801dfee:	465b      	mov	r3, fp
 801dff0:	f7e2 fb12 	bl	8000618 <__aeabi_dmul>
 801dff4:	a337      	add	r3, pc, #220	; (adr r3, 801e0d4 <__kernel_sin+0x174>)
 801dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dffa:	f7e2 f957 	bl	80002ac <__adddf3>
 801dffe:	9b01      	ldr	r3, [sp, #4]
 801e000:	4606      	mov	r6, r0
 801e002:	460f      	mov	r7, r1
 801e004:	b9eb      	cbnz	r3, 801e042 <__kernel_sin+0xe2>
 801e006:	4602      	mov	r2, r0
 801e008:	460b      	mov	r3, r1
 801e00a:	4650      	mov	r0, sl
 801e00c:	4659      	mov	r1, fp
 801e00e:	f7e2 fb03 	bl	8000618 <__aeabi_dmul>
 801e012:	a325      	add	r3, pc, #148	; (adr r3, 801e0a8 <__kernel_sin+0x148>)
 801e014:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e018:	f7e2 f946 	bl	80002a8 <__aeabi_dsub>
 801e01c:	4642      	mov	r2, r8
 801e01e:	464b      	mov	r3, r9
 801e020:	f7e2 fafa 	bl	8000618 <__aeabi_dmul>
 801e024:	4602      	mov	r2, r0
 801e026:	460b      	mov	r3, r1
 801e028:	4620      	mov	r0, r4
 801e02a:	4629      	mov	r1, r5
 801e02c:	f7e2 f93e 	bl	80002ac <__adddf3>
 801e030:	4604      	mov	r4, r0
 801e032:	460d      	mov	r5, r1
 801e034:	ec45 4b10 	vmov	d0, r4, r5
 801e038:	b003      	add	sp, #12
 801e03a:	ecbd 8b04 	vpop	{d8-d9}
 801e03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e042:	4b1b      	ldr	r3, [pc, #108]	; (801e0b0 <__kernel_sin+0x150>)
 801e044:	ec51 0b18 	vmov	r0, r1, d8
 801e048:	2200      	movs	r2, #0
 801e04a:	f7e2 fae5 	bl	8000618 <__aeabi_dmul>
 801e04e:	4632      	mov	r2, r6
 801e050:	ec41 0b19 	vmov	d9, r0, r1
 801e054:	463b      	mov	r3, r7
 801e056:	4640      	mov	r0, r8
 801e058:	4649      	mov	r1, r9
 801e05a:	f7e2 fadd 	bl	8000618 <__aeabi_dmul>
 801e05e:	4602      	mov	r2, r0
 801e060:	460b      	mov	r3, r1
 801e062:	ec51 0b19 	vmov	r0, r1, d9
 801e066:	f7e2 f91f 	bl	80002a8 <__aeabi_dsub>
 801e06a:	4652      	mov	r2, sl
 801e06c:	465b      	mov	r3, fp
 801e06e:	f7e2 fad3 	bl	8000618 <__aeabi_dmul>
 801e072:	ec53 2b18 	vmov	r2, r3, d8
 801e076:	f7e2 f917 	bl	80002a8 <__aeabi_dsub>
 801e07a:	a30b      	add	r3, pc, #44	; (adr r3, 801e0a8 <__kernel_sin+0x148>)
 801e07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e080:	4606      	mov	r6, r0
 801e082:	460f      	mov	r7, r1
 801e084:	4640      	mov	r0, r8
 801e086:	4649      	mov	r1, r9
 801e088:	f7e2 fac6 	bl	8000618 <__aeabi_dmul>
 801e08c:	4602      	mov	r2, r0
 801e08e:	460b      	mov	r3, r1
 801e090:	4630      	mov	r0, r6
 801e092:	4639      	mov	r1, r7
 801e094:	f7e2 f90a 	bl	80002ac <__adddf3>
 801e098:	4602      	mov	r2, r0
 801e09a:	460b      	mov	r3, r1
 801e09c:	4620      	mov	r0, r4
 801e09e:	4629      	mov	r1, r5
 801e0a0:	f7e2 f902 	bl	80002a8 <__aeabi_dsub>
 801e0a4:	e7c4      	b.n	801e030 <__kernel_sin+0xd0>
 801e0a6:	bf00      	nop
 801e0a8:	55555549 	.word	0x55555549
 801e0ac:	3fc55555 	.word	0x3fc55555
 801e0b0:	3fe00000 	.word	0x3fe00000
 801e0b4:	5acfd57c 	.word	0x5acfd57c
 801e0b8:	3de5d93a 	.word	0x3de5d93a
 801e0bc:	8a2b9ceb 	.word	0x8a2b9ceb
 801e0c0:	3e5ae5e6 	.word	0x3e5ae5e6
 801e0c4:	57b1fe7d 	.word	0x57b1fe7d
 801e0c8:	3ec71de3 	.word	0x3ec71de3
 801e0cc:	19c161d5 	.word	0x19c161d5
 801e0d0:	3f2a01a0 	.word	0x3f2a01a0
 801e0d4:	1110f8a6 	.word	0x1110f8a6
 801e0d8:	3f811111 	.word	0x3f811111

0801e0dc <__kernel_cosf>:
 801e0dc:	ee10 3a10 	vmov	r3, s0
 801e0e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e0e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e0e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801e0ec:	da05      	bge.n	801e0fa <__kernel_cosf+0x1e>
 801e0ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e0f2:	ee17 2a90 	vmov	r2, s15
 801e0f6:	2a00      	cmp	r2, #0
 801e0f8:	d03d      	beq.n	801e176 <__kernel_cosf+0x9a>
 801e0fa:	ee60 5a00 	vmul.f32	s11, s0, s0
 801e0fe:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801e17c <__kernel_cosf+0xa0>
 801e102:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801e180 <__kernel_cosf+0xa4>
 801e106:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801e184 <__kernel_cosf+0xa8>
 801e10a:	4a1f      	ldr	r2, [pc, #124]	; (801e188 <__kernel_cosf+0xac>)
 801e10c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801e110:	4293      	cmp	r3, r2
 801e112:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801e18c <__kernel_cosf+0xb0>
 801e116:	eee7 7a25 	vfma.f32	s15, s14, s11
 801e11a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801e190 <__kernel_cosf+0xb4>
 801e11e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e122:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801e194 <__kernel_cosf+0xb8>
 801e126:	eee7 7a25 	vfma.f32	s15, s14, s11
 801e12a:	eeb0 7a66 	vmov.f32	s14, s13
 801e12e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801e132:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801e136:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801e13a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801e13e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801e142:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e146:	dc04      	bgt.n	801e152 <__kernel_cosf+0x76>
 801e148:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801e14c:	ee36 0a47 	vsub.f32	s0, s12, s14
 801e150:	4770      	bx	lr
 801e152:	4a11      	ldr	r2, [pc, #68]	; (801e198 <__kernel_cosf+0xbc>)
 801e154:	4293      	cmp	r3, r2
 801e156:	bfda      	itte	le
 801e158:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801e15c:	ee06 3a90 	vmovle	s13, r3
 801e160:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801e164:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e168:	ee36 0a66 	vsub.f32	s0, s12, s13
 801e16c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e170:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e174:	4770      	bx	lr
 801e176:	eeb0 0a46 	vmov.f32	s0, s12
 801e17a:	4770      	bx	lr
 801e17c:	ad47d74e 	.word	0xad47d74e
 801e180:	310f74f6 	.word	0x310f74f6
 801e184:	3d2aaaab 	.word	0x3d2aaaab
 801e188:	3e999999 	.word	0x3e999999
 801e18c:	b493f27c 	.word	0xb493f27c
 801e190:	37d00d01 	.word	0x37d00d01
 801e194:	bab60b61 	.word	0xbab60b61
 801e198:	3f480000 	.word	0x3f480000

0801e19c <__kernel_rem_pio2f>:
 801e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1a0:	ed2d 8b04 	vpush	{d8-d9}
 801e1a4:	b0d7      	sub	sp, #348	; 0x15c
 801e1a6:	4616      	mov	r6, r2
 801e1a8:	4698      	mov	r8, r3
 801e1aa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801e1ac:	4bbb      	ldr	r3, [pc, #748]	; (801e49c <__kernel_rem_pio2f+0x300>)
 801e1ae:	9001      	str	r0, [sp, #4]
 801e1b0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801e1b4:	1d33      	adds	r3, r6, #4
 801e1b6:	460d      	mov	r5, r1
 801e1b8:	f108 39ff 	add.w	r9, r8, #4294967295
 801e1bc:	db29      	blt.n	801e212 <__kernel_rem_pio2f+0x76>
 801e1be:	1ef1      	subs	r1, r6, #3
 801e1c0:	bf48      	it	mi
 801e1c2:	1d31      	addmi	r1, r6, #4
 801e1c4:	10c9      	asrs	r1, r1, #3
 801e1c6:	1c4c      	adds	r4, r1, #1
 801e1c8:	00e3      	lsls	r3, r4, #3
 801e1ca:	9302      	str	r3, [sp, #8]
 801e1cc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801e1ce:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801e4ac <__kernel_rem_pio2f+0x310>
 801e1d2:	eba1 0009 	sub.w	r0, r1, r9
 801e1d6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801e1da:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801e1de:	eb07 0c09 	add.w	ip, r7, r9
 801e1e2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801e1e6:	2300      	movs	r3, #0
 801e1e8:	4563      	cmp	r3, ip
 801e1ea:	dd14      	ble.n	801e216 <__kernel_rem_pio2f+0x7a>
 801e1ec:	ab1a      	add	r3, sp, #104	; 0x68
 801e1ee:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801e1f2:	46cc      	mov	ip, r9
 801e1f4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801e1f8:	f1c8 0b01 	rsb	fp, r8, #1
 801e1fc:	eb0b 020c 	add.w	r2, fp, ip
 801e200:	4297      	cmp	r7, r2
 801e202:	db27      	blt.n	801e254 <__kernel_rem_pio2f+0xb8>
 801e204:	f8dd e004 	ldr.w	lr, [sp, #4]
 801e208:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801e4ac <__kernel_rem_pio2f+0x310>
 801e20c:	4618      	mov	r0, r3
 801e20e:	2200      	movs	r2, #0
 801e210:	e016      	b.n	801e240 <__kernel_rem_pio2f+0xa4>
 801e212:	2100      	movs	r1, #0
 801e214:	e7d7      	b.n	801e1c6 <__kernel_rem_pio2f+0x2a>
 801e216:	42d8      	cmn	r0, r3
 801e218:	bf5d      	ittte	pl
 801e21a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801e21e:	ee07 2a90 	vmovpl	s15, r2
 801e222:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801e226:	eef0 7a47 	vmovmi.f32	s15, s14
 801e22a:	ecea 7a01 	vstmia	sl!, {s15}
 801e22e:	3301      	adds	r3, #1
 801e230:	e7da      	b.n	801e1e8 <__kernel_rem_pio2f+0x4c>
 801e232:	ecfe 6a01 	vldmia	lr!, {s13}
 801e236:	ed90 7a00 	vldr	s14, [r0]
 801e23a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e23e:	3201      	adds	r2, #1
 801e240:	454a      	cmp	r2, r9
 801e242:	f1a0 0004 	sub.w	r0, r0, #4
 801e246:	ddf4      	ble.n	801e232 <__kernel_rem_pio2f+0x96>
 801e248:	ecea 7a01 	vstmia	sl!, {s15}
 801e24c:	3304      	adds	r3, #4
 801e24e:	f10c 0c01 	add.w	ip, ip, #1
 801e252:	e7d3      	b.n	801e1fc <__kernel_rem_pio2f+0x60>
 801e254:	ab06      	add	r3, sp, #24
 801e256:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801e25a:	9304      	str	r3, [sp, #16]
 801e25c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801e25e:	eddf 8a92 	vldr	s17, [pc, #584]	; 801e4a8 <__kernel_rem_pio2f+0x30c>
 801e262:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801e4a4 <__kernel_rem_pio2f+0x308>
 801e266:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801e26a:	9303      	str	r3, [sp, #12]
 801e26c:	46ba      	mov	sl, r7
 801e26e:	ab56      	add	r3, sp, #344	; 0x158
 801e270:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801e274:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801e278:	ab06      	add	r3, sp, #24
 801e27a:	4618      	mov	r0, r3
 801e27c:	4652      	mov	r2, sl
 801e27e:	2a00      	cmp	r2, #0
 801e280:	dc51      	bgt.n	801e326 <__kernel_rem_pio2f+0x18a>
 801e282:	4620      	mov	r0, r4
 801e284:	9305      	str	r3, [sp, #20]
 801e286:	f000 fec7 	bl	801f018 <scalbnf>
 801e28a:	eeb0 8a40 	vmov.f32	s16, s0
 801e28e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801e292:	ee28 0a00 	vmul.f32	s0, s16, s0
 801e296:	f000 fe7d 	bl	801ef94 <floorf>
 801e29a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801e29e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801e2a2:	2c00      	cmp	r4, #0
 801e2a4:	9b05      	ldr	r3, [sp, #20]
 801e2a6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801e2aa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801e2ae:	edcd 7a00 	vstr	s15, [sp]
 801e2b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e2b6:	dd4b      	ble.n	801e350 <__kernel_rem_pio2f+0x1b4>
 801e2b8:	f10a 3cff 	add.w	ip, sl, #4294967295
 801e2bc:	aa06      	add	r2, sp, #24
 801e2be:	f1c4 0e08 	rsb	lr, r4, #8
 801e2c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801e2c6:	ee17 1a90 	vmov	r1, s15
 801e2ca:	fa42 f00e 	asr.w	r0, r2, lr
 801e2ce:	4401      	add	r1, r0
 801e2d0:	9100      	str	r1, [sp, #0]
 801e2d2:	fa00 f00e 	lsl.w	r0, r0, lr
 801e2d6:	a906      	add	r1, sp, #24
 801e2d8:	1a12      	subs	r2, r2, r0
 801e2da:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801e2de:	f1c4 0007 	rsb	r0, r4, #7
 801e2e2:	fa42 fb00 	asr.w	fp, r2, r0
 801e2e6:	f1bb 0f00 	cmp.w	fp, #0
 801e2ea:	dd43      	ble.n	801e374 <__kernel_rem_pio2f+0x1d8>
 801e2ec:	9a00      	ldr	r2, [sp, #0]
 801e2ee:	f04f 0e00 	mov.w	lr, #0
 801e2f2:	3201      	adds	r2, #1
 801e2f4:	9200      	str	r2, [sp, #0]
 801e2f6:	4670      	mov	r0, lr
 801e2f8:	45f2      	cmp	sl, lr
 801e2fa:	dc6c      	bgt.n	801e3d6 <__kernel_rem_pio2f+0x23a>
 801e2fc:	2c00      	cmp	r4, #0
 801e2fe:	dd04      	ble.n	801e30a <__kernel_rem_pio2f+0x16e>
 801e300:	2c01      	cmp	r4, #1
 801e302:	d079      	beq.n	801e3f8 <__kernel_rem_pio2f+0x25c>
 801e304:	2c02      	cmp	r4, #2
 801e306:	f000 8082 	beq.w	801e40e <__kernel_rem_pio2f+0x272>
 801e30a:	f1bb 0f02 	cmp.w	fp, #2
 801e30e:	d131      	bne.n	801e374 <__kernel_rem_pio2f+0x1d8>
 801e310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e314:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e318:	b360      	cbz	r0, 801e374 <__kernel_rem_pio2f+0x1d8>
 801e31a:	4620      	mov	r0, r4
 801e31c:	f000 fe7c 	bl	801f018 <scalbnf>
 801e320:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e324:	e026      	b.n	801e374 <__kernel_rem_pio2f+0x1d8>
 801e326:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e32a:	3a01      	subs	r2, #1
 801e32c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e330:	a942      	add	r1, sp, #264	; 0x108
 801e332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e336:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801e33a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e33e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e342:	eca0 0a01 	vstmia	r0!, {s0}
 801e346:	ed9c 0a00 	vldr	s0, [ip]
 801e34a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e34e:	e796      	b.n	801e27e <__kernel_rem_pio2f+0xe2>
 801e350:	d107      	bne.n	801e362 <__kernel_rem_pio2f+0x1c6>
 801e352:	f10a 32ff 	add.w	r2, sl, #4294967295
 801e356:	a906      	add	r1, sp, #24
 801e358:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801e35c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801e360:	e7c1      	b.n	801e2e6 <__kernel_rem_pio2f+0x14a>
 801e362:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e366:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e36e:	da2f      	bge.n	801e3d0 <__kernel_rem_pio2f+0x234>
 801e370:	f04f 0b00 	mov.w	fp, #0
 801e374:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e37c:	f040 8098 	bne.w	801e4b0 <__kernel_rem_pio2f+0x314>
 801e380:	f10a 33ff 	add.w	r3, sl, #4294967295
 801e384:	469c      	mov	ip, r3
 801e386:	2200      	movs	r2, #0
 801e388:	45bc      	cmp	ip, r7
 801e38a:	da48      	bge.n	801e41e <__kernel_rem_pio2f+0x282>
 801e38c:	2a00      	cmp	r2, #0
 801e38e:	d05f      	beq.n	801e450 <__kernel_rem_pio2f+0x2b4>
 801e390:	aa06      	add	r2, sp, #24
 801e392:	3c08      	subs	r4, #8
 801e394:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801e398:	2900      	cmp	r1, #0
 801e39a:	d07d      	beq.n	801e498 <__kernel_rem_pio2f+0x2fc>
 801e39c:	4620      	mov	r0, r4
 801e39e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e3a2:	9301      	str	r3, [sp, #4]
 801e3a4:	f000 fe38 	bl	801f018 <scalbnf>
 801e3a8:	9b01      	ldr	r3, [sp, #4]
 801e3aa:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801e4a8 <__kernel_rem_pio2f+0x30c>
 801e3ae:	4619      	mov	r1, r3
 801e3b0:	2900      	cmp	r1, #0
 801e3b2:	f280 80af 	bge.w	801e514 <__kernel_rem_pio2f+0x378>
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	2400      	movs	r4, #0
 801e3ba:	2800      	cmp	r0, #0
 801e3bc:	f2c0 80d0 	blt.w	801e560 <__kernel_rem_pio2f+0x3c4>
 801e3c0:	a942      	add	r1, sp, #264	; 0x108
 801e3c2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801e3c6:	4a36      	ldr	r2, [pc, #216]	; (801e4a0 <__kernel_rem_pio2f+0x304>)
 801e3c8:	eddf 7a38 	vldr	s15, [pc, #224]	; 801e4ac <__kernel_rem_pio2f+0x310>
 801e3cc:	2100      	movs	r1, #0
 801e3ce:	e0bb      	b.n	801e548 <__kernel_rem_pio2f+0x3ac>
 801e3d0:	f04f 0b02 	mov.w	fp, #2
 801e3d4:	e78a      	b.n	801e2ec <__kernel_rem_pio2f+0x150>
 801e3d6:	681a      	ldr	r2, [r3, #0]
 801e3d8:	b948      	cbnz	r0, 801e3ee <__kernel_rem_pio2f+0x252>
 801e3da:	b11a      	cbz	r2, 801e3e4 <__kernel_rem_pio2f+0x248>
 801e3dc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e3e0:	601a      	str	r2, [r3, #0]
 801e3e2:	2201      	movs	r2, #1
 801e3e4:	f10e 0e01 	add.w	lr, lr, #1
 801e3e8:	3304      	adds	r3, #4
 801e3ea:	4610      	mov	r0, r2
 801e3ec:	e784      	b.n	801e2f8 <__kernel_rem_pio2f+0x15c>
 801e3ee:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801e3f2:	601a      	str	r2, [r3, #0]
 801e3f4:	4602      	mov	r2, r0
 801e3f6:	e7f5      	b.n	801e3e4 <__kernel_rem_pio2f+0x248>
 801e3f8:	f10a 3cff 	add.w	ip, sl, #4294967295
 801e3fc:	ab06      	add	r3, sp, #24
 801e3fe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e406:	aa06      	add	r2, sp, #24
 801e408:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801e40c:	e77d      	b.n	801e30a <__kernel_rem_pio2f+0x16e>
 801e40e:	f10a 3cff 	add.w	ip, sl, #4294967295
 801e412:	ab06      	add	r3, sp, #24
 801e414:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e41c:	e7f3      	b.n	801e406 <__kernel_rem_pio2f+0x26a>
 801e41e:	a906      	add	r1, sp, #24
 801e420:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801e424:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e428:	4302      	orrs	r2, r0
 801e42a:	e7ad      	b.n	801e388 <__kernel_rem_pio2f+0x1ec>
 801e42c:	3001      	adds	r0, #1
 801e42e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801e432:	2a00      	cmp	r2, #0
 801e434:	d0fa      	beq.n	801e42c <__kernel_rem_pio2f+0x290>
 801e436:	a91a      	add	r1, sp, #104	; 0x68
 801e438:	eb0a 0208 	add.w	r2, sl, r8
 801e43c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801e440:	f10a 0301 	add.w	r3, sl, #1
 801e444:	eb0a 0100 	add.w	r1, sl, r0
 801e448:	4299      	cmp	r1, r3
 801e44a:	da04      	bge.n	801e456 <__kernel_rem_pio2f+0x2ba>
 801e44c:	468a      	mov	sl, r1
 801e44e:	e70e      	b.n	801e26e <__kernel_rem_pio2f+0xd2>
 801e450:	9b04      	ldr	r3, [sp, #16]
 801e452:	2001      	movs	r0, #1
 801e454:	e7eb      	b.n	801e42e <__kernel_rem_pio2f+0x292>
 801e456:	9803      	ldr	r0, [sp, #12]
 801e458:	f8dd c004 	ldr.w	ip, [sp, #4]
 801e45c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801e460:	9000      	str	r0, [sp, #0]
 801e462:	ee07 0a90 	vmov	s15, r0
 801e466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e46a:	2000      	movs	r0, #0
 801e46c:	ece2 7a01 	vstmia	r2!, {s15}
 801e470:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801e4ac <__kernel_rem_pio2f+0x310>
 801e474:	4696      	mov	lr, r2
 801e476:	4548      	cmp	r0, r9
 801e478:	dd06      	ble.n	801e488 <__kernel_rem_pio2f+0x2ec>
 801e47a:	a842      	add	r0, sp, #264	; 0x108
 801e47c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801e480:	edc0 7a00 	vstr	s15, [r0]
 801e484:	3301      	adds	r3, #1
 801e486:	e7df      	b.n	801e448 <__kernel_rem_pio2f+0x2ac>
 801e488:	ecfc 6a01 	vldmia	ip!, {s13}
 801e48c:	ed3e 7a01 	vldmdb	lr!, {s14}
 801e490:	3001      	adds	r0, #1
 801e492:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e496:	e7ee      	b.n	801e476 <__kernel_rem_pio2f+0x2da>
 801e498:	3b01      	subs	r3, #1
 801e49a:	e779      	b.n	801e390 <__kernel_rem_pio2f+0x1f4>
 801e49c:	08022784 	.word	0x08022784
 801e4a0:	08022758 	.word	0x08022758
 801e4a4:	43800000 	.word	0x43800000
 801e4a8:	3b800000 	.word	0x3b800000
 801e4ac:	00000000 	.word	0x00000000
 801e4b0:	9b02      	ldr	r3, [sp, #8]
 801e4b2:	eeb0 0a48 	vmov.f32	s0, s16
 801e4b6:	1b98      	subs	r0, r3, r6
 801e4b8:	f000 fdae 	bl	801f018 <scalbnf>
 801e4bc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801e4a4 <__kernel_rem_pio2f+0x308>
 801e4c0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4c8:	db1b      	blt.n	801e502 <__kernel_rem_pio2f+0x366>
 801e4ca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801e4a8 <__kernel_rem_pio2f+0x30c>
 801e4ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e4d2:	aa06      	add	r2, sp, #24
 801e4d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e4d8:	a906      	add	r1, sp, #24
 801e4da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4de:	3408      	adds	r4, #8
 801e4e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e4e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e4e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e4ec:	ee10 3a10 	vmov	r3, s0
 801e4f0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801e4f4:	ee17 2a90 	vmov	r2, s15
 801e4f8:	f10a 0301 	add.w	r3, sl, #1
 801e4fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801e500:	e74c      	b.n	801e39c <__kernel_rem_pio2f+0x200>
 801e502:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e506:	aa06      	add	r2, sp, #24
 801e508:	ee10 3a10 	vmov	r3, s0
 801e50c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801e510:	4653      	mov	r3, sl
 801e512:	e743      	b.n	801e39c <__kernel_rem_pio2f+0x200>
 801e514:	aa42      	add	r2, sp, #264	; 0x108
 801e516:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801e51a:	aa06      	add	r2, sp, #24
 801e51c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801e520:	9201      	str	r2, [sp, #4]
 801e522:	ee07 2a90 	vmov	s15, r2
 801e526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e52a:	3901      	subs	r1, #1
 801e52c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e530:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e534:	edc0 7a00 	vstr	s15, [r0]
 801e538:	e73a      	b.n	801e3b0 <__kernel_rem_pio2f+0x214>
 801e53a:	ecf2 6a01 	vldmia	r2!, {s13}
 801e53e:	ecb6 7a01 	vldmia	r6!, {s14}
 801e542:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e546:	3101      	adds	r1, #1
 801e548:	42b9      	cmp	r1, r7
 801e54a:	dc01      	bgt.n	801e550 <__kernel_rem_pio2f+0x3b4>
 801e54c:	428c      	cmp	r4, r1
 801e54e:	daf4      	bge.n	801e53a <__kernel_rem_pio2f+0x39e>
 801e550:	aa56      	add	r2, sp, #344	; 0x158
 801e552:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801e556:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801e55a:	3801      	subs	r0, #1
 801e55c:	3401      	adds	r4, #1
 801e55e:	e72c      	b.n	801e3ba <__kernel_rem_pio2f+0x21e>
 801e560:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801e562:	2a02      	cmp	r2, #2
 801e564:	dc0a      	bgt.n	801e57c <__kernel_rem_pio2f+0x3e0>
 801e566:	2a00      	cmp	r2, #0
 801e568:	dc61      	bgt.n	801e62e <__kernel_rem_pio2f+0x492>
 801e56a:	d03c      	beq.n	801e5e6 <__kernel_rem_pio2f+0x44a>
 801e56c:	9b00      	ldr	r3, [sp, #0]
 801e56e:	f003 0007 	and.w	r0, r3, #7
 801e572:	b057      	add	sp, #348	; 0x15c
 801e574:	ecbd 8b04 	vpop	{d8-d9}
 801e578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e57c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801e57e:	2a03      	cmp	r2, #3
 801e580:	d1f4      	bne.n	801e56c <__kernel_rem_pio2f+0x3d0>
 801e582:	aa2e      	add	r2, sp, #184	; 0xb8
 801e584:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e588:	4608      	mov	r0, r1
 801e58a:	461c      	mov	r4, r3
 801e58c:	2c00      	cmp	r4, #0
 801e58e:	f1a0 0004 	sub.w	r0, r0, #4
 801e592:	dc59      	bgt.n	801e648 <__kernel_rem_pio2f+0x4ac>
 801e594:	4618      	mov	r0, r3
 801e596:	2801      	cmp	r0, #1
 801e598:	f1a1 0104 	sub.w	r1, r1, #4
 801e59c:	dc64      	bgt.n	801e668 <__kernel_rem_pio2f+0x4cc>
 801e59e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801e4ac <__kernel_rem_pio2f+0x310>
 801e5a2:	2b01      	cmp	r3, #1
 801e5a4:	dc70      	bgt.n	801e688 <__kernel_rem_pio2f+0x4ec>
 801e5a6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801e5aa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801e5ae:	f1bb 0f00 	cmp.w	fp, #0
 801e5b2:	d172      	bne.n	801e69a <__kernel_rem_pio2f+0x4fe>
 801e5b4:	edc5 6a00 	vstr	s13, [r5]
 801e5b8:	ed85 7a01 	vstr	s14, [r5, #4]
 801e5bc:	edc5 7a02 	vstr	s15, [r5, #8]
 801e5c0:	e7d4      	b.n	801e56c <__kernel_rem_pio2f+0x3d0>
 801e5c2:	aa2e      	add	r2, sp, #184	; 0xb8
 801e5c4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e5c8:	ed91 7a00 	vldr	s14, [r1]
 801e5cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e5d0:	3b01      	subs	r3, #1
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	daf5      	bge.n	801e5c2 <__kernel_rem_pio2f+0x426>
 801e5d6:	f1bb 0f00 	cmp.w	fp, #0
 801e5da:	d001      	beq.n	801e5e0 <__kernel_rem_pio2f+0x444>
 801e5dc:	eef1 7a67 	vneg.f32	s15, s15
 801e5e0:	edc5 7a00 	vstr	s15, [r5]
 801e5e4:	e7c2      	b.n	801e56c <__kernel_rem_pio2f+0x3d0>
 801e5e6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801e4ac <__kernel_rem_pio2f+0x310>
 801e5ea:	e7f2      	b.n	801e5d2 <__kernel_rem_pio2f+0x436>
 801e5ec:	aa2e      	add	r2, sp, #184	; 0xb8
 801e5ee:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801e5f2:	edd0 7a00 	vldr	s15, [r0]
 801e5f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e5fa:	3901      	subs	r1, #1
 801e5fc:	2900      	cmp	r1, #0
 801e5fe:	daf5      	bge.n	801e5ec <__kernel_rem_pio2f+0x450>
 801e600:	f1bb 0f00 	cmp.w	fp, #0
 801e604:	d017      	beq.n	801e636 <__kernel_rem_pio2f+0x49a>
 801e606:	eef1 7a47 	vneg.f32	s15, s14
 801e60a:	edc5 7a00 	vstr	s15, [r5]
 801e60e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801e612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e616:	a82f      	add	r0, sp, #188	; 0xbc
 801e618:	2101      	movs	r1, #1
 801e61a:	428b      	cmp	r3, r1
 801e61c:	da0e      	bge.n	801e63c <__kernel_rem_pio2f+0x4a0>
 801e61e:	f1bb 0f00 	cmp.w	fp, #0
 801e622:	d001      	beq.n	801e628 <__kernel_rem_pio2f+0x48c>
 801e624:	eef1 7a67 	vneg.f32	s15, s15
 801e628:	edc5 7a01 	vstr	s15, [r5, #4]
 801e62c:	e79e      	b.n	801e56c <__kernel_rem_pio2f+0x3d0>
 801e62e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801e4ac <__kernel_rem_pio2f+0x310>
 801e632:	4619      	mov	r1, r3
 801e634:	e7e2      	b.n	801e5fc <__kernel_rem_pio2f+0x460>
 801e636:	eef0 7a47 	vmov.f32	s15, s14
 801e63a:	e7e6      	b.n	801e60a <__kernel_rem_pio2f+0x46e>
 801e63c:	ecb0 7a01 	vldmia	r0!, {s14}
 801e640:	3101      	adds	r1, #1
 801e642:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e646:	e7e8      	b.n	801e61a <__kernel_rem_pio2f+0x47e>
 801e648:	edd0 7a00 	vldr	s15, [r0]
 801e64c:	edd0 6a01 	vldr	s13, [r0, #4]
 801e650:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e654:	3c01      	subs	r4, #1
 801e656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e65a:	ed80 7a00 	vstr	s14, [r0]
 801e65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e662:	edc0 7a01 	vstr	s15, [r0, #4]
 801e666:	e791      	b.n	801e58c <__kernel_rem_pio2f+0x3f0>
 801e668:	edd1 7a00 	vldr	s15, [r1]
 801e66c:	edd1 6a01 	vldr	s13, [r1, #4]
 801e670:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e674:	3801      	subs	r0, #1
 801e676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e67a:	ed81 7a00 	vstr	s14, [r1]
 801e67e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e682:	edc1 7a01 	vstr	s15, [r1, #4]
 801e686:	e786      	b.n	801e596 <__kernel_rem_pio2f+0x3fa>
 801e688:	aa2e      	add	r2, sp, #184	; 0xb8
 801e68a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801e68e:	ed91 7a00 	vldr	s14, [r1]
 801e692:	3b01      	subs	r3, #1
 801e694:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e698:	e783      	b.n	801e5a2 <__kernel_rem_pio2f+0x406>
 801e69a:	eef1 6a66 	vneg.f32	s13, s13
 801e69e:	eeb1 7a47 	vneg.f32	s14, s14
 801e6a2:	edc5 6a00 	vstr	s13, [r5]
 801e6a6:	ed85 7a01 	vstr	s14, [r5, #4]
 801e6aa:	eef1 7a67 	vneg.f32	s15, s15
 801e6ae:	e785      	b.n	801e5bc <__kernel_rem_pio2f+0x420>

0801e6b0 <__kernel_sinf>:
 801e6b0:	ee10 3a10 	vmov	r3, s0
 801e6b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e6b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801e6bc:	da04      	bge.n	801e6c8 <__kernel_sinf+0x18>
 801e6be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801e6c2:	ee17 3a90 	vmov	r3, s15
 801e6c6:	b35b      	cbz	r3, 801e720 <__kernel_sinf+0x70>
 801e6c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801e6cc:	eddf 7a15 	vldr	s15, [pc, #84]	; 801e724 <__kernel_sinf+0x74>
 801e6d0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801e728 <__kernel_sinf+0x78>
 801e6d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e6d8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801e72c <__kernel_sinf+0x7c>
 801e6dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e6e0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801e730 <__kernel_sinf+0x80>
 801e6e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801e6e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 801e734 <__kernel_sinf+0x84>
 801e6ec:	ee60 6a07 	vmul.f32	s13, s0, s14
 801e6f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801e6f4:	b930      	cbnz	r0, 801e704 <__kernel_sinf+0x54>
 801e6f6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801e738 <__kernel_sinf+0x88>
 801e6fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 801e6fe:	eea6 0a26 	vfma.f32	s0, s12, s13
 801e702:	4770      	bx	lr
 801e704:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801e708:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801e70c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801e710:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801e714:	eddf 7a09 	vldr	s15, [pc, #36]	; 801e73c <__kernel_sinf+0x8c>
 801e718:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801e71c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e720:	4770      	bx	lr
 801e722:	bf00      	nop
 801e724:	2f2ec9d3 	.word	0x2f2ec9d3
 801e728:	b2d72f34 	.word	0xb2d72f34
 801e72c:	3638ef1b 	.word	0x3638ef1b
 801e730:	b9500d01 	.word	0xb9500d01
 801e734:	3c088889 	.word	0x3c088889
 801e738:	be2aaaab 	.word	0xbe2aaaab
 801e73c:	3e2aaaab 	.word	0x3e2aaaab

0801e740 <__kernel_tanf>:
 801e740:	b508      	push	{r3, lr}
 801e742:	ee10 3a10 	vmov	r3, s0
 801e746:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801e74a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801e74e:	eef0 7a40 	vmov.f32	s15, s0
 801e752:	da17      	bge.n	801e784 <__kernel_tanf+0x44>
 801e754:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801e758:	ee17 1a10 	vmov	r1, s14
 801e75c:	bb41      	cbnz	r1, 801e7b0 <__kernel_tanf+0x70>
 801e75e:	1c43      	adds	r3, r0, #1
 801e760:	4313      	orrs	r3, r2
 801e762:	d108      	bne.n	801e776 <__kernel_tanf+0x36>
 801e764:	f7fd fa64 	bl	801bc30 <fabsf>
 801e768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e76c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e770:	eeb0 0a67 	vmov.f32	s0, s15
 801e774:	bd08      	pop	{r3, pc}
 801e776:	2801      	cmp	r0, #1
 801e778:	d0fa      	beq.n	801e770 <__kernel_tanf+0x30>
 801e77a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e77e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e782:	e7f5      	b.n	801e770 <__kernel_tanf+0x30>
 801e784:	494d      	ldr	r1, [pc, #308]	; (801e8bc <__kernel_tanf+0x17c>)
 801e786:	428a      	cmp	r2, r1
 801e788:	db12      	blt.n	801e7b0 <__kernel_tanf+0x70>
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	bfb8      	it	lt
 801e78e:	eef1 7a40 	vneglt.f32	s15, s0
 801e792:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 801e8c0 <__kernel_tanf+0x180>
 801e796:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e79a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801e8c4 <__kernel_tanf+0x184>
 801e79e:	bfb8      	it	lt
 801e7a0:	eef1 0a60 	vneglt.f32	s1, s1
 801e7a4:	ee70 0a60 	vsub.f32	s1, s0, s1
 801e7a8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801e7ac:	eddf 0a46 	vldr	s1, [pc, #280]	; 801e8c8 <__kernel_tanf+0x188>
 801e7b0:	eddf 5a46 	vldr	s11, [pc, #280]	; 801e8cc <__kernel_tanf+0x18c>
 801e7b4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 801e8d0 <__kernel_tanf+0x190>
 801e7b8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 801e8d4 <__kernel_tanf+0x194>
 801e7bc:	493f      	ldr	r1, [pc, #252]	; (801e8bc <__kernel_tanf+0x17c>)
 801e7be:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e7c2:	428a      	cmp	r2, r1
 801e7c4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e7c8:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e7cc:	eddf 5a42 	vldr	s11, [pc, #264]	; 801e8d8 <__kernel_tanf+0x198>
 801e7d0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e7d4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801e8dc <__kernel_tanf+0x19c>
 801e7d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e7dc:	eddf 5a40 	vldr	s11, [pc, #256]	; 801e8e0 <__kernel_tanf+0x1a0>
 801e7e0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e7e4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801e8e4 <__kernel_tanf+0x1a4>
 801e7e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e7ec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801e8e8 <__kernel_tanf+0x1a8>
 801e7f0:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e7f4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801e8ec <__kernel_tanf+0x1ac>
 801e7f8:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e7fc:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801e8f0 <__kernel_tanf+0x1b0>
 801e800:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e804:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801e8f4 <__kernel_tanf+0x1b4>
 801e808:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e80c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801e8f8 <__kernel_tanf+0x1b8>
 801e810:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e814:	eeb0 7a65 	vmov.f32	s14, s11
 801e818:	eea7 6a26 	vfma.f32	s12, s14, s13
 801e81c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801e820:	eeb0 7a46 	vmov.f32	s14, s12
 801e824:	eeb0 6a60 	vmov.f32	s12, s1
 801e828:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e82c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801e8fc <__kernel_tanf+0x1bc>
 801e830:	eee6 0a26 	vfma.f32	s1, s12, s13
 801e834:	eee5 0a87 	vfma.f32	s1, s11, s14
 801e838:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801e83c:	db1d      	blt.n	801e87a <__kernel_tanf+0x13a>
 801e83e:	ee06 0a90 	vmov	s13, r0
 801e842:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801e846:	ee27 6a07 	vmul.f32	s12, s14, s14
 801e84a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801e84e:	179b      	asrs	r3, r3, #30
 801e850:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801e854:	f003 0302 	and.w	r3, r3, #2
 801e858:	f1c3 0301 	rsb	r3, r3, #1
 801e85c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801e860:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801e864:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e868:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e86c:	ee07 3a90 	vmov	s15, r3
 801e870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e874:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e878:	e77a      	b.n	801e770 <__kernel_tanf+0x30>
 801e87a:	2801      	cmp	r0, #1
 801e87c:	d01b      	beq.n	801e8b6 <__kernel_tanf+0x176>
 801e87e:	4b20      	ldr	r3, [pc, #128]	; (801e900 <__kernel_tanf+0x1c0>)
 801e880:	ee17 2a10 	vmov	r2, s14
 801e884:	401a      	ands	r2, r3
 801e886:	ee06 2a10 	vmov	s12, r2
 801e88a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801e88e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e892:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801e896:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801e89a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e89e:	ee16 2a90 	vmov	r2, s13
 801e8a2:	4013      	ands	r3, r2
 801e8a4:	ee07 3a90 	vmov	s15, r3
 801e8a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e8ac:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801e8b0:	eee7 7a26 	vfma.f32	s15, s14, s13
 801e8b4:	e75c      	b.n	801e770 <__kernel_tanf+0x30>
 801e8b6:	eef0 7a47 	vmov.f32	s15, s14
 801e8ba:	e759      	b.n	801e770 <__kernel_tanf+0x30>
 801e8bc:	3f2ca140 	.word	0x3f2ca140
 801e8c0:	3f490fda 	.word	0x3f490fda
 801e8c4:	33222168 	.word	0x33222168
 801e8c8:	00000000 	.word	0x00000000
 801e8cc:	b79bae5f 	.word	0xb79bae5f
 801e8d0:	38a3f445 	.word	0x38a3f445
 801e8d4:	37d95384 	.word	0x37d95384
 801e8d8:	3a1a26c8 	.word	0x3a1a26c8
 801e8dc:	3b6b6916 	.word	0x3b6b6916
 801e8e0:	3cb327a4 	.word	0x3cb327a4
 801e8e4:	3e088889 	.word	0x3e088889
 801e8e8:	3895c07a 	.word	0x3895c07a
 801e8ec:	398137b9 	.word	0x398137b9
 801e8f0:	3abede48 	.word	0x3abede48
 801e8f4:	3c11371f 	.word	0x3c11371f
 801e8f8:	3d5d0dd1 	.word	0x3d5d0dd1
 801e8fc:	3eaaaaab 	.word	0x3eaaaaab
 801e900:	fffff000 	.word	0xfffff000
 801e904:	00000000 	.word	0x00000000

0801e908 <atan>:
 801e908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e90c:	ec55 4b10 	vmov	r4, r5, d0
 801e910:	4bc3      	ldr	r3, [pc, #780]	; (801ec20 <atan+0x318>)
 801e912:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e916:	429e      	cmp	r6, r3
 801e918:	46ab      	mov	fp, r5
 801e91a:	dd18      	ble.n	801e94e <atan+0x46>
 801e91c:	4bc1      	ldr	r3, [pc, #772]	; (801ec24 <atan+0x31c>)
 801e91e:	429e      	cmp	r6, r3
 801e920:	dc01      	bgt.n	801e926 <atan+0x1e>
 801e922:	d109      	bne.n	801e938 <atan+0x30>
 801e924:	b144      	cbz	r4, 801e938 <atan+0x30>
 801e926:	4622      	mov	r2, r4
 801e928:	462b      	mov	r3, r5
 801e92a:	4620      	mov	r0, r4
 801e92c:	4629      	mov	r1, r5
 801e92e:	f7e1 fcbd 	bl	80002ac <__adddf3>
 801e932:	4604      	mov	r4, r0
 801e934:	460d      	mov	r5, r1
 801e936:	e006      	b.n	801e946 <atan+0x3e>
 801e938:	f1bb 0f00 	cmp.w	fp, #0
 801e93c:	f300 8131 	bgt.w	801eba2 <atan+0x29a>
 801e940:	a59b      	add	r5, pc, #620	; (adr r5, 801ebb0 <atan+0x2a8>)
 801e942:	e9d5 4500 	ldrd	r4, r5, [r5]
 801e946:	ec45 4b10 	vmov	d0, r4, r5
 801e94a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e94e:	4bb6      	ldr	r3, [pc, #728]	; (801ec28 <atan+0x320>)
 801e950:	429e      	cmp	r6, r3
 801e952:	dc14      	bgt.n	801e97e <atan+0x76>
 801e954:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801e958:	429e      	cmp	r6, r3
 801e95a:	dc0d      	bgt.n	801e978 <atan+0x70>
 801e95c:	a396      	add	r3, pc, #600	; (adr r3, 801ebb8 <atan+0x2b0>)
 801e95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e962:	ee10 0a10 	vmov	r0, s0
 801e966:	4629      	mov	r1, r5
 801e968:	f7e1 fca0 	bl	80002ac <__adddf3>
 801e96c:	4baf      	ldr	r3, [pc, #700]	; (801ec2c <atan+0x324>)
 801e96e:	2200      	movs	r2, #0
 801e970:	f7e2 f8e2 	bl	8000b38 <__aeabi_dcmpgt>
 801e974:	2800      	cmp	r0, #0
 801e976:	d1e6      	bne.n	801e946 <atan+0x3e>
 801e978:	f04f 3aff 	mov.w	sl, #4294967295
 801e97c:	e02b      	b.n	801e9d6 <atan+0xce>
 801e97e:	f000 f963 	bl	801ec48 <fabs>
 801e982:	4bab      	ldr	r3, [pc, #684]	; (801ec30 <atan+0x328>)
 801e984:	429e      	cmp	r6, r3
 801e986:	ec55 4b10 	vmov	r4, r5, d0
 801e98a:	f300 80bf 	bgt.w	801eb0c <atan+0x204>
 801e98e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801e992:	429e      	cmp	r6, r3
 801e994:	f300 80a0 	bgt.w	801ead8 <atan+0x1d0>
 801e998:	ee10 2a10 	vmov	r2, s0
 801e99c:	ee10 0a10 	vmov	r0, s0
 801e9a0:	462b      	mov	r3, r5
 801e9a2:	4629      	mov	r1, r5
 801e9a4:	f7e1 fc82 	bl	80002ac <__adddf3>
 801e9a8:	4ba0      	ldr	r3, [pc, #640]	; (801ec2c <atan+0x324>)
 801e9aa:	2200      	movs	r2, #0
 801e9ac:	f7e1 fc7c 	bl	80002a8 <__aeabi_dsub>
 801e9b0:	2200      	movs	r2, #0
 801e9b2:	4606      	mov	r6, r0
 801e9b4:	460f      	mov	r7, r1
 801e9b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e9ba:	4620      	mov	r0, r4
 801e9bc:	4629      	mov	r1, r5
 801e9be:	f7e1 fc75 	bl	80002ac <__adddf3>
 801e9c2:	4602      	mov	r2, r0
 801e9c4:	460b      	mov	r3, r1
 801e9c6:	4630      	mov	r0, r6
 801e9c8:	4639      	mov	r1, r7
 801e9ca:	f7e1 ff4f 	bl	800086c <__aeabi_ddiv>
 801e9ce:	f04f 0a00 	mov.w	sl, #0
 801e9d2:	4604      	mov	r4, r0
 801e9d4:	460d      	mov	r5, r1
 801e9d6:	4622      	mov	r2, r4
 801e9d8:	462b      	mov	r3, r5
 801e9da:	4620      	mov	r0, r4
 801e9dc:	4629      	mov	r1, r5
 801e9de:	f7e1 fe1b 	bl	8000618 <__aeabi_dmul>
 801e9e2:	4602      	mov	r2, r0
 801e9e4:	460b      	mov	r3, r1
 801e9e6:	4680      	mov	r8, r0
 801e9e8:	4689      	mov	r9, r1
 801e9ea:	f7e1 fe15 	bl	8000618 <__aeabi_dmul>
 801e9ee:	a374      	add	r3, pc, #464	; (adr r3, 801ebc0 <atan+0x2b8>)
 801e9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9f4:	4606      	mov	r6, r0
 801e9f6:	460f      	mov	r7, r1
 801e9f8:	f7e1 fe0e 	bl	8000618 <__aeabi_dmul>
 801e9fc:	a372      	add	r3, pc, #456	; (adr r3, 801ebc8 <atan+0x2c0>)
 801e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea02:	f7e1 fc53 	bl	80002ac <__adddf3>
 801ea06:	4632      	mov	r2, r6
 801ea08:	463b      	mov	r3, r7
 801ea0a:	f7e1 fe05 	bl	8000618 <__aeabi_dmul>
 801ea0e:	a370      	add	r3, pc, #448	; (adr r3, 801ebd0 <atan+0x2c8>)
 801ea10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea14:	f7e1 fc4a 	bl	80002ac <__adddf3>
 801ea18:	4632      	mov	r2, r6
 801ea1a:	463b      	mov	r3, r7
 801ea1c:	f7e1 fdfc 	bl	8000618 <__aeabi_dmul>
 801ea20:	a36d      	add	r3, pc, #436	; (adr r3, 801ebd8 <atan+0x2d0>)
 801ea22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea26:	f7e1 fc41 	bl	80002ac <__adddf3>
 801ea2a:	4632      	mov	r2, r6
 801ea2c:	463b      	mov	r3, r7
 801ea2e:	f7e1 fdf3 	bl	8000618 <__aeabi_dmul>
 801ea32:	a36b      	add	r3, pc, #428	; (adr r3, 801ebe0 <atan+0x2d8>)
 801ea34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea38:	f7e1 fc38 	bl	80002ac <__adddf3>
 801ea3c:	4632      	mov	r2, r6
 801ea3e:	463b      	mov	r3, r7
 801ea40:	f7e1 fdea 	bl	8000618 <__aeabi_dmul>
 801ea44:	a368      	add	r3, pc, #416	; (adr r3, 801ebe8 <atan+0x2e0>)
 801ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4a:	f7e1 fc2f 	bl	80002ac <__adddf3>
 801ea4e:	4642      	mov	r2, r8
 801ea50:	464b      	mov	r3, r9
 801ea52:	f7e1 fde1 	bl	8000618 <__aeabi_dmul>
 801ea56:	a366      	add	r3, pc, #408	; (adr r3, 801ebf0 <atan+0x2e8>)
 801ea58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea5c:	4680      	mov	r8, r0
 801ea5e:	4689      	mov	r9, r1
 801ea60:	4630      	mov	r0, r6
 801ea62:	4639      	mov	r1, r7
 801ea64:	f7e1 fdd8 	bl	8000618 <__aeabi_dmul>
 801ea68:	a363      	add	r3, pc, #396	; (adr r3, 801ebf8 <atan+0x2f0>)
 801ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea6e:	f7e1 fc1b 	bl	80002a8 <__aeabi_dsub>
 801ea72:	4632      	mov	r2, r6
 801ea74:	463b      	mov	r3, r7
 801ea76:	f7e1 fdcf 	bl	8000618 <__aeabi_dmul>
 801ea7a:	a361      	add	r3, pc, #388	; (adr r3, 801ec00 <atan+0x2f8>)
 801ea7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea80:	f7e1 fc12 	bl	80002a8 <__aeabi_dsub>
 801ea84:	4632      	mov	r2, r6
 801ea86:	463b      	mov	r3, r7
 801ea88:	f7e1 fdc6 	bl	8000618 <__aeabi_dmul>
 801ea8c:	a35e      	add	r3, pc, #376	; (adr r3, 801ec08 <atan+0x300>)
 801ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea92:	f7e1 fc09 	bl	80002a8 <__aeabi_dsub>
 801ea96:	4632      	mov	r2, r6
 801ea98:	463b      	mov	r3, r7
 801ea9a:	f7e1 fdbd 	bl	8000618 <__aeabi_dmul>
 801ea9e:	a35c      	add	r3, pc, #368	; (adr r3, 801ec10 <atan+0x308>)
 801eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa4:	f7e1 fc00 	bl	80002a8 <__aeabi_dsub>
 801eaa8:	4632      	mov	r2, r6
 801eaaa:	463b      	mov	r3, r7
 801eaac:	f7e1 fdb4 	bl	8000618 <__aeabi_dmul>
 801eab0:	4602      	mov	r2, r0
 801eab2:	460b      	mov	r3, r1
 801eab4:	4640      	mov	r0, r8
 801eab6:	4649      	mov	r1, r9
 801eab8:	f7e1 fbf8 	bl	80002ac <__adddf3>
 801eabc:	4622      	mov	r2, r4
 801eabe:	462b      	mov	r3, r5
 801eac0:	f7e1 fdaa 	bl	8000618 <__aeabi_dmul>
 801eac4:	f1ba 3fff 	cmp.w	sl, #4294967295
 801eac8:	4602      	mov	r2, r0
 801eaca:	460b      	mov	r3, r1
 801eacc:	d14b      	bne.n	801eb66 <atan+0x25e>
 801eace:	4620      	mov	r0, r4
 801ead0:	4629      	mov	r1, r5
 801ead2:	f7e1 fbe9 	bl	80002a8 <__aeabi_dsub>
 801ead6:	e72c      	b.n	801e932 <atan+0x2a>
 801ead8:	ee10 0a10 	vmov	r0, s0
 801eadc:	4b53      	ldr	r3, [pc, #332]	; (801ec2c <atan+0x324>)
 801eade:	2200      	movs	r2, #0
 801eae0:	4629      	mov	r1, r5
 801eae2:	f7e1 fbe1 	bl	80002a8 <__aeabi_dsub>
 801eae6:	4b51      	ldr	r3, [pc, #324]	; (801ec2c <atan+0x324>)
 801eae8:	4606      	mov	r6, r0
 801eaea:	460f      	mov	r7, r1
 801eaec:	2200      	movs	r2, #0
 801eaee:	4620      	mov	r0, r4
 801eaf0:	4629      	mov	r1, r5
 801eaf2:	f7e1 fbdb 	bl	80002ac <__adddf3>
 801eaf6:	4602      	mov	r2, r0
 801eaf8:	460b      	mov	r3, r1
 801eafa:	4630      	mov	r0, r6
 801eafc:	4639      	mov	r1, r7
 801eafe:	f7e1 feb5 	bl	800086c <__aeabi_ddiv>
 801eb02:	f04f 0a01 	mov.w	sl, #1
 801eb06:	4604      	mov	r4, r0
 801eb08:	460d      	mov	r5, r1
 801eb0a:	e764      	b.n	801e9d6 <atan+0xce>
 801eb0c:	4b49      	ldr	r3, [pc, #292]	; (801ec34 <atan+0x32c>)
 801eb0e:	429e      	cmp	r6, r3
 801eb10:	da1d      	bge.n	801eb4e <atan+0x246>
 801eb12:	ee10 0a10 	vmov	r0, s0
 801eb16:	4b48      	ldr	r3, [pc, #288]	; (801ec38 <atan+0x330>)
 801eb18:	2200      	movs	r2, #0
 801eb1a:	4629      	mov	r1, r5
 801eb1c:	f7e1 fbc4 	bl	80002a8 <__aeabi_dsub>
 801eb20:	4b45      	ldr	r3, [pc, #276]	; (801ec38 <atan+0x330>)
 801eb22:	4606      	mov	r6, r0
 801eb24:	460f      	mov	r7, r1
 801eb26:	2200      	movs	r2, #0
 801eb28:	4620      	mov	r0, r4
 801eb2a:	4629      	mov	r1, r5
 801eb2c:	f7e1 fd74 	bl	8000618 <__aeabi_dmul>
 801eb30:	4b3e      	ldr	r3, [pc, #248]	; (801ec2c <atan+0x324>)
 801eb32:	2200      	movs	r2, #0
 801eb34:	f7e1 fbba 	bl	80002ac <__adddf3>
 801eb38:	4602      	mov	r2, r0
 801eb3a:	460b      	mov	r3, r1
 801eb3c:	4630      	mov	r0, r6
 801eb3e:	4639      	mov	r1, r7
 801eb40:	f7e1 fe94 	bl	800086c <__aeabi_ddiv>
 801eb44:	f04f 0a02 	mov.w	sl, #2
 801eb48:	4604      	mov	r4, r0
 801eb4a:	460d      	mov	r5, r1
 801eb4c:	e743      	b.n	801e9d6 <atan+0xce>
 801eb4e:	462b      	mov	r3, r5
 801eb50:	ee10 2a10 	vmov	r2, s0
 801eb54:	4939      	ldr	r1, [pc, #228]	; (801ec3c <atan+0x334>)
 801eb56:	2000      	movs	r0, #0
 801eb58:	f7e1 fe88 	bl	800086c <__aeabi_ddiv>
 801eb5c:	f04f 0a03 	mov.w	sl, #3
 801eb60:	4604      	mov	r4, r0
 801eb62:	460d      	mov	r5, r1
 801eb64:	e737      	b.n	801e9d6 <atan+0xce>
 801eb66:	4b36      	ldr	r3, [pc, #216]	; (801ec40 <atan+0x338>)
 801eb68:	4e36      	ldr	r6, [pc, #216]	; (801ec44 <atan+0x33c>)
 801eb6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801eb6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801eb72:	e9da 2300 	ldrd	r2, r3, [sl]
 801eb76:	f7e1 fb97 	bl	80002a8 <__aeabi_dsub>
 801eb7a:	4622      	mov	r2, r4
 801eb7c:	462b      	mov	r3, r5
 801eb7e:	f7e1 fb93 	bl	80002a8 <__aeabi_dsub>
 801eb82:	4602      	mov	r2, r0
 801eb84:	460b      	mov	r3, r1
 801eb86:	e9d6 0100 	ldrd	r0, r1, [r6]
 801eb8a:	f7e1 fb8d 	bl	80002a8 <__aeabi_dsub>
 801eb8e:	f1bb 0f00 	cmp.w	fp, #0
 801eb92:	4604      	mov	r4, r0
 801eb94:	460d      	mov	r5, r1
 801eb96:	f6bf aed6 	bge.w	801e946 <atan+0x3e>
 801eb9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801eb9e:	461d      	mov	r5, r3
 801eba0:	e6d1      	b.n	801e946 <atan+0x3e>
 801eba2:	a51d      	add	r5, pc, #116	; (adr r5, 801ec18 <atan+0x310>)
 801eba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801eba8:	e6cd      	b.n	801e946 <atan+0x3e>
 801ebaa:	bf00      	nop
 801ebac:	f3af 8000 	nop.w
 801ebb0:	54442d18 	.word	0x54442d18
 801ebb4:	bff921fb 	.word	0xbff921fb
 801ebb8:	8800759c 	.word	0x8800759c
 801ebbc:	7e37e43c 	.word	0x7e37e43c
 801ebc0:	e322da11 	.word	0xe322da11
 801ebc4:	3f90ad3a 	.word	0x3f90ad3a
 801ebc8:	24760deb 	.word	0x24760deb
 801ebcc:	3fa97b4b 	.word	0x3fa97b4b
 801ebd0:	a0d03d51 	.word	0xa0d03d51
 801ebd4:	3fb10d66 	.word	0x3fb10d66
 801ebd8:	c54c206e 	.word	0xc54c206e
 801ebdc:	3fb745cd 	.word	0x3fb745cd
 801ebe0:	920083ff 	.word	0x920083ff
 801ebe4:	3fc24924 	.word	0x3fc24924
 801ebe8:	5555550d 	.word	0x5555550d
 801ebec:	3fd55555 	.word	0x3fd55555
 801ebf0:	2c6a6c2f 	.word	0x2c6a6c2f
 801ebf4:	bfa2b444 	.word	0xbfa2b444
 801ebf8:	52defd9a 	.word	0x52defd9a
 801ebfc:	3fadde2d 	.word	0x3fadde2d
 801ec00:	af749a6d 	.word	0xaf749a6d
 801ec04:	3fb3b0f2 	.word	0x3fb3b0f2
 801ec08:	fe231671 	.word	0xfe231671
 801ec0c:	3fbc71c6 	.word	0x3fbc71c6
 801ec10:	9998ebc4 	.word	0x9998ebc4
 801ec14:	3fc99999 	.word	0x3fc99999
 801ec18:	54442d18 	.word	0x54442d18
 801ec1c:	3ff921fb 	.word	0x3ff921fb
 801ec20:	440fffff 	.word	0x440fffff
 801ec24:	7ff00000 	.word	0x7ff00000
 801ec28:	3fdbffff 	.word	0x3fdbffff
 801ec2c:	3ff00000 	.word	0x3ff00000
 801ec30:	3ff2ffff 	.word	0x3ff2ffff
 801ec34:	40038000 	.word	0x40038000
 801ec38:	3ff80000 	.word	0x3ff80000
 801ec3c:	bff00000 	.word	0xbff00000
 801ec40:	080227b0 	.word	0x080227b0
 801ec44:	08022790 	.word	0x08022790

0801ec48 <fabs>:
 801ec48:	ec51 0b10 	vmov	r0, r1, d0
 801ec4c:	ee10 2a10 	vmov	r2, s0
 801ec50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ec54:	ec43 2b10 	vmov	d0, r2, r3
 801ec58:	4770      	bx	lr

0801ec5a <finite>:
 801ec5a:	b082      	sub	sp, #8
 801ec5c:	ed8d 0b00 	vstr	d0, [sp]
 801ec60:	9801      	ldr	r0, [sp, #4]
 801ec62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ec66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ec6a:	0fc0      	lsrs	r0, r0, #31
 801ec6c:	b002      	add	sp, #8
 801ec6e:	4770      	bx	lr

0801ec70 <floor>:
 801ec70:	ec51 0b10 	vmov	r0, r1, d0
 801ec74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ec7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ec80:	2e13      	cmp	r6, #19
 801ec82:	ee10 5a10 	vmov	r5, s0
 801ec86:	ee10 8a10 	vmov	r8, s0
 801ec8a:	460c      	mov	r4, r1
 801ec8c:	dc32      	bgt.n	801ecf4 <floor+0x84>
 801ec8e:	2e00      	cmp	r6, #0
 801ec90:	da14      	bge.n	801ecbc <floor+0x4c>
 801ec92:	a333      	add	r3, pc, #204	; (adr r3, 801ed60 <floor+0xf0>)
 801ec94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec98:	f7e1 fb08 	bl	80002ac <__adddf3>
 801ec9c:	2200      	movs	r2, #0
 801ec9e:	2300      	movs	r3, #0
 801eca0:	f7e1 ff4a 	bl	8000b38 <__aeabi_dcmpgt>
 801eca4:	b138      	cbz	r0, 801ecb6 <floor+0x46>
 801eca6:	2c00      	cmp	r4, #0
 801eca8:	da57      	bge.n	801ed5a <floor+0xea>
 801ecaa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ecae:	431d      	orrs	r5, r3
 801ecb0:	d001      	beq.n	801ecb6 <floor+0x46>
 801ecb2:	4c2d      	ldr	r4, [pc, #180]	; (801ed68 <floor+0xf8>)
 801ecb4:	2500      	movs	r5, #0
 801ecb6:	4621      	mov	r1, r4
 801ecb8:	4628      	mov	r0, r5
 801ecba:	e025      	b.n	801ed08 <floor+0x98>
 801ecbc:	4f2b      	ldr	r7, [pc, #172]	; (801ed6c <floor+0xfc>)
 801ecbe:	4137      	asrs	r7, r6
 801ecc0:	ea01 0307 	and.w	r3, r1, r7
 801ecc4:	4303      	orrs	r3, r0
 801ecc6:	d01f      	beq.n	801ed08 <floor+0x98>
 801ecc8:	a325      	add	r3, pc, #148	; (adr r3, 801ed60 <floor+0xf0>)
 801ecca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ecce:	f7e1 faed 	bl	80002ac <__adddf3>
 801ecd2:	2200      	movs	r2, #0
 801ecd4:	2300      	movs	r3, #0
 801ecd6:	f7e1 ff2f 	bl	8000b38 <__aeabi_dcmpgt>
 801ecda:	2800      	cmp	r0, #0
 801ecdc:	d0eb      	beq.n	801ecb6 <floor+0x46>
 801ecde:	2c00      	cmp	r4, #0
 801ece0:	bfbe      	ittt	lt
 801ece2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ece6:	fa43 f606 	asrlt.w	r6, r3, r6
 801ecea:	19a4      	addlt	r4, r4, r6
 801ecec:	ea24 0407 	bic.w	r4, r4, r7
 801ecf0:	2500      	movs	r5, #0
 801ecf2:	e7e0      	b.n	801ecb6 <floor+0x46>
 801ecf4:	2e33      	cmp	r6, #51	; 0x33
 801ecf6:	dd0b      	ble.n	801ed10 <floor+0xa0>
 801ecf8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ecfc:	d104      	bne.n	801ed08 <floor+0x98>
 801ecfe:	ee10 2a10 	vmov	r2, s0
 801ed02:	460b      	mov	r3, r1
 801ed04:	f7e1 fad2 	bl	80002ac <__adddf3>
 801ed08:	ec41 0b10 	vmov	d0, r0, r1
 801ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ed14:	f04f 33ff 	mov.w	r3, #4294967295
 801ed18:	fa23 f707 	lsr.w	r7, r3, r7
 801ed1c:	4207      	tst	r7, r0
 801ed1e:	d0f3      	beq.n	801ed08 <floor+0x98>
 801ed20:	a30f      	add	r3, pc, #60	; (adr r3, 801ed60 <floor+0xf0>)
 801ed22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed26:	f7e1 fac1 	bl	80002ac <__adddf3>
 801ed2a:	2200      	movs	r2, #0
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	f7e1 ff03 	bl	8000b38 <__aeabi_dcmpgt>
 801ed32:	2800      	cmp	r0, #0
 801ed34:	d0bf      	beq.n	801ecb6 <floor+0x46>
 801ed36:	2c00      	cmp	r4, #0
 801ed38:	da02      	bge.n	801ed40 <floor+0xd0>
 801ed3a:	2e14      	cmp	r6, #20
 801ed3c:	d103      	bne.n	801ed46 <floor+0xd6>
 801ed3e:	3401      	adds	r4, #1
 801ed40:	ea25 0507 	bic.w	r5, r5, r7
 801ed44:	e7b7      	b.n	801ecb6 <floor+0x46>
 801ed46:	2301      	movs	r3, #1
 801ed48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ed4c:	fa03 f606 	lsl.w	r6, r3, r6
 801ed50:	4435      	add	r5, r6
 801ed52:	4545      	cmp	r5, r8
 801ed54:	bf38      	it	cc
 801ed56:	18e4      	addcc	r4, r4, r3
 801ed58:	e7f2      	b.n	801ed40 <floor+0xd0>
 801ed5a:	2500      	movs	r5, #0
 801ed5c:	462c      	mov	r4, r5
 801ed5e:	e7aa      	b.n	801ecb6 <floor+0x46>
 801ed60:	8800759c 	.word	0x8800759c
 801ed64:	7e37e43c 	.word	0x7e37e43c
 801ed68:	bff00000 	.word	0xbff00000
 801ed6c:	000fffff 	.word	0x000fffff

0801ed70 <rint>:
 801ed70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ed72:	ec51 0b10 	vmov	r0, r1, d0
 801ed76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ed7a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ed7e:	2e13      	cmp	r6, #19
 801ed80:	ee10 4a10 	vmov	r4, s0
 801ed84:	460b      	mov	r3, r1
 801ed86:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801ed8a:	dc58      	bgt.n	801ee3e <rint+0xce>
 801ed8c:	2e00      	cmp	r6, #0
 801ed8e:	da2b      	bge.n	801ede8 <rint+0x78>
 801ed90:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ed94:	4302      	orrs	r2, r0
 801ed96:	d023      	beq.n	801ede0 <rint+0x70>
 801ed98:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801ed9c:	4302      	orrs	r2, r0
 801ed9e:	4254      	negs	r4, r2
 801eda0:	4314      	orrs	r4, r2
 801eda2:	0c4b      	lsrs	r3, r1, #17
 801eda4:	0b24      	lsrs	r4, r4, #12
 801eda6:	045b      	lsls	r3, r3, #17
 801eda8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801edac:	ea44 0103 	orr.w	r1, r4, r3
 801edb0:	4b32      	ldr	r3, [pc, #200]	; (801ee7c <rint+0x10c>)
 801edb2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801edb6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801edba:	4602      	mov	r2, r0
 801edbc:	460b      	mov	r3, r1
 801edbe:	4630      	mov	r0, r6
 801edc0:	4639      	mov	r1, r7
 801edc2:	f7e1 fa73 	bl	80002ac <__adddf3>
 801edc6:	e9cd 0100 	strd	r0, r1, [sp]
 801edca:	463b      	mov	r3, r7
 801edcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801edd0:	4632      	mov	r2, r6
 801edd2:	f7e1 fa69 	bl	80002a8 <__aeabi_dsub>
 801edd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801edda:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801edde:	4639      	mov	r1, r7
 801ede0:	ec41 0b10 	vmov	d0, r0, r1
 801ede4:	b003      	add	sp, #12
 801ede6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ede8:	4a25      	ldr	r2, [pc, #148]	; (801ee80 <rint+0x110>)
 801edea:	4132      	asrs	r2, r6
 801edec:	ea01 0702 	and.w	r7, r1, r2
 801edf0:	4307      	orrs	r7, r0
 801edf2:	d0f5      	beq.n	801ede0 <rint+0x70>
 801edf4:	0851      	lsrs	r1, r2, #1
 801edf6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801edfa:	4314      	orrs	r4, r2
 801edfc:	d00c      	beq.n	801ee18 <rint+0xa8>
 801edfe:	ea23 0201 	bic.w	r2, r3, r1
 801ee02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ee06:	2e13      	cmp	r6, #19
 801ee08:	fa43 f606 	asr.w	r6, r3, r6
 801ee0c:	bf0c      	ite	eq
 801ee0e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801ee12:	2400      	movne	r4, #0
 801ee14:	ea42 0306 	orr.w	r3, r2, r6
 801ee18:	4918      	ldr	r1, [pc, #96]	; (801ee7c <rint+0x10c>)
 801ee1a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801ee1e:	4622      	mov	r2, r4
 801ee20:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ee24:	4620      	mov	r0, r4
 801ee26:	4629      	mov	r1, r5
 801ee28:	f7e1 fa40 	bl	80002ac <__adddf3>
 801ee2c:	e9cd 0100 	strd	r0, r1, [sp]
 801ee30:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ee34:	4622      	mov	r2, r4
 801ee36:	462b      	mov	r3, r5
 801ee38:	f7e1 fa36 	bl	80002a8 <__aeabi_dsub>
 801ee3c:	e7d0      	b.n	801ede0 <rint+0x70>
 801ee3e:	2e33      	cmp	r6, #51	; 0x33
 801ee40:	dd07      	ble.n	801ee52 <rint+0xe2>
 801ee42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ee46:	d1cb      	bne.n	801ede0 <rint+0x70>
 801ee48:	ee10 2a10 	vmov	r2, s0
 801ee4c:	f7e1 fa2e 	bl	80002ac <__adddf3>
 801ee50:	e7c6      	b.n	801ede0 <rint+0x70>
 801ee52:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ee56:	f04f 36ff 	mov.w	r6, #4294967295
 801ee5a:	40d6      	lsrs	r6, r2
 801ee5c:	4230      	tst	r0, r6
 801ee5e:	d0bf      	beq.n	801ede0 <rint+0x70>
 801ee60:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801ee64:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801ee68:	bf1f      	itttt	ne
 801ee6a:	ea24 0101 	bicne.w	r1, r4, r1
 801ee6e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801ee72:	fa44 f202 	asrne.w	r2, r4, r2
 801ee76:	ea41 0402 	orrne.w	r4, r1, r2
 801ee7a:	e7cd      	b.n	801ee18 <rint+0xa8>
 801ee7c:	080227d0 	.word	0x080227d0
 801ee80:	000fffff 	.word	0x000fffff
 801ee84:	00000000 	.word	0x00000000

0801ee88 <scalbn>:
 801ee88:	b570      	push	{r4, r5, r6, lr}
 801ee8a:	ec55 4b10 	vmov	r4, r5, d0
 801ee8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ee92:	4606      	mov	r6, r0
 801ee94:	462b      	mov	r3, r5
 801ee96:	b99a      	cbnz	r2, 801eec0 <scalbn+0x38>
 801ee98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ee9c:	4323      	orrs	r3, r4
 801ee9e:	d036      	beq.n	801ef0e <scalbn+0x86>
 801eea0:	4b39      	ldr	r3, [pc, #228]	; (801ef88 <scalbn+0x100>)
 801eea2:	4629      	mov	r1, r5
 801eea4:	ee10 0a10 	vmov	r0, s0
 801eea8:	2200      	movs	r2, #0
 801eeaa:	f7e1 fbb5 	bl	8000618 <__aeabi_dmul>
 801eeae:	4b37      	ldr	r3, [pc, #220]	; (801ef8c <scalbn+0x104>)
 801eeb0:	429e      	cmp	r6, r3
 801eeb2:	4604      	mov	r4, r0
 801eeb4:	460d      	mov	r5, r1
 801eeb6:	da10      	bge.n	801eeda <scalbn+0x52>
 801eeb8:	a32b      	add	r3, pc, #172	; (adr r3, 801ef68 <scalbn+0xe0>)
 801eeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eebe:	e03a      	b.n	801ef36 <scalbn+0xae>
 801eec0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801eec4:	428a      	cmp	r2, r1
 801eec6:	d10c      	bne.n	801eee2 <scalbn+0x5a>
 801eec8:	ee10 2a10 	vmov	r2, s0
 801eecc:	4620      	mov	r0, r4
 801eece:	4629      	mov	r1, r5
 801eed0:	f7e1 f9ec 	bl	80002ac <__adddf3>
 801eed4:	4604      	mov	r4, r0
 801eed6:	460d      	mov	r5, r1
 801eed8:	e019      	b.n	801ef0e <scalbn+0x86>
 801eeda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eede:	460b      	mov	r3, r1
 801eee0:	3a36      	subs	r2, #54	; 0x36
 801eee2:	4432      	add	r2, r6
 801eee4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801eee8:	428a      	cmp	r2, r1
 801eeea:	dd08      	ble.n	801eefe <scalbn+0x76>
 801eeec:	2d00      	cmp	r5, #0
 801eeee:	a120      	add	r1, pc, #128	; (adr r1, 801ef70 <scalbn+0xe8>)
 801eef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eef4:	da1c      	bge.n	801ef30 <scalbn+0xa8>
 801eef6:	a120      	add	r1, pc, #128	; (adr r1, 801ef78 <scalbn+0xf0>)
 801eef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eefc:	e018      	b.n	801ef30 <scalbn+0xa8>
 801eefe:	2a00      	cmp	r2, #0
 801ef00:	dd08      	ble.n	801ef14 <scalbn+0x8c>
 801ef02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ef06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ef0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ef0e:	ec45 4b10 	vmov	d0, r4, r5
 801ef12:	bd70      	pop	{r4, r5, r6, pc}
 801ef14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ef18:	da19      	bge.n	801ef4e <scalbn+0xc6>
 801ef1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ef1e:	429e      	cmp	r6, r3
 801ef20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ef24:	dd0a      	ble.n	801ef3c <scalbn+0xb4>
 801ef26:	a112      	add	r1, pc, #72	; (adr r1, 801ef70 <scalbn+0xe8>)
 801ef28:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d1e2      	bne.n	801eef6 <scalbn+0x6e>
 801ef30:	a30f      	add	r3, pc, #60	; (adr r3, 801ef70 <scalbn+0xe8>)
 801ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef36:	f7e1 fb6f 	bl	8000618 <__aeabi_dmul>
 801ef3a:	e7cb      	b.n	801eed4 <scalbn+0x4c>
 801ef3c:	a10a      	add	r1, pc, #40	; (adr r1, 801ef68 <scalbn+0xe0>)
 801ef3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ef42:	2b00      	cmp	r3, #0
 801ef44:	d0b8      	beq.n	801eeb8 <scalbn+0x30>
 801ef46:	a10e      	add	r1, pc, #56	; (adr r1, 801ef80 <scalbn+0xf8>)
 801ef48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ef4c:	e7b4      	b.n	801eeb8 <scalbn+0x30>
 801ef4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ef52:	3236      	adds	r2, #54	; 0x36
 801ef54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ef58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ef5c:	4620      	mov	r0, r4
 801ef5e:	4b0c      	ldr	r3, [pc, #48]	; (801ef90 <scalbn+0x108>)
 801ef60:	2200      	movs	r2, #0
 801ef62:	e7e8      	b.n	801ef36 <scalbn+0xae>
 801ef64:	f3af 8000 	nop.w
 801ef68:	c2f8f359 	.word	0xc2f8f359
 801ef6c:	01a56e1f 	.word	0x01a56e1f
 801ef70:	8800759c 	.word	0x8800759c
 801ef74:	7e37e43c 	.word	0x7e37e43c
 801ef78:	8800759c 	.word	0x8800759c
 801ef7c:	fe37e43c 	.word	0xfe37e43c
 801ef80:	c2f8f359 	.word	0xc2f8f359
 801ef84:	81a56e1f 	.word	0x81a56e1f
 801ef88:	43500000 	.word	0x43500000
 801ef8c:	ffff3cb0 	.word	0xffff3cb0
 801ef90:	3c900000 	.word	0x3c900000

0801ef94 <floorf>:
 801ef94:	ee10 3a10 	vmov	r3, s0
 801ef98:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ef9c:	3a7f      	subs	r2, #127	; 0x7f
 801ef9e:	2a16      	cmp	r2, #22
 801efa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801efa4:	dc2a      	bgt.n	801effc <floorf+0x68>
 801efa6:	2a00      	cmp	r2, #0
 801efa8:	da11      	bge.n	801efce <floorf+0x3a>
 801efaa:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f00c <floorf+0x78>
 801efae:	ee30 0a27 	vadd.f32	s0, s0, s15
 801efb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efba:	dd05      	ble.n	801efc8 <floorf+0x34>
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	da23      	bge.n	801f008 <floorf+0x74>
 801efc0:	4a13      	ldr	r2, [pc, #76]	; (801f010 <floorf+0x7c>)
 801efc2:	2900      	cmp	r1, #0
 801efc4:	bf18      	it	ne
 801efc6:	4613      	movne	r3, r2
 801efc8:	ee00 3a10 	vmov	s0, r3
 801efcc:	4770      	bx	lr
 801efce:	4911      	ldr	r1, [pc, #68]	; (801f014 <floorf+0x80>)
 801efd0:	4111      	asrs	r1, r2
 801efd2:	420b      	tst	r3, r1
 801efd4:	d0fa      	beq.n	801efcc <floorf+0x38>
 801efd6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f00c <floorf+0x78>
 801efda:	ee30 0a27 	vadd.f32	s0, s0, s15
 801efde:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801efe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efe6:	ddef      	ble.n	801efc8 <floorf+0x34>
 801efe8:	2b00      	cmp	r3, #0
 801efea:	bfbe      	ittt	lt
 801efec:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801eff0:	fa40 f202 	asrlt.w	r2, r0, r2
 801eff4:	189b      	addlt	r3, r3, r2
 801eff6:	ea23 0301 	bic.w	r3, r3, r1
 801effa:	e7e5      	b.n	801efc8 <floorf+0x34>
 801effc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f000:	d3e4      	bcc.n	801efcc <floorf+0x38>
 801f002:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f006:	4770      	bx	lr
 801f008:	2300      	movs	r3, #0
 801f00a:	e7dd      	b.n	801efc8 <floorf+0x34>
 801f00c:	7149f2ca 	.word	0x7149f2ca
 801f010:	bf800000 	.word	0xbf800000
 801f014:	007fffff 	.word	0x007fffff

0801f018 <scalbnf>:
 801f018:	ee10 3a10 	vmov	r3, s0
 801f01c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f020:	d025      	beq.n	801f06e <scalbnf+0x56>
 801f022:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801f026:	d302      	bcc.n	801f02e <scalbnf+0x16>
 801f028:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f02c:	4770      	bx	lr
 801f02e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801f032:	d122      	bne.n	801f07a <scalbnf+0x62>
 801f034:	4b2a      	ldr	r3, [pc, #168]	; (801f0e0 <scalbnf+0xc8>)
 801f036:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801f0e4 <scalbnf+0xcc>
 801f03a:	4298      	cmp	r0, r3
 801f03c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f040:	db16      	blt.n	801f070 <scalbnf+0x58>
 801f042:	ee10 3a10 	vmov	r3, s0
 801f046:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f04a:	3a19      	subs	r2, #25
 801f04c:	4402      	add	r2, r0
 801f04e:	2afe      	cmp	r2, #254	; 0xfe
 801f050:	dd15      	ble.n	801f07e <scalbnf+0x66>
 801f052:	ee10 3a10 	vmov	r3, s0
 801f056:	eddf 7a24 	vldr	s15, [pc, #144]	; 801f0e8 <scalbnf+0xd0>
 801f05a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801f0ec <scalbnf+0xd4>
 801f05e:	2b00      	cmp	r3, #0
 801f060:	eeb0 7a67 	vmov.f32	s14, s15
 801f064:	bfb8      	it	lt
 801f066:	eef0 7a66 	vmovlt.f32	s15, s13
 801f06a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801f06e:	4770      	bx	lr
 801f070:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801f0f0 <scalbnf+0xd8>
 801f074:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f078:	4770      	bx	lr
 801f07a:	0dd2      	lsrs	r2, r2, #23
 801f07c:	e7e6      	b.n	801f04c <scalbnf+0x34>
 801f07e:	2a00      	cmp	r2, #0
 801f080:	dd06      	ble.n	801f090 <scalbnf+0x78>
 801f082:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f086:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f08a:	ee00 3a10 	vmov	s0, r3
 801f08e:	4770      	bx	lr
 801f090:	f112 0f16 	cmn.w	r2, #22
 801f094:	da1a      	bge.n	801f0cc <scalbnf+0xb4>
 801f096:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f09a:	4298      	cmp	r0, r3
 801f09c:	ee10 3a10 	vmov	r3, s0
 801f0a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f0a4:	dd0a      	ble.n	801f0bc <scalbnf+0xa4>
 801f0a6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801f0e8 <scalbnf+0xd0>
 801f0aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801f0ec <scalbnf+0xd4>
 801f0ae:	eef0 7a40 	vmov.f32	s15, s0
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	bf18      	it	ne
 801f0b6:	eeb0 0a47 	vmovne.f32	s0, s14
 801f0ba:	e7db      	b.n	801f074 <scalbnf+0x5c>
 801f0bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801f0f0 <scalbnf+0xd8>
 801f0c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801f0f4 <scalbnf+0xdc>
 801f0c4:	eef0 7a40 	vmov.f32	s15, s0
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	e7f3      	b.n	801f0b4 <scalbnf+0x9c>
 801f0cc:	3219      	adds	r2, #25
 801f0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f0d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f0d6:	eddf 7a08 	vldr	s15, [pc, #32]	; 801f0f8 <scalbnf+0xe0>
 801f0da:	ee07 3a10 	vmov	s14, r3
 801f0de:	e7c4      	b.n	801f06a <scalbnf+0x52>
 801f0e0:	ffff3cb0 	.word	0xffff3cb0
 801f0e4:	4c000000 	.word	0x4c000000
 801f0e8:	7149f2ca 	.word	0x7149f2ca
 801f0ec:	f149f2ca 	.word	0xf149f2ca
 801f0f0:	0da24260 	.word	0x0da24260
 801f0f4:	8da24260 	.word	0x8da24260
 801f0f8:	33000000 	.word	0x33000000

0801f0fc <_init>:
 801f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f0fe:	bf00      	nop
 801f100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f102:	bc08      	pop	{r3}
 801f104:	469e      	mov	lr, r3
 801f106:	4770      	bx	lr

0801f108 <_fini>:
 801f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f10a:	bf00      	nop
 801f10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f10e:	bc08      	pop	{r3}
 801f110:	469e      	mov	lr, r3
 801f112:	4770      	bx	lr
